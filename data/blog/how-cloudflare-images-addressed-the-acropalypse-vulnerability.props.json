{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Nicholas Skehin",
				"slug": "nicholas-skehin",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/52VF9TAx9c93WEGkL17pIV/3e1b7eee62ea454078d7609aee53344f/nicholas-skehin.png",
				"location": null,
				"website": null,
				"twitter": "@skehin",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Customers using Cloudflare Images or Image Resizing products are protected against the aCropalypse vulnerability. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/PT9kiQ85ukk3CqG1IISJO/fcceb14c03e099963ba06c894cd9fb3a/how-cloudflare-images-addressed-the-acropalypse-vulnerability.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1gy9RTZJNpF7lgD4XZ5oKj/aac746636636b6895f3cbeff76f18a05/image1-2.png\" alt=\"How Cloudflare Images addressed the aCropalypse vulnerability\" class=\"kg-image\" width=\"1999\" height=\"1125\" loading=\"lazy\"/>\n            \n            </figure><p>Acropalypse (<a href=\"https://www.cve.org/CVERecord?id=CVE-2023-21036\">CVE-2023-21036</a>) is a vulnerability caused by image editing tools failing to truncate images when editing has made them smaller, most often seen when images are cropped. This leaves remnants of the cropped contents written in the file after the image has finished. The remnants (written in a ‘trailer’ after the end-of-image marker) are ignored by most software when reading the image, but can be used to partially reconstruct the original image by an attacker.</p><p>The general class of vulnerability can, in theory, affect any image format if it ignores data written after the end of the image. In this case the applications affected were the ‘Markup’ screenshot editor that shipped with Google Pixel phones from the Pixel 3 (saving its images in the PNG format) and the Windows Snipping tool (with both PNG and JPEG formats).</p><p>Our customers deliver their images using Cloudflare Images products and may have images that are affected. We would like to ensure their images are protected from this vulnerability if they have been edited using a vulnerable editor.</p><p>As a concrete example, imagine a Cloudflare customer running a social network, delivering images using Cloudflare Images. A user of the social network might take a screenshot of an invoice containing their address after ordering a product, crop their address out and share the cropped image on the social network. If the image was cropped using an editor affected by aCropalypse an attacker would be able to recover their address, violating their expectation of privacy.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-cloudflare-images-products-works\">How Cloudflare Images products works</h3>\n      <a href=\"#how-cloudflare-images-products-works\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><a href=\"https://developers.cloudflare.com/images/cloudflare-images/\">Cloudflare Images</a> and <a href=\"https://developers.cloudflare.com/images/image-resizing/\">Image Resizing</a> use a proxy as the upstream for requests. This proxy fetches the original image (from either Cloudflare Images storage or the customer’s upstream), applies any transformations (from the <a href=\"https://developers.cloudflare.com/images/cloudflare-images/transform/resize-images/\">variant definition</a> for Cloudflare Images, or from the <a href=\"https://developers.cloudflare.com/images/image-resizing/url-format/\">URL/worker</a> parameters for Image Resizing) and then responds with the transformed image.</p><p>This naturally provides protection against aCropalypse for our customers: the proxy will ignore any trailing data in the input, so it won’t be present in the re-encoded image.</p><p>However, for certain requests, the proxy might respond with the original. This occurs when two conditions hold: the original can satisfy the request and the re-encoded image has a larger file size. The original satisfies the request if we can guarantee that if the requested format is supported the original format will be supported, it has the same dimensions, it doesn’t have any metadata that needs stripping and it doesn’t have any other transformations such as sharpening or overlays.</p><p>Even if the original can satisfy the request, it is fairly unlikely the original will be smaller for images affected by aCropalypse as the leaked information in the trailer will increase the file size. So Cloudflare Images and Image Resizing should provide protection against aCropalypse without adding any additional mitigations.</p><p>That being said, we couldn’t guarantee that images affected by aCropalypse would always be re-encoded. We wanted to be able to offer this guarantee for customers of Cloudflare Images and Image Resizing.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-we-addressed-the-issue-for-jpeg-and-png-file-format\">How we addressed the issue for JPEG and PNG file format</h3>\n      <a href=\"#how-we-addressed-the-issue-for-jpeg-and-png-file-format\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To ensure that no images with a trailer will ever be passed through, we can add another requirement to reply with the original image — if the original image is a PNG or a JPEG (so might have been affected by aCropalypse), it must not have a trailer. Then we just need to be able to detect trailers for both formats.</p><p>As a first idea we might consider simply checking that the image ends with the correct end-of-image marker, which for JPEG is the byte sequence [0xFF 0xD9] and for PNG is the byte sequence [0x00 0x00 0x00 0x00 0x49 0x45 0x4E 0x44 0xAE 0x42 0x60 0x82]. But this won’t work for images affected by aCropalypse: because the original image was a valid image, the trailer that results from overwriting the start of the file will be the end of a valid image. We also can’t check whether there is more than one end-of-image marker in the file; both formats have chunks of variable-length bytestrings in which the end-of-image marker could appear. We need to do it properly by parsing the image’s structure and checking there is no data after its end.</p><p>For JPEGs, we use a Rust wrapper of the library libjpeg-turbo for decoding. Libjpeg-turbo allows fine control of resource usage; for example it allows decompressing and re-compressing a JPEG file a scanline at a time. This flexibility allows us to easily detect trailers using the library’s API: we just have to check that once we have consumed the end-of-image marker all of the input has been consumed. In our proxy we use an in-memory buffer as input, so we can check that there are no bytes left in the buffer:</p>\n            <pre class=\"language-rust\"><code class=\"language-rust\">pub fn consume_eoi_marker(&amp;mut self) -&gt; bool {\n    // Try to consume the EOI marker of the image\n    unsafe {\n        (ffi::jpeg_input_complete(&amp;self.dec.cinfo) == 1) || {\n            ffi::jpeg_consume_input(&amp;mut self.dec.cinfo);\n            ffi::jpeg_input_complete(&amp;self.dec.cinfo) == 1\n        }\n    }\n}\n\npub fn has_trailer(&amp;mut self) -&gt; io::Result&lt;bool&gt; {\n    if self.consume_eoi_marker() {\n        let src = unsafe {\n            NonNull::new(self.dec.cinfo.src)\n                .ok_or_else(|| {\n                    io::Error::new(\n                        io::ErrorKind::Other,\n                        &quot;source manager not set&quot;.to_string()\n                    )\n                })?\n                .as_ref()\n        };\n\n        // We have a trailer if we have any bytes left over in the buffer\n        Ok(src.bytes_in_buffer != 0)\n    } else {\n        // We didn&#039;t consume the EOI - we can&#039;t say if there is a trailer\n        Err(io::Error::new(\n            io::ErrorKind::Other,\n            &quot;EOI not reached&quot;.to_string(),\n        ))\n    }\n}</pre></code>\n            <p>For PNGs, we use the lodepng library. This has a much simpler API surface that decodes an image in one shot when you call <code>lodepng_decode</code>. This doesn’t tell us how many bytes were read or provide an interface to detect if we have a trailer.</p><p>Luckily the PNG format has a <a href=\"https://www.w3.org/TR/2003/REC-PNG-20031110/#5DataRep\">very consistent and simple internal structure</a>:</p><ul><li><p>First the PNG prelude, the byte sequence [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]</p></li><li><p>Then a series of chunks, which each consist of</p></li></ul><ol><li><p>4 bytes length as a big-endian integer N</p></li><li><p>4 bytes chunk type</p></li><li><p>N bytes of data (whose meaning depends on the chunk type)</p></li><li><p>4 bytes of checksum — CRC-32 of the type and data</p></li></ol><p>The file is terminated by a chunk of type IEND with no data.</p><p>As the format is so regular, it’s easy to write a separate parser that just reads the prelude, loops through the chunks until we see IEND, and then checks if we have any bytes left. We can perform this check after decoding the image with lodepng, as this allows us to skip validating the checksums as lodepng has already checked them for us:</p>\n            <pre class=\"language-rust\"><code class=\"language-rust\">const PNG_PRELUDE: &amp;[u8] = &amp;[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];\n\nenum ChunkStatus {\n    SeenEnd { has_trailer: bool },\n    MoreChunks,\n}\n\nfn consume_chunks_until_iend(buf: &amp;[u8]) -&gt; Result&lt;(ChunkStatus, &amp;[u8]), &amp;&#039;static str&gt; {\n    let (length_bytes, buf) = consume(buf, 4)?;\n    let (chunk_type, buf) = consume(buf, 4)?;\n\n    // Infallible: We&#039;ve definitely consumed 4 bytes\n    let length = u32::from_be_bytes(length_bytes.try_into().unwrap());\n\n    let (_data, buf) = consume(buf, length as usize)?;\n\n    let (_checksum, buf) = consume(buf, 4)?;\n\n    if chunk_type == b&quot;IEND&quot; &amp;&amp; buf.is_empty() {\n        Ok((ChunkStatus::SeenEnd { has_trailer: false }, buf))\n    } else if chunk_type == b&quot;IEND&quot; &amp;&amp; !buf.is_empty() {\n        Ok((ChunkStatus::SeenEnd { has_trailer: true }, buf))\n    } else {\n        Ok((ChunkStatus::MoreChunks, buf))\n    }\n}\n\npub(crate) fn has_trailer(png_data: &amp;[u8]) -&gt; Result&lt;bool, &amp;&#039;static str&gt; {\n    let (magic, mut buf) = consume(png_data, PNG_PRELUDE.len())?;\n\n    if magic != PNG_PRELUDE {\n        return Err(&quot;expected prelude&quot;);\n    }\n\n    loop {\n        let (status, tmp_buf) = consume_chunks_until_iend(buf)?;\n        buf = tmp_buf;\n        if let ChunkStatus::SeenEnd { has_trailer } = status {\n            return Ok(has_trailer)\n        }\n    }\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"conclusion\">Conclusion</h3>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Customers using Cloudflare Images or Image Resizing products are protected against the aCropalypse vulnerability. The Images team addressed the vulnerability in a way that didn’t require any changes to the original images or cause any increased latency or regressions for customers.</p>",
		"id": "1ToJNuP6B50CzxWo0Bqb9M",
		"localeList": {
			"name": "How Cloudflare Images addressed the aCropalypse vulnerability Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Customers using Cloudflare Images or Image Resizing products are protected against the aCropalypse vulnerability. ",
		"metadata": {
			"title": "How Cloudflare Images addressed the aCropalypse vulnerability",
			"description": "Customers using Cloudflare Images or Image Resizing products are protected against the aCropalypse vulnerability. ",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/66tXouQqK8Btuvtw9d1gJ5/970c0f40ec981bdb6af9b3dde705f411/how-cloudflare-images-addressed-the-acropalypse-vulnerability-aXh4uV.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2023-07-10T14:00:14.000+01:00",
		"slug": "how-cloudflare-images-addressed-the-acropalypse-vulnerability",
		"tags": [
			{
				"id": "5rBdsRv4kKPXGL1ECAZu9a",
				"name": "Cloudflare Images",
				"slug": "cloudflare-images"
			},
			{
				"id": "2pFyOCtANFB5qS6nbtQbVp",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities"
			}
		],
		"title": "How Cloudflare Images addressed the aCropalypse vulnerability",
		"updated_at": "2024-10-09T23:24:55.729Z",
		"url": "https://blog.cloudflare.com/how-cloudflare-images-addressed-the-acropalypse-vulnerability"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}