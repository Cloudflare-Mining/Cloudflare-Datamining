{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "3",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Erwin van der Koogh",
				"slug": "erwin",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/fayl90WdBlMlt0PuzhExJ/a4c6d19ae93df8a68e04a84cdc76c7e5/erwin.jpeg",
				"location": "Melbourne",
				"website": null,
				"twitter": "@evanderkoogh",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "George MacKerron (Guest Author)",
				"slug": "george-mackerron",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2f54Az7c67aMx717bUgFNY/9ca8c2530e47c650391fde546e966a5d/george-mackerron.jpeg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Neon.tech is a database platform that allows you to branch your (Postgres compatible) database exactly like your code repository. And with the release of their Cloudflare Workers integration you can get started in minutes",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5yDGZtvALjrLX2rm8kPRD5/b34019b4a856ebd526957fe7ce3a085a/neon-postgres-database-from-workers.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5xCkAJAUyFmN2b0MizGCP0/e191956551ac3604f322f51bee54dc02/image1-28.png\" alt=\"Seamless Postgres integration on Cloudflare Workers with Neon.tech\" class=\"kg-image\" width=\"1999\" height=\"1125\" loading=\"lazy\"/>\n            \n            </figure><p>It’s no wonder that Postgres is one of the world’s favorite databases. It’s easy to learn, a pleasure to use, and can scale all the way up from your first database in an early-stage startup to the system of record for giant organizations. Postgres has been an integral part of Cloudflare’s journey, so we know this fact well. But when it comes to connecting to Postgres from environments like Cloudflare Workers, there are unfortunately a bunch of challenges, as we mentioned in our <a href=\"/relational-database-connectors/\">Relational Database Connector post</a>.</p><p>Neon.tech not only solves these problems; it also has other cool features such as <a href=\"https://neon.tech/docs/conceptual-guides/branching/\">branching databases</a> — being able to branch your database in exactly the same way you branch your code: instant, cheap and completely isolated.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"how-to-use-it\">How to use it</h3>\n            <a href=\"#how-to-use-it\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>It’s easy to get started. Neon’s client library <code>@neondatabase/serverless</code> is a drop-in replacement for <a href=\"https://node-postgres.com/\">node-postgres</a>, the npm <code>pg</code> package with which you may already be familiar. After going through the <a href=\"https://neon.tech/docs/get-started-with-neon/signing-up/\">getting started</a> process to set up your Neon database, you can easily create a Worker to ask Postgres for the current time like so:</p><ol><li><p><b>Create a new Worker</b> — Run <code>npx wrangler init neon-cf-demo</code> and accept all the defaults. Enter the new folder with <code>cd neon-cf-demo</code>.</p></li><li><p><b>Install the Neon package</b> — Run <code>npm install @neondatabase/serverless</code>.</p></li><li><p><b>Provide connection details</b> — For deployment, run <code>npx wrangler secret put DATABASE_URL</code> and paste in your connection string when prompted (you’ll find this in your Neon dashboard: something like <code>postgres://user:password@project-name-1234.cloud.neon.tech/main</code>). For development, create a new file <code>.dev.vars</code> with the contents <code>DATABASE_URL=</code> plus the same connection string.</p></li><li><p><b>Write the code</b> — Lastly, replace <code>src/index.ts</code> with the following code:</p></li></ol>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">import { Client } from &#039;@neondatabase/serverless&#039;;\ninterface Env { DATABASE_URL: string; }\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    const client = new Client(env.DATABASE_URL);\n    await client.connect();\n    const { rows: [{ now }] } = await client.query(&#039;select now();&#039;);\n    ctx.waitUntil(client.end());  // this doesn’t hold up the response\n    return new Response(now);\n  }\n}</pre></code>\n            <p>To try this locally, type <code>npm start</code>. To deploy it around the globe, type <code>npx wrangler publish</code>.</p><p>You can also <a href=\"https://github.com/neondatabase/serverless-cfworker-demo\">check out the source</a> for a slightly more complete demo app. This shows <a href=\"https://neon-cf-pg-test.pages.dev/\">your nearest UNESCO World Heritage sites</a> using IP geolocation in Cloudflare Workers and nearest-neighbor sorting in PostGIS.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1cdG0zVBCrFyiBilGo94o8/1d33ccaca61c6efec303aaa763ddb1e8/image3-18.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1041\" loading=\"lazy\"/>\n            \n            </figure><p>How does this work? In this case, we take the coordinates supplied to our Worker in <code>request.cf.longitude</code> and <code>request.cf.latitude</code>. We then feed these coordinates to a SQL query that uses the <a href=\"https://postgis.net/docs/geometry_distance_knn.html\">PostGIS distance operator <code>&lt;-&gt;</code></a> to order our results:</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">const { longitude, latitude } = request.cf\nconst { rows } = await client.query(`\n  select \n    id_no, name_en, category,\n    st_makepoint($1, $2) &lt;-&gt; location as distance\n  from whc_sites_2021\n  order by distance limit 10`,\n  [longitude, latitude]\n);</pre></code>\n            <p>Since we created a <a href=\"http://postgis.net/workshops/postgis-intro/indexing.html\">spatial index</a> on the location column, the query is blazing fast. The result (<code>rows</code>) looks like this:</p>\n            <pre class=\"language-json\"><code class=\"language-json\">[{\n  &quot;id_no&quot;: 308,\n  &quot;name_en&quot;: &quot;Yosemite National Park&quot;,\n  &quot;category&quot;: &quot;Natural&quot;,\n  &quot;distance&quot;: 252970.14782223428\n},\n{\n  &quot;id_no&quot;: 134,\n  &quot;name_en&quot;: &quot;Redwood National and State Parks&quot;,\n  &quot;category&quot;: &quot;Natural&quot;,\n  &quot;distance&quot;: 416334.3926827573\n},\n/* … */\n]</pre></code>\n            <p>For even lower latencies, we could cache these results at a slightly coarser geographical resolution — rounding, say, to one sixtieth of a degree (one <a href=\"https://en.wikipedia.org/wiki/Minute_and_second_of_arc\">arc minute</a>) of longitude and latitude, which is a little under a mile.</p><p><a href=\"https://console.neon.tech/?invite=serverless\">Sign up to Neon</a> using the invite code <i>serverless</i> and try the @neondatabase/serverless driver with Cloudflare Workers.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"why-we-did-it\">Why we did it</h3>\n            <a href=\"#why-we-did-it\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Cloudflare Workers has enormous potential to improve back-end development and deployment. It’s cost-effective, admin-free, and radically scalable.</p><p>The use of V8 isolates means Workers are now fast and lightweight enough for nearly any use case. But it has a key drawback: Cloudflare Workers don’t yet support raw TCP communication, which has made database connections a challenge.</p><p>Even when Workers eventually support raw TCP communication, we will not have fully solved our problem, because database connections are expensive to set up and also have quite a bit of memory overhead.</p><p>This is what the solution looks like:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7CWb6OEZuNu8mg1YJsQTzY/3c14f184ab034be30f106f921f2485c7/image2-23.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1050\" loading=\"lazy\"/>\n            \n            </figure><p>It consists of three parts:</p><ol><li><p><b>Connection pooling built into the platform</b> — Given Neon’s serverless compute model, splitting storage and compute operations, it is not recommended to rely on a one-to-one mapping between external clients and Postgres connections. Instead, you can turn on connection pooling simply by flicking a switch (it’s in the <i>Settings</i> area of your Neon dashboard).</p></li><li><p><b>WebSocket proxy</b> — We deploy our <a href=\"https://github.com/neondatabase/wsproxy\">own WebSocket-to-TCP proxy</a>, written in Go. The proxy simply accepts WebSocket connections from Cloudflare Worker clients, relays message payloads to a requested (Neon-only) host over plain TCP, and relays back the responses.</p></li><li><p><b>Client library</b> — Our driver library is based on node-postgres but provides the necessary <a href=\"https://github.com/neondatabase/serverless\">shims for Node.js features</a> that aren’t present in Cloudflare Workers. Crucially, we replace Node’s <code>net.Socket</code> and <code>tls.connect</code> with code that redirects network reads and writes via the WebSocket connection. To support end-to-end TLS encryption between Workers and the database, we compile <a href=\"https://www.wolfssl.com/\">WolfSSL</a> to WebAssembly with <a href=\"https://emscripten.org/\">emscripten</a>. Then we use <a href=\"https://esbuild.github.io/\">esbuild</a> to bundle it all together into an easy-to-use npm package.</p></li></ol><p>The <code>@neondatabase/serverless</code> package is currently in public beta. We have plans to improve, extend, and explain it further in the near future <a href=\"https://neon.tech/blog/\">on the Neon blog</a>. In line with our commitment to open source, you can configure our serverless driver and/or run our WebSocket proxy to provide access to Postgres databases hosted anywhere — just see the respective repos for details.</p><p>So <a href=\"https://console.neon.tech/?invite=serverless\">try Neon</a> using invite code <code><i>serverless</i></code>, <a href=\"https://workers.cloudflare.com/\">sign up and connect to it with Cloudflare Workers</a>, and you’ll have a fully flexible back-end service running in next to no time.</p>",
		"id": "7yvumN0c8zRWHVBbQAkbLc",
		"localeList": {
			"name": "Easy Postgres integration on Cloudflare Workers with Neon.tech Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Neon.tech is a database platform that allows you to branch your (Postgres compatible) database exactly like your code repository.And with the release of their Cloudflare Workers integration you can get started in minutes.",
		"metadata": {
			"title": "Easy Postgres integration on Cloudflare Workers with Neon.tech",
			"description": "Neon.tech is a database platform that allows you to branch your (Postgres compatible) database exactly like your code repository.And with the release of their Cloudflare Workers integration you can get started in minutes.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4nc0MKzJqEC8NCeqoGuw76/123015f343b12473e3b662905bf97b71/neon-postgres-database-from-workers-Q1sI75.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2022-11-15T13:44:00.000+00:00",
		"slug": "neon-postgres-database-from-workers",
		"tags": [
			{
				"id": "2xCnBweKwOI3VXdYsGVbMe",
				"name": "Developer Week",
				"slug": "developer-week"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "7lB8a8hOPXzjt99X5Ye9wb",
				"name": "Storage",
				"slug": "storage"
			},
			{
				"id": "7mFLEw3Z6dksCNAsnCMHTH",
				"name": "Guest Post",
				"slug": "guest-post"
			}
		],
		"title": "Easy Postgres integration on Cloudflare Workers with Neon.tech",
		"updated_at": "2024-10-09T23:21:01.333Z",
		"url": "https://blog.cloudflare.com/neon-postgres-database-from-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}