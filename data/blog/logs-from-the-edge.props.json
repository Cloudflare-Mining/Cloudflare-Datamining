{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "3",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Michael Tremante",
				"slug": "michael-tremante",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/61VxyepuDMgPc2YC1SLjzq/b40290be32d4c578dab2eb8ec1a3b6da/michael-tremante.jpg",
				"location": null,
				"website": null,
				"twitter": "@MichaelTremante",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "With Cloudflare Workers, it is possible to send traffic logs to arbitrary locations. In this post we are going to discuss an example Worker implementation on how to achieve this. So if you are building or maintaining your own traffic logging/analytics environment, read on.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/22EHOfwq4HTxAYc28d7SFV/08c3b4cba9058a9f21b10cc3834cda24/logs-from-the-edge.jpg",
		"featured": false,
		"html": "<p>With <a href=\"/introducing-cloudflare-workers/\">Cloudflare Workers</a>, our JavaScript environment at the edge, it is possible to send traffic logs to arbitrary locations. In this post we are going to discuss an example Worker implementation on how to achieve this. So if you are building or maintaining your own traffic logging/analytics environment, read on.</p><p>To build the underlying script we are going to leverage sub requests. Sub requests, which can be spawned from the initial HTTP/S request, can be used to aggregate and compose a response from several back end services, or, like in the example discussed here, to post data to a specific endpoint. Sub requests can be made asynchronously and after the initial request has been fully served to avoid adding unnecessary latency to the main request.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5Ky2AOpjSfW9fZY5cLt9iy/7adbf0f3f3e19119d303c7c207753764/logs.jpg\" alt=\"logs\" class=\"kg-image\" width=\"3072\" height=\"2048\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-worker-code\">The Worker Code</h3>\n      <a href=\"#the-worker-code\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In this example we assume an <a href=\"https://www.elastic.co/products\">Elastic stack</a> has been set up at <code>elk.example.com</code> and has been configured to receive via HTTP/S <code>PUT</code> requests a number of fields for each log line. The full script that we are going to look at can be found below:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&#039;fetch&#039;, event =&gt; {\n  event.respondWith(fetchAndLog(event));\n})\n\nasync function fetchAndLog(event) {\n  const response = await fetch(event.request);\n  event.waitUntil(logToElk(event.request, response));\n  return response;\n}\n\nasync function logToElk(request, response) {\n  var ray  = request.headers.get(&#039;cf-ray&#039;) || &#039;&#039;;\n  var id   = ray.slice(0, -4);\n  var data = {\n    &#039;timestamp&#039;:  Date.now(),\n    &#039;url&#039;:        request.url,\n    &#039;referer&#039;:    request.referrer,\n    &#039;method&#039;:     request.method,\n    &#039;ray&#039;:        ray,\n    &#039;ip&#039;:         request.headers.get(&#039;cf-connecting-ip&#039;) || &#039;&#039;,\n    &#039;host&#039;:       request.headers.get(&#039;host&#039;) || &#039;&#039;,\n    &#039;ua&#039;:         request.headers.get(&#039;user-agent&#039;) || &#039;&#039;,\n    &#039;cc&#039;:         request.headers.get(&#039;Cf-Ipcountry&#039;) || &#039;&#039;,\n    &#039;colo&#039;:       request.cf.colo,\n    &#039;tlsVersion&#039;: request.cf.tlsVersion || &#039;&#039;,\n    &#039;tlsCipher&#039;:  request.cf.tlsCipher || &#039;&#039;,\n    &#039;status&#039;:     response.status,\n  };\n  \n  var url = &quot;https://elk.example.com/weblogs/logs/&quot; + id + &quot;?pipeline=weblogs&amp;pretty&quot;\n  await fetch(url, {\n    method: &#039;PUT&#039;,\n    body: JSON.stringify(data),\n    headers: new Headers({\n      &#039;Content-Type&#039;: &#039;application/json&#039;,\n    })\n  })\n}</pre></code>\n            <p>Let&#39;s look at the script in a little more detail:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&#039;fetch&#039;, event =&gt; {\n  event.respondWith(fetchAndLog(event));\n})\n\nasync function fetchAndLog(event) {\n  const response = await fetch(event.request);\n  event.waitUntil(logToElk(event.request, response));\n  return response;\n}</pre></code>\n            <p>At the start of the script we are listening to all request events, and on each request, we are calling the <code>fetchAndLog</code> function. This function will proxy the request as is and asynchronously call the <code>logToElk</code> function that will post a log line to our ELK stack. As this function is executed asynchronously, delays while logging to ELK will not affect the original request.</p><p>Let&#39;s take a deeper look at the <code>logToElk</code> function.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">var ray  = request.headers.get(&#039;cf-ray&#039;) || &#039;&#039;;\nvar id   = ray.slice(0, -4);\nvar data = {\n  &#039;timestamp&#039;:  Date.now(),\n  &#039;url&#039;:        request.url,\n  &#039;referer&#039;:    request.referrer,\n  &#039;method&#039;:     request.method,\n  &#039;ray&#039;:        ray,\n  &#039;ip&#039;:         request.headers.get(&#039;cf-connecting-ip&#039;) || &#039;&#039;,\n  &#039;host&#039;:       request.headers.get(&#039;host&#039;) || &#039;&#039;,\n  &#039;ua&#039;:         request.headers.get(&#039;user-agent&#039;) || &#039;&#039;,\n  &#039;cc&#039;:         request.headers.get(&#039;Cf-Ipcountry&#039;) || &#039;&#039;,\n  &#039;colo&#039;:       request.cf.colo,\n  &#039;tlsVersion&#039;: request.cf.tlsVersion || &#039;&#039;,\n  &#039;tlsCipher&#039;:  request.cf.tlsCipher || &#039;&#039;,\n  &#039;status&#039;:     response.status,\n};</pre></code>\n            <p>The first part is collecting the data we wish to log. Some of these fields are part of the standard fields of any HTTP request (e.g. the URL, the HTTP method etc.), however, we are also adding fields specific to Cloudflare such as the ray ID (a unique identifier of any HTTP request proxying via Cloudflare), the country code as provided by Cloudflare IP to country logic, and the PoP/colo ID that the request is hitting.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">var url = &quot;https://elk.example.com/weblogs/logs/&quot; + id + &quot; pipeline=weblogs&amp;pretty&quot;\nawait fetch(url, {\n  method: &#039;PUT&#039;,\n  body: JSON.stringify(data),\n  headers: new Headers({\n    &#039;Content-Type&#039;: &#039;application/json&#039;,\n  })\n})</pre></code>\n            <p>Once we have all the fields we wish to log saved in our <code>data</code> variable, we need to perform a sub request to <code>PUT</code> the log line to our backend ELK stack. By calling the <code>fetch</code> function we are initiating a new HTTP request for which we are specifying the request method, the body and additional headers as expected by the ELK stack (in this case we are <code>PUT</code>ing JSON content).</p><p>And that is it, with a small Worker script you can import Cloudflare traffic logs into your ELK stack in real time. If you found this useful we also talked about <a href=\"/dogfooding-edge-workers/\">logging events and alerts to Sentry via workers</a> in the past, and community members have also shared <a href=\"https://community.cloudflare.com/t/simple-log-collector-worker/40954\">similar methods for other logging tools such as logdna</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"making-it-better-with-argo-tunnel-and-access\">Making it better with Argo Tunnel and Access</h4>\n      <a href=\"#making-it-better-with-argo-tunnel-and-access\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As an additional improvement it is worth noting that an Elastic Stack uses <a href=\"https://www.elastic.co/webinars/getting-started-kibana\">Kibana</a> as a front end visualisation interface available over HTTP/S. The Kibana endpoint (let&#39;s assume <code>kibana.example.com</code>) can also be proxied via Cloudflare, but it is normally used only internally within an organization. The origin therefore needs to be protected and made accessible only to colleagues.</p><p>We can use two Cloudflare features to improve the Kibana deployment:</p><ul><li><p><a href=\"https://www.cloudflare.com/products/argo-tunnel/\">Argo Tunnel</a> allows the Kibana origin to reach out directly to Cloudflare, avoiding the need of a publicly accessible IP address or hostname;</p></li><li><p><a href=\"https://www.cloudflare.com/products/cloudflare-access/\">Cloudflare Access</a> allows you to integrate Cloudflare with your Identity and Access Management tool, and define rules that specify which users or groups have access to the Kibana instance;</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"logs-for-everyone\">Logs for Everyone</h3>\n      <a href=\"#logs-for-everyone\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Before we launched Workers, retrieving raw logs from Cloudflare was only available to enterprise customers. With a little technical effort you can now start receiving logs from the edge by leveraging Workers regardless of which plan you are using. Workers are available starting on a pay per usage model and the ELK stack is open source.</p><p>Enterprise customers can still retrieve raw traffic logs with our Enterprise Log Share (ELS) feature. If ELS is turned on, all requests for the chosen application will be logged and stored on Cloudflare infrastructure. The logs can be downloaded when required via a <a href=\"https://support.cloudflare.com/hc/en-us/articles/216672448-Enterprise-Log-Share-Logpull-REST-API\">RESTful API</a> or pushed directly to Amazon S3 or Google Cloud (soon also Microsoft Azure) for further processing in your favorite log analysis tool. Logs with ELS are available within 10 minutes of the request being processed at the edge regardless of location, and they will have a number of additional fields that are not yet available to the Worker environment. ELS also guarantees log delivery and retention periods and allows you not to worry about load and storage.</p>",
		"id": "3YVhp0CjEFXVQoP04VJQ0c",
		"localeList": {
			"name": "Logs from the Edge Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-11-29T18:45:25.000+00:00",
		"slug": "logs-from-the-edge",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "4fkY3bvsgn5JfTgXxTZHIR",
				"name": "Logs",
				"slug": "logs"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Logs from the Edge",
		"updated_at": "2025-10-24T11:02:50.491Z",
		"url": "https://blog.cloudflare.com/logs-from-the-edge"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}