{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Junade Ali",
				"slug": "junade-ali",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3OWtXkEWho3HaulkNRp0L2/8ae3c35ad8c0f7df43d8fc9c35bfe87f/junade-ali.jpg",
				"location": null,
				"website": null,
				"twitter": "@IcyApril",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Back in May last year, one of my colleagues blogged about the introduction of our Python binding for the Cloudflare API and drew reference to our other bindings in Go and Node. Today we are complimenting this range by introducing a new official binding, this time in PHP.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4OFWKEgPI4IyhIiu5PcBvj/d53422877f3173bc8165438c2e88a1d2/cloudflare-php-api-binding.JPG",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4WUIqB40RMOZZrX73E0TTI/432a85305e47ff4f5053033c6b513fd2/A80E511F-98BF-422F-B39A-22D51DA0A3BA-2.JPG.jpeg\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"750\" loading=\"lazy\"/>\n            \n            </figure><p>Back in May last year, one of my colleagues blogged about the introduction of our <a href=\"/python-cloudflare/\">Python binding for the Cloudflare API</a> and drew reference to our other bindings in <a href=\"https://github.com/cloudflare/cloudflare-go\">Go</a> and <a href=\"https://github.com/cloudflare/node-cloudflare\">Node</a>. Today we are complimenting this range by introducing a new official binding, this time in <a href=\"https://github.com/cloudflare/cloudflare-php\">PHP</a>.</p><p>This binding is available via Packagist as <a href=\"https://packagist.org/packages/cloudflare/sdk\">cloudflare/sdk</a>, you can install it using Composer simply by running <code>composer require cloudflare/sdk</code>. We have documented various use-cases in our <a href=\"https://support.cloudflare.com/hc/en-us/articles/115001661191\">&quot;Cloudflare PHP API Binding&quot; KB article</a> to help you get started.</p><p>Alternatively should you wish to help contribute, or just give us a star on GitHub, feel free to browse to the <a href=\"https://github.com/cloudflare/cloudflare-php\">cloudflare-php source code</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1cb8c0aCRK1QxtwReVtMDc/de48b0c9191df68bab840c53f5efea8b/installing-cloudflare-php.png\" alt=\"Installing cloudflare/sdk\" class=\"kg-image\" width=\"1940\" height=\"888\" loading=\"lazy\"/>\n            \n            </figure><p>PHP is a controversial language, and there is no doubt there are elements of bad design within the language (as is the case with many other languages). However, love it or hate it, PHP is a language of high adoption; as of September 2017 <a href=\"https://w3techs.com/technologies/overview/programming_language/all\">W3Techs</a> report that PHP is used by 82.8% of all the websites whose server-side programming language is known. In creating this binding the question clearly wasn&#39;t on the merits of PHP, but whether we wanted to help drive improvements to the developer experience for the sizeable number of developers integrating with us whilst using PHP.</p><p>In order to help those looking to contribute or build upon this library, I write this blog post to explain some of the design decisions made in putting this together.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"exclusively-for-php-7\">Exclusively for PHP 7</h3>\n      <a href=\"#exclusively-for-php-7\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>PHP 5 initially introduced the ability for type hinting on the basis of classes and interfaces, this opened up (albeit seldom used) parametric polymorphic behaviour in PHP. Type hinting on the basis of interfaces made it easier for those developing in PHP to follow the Gang of Four&#39;s famous guidance: &quot;Program to an &#39;interface&#39;, not an &#39;implementation&#39;.&quot;</p><p>Type hinting has slowly developed in PHP, in PHP 7.0 the ability for Scalar Type Hinting was released after a few rounds of RFCs. Additionally PHP 7.0 introduced Return Type Declarations, allowing return values to be type hinted in a similar way to argument type hinting. In this library we extensively use Scalar Type Hinting and Return Type Declarations thereby restricting the backward compatibility that&#39;s available with PHP 5.</p><p>In order for backward compatibility to be available, these improvements to type hinting simply would not be implementable and the associated benefits would be lost. With Active Support <a href=\"http://php.net/supported-versions.php\">no longer being offered to PHP 5.6</a> and Security Support little over a year away from disappearing for the entirety of PHP 5.x, we decided the additional coverage wasn&#39;t worth the cost.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/RJX9jaiMJuc3J7e8OBCor/2998f5d9da54264b9774aa8e18fe00b6/php-support.png\" alt=\"PHP version history\" class=\"kg-image\" width=\"1890\" height=\"462\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"object-composition\">Object Composition</h3>\n      <a href=\"#object-composition\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <blockquote><p>What do we mean by a software architecture? To me the term architecture conveys a notion of the core elements of the system, the pieces that are difficult to change. A foundation on which the rest must be built. <a href=\"https://www.martinfowler.com/articles/designDead.html\">Martin Fowler</a></p></blockquote><p>When getting started with this package, you&#39;ll notice there are 3 classes you&#39;ll need to instantiate:</p>\n            <pre class=\"language-php\"><code class=\"language-php\">$key     = new \\Cloudflare\\API\\Auth\\APIKey(&#039;user@example.com&#039;, &#039;apiKey&#039;);\n$adapter = new Cloudflare\\API\\Adapter\\Guzzle($key);\n$user    = new \\Cloudflare\\API\\Endpoints\\User($adapter);\n    \necho $user-&gt;getUserID();</pre></code>\n            <p>The first class being instantiated is called <code>APIKey</code> (a few other classes for authentication are available). We then proceed to instantiate the <code>Guzzle</code> class and the <code>APIKey</code> object is then injected into the constructor of the <code>Guzzle</code> class. The <code>Auth</code> interface that the <code>APIKey</code> class implements is fairly simple:</p>\n            <pre class=\"language-php\"><code class=\"language-php\">namespace Cloudflare\\API\\Auth;\n\ninterface Auth\n{\n    public function getHeaders(): array;\n}</pre></code>\n            <p>The <code>Adapter</code> interface (which the <code>Guzzle</code> class implements) makes explicit that an object built on the <code>Auth</code> interface is expected to be injected into the constructor:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">namespace Cloudflare\\API\\Adapter;\n\nuse Cloudflare\\API\\Auth\\Auth;\nuse Psr\\Http\\Message\\ResponseInterface;\n\ninterface Adapter\n{\n...\n    public function __construct(Auth $auth, string $baseURI);\n...\n}</pre></code>\n            <p>In doing so; we define that classes which implement the <code>Adapter</code> interface are to be composed using objects made from classes which implement the <code>Auth</code> interface.</p><p>So why am I explaining basic Dependency Injection here? It is critical to understand as the design of our API changes, the mechanisms for Authentication may vary independently of the HTTP Client or indeed API Endpoints themselves. Similarly the HTTP Client or the API Endpoints may vary independently of the other elements involved. Indeed, this package already contains three classes for the purpose of authentication (<code>APIKey</code>, <code>UserServiceKey</code> and <code>None</code>) which need to be interchangeably used. This package therefore considers the possibility for changes to different components in the API and seeks to allow these components to vary independently.</p><p>Dependency Injection is also used where the parameters for an API Endpoint become more complicated then what is permitted by simpler variables types; for example, this is done for defining the Target or Configuration when configuring a Page Rule:</p>\n            <pre class=\"language-php\"><code class=\"language-php\">require_once(&#039;vendor/autoload.php&#039;);\n\n$key = new \\Cloudflare\\API\\Auth\\APIKey(&#039;mjsa@junade.com&#039;, &#039;apiKey&#039;);\n$adapter = new Cloudflare\\API\\Adapter\\Guzzle($key);\n$zones = new \\Cloudflare\\API\\Endpoints\\Zones($adapter);\n\n$zoneID = $zones-&gt;getZoneID(&quot;junade.com&quot;);\n\n$pageRulesTarget = new \\Cloudflare\\API\\Configurations\\PageRulesTargets(&#039;https://junade.com/noCache/*&#039;);\n\n$pageRulesConfig = new \\Cloudflare\\API\\Configurations\\PageRulesActions();\n$pageRulesConfig-&gt;setCacheLevel(&#039;bypass&#039;);\n\n$pageRules = new \\Cloudflare\\API\\Endpoints\\PageRules($adapter);\n$pageRules-&gt;createPageRule($zoneID, $pageRulesTarget, $pageRulesConfig, true, 6);</pre></code>\n            <p>The structure of this project is overall based on simple object composition; this provides a far more simple object model for the long-term and a design that provides higher flexibility. For example; should we later want to create an Endpoint class which is a <a href=\"https://en.wikipedia.org/wiki/Composite_pattern\">composite</a> of other Endpoints, it becomes fairly trivial for us to build this by implementing the same interface as the other Endpoint classes. As more code is added, we are able to keep the design of the software relatively thinly layered.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"testing-mocking-http-requests\">Testing/Mocking HTTP Requests</h3>\n      <a href=\"#testing-mocking-http-requests\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you&#39;re interesting in helping contribute to this repository; there are two key ways you can help:</p><ol><li><p>Building out coverage of endpoints on our API</p></li><li><p>Building out test coverage of those endpoint classes</p></li></ol><p>The PHP-FIG (PHP Framework Interop Group) put together a standard on how HTTP responses can be represented in an interface, this is described in the <a href=\"http://www.php-fig.org/psr/psr-7/\">PSR-7 standard</a>. This response interface is utilised by our HTTP <code>Adapter</code> interface in which responses to API requests are type hinted to this interface (<code>Psr\\Http\\Message\\ResponseInterface</code>).</p><p>By using this standard, it&#39;s easier to add further abstractions for additional HTTP clients and mock HTTP responses for unit testing. Let&#39;s assume the JSON response is stored in the <code>$response</code> variable and we want to test the <code>listIPs</code> method in the <code>IPs</code> Endpoint class:</p>\n            <pre class=\"language-php\"><code class=\"language-php\">public function testListIPs() {\n  $stream = GuzzleHttp\\Psr7\\stream_for($response);\n  $response = new GuzzleHttp\\Psr7\\Response(200, [&#039;Content-Type&#039; =&gt; &#039;application/json&#039;], $stream);\n  $mock = $this-&gt;getMockBuilder(\\Cloudflare\\API\\Adapter\\Adapter::class)-&gt;getMock();\n  $mock-&gt;method(&#039;get&#039;)-&gt;willReturn($response);\n\n  $mock-&gt;expects($this-&gt;once())\n    -&gt;method(&#039;get&#039;)\n    -&gt;with($this-&gt;equalTo(&#039;ips&#039;), $this-&gt;equalTo([])\n  );\n\n   $ips = new \\Cloudflare\\API\\Endpoints\\IPs($mock);\n   $ips = $ips-&gt;listIPs();\n   $this-&gt;assertObjectHasAttribute(&quot;ipv4_cidrs&quot;, $ips);\n   $this-&gt;assertObjectHasAttribute(&quot;ipv6_cidrs&quot;, $ips);\n}</pre></code>\n            <p>We are able to build a simple mock of our <code>Adapter</code> interface by using the standardised PSR-7 response format, when we do so we are able to define what parameters PHPUnit expects to be passed to this mock. With a mock <code>Adapter</code> class in place we are able to test the <code>IPs</code> Endpoint class as any if it was using a real HTTP client.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"conclusions\">Conclusions</h3>\n      <a href=\"#conclusions\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Through building on modern versions of PHP, using good Object-Oriented Programming theory and allowing for effective testing we hope our PHP API binding provides a developer experience that is pleasant to build upon.</p><p>If you&#39;re interesting in helping improve the design of this codebase, I&#39;d encourage you to take a look at the <a href=\"https://github.com/cloudflare/cloudflare-php\">PHP API binding source code</a> on GitHub (and optionally give us a star).</p><p>If you work with Go or PHP and you&#39;re interested in helping Cloudflare turn our high-traffic customer-facing API into an ever more modern service-oriented environment; we&#39;re hiring for Web Engineers in <a href=\"https://boards.greenhouse.io/cloudflare/jobs/745994#.WcWKLtOGPys\">San Francisco</a>, <a href=\"https://boards.greenhouse.io/cloudflare/jobs/682927#.WcWKPdOGPys\">Austin</a> and <a href=\"https://boards.greenhouse.io/cloudflare/jobs/574636#.WcWKQdOGPys\">London</a>.</p>",
		"id": "1NRqPHr4Wm8QNvqlHrAE4c",
		"localeList": {
			"name": "A New API Binding: cloudflare-php Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Back in May last year, one of my colleagues blogged about the introduction of our Python binding for the Cloudflare API and drew reference to our other bindings in Go and Node.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2017-09-23T01:01:35.000+01:00",
		"slug": "cloudflare-php-api-binding",
		"tags": [
			{
				"id": "6ftpwHnREWzIsAvyv4blrq",
				"name": "php",
				"slug": "php"
			},
			{
				"id": "5x72ei67SoD11VQ0uqFtpF",
				"name": "API",
				"slug": "api"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "bEVrfgaUfNXu577TT9qb8",
				"name": "Python",
				"slug": "python"
			}
		],
		"title": "A New API Binding: cloudflare-php",
		"updated_at": "2024-10-09T22:13:21.605Z",
		"url": "https://blog.cloudflare.com/cloudflare-php-api-binding"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}