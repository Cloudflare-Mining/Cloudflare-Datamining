{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": null,
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Yusuke Wada",
				"slug": "yusuke-wada",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/29JwauVrsLIajPq9XxJV1g/73a6d5fe9b1e9b9eda7dbbb0e15897ff/CF_Dev_Week_Headshots__7_of_16_.jpg",
				"twitter": "yusukebe",
				"publiclyIndex": true
			}
		],
		"excerpt": "Hono is a web framework that is fast, lightweight, and built using the Web Standards API. Hear the story of Hono by the creator of Hono.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5wBjFUeRwG8UK5pMTRXVDh/9bb4d7e3c9aa5c4f6d74d6b3926af5b2/image4.png",
		"featured": false,
		"html": "<p><a href=\"https://hono.dev/\"><u>Hono</u></a> is a fast, lightweight web framework that runs anywhere JavaScript does, built with Web Standards. Of course, it runs on Cloudflare Workers.</p><p>It was three years ago, in December 2021. At that time, I wanted to create applications for Cloudflare Workers, but the code became verbose without using a framework, and couldn&#39;t find a framework that suited my needs. <a href=\"https://itty.dev/itty-router/\"><u>Itty-router</u></a> was very nice but too simple. <a href=\"https://github.com/lukeed/worktop\"><u>Worktop</u></a> and <a href=\"https://sunderjs.com/\"><u>Sunder</u></a> did the same things I wanted to do, but their APIs weren&#39;t quite to my liking. I was also interested in creating a router — a program that determines which action is executed based on the HTTP method and URL path of the Request — made of a <a href=\"https://en.wikipedia.org/wiki/Trie\"><u>Trie tree</u></a> structure because it’s fast. So, I started building a web framework with a Trie tree-based router.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6eWlTEPSJmX4grfpKi795b/d6596a29931dc0e24602683742916009/image7.png\" alt=\"\" class=\"kg-image\" width=\"954\" height=\"236\" loading=\"lazy\"/>\n          </figure><p> “<i>While trying to create my applications, I ended up creating my framework for them.”</i> — a classic example of <a href=\"https://en.wiktionary.org/wiki/yak_shaving\"><u>yak shaving</u></a>. However, Hono is now used by many developers, including Cloudflare, which uses Hono in core products. So, this journey into the depths of yak shaving was ultimately meaningful.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"write-once-run-anywhere\">Write once, run anywhere</h2>\n            <a href=\"#write-once-run-anywhere\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Hono truly runs anywhere — not just on Cloudflare Workers. I’ll discuss why later in the post, but Hono also runs on Deno, Bun, and Node.js. This is because Hono does not depend on external libraries, but uses only the Web Standards API, and each runtime supports Web Standards.</p><p>It&#39;s a delight for developers to know that the same code can run across different runtimes. For instance, the following src/index.ts code will run on Cloudflare Workers, Deno, and Bun.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Hono } from &#039;hono&#039;\n\nconst app = new Hono()\napp.get(&#039;/hello&#039;, (c) =&gt; c.text(&#039;Hello Hono!&#039;))\n\nexport default app</pre></code>\n            <p>To run it on Cloudflare Workers, you execute the Wrangler command:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">wrangler dev src/index.ts</pre></code>\n            <p>The same code works on Deno:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">deno serve src/index.ts</pre></code>\n            <p>And it works on Bun too:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">bun run src/index.ts</pre></code>\n            <p>This is only a simple &quot;Hello World&quot; example, but more complex applications with middleware and helpers that are discussed below can be run on Cloudflare Workers or the other runtimes. As proof of this, almost all our test code for Hono itself can run the same way on these runtimes. This is a genuine &quot;<i>write once, run anywhere</i>&quot; experience.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"who-is-using-hono\">Who is using Hono?</h2>\n            <a href=\"#who-is-using-hono\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Hono is now used by many developers and companies. For example, <a href=\"https://unkey.dev/\"><u>Unkey</u></a> deploys their application built with <a href=\"https://hono.dev/examples/zod-openapi\"><u>Hono&#39;s OpenAPI feature</u></a> to Cloudflare Workers. The following is a list of companies using Hono, based on my survey &quot;<a href=\"https://github.com/orgs/honojs/discussions/1510\"><u>Who is using Hono in production?</u></a>”.</p><ul><li><p>Cloudflare</p></li><li><p><a href=\"https://nodecraft.com/\"><u>Nodecraft</u></a></p></li><li><p><a href=\"https://www.openstatus.dev/\"><u>OpenStatus</u></a></p></li><li><p><a href=\"https://www.unkey.com/\"><u>Unkey</u></a></p></li><li><p><a href=\"https://about.goen-s.com/\"><u>Goens</u></a></p></li><li><p><a href=\"https://notahotel.com\"><u>NOT A HOTEL</u></a></p></li><li><p><a href=\"https://www.cyberagent.co.jp/\"><u>CyberAgent</u></a></p></li><li><p><a href=\"https://www.ai-shift.co.jp/\"><u>AI shift</u></a></p></li><li><p><a href=\"http://hanabi.rest/\"><u>Hanabi.rest</u></a></p></li><li><p><a href=\"https://baseai.dev/\"><u>BaseAI</u></a>\n</p></li></ul><p>There are many, many more companies not listed here. And major web services or libraries, such as <a href=\"https://www.prisma.io/\"><u>Prisma</u></a>, <a href=\"https://resend.com/\"><u>Resend</u></a>, <a href=\"https://sdk.vercel.ai/\"><u>Vercel AI SDK</u></a>, <a href=\"https://supabase.com/\"><u>Supabase</u></a>, and <a href=\"https://upstash.com/\"><u>Upstash</u></a>, use Hono in their examples. There are also several influencers who like Hono and use it as an alternative to <a href=\"https://expressjs.com/\"><u>Express</u></a>.</p><p>Of course, at Cloudflare, we also use Hono. D1 uses Hono for the internal Web API running on Workers. Workers Logs is based on code from <a href=\"https://blog.cloudflare.com/cloudflare-acquires-baselime-expands-observability-capabilities/\"><u>Baselime (acquired by Cloudflare)</u></a> and uses Hono to migrate the applications from their original infrastructure to Cloudflare Workers. All Workers Logs internal or customer-facing APIs are run on Workers using Hono. We also use Hono as part of the internals of many other products, such as KV and Queues.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"why-are-you-making-a-multi-runtime-framework\">Why are you making a “multi-runtime” framework?</h2>\n            <a href=\"#why-are-you-making-a-multi-runtime-framework\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>You might wonder “<i>Why is an employee of Cloudflare creating a framework that runs everywhere?</i>” Initially, Hono was designed to work exclusively with Cloudflare Workers. However, starting with <a href=\"https://github.com/honojs/hono/releases/tag/v2.0.0\"><u>version 2</u></a>, I added support for Deno and Bun. This was a very wise decision. If Hono had been targeted only at Cloudflare Workers, it might not have attracted as many users. By running on more runtimes, it gains more users, leading to the discovery of bugs and receiving more feedback, which ultimately leads to higher quality software.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"hono-and-cloudflare-are-a-perfect-combo\">Hono and Cloudflare are a perfect combo</h2>\n            <a href=\"#hono-and-cloudflare-are-a-perfect-combo\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>The combination of Hono and Cloudflare offers a delightful developer experience.</p><p>Many websites, including <a href=\"https://developers.cloudflare.com/\"><u>our Cloudflare Docs</u></a>, introduce the following &quot;vanilla&quot; JavaScript as a &quot;Hello World&quot; for Cloudflare Workers:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export default {\n  fetch: () =&gt; {\n    return new Response(&#039;Hello World!&#039;)\n  }\n}\n</pre></code>\n            <p>This is primitive and good for understanding the Workers principle. However, if you want to create an endpoint that &quot;returns a JSON response for GET requests that come to <code>/books</code>&quot;, you need to write something like this:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export default {\n  fetch: (req) =&gt; {\n    const url = new URL(req.url)\n    if (req.method === &#039;GET&#039; &amp;&amp; url.pathname === &#039;/books&#039;) {\n      return Response.json({\n        ok: true\n      })\n    }\n    return Response.json(\n      {\n        ok: false\n      },\n      {\n        status: 404\n      }\n    )\n  }\n}\n</pre></code>\n            <p>If you use Hono, you can write it like the following:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Hono } from &#039;hono&#039;\n\nconst app = new Hono()\n\napp.get(&#039;/books&#039;, (c) =&gt; {\n  return c.json({\n    ok: true\n  })\n})\n\nexport default app</pre></code>\n            <p>It is short. And you can understand that “it handles <code>GET</code> accesses to <code>/books</code>” intuitively.</p><p>If you want to handle <code>GET</code> requests to <code>/authors/yusuke</code> and get &quot;yusuke&quot; from the path —  &quot;yusuke&quot; is variable, you have to add something more complicated. The below is &quot;vanilla&quot; JavaScript example:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">if (req.method === &#039;GET&#039;) {\n  const match = url.pathname.match(/^\\/authors\\/([^\\/]+)/)\n  if (match) {\n    const author = match[1]\n    return Response.json({\n      Author: author\n    })\n  }\n}\n</pre></code>\n            <p>If you use Hono, you don&#39;t need <code>if</code> statements. Just add the endpoint definition to the <code>app</code>. Also, you don&#39;t need to write a regular expression to get &quot;yusuke&quot;. You can get it with the function <code>c.req.param()</code>:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">app.get(&#039;/authors/:name&#039;, (c) =&gt; {\n  const author = c.req.param(&#039;name&#039;)\n  return c.json({\n    Author: author\n  })\n})\n</pre></code>\n            <p>One or two routes may be fine, but any more than that and maintenance becomes tricky. Code becomes more complex and bugs are harder to find. Using Hono, the code is very neat.</p><p>It is also easy to handle bindings to Cloudflare products, such as <a href=\"https://developers.cloudflare.com/kv/\"><u>KV</u></a>, <a href=\"https://developers.cloudflare.com/r2/\"><u>R2</u></a>, <a href=\"https://developers.cloudflare.com/d1/\"><u>D1</u></a>, etc. as Hono uses a &quot;context model&quot;. A context is a container that holds the application&#39;s state until a request is received, and a response is returned. You can use a context to retrieve a request object, set response headers, and create custom variables. It also holds Cloudflare bindings. For example, if you set up a Cloudflare KV namespace with the name <code>MY_KV</code>, you can access it as follows, with TypeScript type completion.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Hono } from &#039;hono&#039;\n\ntype Env = {\n  Bindings: {\n    MY_KV: KVNamespace\n  }\n}\n\nconst app = new Hono&lt;Env&gt;()\n\napp.post(&#039;/message&#039;, async (c) =&gt; {\n  const message = c.req.query(&#039;message&#039;) ?? &#039;Hi&#039;\n  await c.env.MY_KV.put(&#039;message&#039;, message)\n  return c.text(`message is set`, 201)\n})</pre></code>\n            <p>Hono lets you write code in a simple and intuitive way, but that doesn&#39;t mean there are limitations. You can do everything possible with Cloudflare Workers using Hono.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"add-it-when-you-want-to-use-it\">Add it when you want to use it</h2>\n            <a href=\"#add-it-when-you-want-to-use-it\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Hono is tiny. With the smallest preset, <code>hono/tiny</code>, you can write a &quot;Hello World&quot; application in just 12 KB. This is because it uses only the Web Standards API built into the runtime and has minimal functions. In comparison, the bundle size of Express is <a href=\"https://bundlephobia.com/package/express@4.21.0\"><u>579 KB</u></a>.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3Av7EyqZPKagcswI0xgwd1/713fccc1608b7eeb97d2e63b18765737/image1.png\" alt=\"\" class=\"kg-image\" width=\"1460\" height=\"210\" loading=\"lazy\"/>\n          </figure><p>However, there is much that you can do.</p><p>You can easily add functions using middleware. For example, it is a bit tedious to implement Basic Authentication from scratch, but with the built-in <a href=\"https://hono.dev/docs/middleware/builtin/basic-auth\"><u>Basic Auth middleware</u></a>, you can apply Basic Authentication to the path <code>/auth/page</code> with just this:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Hono } from &#039;hono&#039;\nimport { basicAuth } from &#039;hono/basic-auth&#039;\n\nconst app = new Hono()\n\napp.use(\n  &#039;/auth/*&#039;,\n  basicAuth({\n    username: &#039;hono&#039;,\n    password: &#039;acoolproject&#039;,\n  })\n)\n\napp.get(&#039;/auth/page&#039;, (c) =&gt; {\n  return c.text(&#039;You are authorized&#039;)\n})\n</pre></code>\n            <p>Hono&#39;s package also includes built-in middleware that allows Bearer and JWT authentication, and easy configuration of CORS, etc. These built-in middleware components do not depend on external libraries, but there is also many 3rd-party middleware that allow the use of external libraries, such as authentication middleware using <a href=\"https://clerk.com/\"><u>Clerk</u></a> and <a href=\"https://authjs.dev/\"><u>Auth.js</u></a>, and validators using <a href=\"https://zod.dev/\"><u>Zod</u></a> and <a href=\"https://valibot.dev/\"><u>Valibot</u></a>.</p><p>There are also a number of built-in helpers, including the <a href=\"https://hono.dev/docs/helpers/streaming\"><u>Streaming helper</u></a>, which is useful for implementing AI. These can be added when you want to use them, and the file size increases only when they are added.</p><p>In Cloudflare Workers, <a href=\"https://developers.cloudflare.com/workers/platform/limits/#account-plan-limits\"><u>there is a limit to a file size of a Worker</u></a>. Keeping the core small and extending functions with middleware and helpers makes a lot of sense.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"onion-structure\">Onion structure</h2>\n            <a href=\"#onion-structure\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>The important concepts of Hono are ”handler” and &quot;middleware”.</p><p>A handler is a place to write a function that receives a request and returns a response, as specified by the user. For example, you can write a handler that gets a value of a query parameter, retrieves data from a database, and returns the result in JSON. Middleware can handle the requests that come to the handler and the responses that the handler returns. You can combine middleware with other middleware to build more large and complex applications. It is structured like an onion.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6GniuL8WPyoXpvbULJbqDc/c8308c5eb6255ddaacda4b197ed424be/image2.png\" alt=\"\" class=\"kg-image\" width=\"780\" height=\"1200\" loading=\"lazy\"/>\n          </figure><p>In a remarkably simple way, you can create middleware. For example, a custom logger that logs the request can be written as follows:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">app.use(async (c, next) =&gt; {\n  console.log(`[${c.req.method}] ${c.req.path}`)\n  await next()\n})\n</pre></code>\n            <p>If you want to add a custom header to the response, write the following:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">app.use(async (c, next) =&gt; {\n  await next()\n  c.header(&#039;X-Message&#039;, &#039;Hi, this is Hono!&#039;)\n})\n</pre></code>\n            <p>It would be interesting to combine this with <a href=\"https://developers.cloudflare.com/workers/runtime-apis/html-rewriter/\"><u>HTMLRewriter</u></a>. If an endpoint returns HTML, the middleware that modifies the HTML tags in it can be written as follows:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">app.get(&#039;/pages/*&#039;, async (c, next) =&gt; {\n  await next()\n\n  class AttributeRewriter {\n    constructor(attributeName) {\n      this.attributeName = attributeName\n    }\n    element(element) {\n      const attribute = element.getAttribute(this.attributeName)\n      if (attribute) {\n        element.setAttribute(this.attributeName, attribute.replace(&#039;oldhost&#039;, &#039;newhost&#039;))\n      }\n    }\n  }\n  const rewriter = new HTMLRewriter().on(&#039;a&#039;, new AttributeRewriter(&#039;href&#039;))\n\n  const contentType = c.res.headers.get(&#039;Content-Type&#039;)\n\n  if (contentType!.startsWith(&#039;text/html&#039;)) {\n    c.res = rewriter.transform(c.res)\n  }\n})\n</pre></code>\n            <p>There is very little to remember to create middleware. All you have to do is to work with the context, which you should already know.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"the-rpc-is-like-magic\">The RPC is like magic</h2>\n            <a href=\"#the-rpc-is-like-magic\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Hono has a strong type system. One feature that uses this is RPC (Remote Procedure Call). With RPC, you can express server-side API specifications as TypeScript types. When these types are loaded as generics in a client, the paths, arguments, and return types of each API endpoint are inferred. It&#39;s like magic.</p><p>For example, imagine an endpoint for creating a blog post. This endpoint takes a <code>number</code> type <code>id</code> and a <code>string</code> type <code>title</code>. Using <a href=\"https://zod.dev/\"><u>Zod</u></a>, one of the validator libraries that support TypeScript inference, you can define the schema like this:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { z } from &#039;zod&#039;\n\nconst schema = z.object({\n  id: z.number(),\n  title: z.string()\n})\n</pre></code>\n            <p>You create a handler that receives this object in JSON format via a POST request to the path <code>/posts</code>. Using <a href=\"https://github.com/honojs/middleware/tree/main/packages/zod-validator\"><u>Zod Validator</u></a>, you check if it matches the schema. The response will have a property called message of type string.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { zValidator } from &#039;@hono/zod-validator&#039;\n\nconst app = new Hono().basePath(&#039;/v1&#039;)\n\n// ...\n\nconst routes = app.post(&#039;/posts&#039;, zValidator(&#039;json&#039;, schema), (c) =&gt; {\n  const data = c.req.valid(&#039;json&#039;)\n  return c.json({\n    message: `${data.id.toString()} is ${data.title}`\n  })\n})\n</pre></code>\n            <p>This is a “typical” Hono handler. However, the TypeScript type you can get from the <code>typeof</code> for the <code>routes</code> will contain the information about its Web API specification. In this case, it includes the endpoint for creating blog posts — sending a POST request to the path <code>/posts</code> returns a JSON object.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export type AppType = typeof routes</pre></code>\n            <p>Now, let&#39;s create a client. You pass the earlier <code>AppType</code> as generics to a Hono client object.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { hc } from &#039;hono/client&#039;\nimport { AppType } from &#039;.&#039;\n\nconst client = hc&lt;AppType&gt;(&#039;http://localhost:8787&#039;)</pre></code>\n            <p>With this setup, you&#39;re ready. It&#39;s magic time.</p><div style=\"position: relative; padding-top: 69.58762886597938%;\">\n  <iframe\n    src=\"https://customer-eq7kiuol0tk9chox.cloudflarestream.com/5a02ffd617b6543880f82d37e3a6e193/iframe?muted=true&preload=true&loop=true&autoplay=true&poster=https%3A%2F%2Fcustomer-eq7kiuol0tk9chox.cloudflarestream.com%2F5a02ffd617b6543880f82d37e3a6e193%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600\"\n    loading=\"lazy\"\n    style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\"\n    allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\"\n    allowfullscreen=\"true\"\n  ></iframe>\n</div><p>Code completion works perfectly. When you write client-side code, you no longer need to know the API specifications completely, which also helps eliminate mistakes.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"server-side-jsx-is-fun\">Server-side JSX is fun</h2>\n            <a href=\"#server-side-jsx-is-fun\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Hono provides built-in JSX, a syntax that allows you to write code in JavaScript that looks like HTML tags. When you hear the term JSX, you may think of React, a front-end UI library. However, Hono&#39;s JSX was initially developed to run only on the server side. When we first started developing Hono, we were looking for template engines to render HTML. Most template engines, such as <a href=\"https://handlebarsjs.com/\"><u>Handlebars</u></a> and <a href=\"https://ejs.co/\"><u>EJS</u></a>, use <code>eval</code> internally and are incompatible with Cloudflare Workers, which does not support it. Then we came up with the idea of using JSX.</p><p>Hono&#39;s JSX is unique in that it treats the tags as a string. So the following strange code actually works.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">console.log((&lt;h1&gt;Hello!&lt;/h1&gt;).toString())</pre></code>\n            <p>There is no need to do <code>renderToString()</code> as in React. If you want to render HTML, just return this as is.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">app.get(&#039;/&#039;, (c) =&gt; c.html(&lt;h1&gt;Hello&lt;/h1&gt;))</pre></code>\n            <p>Very interesting is the creation of <code>Suspense</code> — a feature in React that allows you to display a fallback UI while waiting for an asynchronous component to load — without any client implementation. The asynchronous components are running in a server-only implementation.</p><div style=\"position: relative; padding-top: 45.1505016722408%;\">\n  <iframe\n    src=\"https://customer-eq7kiuol0tk9chox.cloudflarestream.com/ed29b296092f9ada4999857456ba02d2/iframe?muted=true&preload=true&loop=true&autoplay=true&poster=https%3A%2F%2Fcustomer-eq7kiuol0tk9chox.cloudflarestream.com%2Fed29b296092f9ada4999857456ba02d2%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600\"\n    loading=\"lazy\"\n    style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\"\n    allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\"\n    allowfullscreen=\"true\"\n  ></iframe>\n</div><p></p><p>Server-side JSX is a better developer experience than you might imagine. You can use the toolchains for React&#39;s JSX in the same way for Hono&#39;s JSX, including the ability to complete tags in the editor. They bring mature front-end technology to the server side.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"testing-is-important\">Testing is important</h2>\n            <a href=\"#testing-is-important\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Testing is important. Fortunately, you can write tests easily when using Hono.</p><p>For example, let&#39;s write a test for an endpoint. To test for a 200 response status of a request coming to <code>/</code> with the GET method, you can write the following:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">it(&#039;should return 200 response&#039;, async () =&gt; {\n  const res = await app.request(&#039;/&#039;)\n  expect(res.status).toBe(200)\n})\n</pre></code>\n            <p>Simple, right? The beauty of this test is that you don&#39;t have to bring up the server. The Web Standard API black boxes the server layer. The internal tests of Hono have 20,000 lines of code, but most of them are written in the same style as above, without the server up and running. </p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"going-to-full-stack\">Going to full-stack</h2>\n            <a href=\"#going-to-full-stack\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>We released a new major <a href=\"https://github.com/honojs/hono/releases/tag/v4.0.0\"><u>version 4</u></a> in February 2024. There are three main features that stand out:</p><ol><li><p>Static site generation</p></li><li><p>Client components</p></li><li><p>File-based routing</p></li></ol><p>With these features, you can create full-stack applications with a user interface in Hono.</p><p>The introduction of client components allows JSX to work in the client. Now you can add interactions to your pages. Static site generation allows you to create blogs, etc. without having to bundle them into a single JavaScript file. We have also started an experimental project called <a href=\"https://github.com/honojs/honox\"><u>HonoX</u></a>. This is a meta-framework using Hono and Vite that provides file-based routing and a mechanism to hydrate client-side components to server-side generated HTML. It is easier to create larger applications that are a great match for Cloudflare Pages or Workers.</p><p>In addition to that, plans are underway to run it as a base server for existing full-stack frameworks such as <a href=\"https://remix.run/\"><u>Remix</u></a> and <a href=\"https://qwik.dev/\"><u>Qwik</u></a>.</p><p>In contrast to the <a href=\"https://nextjs.org/\"><u>Next.js</u></a> framework, which started from the client-side with React, Hono is trying to become a full-stack framework starting from the server-side.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"hono-conference\">Hono Conference</h2>\n            <a href=\"#hono-conference\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>On June 22, 2024, I held the <a href=\"https://blog.yusu.ke/hono-conference-2024/\"><u>&quot;Hono Conference&quot; in Tokyo</u></a>, the first event to consist entirely of Hono-focused talks. One hundred people attended, and the event was a great success.</p><p>It was my dream to do this event. Now, there are 200 contributors to the <a href=\"https://github.com/honojs/hono\"><code><u>honojs/hono</u></code></a> repository on GitHub. If you include other Hono related repositories, there are many more. Creating &quot;the most invincible framework we could think of&quot; is a lot of fun for contributors and users.</p><p>Below is a group photo taken at the end of the event. This is my treasure. I want to make the 2nd event a global event.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2EKltkDZeAvWzxVtnewOH6/995bceacd2ad37c59885e732e51bae87/image3.jpg\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"698\" loading=\"lazy\"/>\n          </figure>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"hono-is-yan\">Hono is 炎</h2>\n            <a href=\"#hono-is-yan\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>I haven&#39;t mentioned the origin of the name Hono yet. The name Hono is from the Japanese word for &quot;<i>炎</i>&quot;. It is similar to the word &quot;<i>flare</i>&quot;. Hono now runs on a variety of runtimes, but I said that it was first created to create Cloud&quot;<i>flare</i>&quot; Workers applications. It is an honor for Cloudflare that it has remained in its name.</p><p>That is all that the creator of Hono has to say about Hono.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"just-try-it\">Just try it</h2>\n            <a href=\"#just-try-it\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Everyone who has experienced application development with Hono and Cloudflare Workers says &quot;<i>the developer experience is a great experience</i>&quot;. If you haven&#39;t experienced it yet, just try it.</p><p>See <a href=\"https://hono.dev/\"><u>the Hono website</u></a> for how to get started. If you are interested in reporting issues or contributing, please see <a href=\"https://github.com/honojs\"><u>the GitHub project</u></a>. Plus, you can watch <a href=\"https://www.youtube.com/watch?v=yoqtk85HITM\"><u>my interview about Hono</u></a> on the YouTube <a href=\"https://www.youtube.com/@CloudflareDevelopers\"><u>Cloudflare Developers channel</u></a>.</p>",
		"id": "2P9zNPNEmMlhOCUA8XM37a",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Hono is a web framework that is fast, lightweight, and built using the Web Standards API. Hear the story of Hono by the creator of Hono.",
		"metadata": {
			"title": "The story of web framework Hono, from the creator of Hono",
			"description": "Hono is a web framework that is fast, lightweight, and built using the Web Standards API. Hear the story of Hono by the creator of Hono.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1z6nlef2mvmKpWjWyAQTZX/a1520de155c03ac6cb94e29cf14e31ab/The_story_of_web_framework_Hono__from_the_creator_of_Hono-OG.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2024-10-17T14:00+01:00",
		"slug": "the-story-of-web-framework-hono-from-the-creator-of-hono",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3kr4meEhp1NrKwm01XXeqk",
				"name": "Cloudflare Pages",
				"slug": "cloudflare-pages"
			}
		],
		"title": "The story of web framework Hono, from the creator of Hono",
		"updated_at": "2024-10-17T13:57:58.950Z",
		"url": "https://blog.cloudflare.com/the-story-of-web-framework-hono-from-the-creator-of-hono"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}