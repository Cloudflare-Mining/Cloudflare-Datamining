{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "In previous blog post we discussed how we use the TPROXY iptables module to power Cloudflare Spectrum. With TPROXY we solved a major technical issue on the server side, and we thought we might find another use for it on the client side of our product.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7xvVSKXCSW6aiPLS4IJYcR/b14a2b23dcd48c12ae4b010c13d132ae/mmproxy-creative-way-of-preserving-client-ips-in-spectrum.png",
		"featured": false,
		"html": "<p>In previous blog post we discussed <a href=\"/how-we-built-spectrum/\">how we use the <code>TPROXY</code> iptables module</a> to power <a href=\"https://www.cloudflare.com/products/cloudflare-spectrum/\">Cloudflare Spectrum</a>. With <code>TPROXY</code> we solved a major technical issue on the server side, and we thought we might find another use for it on the client side of our product.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/bo1gYWkQihp0vs8Nk10Xr/5fc224388fa52c30a2f25e982178b5d3/Address-machine-1_-ru-tech-enc-.png\" alt=\"Address-machine-1_-ru-tech-enc-\" class=\"kg-image\" width=\"1049\" height=\"648\" loading=\"lazy\"/>\n            \n            </figure><p>This is <a href=\"https://en.wikipedia.org/wiki/Addressograph\">Addressograph</a>. Source <a href=\"https://upload.wikimedia.org/wikipedia/commons/b/b0/Address-machine-1_%28ru-tech-enc%29.png\">Wikipedia</a></p><p>When building an application level proxy, the first consideration is always about retaining real client source IP addresses. Some protocols make it easy, e.g. HTTP has a defined <code>X-Forwarded-For</code> header<a href=\"#fn1\">[1]</a>, but there isn&#39;t a similar thing for generic TCP tunnels.</p><p>Others have faced this problem before us, and have devised three general solutions:</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"1-ignore-the-client-ip\">(1) Ignore the client IP</h4>\n      <a href=\"#1-ignore-the-client-ip\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6zazUmVWQqBmngOT2c0nro/bcb758fa95b1439b28c41ee2257b18e8/Screen-Shot-2018-04-15-at-12.26.16-PM.png\" alt=\"Screen-Shot-2018-04-15-at-12.26.16-PM\" class=\"kg-image\" width=\"1522\" height=\"456\" loading=\"lazy\"/>\n            \n            </figure><p>For certain applications it may be okay to ignore the real client IP address. For example, sometimes the client needs to identify itself with a username and password anyway, so the source IP doesn&#39;t really matter. In general, it&#39;s not a good practice because...</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"2-nonstandard-tcp-header\">(2) Nonstandard TCP header</h4>\n      <a href=\"#2-nonstandard-tcp-header\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>A second method was developed by Akamai: the client IP is saved inside a custom option in the TCP header in the SYN packet. Early implementations of this method weren&#39;t conforming to any standards, e.g. using <a href=\"https://support.radware.com/app/answers/answer_view/a_id/16143/~/client-ip-visibility-from-akamai-servers-appshape%2B%2B-script-sample\">option field 28</a>, but recently <a href=\"https://tools.ietf.org/html/rfc7974\">RFC7974</a> was ratified for this option. We don&#39;t support this method for a number of reasons:</p><ul><li><p>The space in TCP headers is very limited. It&#39;s insufficient to store the full 128 bits of client IPv6 addresses, especially with 15%+ of Cloudflareâ€™s traffic being IPv6.</p></li><li><p>No software or hardware supports the RFC7974 yet.</p></li><li><p>It&#39;s surprisingly hard to add support for RFC7947 in real world applications. One option is to patch the operating system and overwrite <code>getpeername(2)</code> and <code>accept4(2)</code> syscalls, another is to use <code>getsockopt(TCP_SAVED_SYN)</code> to extract the client IP from a SYN packet in the userspace application. Neither technique is simple.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"3-use-the-proxy-protocol\">(3) Use the PROXY protocol</h4>\n      <a href=\"#3-use-the-proxy-protocol\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1o8aOHx1OoHCBYvExEoE7S/e81802cb18ce686ad50071d3cc4a1de0/Screen-Shot-2018-04-15-at-12.26.04-PM.png\" alt=\"Screen-Shot-2018-04-15-at-12.26.04-PM\" class=\"kg-image\" width=\"1524\" height=\"462\" loading=\"lazy\"/>\n            \n            </figure><p>Finally, there is the last method. HAProxy developers, faced with this problem developed <a href=\"http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\">the &quot;PROXY protocol&quot;</a>. The premise of this protocol is to prepend client metadata in front of the original data stream. For example, this string could be sent to the origin server in front of proxied data:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">PROXY TCP4 192.0.2.123 104.16.112.25 19235 80\\r\\n</pre></code>\n            <p>As you can see, the PROXY protocol is rather trivial to implement, and is generally sufficient for most use cases. However, it requires application support. The PROXY protocol (v1) is supported by Cloudflare Spectrum, and we highly encourage using it over other methods of keeping client source IP addresses.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"mmproxy-to-the-rescue\">Mmproxy to the rescue</h3>\n      <a href=\"#mmproxy-to-the-rescue\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>But sometimes adding PROXY protocol support to the application isn&#39;t an option. This can be the case when the application isnâ€™t open source, or when it&#39;s hard to edit. A good example is &quot;sshd&quot; - it doesn&#39;t support PROXY protocol and adding the support would be far from trivial. For such applications it may just be impossible to use any application level load balancer whatsoever. This is very unfortunate.</p><p>Fortunately we think we found a workaround.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/24geDq3Y5M6aq37IdIW5oA/aa1c73aeaf35267720d2b395763730c8/Screen-Shot-2018-04-15-at-12.26.28-PM-1.png\" alt=\"Screen-Shot-2018-04-15-at-12.26.28-PM-1\" class=\"kg-image\" width=\"1526\" height=\"608\" loading=\"lazy\"/>\n            \n            </figure><p>Allow me to present <code>mmproxy</code>, a PROXY protocol gateway. <code>mmproxy</code> listens for remote connections coming from an application level load balancer, like Spectrum. It then reads a PROXY protocol header, opens a localhost connection to the target application, and duly proxies data in and out.</p><p>Such a proxy wouldn&#39;t be too useful if not for one featureâ€”the localhost connection from <code>mmproxy</code> to the target application is sent with a real client source IP.</p><p>That&#39;s right, <code>mmproxy</code> spoofs the client IP address. From the applicationâ€™s point of view, this spoofed connection, coming through Spectrum and <code>mmproxy</code>, is indistinguishable from a real one, connecting directly to the application.</p><p>This technique requires some Linux routing trickery. The <code>mmproxy</code> daemon will walk you through the necessary details, but there are the important bits:</p><ul><li><p><code>mmproxy</code> works only on Linux.</p></li><li><p>Since it forwards traffic over the loopback interface, it must be run on the same machine as the target application.</p></li><li><p>It requires kernel 2.6.28 or newer.</p></li><li><p>It guides the user to add four <code>iptables</code> firewall rules, and four <code>iproute2</code> routing rules, covering both IPv4 and IPv6.</p></li><li><p>For IPv4, <code>mmproxy</code> requires the <code>route_localnet</code> sysctl to be set.</p></li><li><p>For IPv6, it needs a working IPv6 configuration. A working <code>ping6 cloudflare.com</code> is a prerequisite.</p></li><li><p><code>mmproxy</code> needs root or <code>CAP_NET_RAW</code> permissions to set the <code>IP_TRANSPARENT</code> socket option. Once started, it jails itself with <code>seccomp-bpf</code> for a bit of added security.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-to-run-mmproxy\">How to run mmproxy</h3>\n      <a href=\"#how-to-run-mmproxy\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To run <code>mmproxy</code>, first download the <a href=\"https://github.com/cloudflare/mmproxy\">source</a> and compile it:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">git clone https://github.com/cloudflare/mmproxy.git --recursive\ncd mmproxy\nmake</pre></code>\n            <p><a href=\"https://github.com/cloudflare/mmproxy/issues\">Please report any issues on GitHub</a>.</p><p>Then set up the needed configuration:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sudo iptables -t mangle -I PREROUTING -m mark --mark 123 -j CONNMARK --save-mark\nsudo iptables -t mangle -I OUTPUT -m connmark --mark 123 -j CONNMARK --restore-mark\nsudo ip rule add fwmark 123 lookup 100\nsudo ip route add local 0.0.0.0/0 dev lo table 100\nsudo ip6tables -t mangle -I PREROUTING -m mark --mark 123 -j CONNMARK --save-mark\nsudo ip6tables -t mangle -I OUTPUT -m connmark --mark 123 -j CONNMARK --restore-mark\nsudo ip -6 rule add fwmark 123 lookup 100\nsudo ip -6 route add local ::/0 dev lo table 100</pre></code>\n            <p>You will also need <code>route_localnet</code> to be set on your default outbound interface, for example for <code>eth0</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">echo 1 | sudo tee /proc/sys/net/ipv4/conf/eth0/route_localnet</pre></code>\n            <p>Finally, verify your IPv6 connectivity:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ping6 cloudflare.com\nPING cloudflare.com(2400:cb00:2048:1::c629:d6a2) 56 data bytes\n64 bytes from 2400:cb00:2048:1::c629:d6a2: icmp_seq=1 ttl=61 time=0.650 ms</pre></code>\n            <p>Now, you are ready to run <code>mmproxy</code>. For example, forwarding localhost SSH would look like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo ./mmproxy --allowed-subnets ./cloudflare-ip-ranges.txt \\\n      -l 0.0.0.0:2222 \\\n      -4 127.0.0.1:22 -6 &#039;[::1]:22&#039;\nroot@ubuntu:~# ./mmproxy -a cloudflare-ip-ranges.txt -l 0.0.0.0:2222 -4 127.0.0.1:22 -6 [::1]:22[ ] Remember to set the reverse routing rules correctly:\niptables -t mangle -I PREROUTING -m mark --mark 123 -m comment --comment mmproxy -j CONNMARK --save-mark        # [+] VERIFIED\niptables -t mangle -I OUTPUT -m connmark --mark 123 -m comment --comment mmproxy -j CONNMARK --restore-mark     # [+] VERIFIED\nip6tables -t mangle -I PREROUTING -m mark --mark 123 -m comment --comment mmproxy -j CONNMARK --save-mark       # [+] VERIFIED\nip6tables -t mangle -I OUTPUT -m connmark --mark 123 -m comment --comment mmproxy -j CONNMARK --restore-mark    # [+] VERIFIED\nip rule add fwmark 123 lookup 100               # [+] VERIFIED\nip route add local 0.0.0.0/0 dev lo table 100   # [+] VERIFIED\nip -6 rule add fwmark 123 lookup 100            # [+] VERIFIED\nip -6 route add local ::/0 dev lo table 100     # [+] VERIFIED\n[+] OK. Routing to 127.0.0.1 points to a local machine.\n[+] OK. Target server 127.0.0.1:22 is up and reachable using conventional connection.\n[+] OK. Target server 127.0.0.1:22 is up and reachable using spoofed connection.\n[+] OK. Routing to ::1 points to a local machine.\n[+] OK. Target server [::1]:22 is up and reachable using conventional connection.\n[+] OK. Target server [::1]:22 is up and reachable using spoofed connection.\n[+] Listening on 0.0.0.0:2222</pre></code>\n            <p>On startup, <code>mmproxy</code> performs a number of self checks. Since we prepared the necessary routing and firewall rules, its self check passes with a &quot;VERIFIED&quot; mark. It&#39;s important to confirm these pass.</p><p>We&#39;re almost ready to go! The last step is to create a Spectrum application that sends PROXY protocol traffic to <code>mmproxy</code>, port 2222. Here is an example configuration<a href=\"#fn2\">[2]</a>:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6dCc5n5QPZDEHlGMDd5jL2/a2c48e81f2519be09ce8a8ad379b23f9/Screen-Shot-2018-04-15-at-4.06.17-PM.png\" alt=\"Screen-Shot-2018-04-15-at-4.06.17-PM\" class=\"kg-image\" width=\"2598\" height=\"1450\" loading=\"lazy\"/>\n            \n            </figure><p>With Spectrum we are forwarding TCP/22 on domain &quot;ssh.example.org&quot;, to our origin at 192.0.2.1, port 2222. Weâ€™ve enabled the PROXY protocol toggle.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"mmproxy-in-action\">mmproxy in action</h3>\n      <a href=\"#mmproxy-in-action\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Now we can see if it works. My testing VPS has IP address 79.1.2.3. Let&#39;s see if the whole setup behaves:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">vps$ nc ssh.example.org 22\nSSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.1</pre></code>\n            <p>Hurray, this worked! The &quot;ssh.example.org&quot; on port 22 is indeed tunneled over Spectrum. Let&#39;s see <code>mmproxy</code> logs:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">[+] 172.68.136.1:32654 connected, proxy protocol source 79.1.2.3:0,\n        local destination 127.0.0.1:22</pre></code>\n            <p>The log confirmed what happened - Cloudflare IP 172.68.136.1 has connected, advertised client IP 79.1.2.3 over the PROXY protocol, and established a spoofed connection to 127.0.0.1:22. The ssh daemon logs show:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ tail /var/log/auth.log\nApr 15 14:39:09 ubuntu sshd[7703]: Did not receive identification\n        string from 79.1.2.3</pre></code>\n            <p>Hurray! All works! sshd recorded the real client IP address, and with <code>mmproxy</code>â€™s help we never saw that it&#39;s actually traffic flowing through Cloudflare Spectrum.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"under-the-hood\">Under the hood</h3>\n      <a href=\"#under-the-hood\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Under the hood <code>mmproxy</code> relies on two hacks.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/55C3wnXIZ6x95nvIFJZZcu/c7bfeb61122486e53231927cfa464e44/Screen-Shot-2018-04-15-at-12.26.44-PM-1.png\" alt=\"Screen-Shot-2018-04-15-at-12.26.44-PM-1\" class=\"kg-image\" width=\"1530\" height=\"606\" loading=\"lazy\"/>\n            \n            </figure><p>The first hack is about setting source IP on outgoing connections. We are using the well known <a href=\"https://idea.popcount.org/2014-04-03-bind-before-connect/\">bind-before-connect</a> technique to do this.</p><p>Normally, it&#39;s only possible to set a valid source IP that is actually handled by a local machine. We can override this by using the <code>IP_TRANSPARENT</code> socket option. With it set, we can select arbitrary source IP addresses before establishing a legitimate connection handled by kernel. For example, we can have a localhost socket between, say 8.8.8.8 and 127.0.0.1, even though 8.8.8.8 may not be explicitly assigned to our server.</p><p>It&#39;s worth saying that <code>IP_TRANSPARENT</code> was not created for this use case. This socket option was specifically added as support <a href=\"/how-we-built-spectrum/\">for TPROXY module</a>.</p><p>The second hack is about routing. Normally, response packets coming from the application are routed to the Internet - via a default gateway. We must prevent that from happening, and instead direct these packets towards the loopback interface. To achieve this, we rely on <code>CONNMARK</code> and an additional routing table selected by <code>fwmark</code>. <code>mmproxy</code> sets a MARK value of 123 (by default) on packets it sends, which is preserved at the <code>CONNMARK</code> layer, and restored for the return packets. Then we route the packets with MARK == 123 to a specific routing table (number 100 by default), which force-routes everything back to the loopback interface. We do this by totally <a href=\"/how-we-built-spectrum/\">abusing the AnyIP trick</a> and assigning 0.0.0.0/0 to &quot;local&quot; - meaning that entire internet shall be treated as belonging to our machine.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"summary\">Summary</h3>\n      <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><code>mmproxy</code> is not the only tool that uses this IP spoofing technique to preserve real client IP addresses. One example is <a href=\"https://man.openbsd.org/relayd.conf.5\">OpenBSD&#39;s <code>relayd</code></a> &quot;transparent&quot; mode. Another is the <a href=\"https://github.com/UlricE/pen/wiki/Transparent-Reverse-Proxy\"><code>pen</code> load balancer</a>. Compared to <code>mmproxy</code>, these tools look heavyweight and require more complex routing.</p><p><code>mmproxy</code> is the first daemon to do just one thing: unwrap the PROXY protocol and spoof the client IP address on locally running connections going to the application process. While it requires some firewall and routing setup, it&#39;s small enough to make an <code>mmproxy</code> deployment acceptable in many situations.</p><p>We hope that <code>mmproxy</code>, while a gigantic hack, could help some of our customers with onboarding onto Cloudflare Spectrum.</p><p>However, frankly speaking - we don&#39;t know. <code><i>mmproxy</i></code><i> should be treated as a great experiment</i>. If you find it useful, let us know! If you find a problem, <a href=\"https://github.com/cloudflare/mmproxy/issues\">please report it</a>!We are looking for feedback. If our users will find the <code>mmproxy</code> approach useful, we will repackage it and release as an easier to use tool.</p><hr/><p><i>Doing low level socket work sound interesting? Join our </i><a href=\"https://boards.greenhouse.io/cloudflare/jobs/589572\"><i>world famous team</i></a><i> in London, Austin, San Francisco, Champaign and our elite office in Warsaw, Poland</i>.</p><hr/><ol><li><p>In addition to supporting standard <code>X-Forwarded-For</code> HTTP header, Cloudflare supports custom a <code>CF-Connecting-IP</code> header. <a href=\"#fnref1\">â†©ï¸Ž</a></p></li><li><p>Spectrum is available for Enterprise plan domains and can be enabled by your account manager. <a href=\"#fnref2\">â†©ï¸Ž</a></p></li></ol>",
		"id": "2t7J0btuLV7WMxngCOuKEP",
		"localeList": {
			"name": "mmproxy - Creative Linux routing to preserve client IP addresses in L7 proxies Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-04-17T23:11:00.000+01:00",
		"slug": "mmproxy-creative-way-of-preserving-client-ips-in-spectrum",
		"tags": [
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "ddJrV1bYzbMmaXkRKrp3G",
				"name": "Tech Talks",
				"slug": "tech-talks"
			},
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			},
			{
				"id": "7GsUXAEWttzfewhzSJXA6W",
				"name": "Spectrum",
				"slug": "spectrum"
			},
			{
				"id": "6QktrXeEFcl4e2dZUTZVGl",
				"name": "Product News",
				"slug": "product-news"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "2UVIYusJwlvsmPYl2AvSuR",
				"name": "Deep Dive",
				"slug": "deep-dive"
			}
		],
		"title": "mmproxy - Creative Linux routing to preserve client IP addresses in L7 proxies",
		"updated_at": "2024-10-10T00:33:31.170Z",
		"url": "https://blog.cloudflare.com/mmproxy-creative-way-of-preserving-client-ips-in-spectrum"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}