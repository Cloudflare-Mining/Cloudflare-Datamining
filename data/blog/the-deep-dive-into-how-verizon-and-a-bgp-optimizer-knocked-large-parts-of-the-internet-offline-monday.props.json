{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Martin J Levy",
				"slug": "martin-levy",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1WFEW1m2I5kRmXiq1bAGLv/774064de437ea4b0dbc039edff201f86/martin-levy.jpeg",
				"location": null,
				"website": null,
				"twitter": "@mahtin",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "On Monday we wrote about a painful Internet wide route leak. We wrote that this should never have happened because Verizon should never have forwarded those routes to the rest of the Internet. Today we will dive into the archived routing data and analyze it.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2zAphdeHNCvCgl7b0j8TsK/ccd12199410a7a70c0fe627aec8ed2e6/the-deep-dive-into-how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-monday.png",
		"featured": false,
		"html": "\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-recap-on-what-happened-monday\">A recap on what happened Monday</h3>\n      <a href=\"#a-recap-on-what-happened-monday\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>On Monday we <a href=\"/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/\">wrote</a> about a painful Internet wide route leak. We wrote that this should never have happened because Verizon should never have forwarded those routes to the rest of the Internet. That blog entry came out around 19:58 UTC, just over seven hours after the route leak finished (which will we see below was around 12:39 UTC). Today we will dive into the archived routing data and analyze it. The format of the code below is meant to use simple shell commands so that any reader can follow along and, more importantly, do their own investigations on the routing tables.</p><p>This was a very public BGP route leak event. It was both reported online via many news outlets and the event’s BGP data was reported via social media as it was happening. Andree Toonk tweeted a quick list of 2,400 ASNs that were affected.</p><blockquote><p>Quick dumps through the data, showing about 2400 ASns (networks) affected. Cloudflare being hit the hardest. Top 20 of affected ASns below <a href=\"https://t.co/9J7uvyasw2\">pic.twitter.com/9J7uvyasw2</a></p><p>— Andree Toonk (@atoonk) <a href=\"https://twitter.com/atoonk/status/1143143943531454464?ref_src=twsrc%5Etfw\">June 24, 2019</a></p></blockquote><p>This blog contains a large number of acronyms and those are explained at the end of the blog.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-ripe-ncc-archived-data\">Using RIPE NCC archived data</h3>\n      <a href=\"#using-ripe-ncc-archived-data\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The RIPE NCC operates a very useful archive of BGP routing. It runs collectors globally and provides an API for querying the data. More can be seen at <a href=\"https://stat.ripe.net/\">https://stat.ripe.net/</a>. In the world of BGP all routing is public (within the ability of anyone collecting data to have enough collections points). The archived data is very valuable for research and that’s what we will do in this blog. The site can create some very useful data visualizations.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7GNF7gEDv0Q7yA6eYomf00/ab625e1fc607841d1c4579030199d083/396531-bgplay-3.png\" alt=\"\" class=\"kg-image\" width=\"1386\" height=\"1043\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"dumping-the-ripestat-data-for-this-event\">Dumping the RIPEstat data for this event</h3>\n      <a href=\"#dumping-the-ripestat-data-for-this-event\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Presently, the RIPEstat data gets ingested around eight to twelve hours after real-time. It’s not meant to be a real-time service. The data can be queried in many ways, including a full web interface and an API. We are using the API to extract the data in a JSON format.</p><p>We are going to focus only on the Cloudflare routes that were leaked. Many other ASNs were leaked (see the tweet above); however, we want to deal with a finite data set and focus on what happened to Cloudflare’s routing. All the commands below can be run with ease on many systems. Both the scripts and the raw data file are now available on <a href=\"https://github.com/cloudflare/the-deep-dive-into-how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-monda\">GitHub</a>. The following was done on MacBook Pro running macOS Mojave.</p><p>First we collect 24 hours of route announcements and AS-PATH data that RIPEstat sees coming from AS13335 (Cloudflare).</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ # Collect 24 hours of data - more than enough\n$ ASN=&quot;AS13335&quot;\n$ START=&quot;2019-06-24T00:00:00&quot;\n$ END=&quot;2019-06-25T00:00:00&quot;\n$ ARGS=&quot;resource=${ASN}&amp;starttime=${START}&amp;endtime=${END}&quot;\n$ URL=&quot;https://stat.ripe.net/data/bgp-updates/data.json?${ARGS}&quot;\n$ # Fetch the data from RIPEstat\n$ curl -sS &quot;${URL}&quot; | jq . &gt; 13335-routes.json\n$ ls -l 13335-routes.json\n-rw-r--r--  1 martin  staff  339363899 Jun 25 08:47 13335-routes.json\n$</pre></code>\n            <p>That’s 340MB of data - which seems like a lot, but it contains plenty of white space and plenty of data we just don’t need. Our second task is to reduce this raw data down to just the required data - that’s timestamps, actual routes, and AS-PATH. The third item will be very useful. Note we are using <a href=\"https://stedolan.github.io/jq/\">jq</a>, which can be installed on macOS with the  <a href=\"https://brew.sh/\">brew package manager</a>.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ # Extract just the times, routes, and AS-PATH\n$ jq -rc &#039;.data.updates[]|.timestamp,.attrs.target_prefix,.attrs.path&#039; &lt; 13335-routes.json | paste - - - &gt; 13335-listing-a.txt\n$ wc -l 13335-listing-a.txt\n691318 13335-listing-a.txt\n$</pre></code>\n            <p>We are down to just below seven hundred thousand routing events, however, that’s not a leak, that’s everything that includes Cloudflare’s ASN (the number 13335 above). For that we need to go back to Monday’s blog and realize it was AS396531 (Allegheny Technologies) that showed up with 701 (Verizon) in the leak. Now we reduce the data further:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ # Extract the route leak 701,396531\n$ # AS701 is Verizon and AS396531 is Allegheny Technologies\n$ egrep &#039;701,396531&#039; &lt; 13335-listing-a.txt &gt; 13335-listing-b.txt\n$ wc -l 13335-listing-b.txt\n204568 13335-listing-b.txt\n$</pre></code>\n            <p>At 204 thousand data points, we are looking better. It’s still a lot of data because BGP can be very chatty if topology is changing. A route leak will cause exactly that. Now let’s see how many routes were affected:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ # Extract the actual routes affected by the route leak\n$ cut -f2 &lt; 13335-listing-b.txt | sort -V -u &gt; 13335-listing-c.txt\n$ wc -l 13335-listing-c.txt\n101 13335-listing-c.txt\n$</pre></code>\n            <p>It’s a much smaller number. We now have a listing of at least 101 routes that were leaked via Verizon. This may not be the full list because route collectors like RIPEstat don’t have direct feeds from Verizon, so this data is a blended view with Verizon’s path and other paths. We can see that if we look at the AS-PATH in the above files. Please note that I had a typo in this script when this blog was first published and only 20 routes showed up because the -n vs -V option was used on sort. Now the list is correct with 101 affected routes. Please see this short article from <a href=\"https://stackoverflow.com/questions/42526860/bash-sort-nu-results-in-unexpected-behaviour\">stackoverflow</a> to see the issue.</p><p>Here’s a partial listing of affected routes.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cat 13335-listing-c.txt\n8.39.214.0/24\n8.42.245.0/24\n8.44.58.0/24\n...\n104.16.80.0/21\n104.17.168.0/21\n104.18.32.0/21\n104.19.168.0/21\n104.20.64.0/21\n104.22.8.0/21\n104.23.128.0/21\n104.24.112.0/21\n104.25.144.0/21\n104.26.0.0/21\n104.27.160.0/21\n104.28.16.0/21\n104.31.0.0/21\n141.101.120.0/23\n162.159.224.0/21\n172.68.60.0/22\n172.69.116.0/22\n...\n$</pre></code>\n            <p>This is an interesting list, as some of these routes do not originate from Cloudflare’s network, however, they show up with AS13335 (our ASN) as the originator. For example, the 104.26.0.0/21 route is not announced from our network, but we do announce 104.26.0.0/20 (which covers that route). More importantly, we have an IRR (Internet Routing Registries) route object plus an RPKI ROA for that block. Here’s the IRR object:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">route:          104.26.0.0/20\norigin:         AS13335\nsource:         ARIN</pre></code>\n            <p>And here’s the RPKI ROA. This ROA has Max Length set to 20, so no smaller route should be accepted.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">Prefix:       104.26.0.0/20\nMax Length:   /20\nASN:          13335\nTrust Anchor: ARIN\nValidity:     Thu, 02 Aug 2018 04:00:00 GMT - Sat, 31 Jul 2027 04:00:00 GMT\nEmitted:      Thu, 02 Aug 2018 21:45:37 GMT\nName:         535ad55d-dd30-40f9-8434-c17fc413aa99\nKey:          4a75b5de16143adbeaa987d6d91e0519106d086e\nParent Key:   a6e7a6b44019cf4e388766d940677599d0c492dc\nPath:         rsync://rpki.arin.net/repository/arin-rpki-ta/5e4a23ea-...</pre></code>\n            <p>The Max Length field in an ROA says what the minimum size of an acceptable announcement is. The fact that this is a /20 route with a /20 Max Length says that a /21 (or /22 or /23 or /24) within this IP space isn’t allowed. Looking further at the route list above we get the following listing:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">Route Seen            Cloudflare IRR &amp; ROA    ROA Max Length\n104.16.80.0/21    -&gt;  104.16.80.0/20          /20\n104.17.168.0/21   -&gt;  104.17.160.0/20         /20\n104.18.32.0/21    -&gt;  104.18.32.0/20          /20\n104.19.168.0/21   -&gt;  104.19.160.0/20         /20\n104.20.64.0/21    -&gt;  104.20.64.0/20          /20\n104.22.8.0/21     -&gt;  104.22.0.0/20           /20\n104.23.128.0/21   -&gt;  104.23.128.0/20         /20\n104.24.112.0/21   -&gt;  104.24.112.0/20         /20\n104.25.144.0/21   -&gt;  104.25.144.0/20         /20\n104.26.0.0/21     -&gt;  104.26.0.0/20           /20\n104.27.160.0/21   -&gt;  104.27.160.0/20         /20\n104.28.16.0/21    -&gt;  104.28.16.0/20          /20\n104.31.0.0/21     -&gt;  104.31.0.0/20           /20</pre></code>\n            <p>So how did all these /21’s show up? That’s where we dive into the world of BGP route optimization systems and their propensity to synthesize routes that should not exist. If those routes leak (and it’s very clear after this week that they can), all hell breaks loose. That can be compounded when not one, but two ISPs allow invalid routes to be propagated outside their autonomous network. We will explore the AS-PATH further down this blog.</p><p>More than 20 years ago, <a href=\"https://tools.ietf.org/html/rfc1997\">RFC1997</a> added the concept of <i>communities</i> to BGP. Communities are a way of tagging or grouping route advertisements. Communities are often used to label routes so that specific handling policies can be applied. RFC1997 includes a small number of universal <i>well-known communities</i>. One of these is the NO_EXPORT community, which has the following specification:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">    All routes received carrying a communities attribute\n    containing this value MUST NOT be advertised outside a BGP\n    confederation boundary (a stand-alone autonomous system that\n    is not part of a confederation should be considered a\n    confederation itself).</pre></code>\n            <p>The use of the NO_EXPORT community is very common within BGP enabled networks and is a community tag that would have helped alleviate this route leak immensely.</p><p>How BGP route optimization systems work (or don’t work in this case) can be a subject for a whole other blog entry.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"timing-of-the-route-leak\">Timing of the route leak</h3>\n      <a href=\"#timing-of-the-route-leak\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As we saved away the timestamps in the JSON file and in the text files, we can confirm the time for every route in the route leak by looking at the first and the last timestamp of a route in the data. We saved data from 00:00:00 UTC until 00:00:00 the next day, so we know we have covered the period of the route leak. We write a script that checks the first and last entry for every route and report the information sorted by start time:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ # Extract the timing of the route leak\n$ while read cidr\ndo\n  echo $cidr\n  fgrep $cidr &lt; 13335-listing-b.txt | head -1 | cut -f1\n  fgrep $cidr &lt; 13335-listing-b.txt | tail -1 | cut -f1\ndone &lt; 13335-listing-c.txt |\\\npaste - - - | sort -k2,3 | column -t | sed -e &#039;s/2019-06-24T//g&#039;\n...\n104.25.144.0/21   10:34:25  12:38:54\n104.22.8.0/21     10:34:27  12:29:39\n104.20.64.0/21    10:34:27  12:30:00\n104.23.128.0/21   10:34:27  12:30:34\n141.101.120.0/23  10:34:27  12:30:39\n162.159.224.0/21  10:34:27  12:30:39\n104.18.32.0/21    10:34:29  12:30:34\n104.24.112.0/21   10:34:29  12:30:34\n104.27.160.0/21   10:34:29  12:30:34\n104.28.16.0/21    10:34:29  12:30:34\n104.31.0.0/21     10:34:29  12:30:34\n8.39.214.0/24     10:34:31  12:19:24\n104.26.0.0/21     10:34:36  12:29:53\n172.68.60.0/22    10:34:38  12:19:24\n172.69.116.0/22   10:34:38  12:19:24\n8.44.58.0/24      10:34:38  12:19:24\n8.42.245.0/24     11:52:49  11:53:19\n104.17.168.0/21   12:00:13  12:29:34\n104.16.80.0/21    12:00:13  12:30:00\n104.19.168.0/21   12:09:39  12:29:34\n...\n$</pre></code>\n            <p>Now we know the times. The route leak started at 10:34:25 UTC (just before lunchtime London time) on 2019-06-24 and ended at 12:38:54 UTC. That’s a hair over two hours. Here’s that same time data in a graphical form showing the near-instant start of the event and the duration of each route leaked:</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2mbErnzz2kF06AyBXG5cOH/9dea0b05a69f217477af11332e15c8d5/cloudflare-via-verizon-leak-timing-1.png\" alt=\"\" class=\"kg-image\" width=\"2684\" height=\"1224\" loading=\"lazy\"/>\n            \n            </figure><p>We can also go back to RIPEstat and look at the activity graph for Cloudflare’s AS13335 network:</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/18U3ID2tpK3ThuEKMvAgcF/3f26bc9f080c7a1be0c509e91bffdd02/cloudflare-route-activity.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"771\" loading=\"lazy\"/>\n            \n            </figure><p>Clearly between 10:30 UTC and 12:40 UTC there’s a lot of route activity - far more than normal.</p><p>Note that as we mentioned above, RIPEstat doesn’t get a full view of Verizon’s network routing and hence some of the propagated routes won’t show up.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"drilling-down-on-the-as-path-part-of-the-data\">Drilling down on the AS-PATH part of the data</h3>\n      <a href=\"#drilling-down-on-the-as-path-part-of-the-data\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Having the routes is useful, but now we want to look at the paths of these leaked routes to see which ASNs are involved. We knew the offending ASNs during the route leak on Monday. Now we want to dig deeper using the archived data. This allows us to see the extent and reach of this route leak.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ # Extract the AS-PATH of the route leak\n$ # Use the list of routes to extract the full AS-PATH\n$ # Merge the results together to show an amalgamation of paths.\n$ # We know (luckily) the last few ASNs in the AS-PATH are consistent\n$ cut -f3 &lt; 13335-listing-b.txt | tr -d &#039;[\\[\\]]&#039; |\\\nawk &#039;{\n  n=split($0, a, &quot;,&quot;);\n  printf &quot;%50s\\n&quot;,\n    a[n-5] &quot;_&quot; a[n-4] &quot;_&quot; a[n-3] &quot;_&quot; a[n-2] &quot;_&quot; a[n-1] &quot;_&quot; a[n];\n}&#039; | sort -u\n   174_701_396531_33154_3356_13335\n   2497_701_396531_33154_174_13335\n   577_701_396531_33154_3356_13335\n   6939_701_396531_33154_174_13335\n  1239_701_396531_33154_3356_13335\n  1273_701_396531_33154_3356_13335\n  1280_701_396531_33154_3356_13335\n  2497_701_396531_33154_3356_13335\n  2516_701_396531_33154_3356_13335\n  3320_701_396531_33154_3356_13335\n  3491_701_396531_33154_3356_13335\n  4134_701_396531_33154_3356_13335\n  4637_701_396531_33154_3356_13335\n  6453_701_396531_33154_3356_13335\n  6461_701_396531_33154_3356_13335\n  6762_701_396531_33154_3356_13335\n  6830_701_396531_33154_3356_13335\n  6939_701_396531_33154_3356_13335\n  7738_701_396531_33154_3356_13335\n 12956_701_396531_33154_3356_13335\n 17639_701_396531_33154_3356_13335\n 23148_701_396531_33154_3356_13335\n$</pre></code>\n            <p>This script clearly shows the AS-PATH of the leaked routes. It’s very consistent. Reading from the back of the line to the front, we have 13335 (Cloudflare), 3356 or 174 (Level3/CenturyLink or Cogent - both tier 1 transit providers for Cloudflare). So far, so good. Then we have 33154 (DQE Communications) and 396531 (Allegheny Technologies Inc) which is still technically not a leak, but trending that way. The reason why we can state this is still technically not a leak is because we don’t know the relationship between those two ASs. It’s possible they have a mutual transit agreement between them. That’s up to them.</p><p>Back to the AS-PATH’s. Still reading leftwards, we see 701 (Verizon), which is very very bad and clear evidence of a leak. It’s a leak for two reasons. First, this matches the path when a transit is leaking a non-customer route from a customer. This Verizon customer does not have 13335 (Cloudflare) listed as a customer. Second, the route contains within its path a tier 1 ASN. This is the point where a route leak should have been absolutely squashed by filtering on the customer BGP session. Beyond this point there be dragons.</p><p>And dragons there be! Everything above is about how Verizon filtered (or didn’t filter) its customer. What follows the 701 (i.e the number to the left of it) is the peers or customers of Verizon that have accepted these leaked routes. They are mainly other tier 1 networks of Verizon in this list: 174 (Cogent), 1239 (Sprint), 1273 (Vodafone), 3320 (DTAG), 3491 (PCCW), 6461 (Zayo), 6762 (Telecom Italia), etc.</p><p>What’s missing from that list are three networks worthy of mentioning - 1299 (Telia), 2914 (NTT), and 7018 (AT&amp;T). All three implement a very simple AS-PATH filter which saved the day for their network. They do not allow one tier 1 ISP to send them a route which has another tier 1 further down the path. That’s because when that happens, it’s officially a leak as each tier 1 is fully connected to all other tier 1’s (which is part of the definition of a tier 1 network). The topology of the Internet’s global BGP routing tables simply states that if you see another tier 1 in the path, then it’s a bad route and it should be filtered away.</p><p>Additionally we know that 7018 (AT&amp;T) operates a network which drops RPKI invalids. Because Cloudflare routes are <a href=\"/rpki-details/\">RPKI signed</a>, this also means that AT&amp;T would have dropped these routes when it receives them from Verizon. This shows a clear win for RPKI (and for AT&amp;T when you see their bandwidth graph below)!</p><blockquote><p>BREAKING - AT&amp;T / AS 7018 is now rejecting RPKI Invalid BGP announcements they receive from their peering partners. This is big news for routing security! If AT&amp;T can do it - you can do it! :-) <a href=\"https://t.co/FhjmWByagO\">https://t.co/FhjmWByagO</a></p><p>— Job Snijders (@JobSnijders) <a href=\"https://twitter.com/JobSnijders/status/1094976832267522048?ref_src=twsrc%5Etfw\">February 11, 2019</a></p></blockquote><p>That all said, keep in mind we are still talking about routes that Cloudflare didn&#39;t announce. They all came from the route optimizer.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"what-should-701-verizon-network-accept-from-their-customer-396531\">What should 701 Verizon network accept from their customer 396531?</h3>\n      <a href=\"#what-should-701-verizon-network-accept-from-their-customer-396531\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This is a great question to ask. Normally we would look at the IRR (Internet Routing Registries) to see what policy an ASN wants for it’s routes.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ whois -h whois.radb.net AS396531 ; the Verizon customer\n%  No entries found for the selected source(s).\n$ whois -h whois.radb.net AS33154  ; the downstream of that customer\n%  No entries found for the selected source(s).\n$ </pre></code>\n            <p>That’s enough to say that we should not be seeing this ASN anywhere on the Internet, however, we should go further into checking this. As we know the ASN of the network, we can search for any routes that are listed for that ASN. We find one:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ whois -h whois.radb.net &#039; -i origin AS396531&#039; | egrep &#039;^route|^origin|^mnt-by|^source&#039;\nroute:          192.92.159.0/24\norigin:         AS396531\nmnt-by:         MNT-DCNSL\nsource:         ARIN\n$</pre></code>\n            <p>More importantly, now we have a maintainer (the owner of the routing registry entries). We can see what else is there for that network and we are specifically looking for this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ whois -h whois.radb.net &#039; -i mnt-by -T as-set MNT-DCNSL&#039; | egrep &#039;^as-set|^members|^mnt-by|^source&#039;\nas-set:         AS-DQECUST\nmembers:        AS4130, AS5050, AS11199, AS11360, AS12017, AS14088, AS14162,\n                AS14740, AS15327, AS16821, AS18891, AS19749, AS20326,\n                AS21764, AS26059, AS26257, AS26461, AS27223, AS30168,\n                AS32634, AS33039, AS33154, AS33345, AS33358, AS33504,\n                AS33726, AS40549, AS40794, AS54552, AS54559, AS54822,\n                AS393456, AS395440, AS396531, AS15204, AS54119, AS62984,\n                AS13659, AS54934, AS18572, AS397284\nmnt-by:         MNT-DCNSL\nsource:         ARIN\n$</pre></code>\n            <p>This object is important. It lists all the downstream ASNs that this network is expected to announce to the world. It does not contain Cloudflare’s ASN (or any of the leaked ASNs). Clearly this as-set was not used for any BGP filtering.</p><p>Just for completeness the same exercise can be done for the other ASN (the downstream of the customer of Verizon). In this case, we just searched for the maintainer object (as there are plenty of route and route6 objects listed).</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ whois -h whois.radb.net &#039; -i origin AS33154&#039; | egrep &#039;^mnt-by&#039; | sort -u\nmnt-by:         MNT-DCNSL\nmnt-by:     MAINT-AS3257\nmnt-by:     MAINT-AS5050\n$</pre></code>\n            <p>None of these maintainers are directly related to 33154 (DQE Communications). They have been created by other parties and hence they become a dead-end in that search.</p><p>It’s worth doing a secondary search to see if any as-set object exists with 33154 or 396531 included. We turned to the most excellent <a href=\"http://irrexplorer.nlnog.net/\">IRR Explorer</a> website run by NLNOG. It provides deep insight into the routing registry data. We did a simple search for 33154 using <a href=\"http://irrexplorer.nlnog.net/search/33154\">http://irrexplorer.nlnog.net/search/33154</a> and we found these as-set objects.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4EYvX8VV7OrqAymwSwjOdl/6bc48a047ddf172b54b9bef773e3f488/as-set-containing-as33154.png\" alt=\"\" class=\"kg-image\" width=\"1308\" height=\"534\" loading=\"lazy\"/>\n            \n            </figure><p>It’s interesting to see this ASN listed in other as-set’s but none are important or related to Monday’s route-leak. Next we looked at 396531</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pbNB1leCKaQmKCWAwBs2W/71b235476f02b24adc80457c9cfefaad/as-set-containing-as396531.png\" alt=\"\" class=\"kg-image\" width=\"1274\" height=\"247\" loading=\"lazy\"/>\n            \n            </figure><p>This shows that there’s nowhere else we need to check. AS-DQECUST is the as-set macro that controls (or should control) filtering for any transit provider of their network.</p><p>The summary of all the investigation is a solid statement that no Cloudflare routes or ASNs are listed anywhere within the routing registry data for the customer of Verizon. As there were 2,300 ASNs listed in the tweet above, we can conclusively state no filtering was in place and hence this route leak went on its way unabated.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"ipv6-where-is-the-ipv6-route-leak\">IPv6? Where is the IPv6 route leak?</h3>\n      <a href=\"#ipv6-where-is-the-ipv6-route-leak\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In what could be considered the only plus from Monday’s route leak, we can confirm that there was no route leak within IPv6 space. Why?</p><p>It turns out that 396531 (Allegheny Technologies Inc) is a network without IPv6 enabled. Normally you would hear Cloudflare chastise anyone that’s yet to enable IPv6, however, in this case we are quite happy that one of the two protocol families survived. IPv6 was stable during this route leak, which now can be called an IPv4-only route leak.</p><p>Yet that’s not really the whole story. Let’s look at the percentage of traffic Cloudflare sends Verizon that’s IPv6 (vs IPv4). Normally the IPv4/IPv6 percentage holds steady.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/63WaYJLNsBep3X6n5GRQ1n/502818a8188dae908bd1e6bf1dbd60bc/verizon-ipv6-percentage.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"397\" loading=\"lazy\"/>\n            \n            </figure><p>This uptick in IPv6 traffic could be the direct result of Happy Eyeballs on mobile handsets picking a working IPv6 path into Cloudflare vs a non-working IPv4 path. Happy Eyeballs is meant to protect against IPv6 failure, however in this case it’s doing a wonderful job in protecting from an IPv4 failure. Yet we have to be careful with this graph because after further thought and investigation the percentage only increased because IPv4 reduces. Sometimes graphs can be misinterpreted, yet Happy Eyeballs still did a good job even as end users were being affected.</p><p>Happy Eyeballs, described in <a href=\"https://tools.ietf.org/html/rfc8305\">RFC8305</a>, is a mechanism where a client (lets say a mobile device) tries to connect to a website both on IPv4 and IPv6 simultaneously. IPv6 is sometimes given a head-start. The theory is that, should a failure exist on one of the paths (sadly IPv6 is the norm), then IPv4 will save the day. Monday was a day of opposites for Verizon.</p><p>In fact, enabling IPv6 for mobile users is the one area where we can praise the Verizon network this week (or at least the Verizon mobile network), unlike the residential Verizon networks where IPv6 is almost non-existent.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-bandwidth-graphs-to-confirm-routing-leaks-and-stability\">Using bandwidth graphs to confirm routing leaks and stability.</h3>\n      <a href=\"#using-bandwidth-graphs-to-confirm-routing-leaks-and-stability\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As we have already stated,Verizon had impacted their own users/customers. Let’s start with their bandwidth graph:</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/LsOAJ3xaEuv3Mg63gxn6V/035da03ad0895a84ada37b676cb890b1/verizon-bandwidth.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"642\" loading=\"lazy\"/>\n            \n            </figure><p>The red line is 24 June 2019 (00:00 UTC to 00:00 UTC the next day). The gray lines are previous days for comparison. This graph includes both Verizon fixed-line services like FiOS along with mobile.</p><p>The AT&amp;T graph is quite different.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3ez4gwmnd5nOXv7Mdj3M63/1dbad80ddfe70d34e79c9922cfa6d04e/att-bandwidth.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"637\" loading=\"lazy\"/>\n            \n            </figure><p>There’s no perturbation. This, along with some direct confirmation, shows that 7018 (AT&amp;T) was not affected. This is an important point.</p><p>Going back and looking at a third tier 1 network, we can see 6762 (Telecom Italia) affected by this route leak and yet Cloudflare has a direct interconnect with them.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/yOXzYla3Wj5fmY8I6I4dy/2e507a5c4919877b6b4964aba80bd6ab/telecomitalia-bandwidth.png\" alt=\"\" class=\"kg-image\" width=\"1919\" height=\"768\" loading=\"lazy\"/>\n            \n            </figure><p>We will be asking Telecom Italia to improve their route filtering as we now have this data.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"future-work-that-could-have-helped-on-monday\">Future work that could have helped on Monday</h3>\n      <a href=\"#future-work-that-could-have-helped-on-monday\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The IETF is doing work in the area of BGP path protection within the <a href=\"https://datatracker.ietf.org/wg/sidrops/about/\">Secure Inter-Domain Routing Operations Working Group</a> (sidrops) area. The charter of this IETF group is:</p><blockquote><p>The SIDR Operations Working Group (sidrops) develops guidelines for the operation of SIDR-aware networks, and provides operational guidance on how to deploy and operate SIDR technologies in existing and new networks.</p></blockquote><p>One new effort from this group should be called out to show how important the issue of route leaks like today’s event is. The draft document from Alexander Azimov et al named <a href=\"https://tools.ietf.org/html/draft-ietf-sidrops-aspa-profile-00\">draft-ietf-sidrops-aspa-profile</a> (ASPA stands for Autonomous System Provider Authorization) extends the RPKI data structures to handle BGP path information. This in ongoing work and Cloudflare and other companies are clearly interested in seeing it progress further.</p><p>However, as we said in Monday’s blog and something we should reiterate again and again: Cloudflare encourages all network operators to <a href=\"/rpki-details/\">deploy RPKI</a> now!</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"acronyms-used-in-the-blog\">Acronyms used in the blog</h3>\n      <a href=\"#acronyms-used-in-the-blog\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <ul><li><p>API - Application Programming Interface</p></li><li><p>AS-PATH - The list of ASNs that a routes has traversed so far</p></li><li><p>ASN - Autonomous System Number - A unique number assigned for each network on the Internet</p></li><li><p>BGP - Border Gateway Protocol (version 4) - the core routing protocol for the Internet</p></li><li><p>IETF - Internet Engineering Task Force - an open standards organization</p></li><li><p>IPv4 - Internet Protocol version 4</p></li><li><p>IPv6 - Internet Protocol version 6</p></li><li><p>IRR - Internet Routing Registries - a database of Internet route objects</p></li><li><p>ISP - Internet Service Provider</p></li><li><p>JSON - JavaScript Object Notation - a lightweight data-interchange format</p></li><li><p>RFC - Request For Comment - published by the IETF</p></li><li><p>RIPE NCC - Réseaux IP Européens Network Coordination Centre - a regional Internet registry</p></li><li><p>ROA - Route Origin Authorization - a cryptographically signed attestation of a BGP route announcement</p></li><li><p>RPKI - Resource Public Key Infrastructure - a public key infrastructure framework for routing information</p></li><li><p>Tier 1 - A network that has no default route and peers with all other tier 1&#39;s</p></li><li><p>UTC - Coordinated Universal Time - a time standard for clocks and time</p></li><li><p>&quot;there be dragons&quot; - a mistype, as it was meant to be &quot;<a href=\"https://en.wikipedia.org/wiki/Here_be_dragons\">here be dragons</a>&quot; which means dangerous or unexplored territories</p></li></ul>",
		"id": "25XdE8zDvkBZIxNTDBXbOC",
		"localeList": {
			"name": "The deep-dive into how Verizon and a BGP Optimizer Knocked Large Parts of the Internet Offline Monday Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-06-26T23:22:13.000+01:00",
		"slug": "the-deep-dive-into-how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-monday",
		"tags": [
			{
				"id": "WDGNmuLDEdkUgarnyuP8w",
				"name": "RPKI",
				"slug": "rpki"
			},
			{
				"id": "5O7yCWW0RgXMAc5MVjwcGS",
				"name": "BGP",
				"slug": "bgp"
			},
			{
				"id": "2UVIYusJwlvsmPYl2AvSuR",
				"name": "Deep Dive",
				"slug": "deep-dive"
			},
			{
				"id": "3cCNoJJ5uusKFBLYKFX1jB",
				"name": "Post Mortem",
				"slug": "post-mortem"
			}
		],
		"title": "The deep-dive into how Verizon and a BGP Optimizer Knocked Large Parts of the Internet Offline Monday",
		"updated_at": "2025-10-03T17:55:40.653Z",
		"url": "https://blog.cloudflare.com/the-deep-dive-into-how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-monday"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}