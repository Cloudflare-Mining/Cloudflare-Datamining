{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"zh-tw"
	],
	"post": {
		"authors": [
			{
				"name": "James M Snell",
				"slug": "jasnell",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5dR6CJtYedvLrkAZ6rxv9I/0db3d5a763a8b0a350ac04ac6410da6b/jasnell.jpg",
				"location": "California",
				"website": "https://bsky.app/profile/jasnell.me",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Igor Minar",
				"slug": "igor",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4bFcaTr1FpTJBKV7y849pd/499e62c642e20b9c8e83c9ce94f16728/igor.jpeg",
				"location": null,
				"website": null,
				"twitter": "@IgorMinar",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "James Culveyhouse",
				"slug": "james-culveyhouse",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2IAt8Eb4CKZMgvCvxHdNM/2f6ec2bf2bf318993e9d2f6727dbba60/james-culveyhouse.jpg",
				"location": "San Francisco, CA",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Mike Nomitch",
				"slug": "mike-nomitch",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3Ub221L51x1p3FZJbnblyn/23b50473b99404db0baf42921edd269c/_tmp_mini_magick20240415-2-6izqhi.jpg",
				"publiclyIndex": true
			}
		],
		"excerpt": "Workers now supports more NPM packages and Node.js APIs using an overhauled hybrid compatibility layer.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4zhRsxzWAohI3jRhnrzfQ8/9c41603d664e454fd64aa92247114795/image1.png",
		"featured": false,
		"html": "<p></p><p>Today, we are excited to announce a preview of <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>improved Node.js compatibility</u></a> for Workers and Pages. Broader compatibility lets you use more NPM packages and take advantage of the JavaScript ecosystem when writing your Workers.</p><p>Our newest version of Node.js compatibility combines the best features of our previous efforts. <a href=\"https://workers.cloudflare.com/\"><u>Cloudflare Workers</u></a> have supported Node.js in some form for quite a while. We first announced polyfill support in <a href=\"https://blog.cloudflare.com/node-js-support-cloudflare-workers\"><u>2021</u></a>, and later <a href=\"https://blog.cloudflare.com/workers-node-js-asynclocalstorage\"><u>built-in support for parts of the Node.js API</u></a> that has <a href=\"https://blog.cloudflare.com/workers-node-js-apis-stream-path\"><u>expanded</u></a> over time.</p><p>The latest changes make it even better:</p><ul><li><p>You can use far more <a href=\"https://en.wikipedia.org/wiki/Npm\"><u>NPM</u></a> packages on Workers.</p></li><li><p>You can use packages that do not use the <code>node</code>: prefix to import Node.js APIs</p></li><li><p>You can use <a href=\"https://workers-nodejs-compat-matrix.pages.dev/\"><u>more Node.js APIs on Workers</u></a>, including most methods on <a href=\"https://nodejs.org/docs/latest/api/async_hooks.html\"><code><u>async_hooks</u></code></a>, <a href=\"https://nodejs.org/api/buffer.html\"><code><u>buffer</u></code></a>, <a href=\"https://nodejs.org/api/dns.html\"><code><u>dns</u></code></a>, <a href=\"https://nodejs.org/docs/latest/api/os.html\"><code><u>os</u></code></a>, and <a href=\"https://nodejs.org/docs/latest/api/events.html\"><code><u>events</u></code></a>. Many more, such as <a href=\"https://nodejs.org/api/fs.html\"><code><u>fs</u></code></a> or <a href=\"https://nodejs.org/docs/latest/api/process.html\"><code><u>process</u></code></a> are importable with mocked methods.</p></li></ul><p>To give it a try, add the following flag to <code>wrangler.toml</code>, and deploy your Worker with <a href=\"https://developers.cloudflare.com/workers/wrangler/\"><u>Wrangler</u></a>:</p><p><code>compatibility_flags = [&quot;nodejs_compat_v2&quot;]</code></p><p>Packages that could not be imported with <code>nodejs_compat</code>, even as a dependency of another package, will now load. This includes popular packages such as <a href=\"https://www.npmjs.com/package/body-parser\">body-parser</a>, <a href=\"https://www.npmjs.com/package/jsonwebtoken\">jsonwebtoken</a>, {}<a href=\"https://www.npmjs.com/package/got\">got</a>, <a href=\"https://www.npmjs.com/package/passport\">passport</a>, <a href=\"https://www.npmjs.com/package/md5\">md5</a>, <a href=\"https://www.npmjs.com/package/knex\">knex</a>, <a href=\"https://www.npmjs.com/package/mailparser\">mailparser</a>, <a href=\"https://www.npmjs.com/package/csv-stringify\">csv-stringify</a>, <a href=\"https://www.npmjs.com/package/cookie-signature\">cookie-signature</a>, <a href=\"https://www.npmjs.com/package/stream-slice\">stream-slice</a>, and many more.</p><p>This behavior will soon become the default for all Workers with the <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>existing nodejs_compat compatibility flag</u></a> enabled, and a <a href=\"https://developers.cloudflare.com/workers/configuration/compatibility-dates/\"><u>compatibility date</u></a> of 2024-09-23 or later. As you experiment with improved Node.js compatibility, share your feedback by <a href=\"https://github.com/cloudflare/workers-sdk/issues/new?assignees=&labels=bug&projects=&template=bug-template.yaml&title=%F0%9F%90%9B+BUG%3A\"><u>opening an issue on GitHub</u></a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"workerd-is-not-node-js\">Workerd is not Node.js</h3>\n      <a href=\"#workerd-is-not-node-js\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To understand the latest changes, let’s start with a brief overview of how the Workers runtime differs from <a href=\"https://nodejs.org/\"><u>Node.js</u></a>.</p><p>Node.js was built primarily for services run directly on a host OS and pioneered server-side JavaScript. Because of this, it includes functionality necessary to interact with the host machine, such as <a href=\"https://nodejs.org/api/process.html\"><u>process</u></a> or <a href=\"https://nodejs.org/api/fs.html\"><u>fs</u></a>, and a variety of utility modules, such as <a href=\"https://nodejs.org/api/crypto.html\"><u>crypto</u></a>.</p><p>Cloudflare Workers run on an open source JavaScript/Wasm runtime called <a href=\"https://github.com/cloudflare/workerd\"><u>workerd</u></a>. While both Node.js and workerd are built on <a href=\"https://v8.dev/\"><u>V8</u></a>, workerd is <a href=\"https://blog.cloudflare.com/cloud-computing-without-containers\"><u>designed to run untrusted code in shared processes</u></a>, exposes <a href=\"https://developers.cloudflare.com/workers/runtime-apis/bindings/\"><u>bindings</u></a> for interoperability with other Cloudflare services, including <a href=\"https://blog.cloudflare.com/javascript-native-rpc\"><u>JavaScript-native RPC</u></a>, and uses <a href=\"https://blog.cloudflare.com/introducing-the-wintercg\"><u>web-standard APIs</u></a> whenever possible.</p><p>Cloudflare <a href=\"https://blog.cloudflare.com/introducing-the-wintercg/\"><u>helped establish</u></a> <a href=\"https://wintercg.org/\"><u>WinterCG</u></a>, the Web-interoperable Runtimes Community Group to improve interoperability of JavaScript runtimes, both with each other and with the web platform. You can build many applications using only web-standard APIs, but what about when you want to import dependencies from NPM that rely on Node.js APIs?</p><p>For example, if you attempt to import <a href=\"https://www.npmjs.com/package/pg\"><u>pg</u></a>, a PostgreSQL driver, without Node.js compatibility turned on…</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import pg from &#039;pg&#039;</pre></code>\n            <p>You will see the following error when you run <a href=\"https://developers.cloudflare.com/workers/wrangler/commands/#dev\"><u>wrangler dev</u></a> to build your Worker:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">✘ [ERROR] Could not resolve &quot;events&quot;\n    ../node_modules/.pnpm/pg-cloudflare@1.1.1/node_modules/pg-cloudflare/dist/index.js:1:29:\n      1 │ import { EventEmitter } from &#039;events&#039;;\n        ╵                              ~~~~~~~~\n  The package &quot;events&quot; wasn&#039;t found on the file system but is built into node.</pre></code>\n            <p>This happens because the pg package imports the <a href=\"https://nodejs.org/api/events.html\"><u>events module</u></a> from Node.js, which is not provided by workerd by default.</p><p>How can we enable this?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"our-first-approach-build-time-polyfills\">Our first approach – build-time polyfills</h3>\n      <a href=\"#our-first-approach-build-time-polyfills\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Polyfills are code that add functionality to a runtime that does not natively support it. They are often added to provide modern JavaScript functionality to older browsers, but can be used for server-side runtimes as well.</p><p>In 2022, we <a href=\"https://github.com/cloudflare/workers-sdk/pull/869\"><u>added functionality to Wrangler</u></a> that injected polyfill implementations of some Node.js APIs into your Worker if you set <code>node_compat = true</code> in your wrangler.toml. For instance, the following code would work with this flag, but not without:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import EventEmitter from &#039;events&#039;;\nimport { inherits } from &#039;util&#039;;</pre></code>\n            <p>These polyfills are essentially just additional JavaScript code added to your Worker by <a href=\"https://developers.cloudflare.com/workers/wrangler/\"><u>Wrangler</u></a> when deploying the Worker. This behavior is enabled by <a href=\"https://www.npmjs.com/package/@esbuild-plugins/node-globals-polyfill\"><code><u>@esbuild-plugins/node-globals-polyfill</u></code></a> which in itself uses <a href=\"https://github.com/ionic-team/rollup-plugin-node-polyfills/\"><code><u>rollup-plugin-node-polyfills</u></code></a>.</p><p>This allows you to import and use some NPM packages, such as pg. However, many modules cannot be polyfilled with fast enough code or cannot be polyfilled at all.</p><p>For instance, <a href=\"https://nodejs.org/api/buffer.html\"><u>Buffer</u></a> is a common Node.js API used to handle binary data. Polyfills exist for it, but JavaScript is often not optimized for the operations it performs under the hood, such as <code>copy</code>, <code>concat</code>, substring searches, or transcoding. While it is possible to implement in pure JavaScript, it could be far faster if the underlying runtime could use primitives from different languages. Similar limitations exist for other popular APIs such as <a href=\"https://nodejs.org/api/crypto.html\"><u>Crypto</u></a>, <a href=\"https://nodejs.org/api/async_context.html\"><u>AsyncLocalStorage</u></a>, and <a href=\"https://nodejs.org/api/stream.html\"><u>Stream</u></a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"our-second-approach-native-support-for-some-node-js-apis-in-the-workers-runtime\">Our second approach – native support for some Node.js APIs in the Workers runtime</h3>\n      <a href=\"#our-second-approach-native-support-for-some-node-js-apis-in-the-workers-runtime\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In 2023, we <a href=\"https://blog.cloudflare.com/workers-node-js-asynclocalstorage\"><u>started adding</u></a> a subset of Node.js APIs directly to the Workers runtime. You can enable these APIs by adding the <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>nodejs_compat compatibility flag</u></a> to your Worker, but you cannot use polyfills with <code>node_compat = true</code> at the same time.</p><p>Also, when importing Node.js APIs, you must use the <code>node</code>: prefix:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Buffer } from &#039;node:buffer&#039;;</pre></code>\n            <p>Since these Node.js APIs are built directly into the Workers runtime, they can be <a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/api/node/buffer.c%2B%2B\"><u>written in C++</u></a>, which allows them to be faster than JavaScript polyfills. APIs like <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/asynclocalstorage/\"><u>AsyncLocalStorage</u></a>, which cannot be polyfilled without safety or performance issues, can be provided natively.</p><p>Requiring the <code>node: </code>prefix made imports more explicit and aligns with modern Node.js conventions. Unfortunately, existing NPM packages may import modules without <code>node:</code>. For instance, revisiting the example above, if you import the popular package <code>pg</code> in a Worker with the <code>nodejs_compat</code> flag, you still see the following error:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">✘ [ERROR] Could not resolve &quot;events&quot;\n    ../node_modules/.pnpm/pg-cloudflare@1.1.1/node_modules/pg-cloudflare/dist/index.js:1:29:\n      1 │ import { EventEmitter } from &#039;events&#039;;\n        ╵                              ~~~~~~~~\n  The package &quot;events&quot; wasn&#039;t found on the file system but is built into node.</pre></code>\n            <p>Many NPM packages still didn’t work in Workers, even if you enabled the <code>nodejs_compat</code> compatibility flag. You had to choose between a smaller set of performant APIs, exposed in a way that many NPM packages couldn’t access, or a larger set of incomplete and less performant APIs. And APIs like <code>process</code> that are exposed as globals in Node.js could still only be accessed by importing them as modules.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-new-approach-a-hybrid-model\">The new approach: a hybrid model</h3>\n      <a href=\"#the-new-approach-a-hybrid-model\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>What if we could have the best of both worlds, and it just worked?</p><ul><li><p>A subset of Node.js APIs implemented directly in the Workers Runtime </p></li><li><p>Polyfills for the majority of other Node.js APIs</p></li><li><p>No <code>node</code>: prefix required</p></li><li><p>One simple way to opt-in</p></li></ul><p>Improved Node.js compatibility does just that.</p><p>Let’s take a look at two lines of code that look similar, but now act differently under the hood when <code>nodejs_compat_v2</code> is enabled:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Buffer } from &#039;buffer&#039;;  // natively implemented\nimport { isIP } from &#039;net&#039;; // polyfilled</pre></code>\n            <p>The first line imports <code>Buffer</code> from a <a href=\"https://github.com/cloudflare/workerd/blob/main/src/node/internal/internal_buffer.ts\"><u>JavaScript module</u></a> in workerd that is backed by <a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/api/node/buffer.c%2B%2B\"><code><u>C++ code</u></code></a>. Various other Node.js modules are similarly implemented in a combination of Typescript and C++, including <a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/api/node/async-hooks.h\"><code><u>AsyncLocalStorage</u></code></a> and <a href=\"https://github.com/cloudflare/workerd/blob/main/src/workerd/api/node/crypto.h\"><code><u>Crypto</u></code></a>. This allows for highly performant code that matches Node.js behavior.</p><p>Note that the <code>node:</code> prefix is not needed when importing <code>buffer</code>, but the code would also work with <code>node:buffer</code>.</p><p>The second line imports <code>net</code> which Wrangler automatically polyfills using a library called <a href=\"https://github.com/unjs/unenv\"><u>unenv</u></a>. Polyfills and built-in runtime APIs now work together.</p><p>Previously, when you set <code>node_compat = true</code>, Wrangler added polyfills for every Node.js API that it was able to, even if neither your Worker nor its dependencies used that API. When you enable the <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>nodejs_compat_v2 compatibility flag</u></a>, Wrangler only adds polyfills for Node.js APIs that your Worker or its dependencies actually use. This results in small Worker sizes, even with polyfills.</p><p>For some Node.js APIs, there is not yet native support in the Workers runtime nor a polyfill implementation. In these cases, unenv “mocks” the interface. This means it adds the module and its methods to your Worker, but calling methods of the module will either do nothing or will throw an error with a message like:</p><p><code>[unenv] &lt;method name&gt; is not implemented yet!</code></p><p>This is more important than it might seem. Because if a Node.js API is “mocked”, NPM packages that depend on it can still be imported. Consider the following code:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// Package name: my-module\n\nimport fs from &quot;fs&quot;;\n\nexport function foo(path) {\n  const data = fs.readFileSync(path, &#039;utf8&#039;);\n  return data;\n}\n\nexport function bar() {\n  return &quot;baz&quot;;\n}\n</pre></code>\n            \n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { bar } from &quot;my-module&quot;\n\nbar(); // returns &quot;baz&quot;\nfoo(); // throws readFileSync is not implemented yet!\n</pre></code>\n            <p>Previously, even with the <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>existing nodejs_compat compatibility flag</u></a> enabled, attempting to import my-module would fail at build time, because the <code>fs</code> module could not be resolved. Now, the <code>fs</code> module can be resolved, methods that do not rely on an unimplemented Node.js API work, and methods that do throw a more specific error – a runtime error that a specific Node.js API method is not yet supported, rather than a build-time error that the module could not be resolved.</p><p>This is what enables some packages to transition from “doesn’t even load on Workers” to, “loads, but with some unsupported methods”.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"still-missing-an-api-from-node-js-module-aliasing-to-the-rescue\">Still missing an API from Node.js? Module aliasing to the rescue</h3>\n      <a href=\"#still-missing-an-api-from-node-js-module-aliasing-to-the-rescue\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let’s say you need an NPM package to work on Workers that relies on a Node.js API that isn’t yet implemented in the Workers runtime or as a polyfill in unenv. You can use <a href=\"https://developers.cloudflare.com/workers/wrangler/configuration/#module-aliasing\"><u>module aliasing</u></a> to implement just enough of that API to make things work.</p><p>For example, let’s say the NPM package you need to work calls <a href=\"https://nodejs.org/api/fs.html#fsreadfilepath-options-callback\"><u>fs.readFile</u></a>. You can alias the fs module by adding the following to your Worker’s wrangler.toml:</p>\n            <pre class=\"language-toml\"><code class=\"language-toml\">[alias]\n&quot;fs&quot; = &quot;./fs-polyfill&quot;</pre></code>\n            <p>Then, in the fs-polyfill.js file, you can define your own implementation of any methods of the fs module:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export function readFile() {\n  console.log(&quot;readFile was called&quot;);\n  // ...\n}\n</pre></code>\n            <p>Now, the following code, which previously threw the error message “[unenv] readFile is not implemented yet!”, runs without errors:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { readFile } from &#039;fs&#039;;\n\nexport default {\n  async fetch(request, env, ctx) {\n    readFile();\n    return new Response(&#039;Hello World!&#039;);\n  },\n};\n</pre></code>\n            <p>You can also use module aliasing to provide an implementation of an NPM package that does not work on Workers, even if you only rely on that NPM package indirectly, as a dependency of one of your Worker&#39;s dependencies.</p><p>For example, some NPM packages, such as <a href=\"https://www.npmjs.com/package/cross-fetch\"><u>cross-fetch</u></a>, depend on <a href=\"https://www.npmjs.com/package/node-fetch\"><u>node-fetch</u></a>, a package that provided a polyfill of the <a href=\"https://developers.cloudflare.com/workers/runtime-apis/fetch/\"><u>fetch() API</u></a> before it was built into Node.js. The node-fetch package isn&#39;t needed in Workers, because the fetch() API is provided by the Workers runtime. And node-fetch doesn&#39;t work on Workers, because it relies on currently unsupported Node.js APIs from the <a href=\"https://nodejs.org/api/http.html\"><u>http</u></a> and <a href=\"https://nodejs.org/api/https.html\"><u>https</u></a> modules.</p><p>You can alias all imports of node-fetch to instead point directly to the fetch() API that is built into the Workers runtime using the popular <a href=\"https://github.com/SukkaW/nolyfill\"><u>nolyfill</u></a> package:</p>\n            <pre class=\"language-toml\"><code class=\"language-toml\">[alias]\n&quot;node-fetch&quot; = &quot;./fetch-nolyfill&quot;</pre></code>\n            <p>All your replacement module needs to do in this case is to re-export the fetch API that is built into the Workers runtime:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export default fetch;</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"contributing-back-to-unenv\">Contributing back to unenv</h3>\n      <a href=\"#contributing-back-to-unenv\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare is actively contributing to unenv. We think unenv is solving the problem of cross-runtime compatibility the right way — it adds only the necessary polyfills to your application, based on what APIs you use and what runtime you target. The project supports a variety of runtimes beyond workerd and is already used by other popular projects including <a href=\"https://nuxt.com/\"><u>Nuxt</u></a> and <a href=\"https://nitro.unjs.io/\"><u>Nitro</u></a>. We want to thank <a href=\"https://github.com/pi0\"><u>Pooya Parsa</u></a> and the unenv maintainers and encourage others in the ecosystem to adopt or contribute.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-path-forward\">The path forward</h3>\n      <a href=\"#the-path-forward\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Currently, you can enable improved Node.js compatibility by setting the <code>nodejs_compat_v2</code> flag in <code>wrangler.toml</code>. We plan to make the new behavior the default when using the <code>nodejs_compat</code> flag on September 23rd. This will require updating your <a href=\"https://developers.cloudflare.com/workers/configuration/compatibility-dates/\"><code><u>compatibility_date</u></code></a>.</p><p>We are excited about the changes coming to Node.js compatibility, and encourage you to try it today. <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>See the documentation</u></a> on how to opt-in for your Workers, and please send feedback and report bugs <a href=\"https://github.com/cloudflare/workers-sdk/issues/new?assignees=&labels=bug&projects=&template=bug-template.yaml&title=%F0%9F%90%9B+BUG%3A\"><u>by opening an issue</u></a>. Doing so will help us identify any gaps in support and ensure that as much of the Node.js ecosystem as possible runs on Workers.</p>",
		"id": "3zICVbgdxrLByG4g2Dsddy",
		"localeList": {
			"name": "More NPM packages on Cloudflare Workers: Combining polyfills and native code to support Node.js APIs Loc",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "Translated for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Workers now supports more NPM packages and Node.js APIs using an overhauled hybrid compatibility layer.",
		"metadata": {
			"title": "More NPM packages on Cloudflare Workers: Combining polyfills and native code to support Node.js APIs",
			"description": "Workers now supports more NPM packages and Node.js APIs using an overhauled hybrid compatibility layer.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7ahNGmC7Z5DQ44zQFJi9sk/c497a54eb5975a2b46a5d9e34e50cec7/More_NPM_packages_on_Cloudflare_Workers-_Combining_polyfills_and_native_code_to_support_Node.js_APIs-OG.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2024-09-09T14:00-07:00",
		"slug": "more-npm-packages-on-cloudflare-workers-combining-polyfills-and-native-code",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3XzVULQKajbCuWudT6JD0p",
				"name": "Node.js",
				"slug": "node-js"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			}
		],
		"title": "More NPM packages on Cloudflare Workers: Combining polyfills and native code to support Node.js APIs",
		"updated_at": "2025-10-24T09:42:45.297Z",
		"url": "https://blog.cloudflare.com/more-npm-packages-on-cloudflare-workers-combining-polyfills-and-native-code"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}