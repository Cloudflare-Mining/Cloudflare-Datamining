{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "9",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Ignat Korchagin",
				"slug": "ignat",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6l12U0uchJemRRwVMR9hDn/cd1bcd051874dbe6bd3a3de78daef984/ignat.jpg",
				"location": null,
				"website": null,
				"twitter": "@ignatkn",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Ever wondered if it is possible to execute an object file without linking? Or use any object file as a library? Follow along to learn how to decompose an object file and import code from it along the way.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5v4GYOUEfePdicXF4Cybru/8b8f2a4bf7df027f3c860c70982a9541/how-to-execute-an-object-file-part-1.png",
		"featured": false,
		"html": "\n    <div class=\"flex anchor relative\">\n      <h2 id=\"calling-a-simple-function-without-linking\">Calling a simple function without linking</h2>\n      <a href=\"#calling-a-simple-function-without-linking\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>When we write software using a high-level compiled programming language, there are usually a number of steps involved in transforming our source code into the final executable binary:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3RNZmg4aDxjJOAjAmYxFk9/c1279a03f8962b5bb74f812b66a4a448/build.png\" alt=\"compile and link\" class=\"kg-image\" width=\"880\" height=\"695\" loading=\"lazy\"/>\n            \n            </figure><p>First, our source files are compiled by a <i>compiler</i> translating the high-level programming language into machine code. The output of the compiler is a number of <i>object</i> files. If the project contains multiple source files, we usually get as many object files. The next step is the <i>linker</i>: since the code in different object files may reference each other, the linker is responsible for assembling all these object files into one big program and binding these references together. The output of the linker is usually our target executable, so only one file.</p><p>However, at this point, our executable might still be incomplete. These days, most executables on Linux are dynamically linked: the executable itself does not have all the code it needs to run a program. Instead it expects to &quot;borrow&quot; part of the code at runtime from <a href=\"https://en.wikipedia.org/wiki/Library_(computing)#Shared_libraries\">shared libraries</a> for some of its functionality:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4qgviYFjrBDkGj5OckqJFi/a94b46caad8bfcda8eb96ad7eba84d67/runtime.png\" alt=\"dynamic loader\" class=\"kg-image\" width=\"537\" height=\"657\" loading=\"lazy\"/>\n            \n            </figure><p>This process is called <i>runtime linking</i>: when our executable is being started, the operating system will invoke the <i>dynamic loader</i>, which should find all the needed libraries, copy/map their code into our target process address space, and resolve all the dependencies our code has on them.</p><p>One interesting thing to note about this overall process is that we get the executable machine code directly from step 1 (compiling the source code), but if any of the later steps fail, we still can&#39;t execute our program. So, in this series of blog posts we will investigate if it is possible to execute machine code directly from object files skipping all the later steps.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"why-would-we-want-to-execute-an-object-file\">Why would we want to execute an object file?</h4>\n      <a href=\"#why-would-we-want-to-execute-an-object-file\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There may be many reasons. Perhaps we&#39;re writing an open-source replacement for a proprietary Linux driver or an application, and want to compare if the behaviour of some code is the same. Or we have a piece of a rare, obscure program and we can&#39;t link to it, because it was compiled with a rare, obscure compiler. Maybe we have a source file, but cannot create a full featured executable, because of the missing build time or runtime dependencies. Malware analysis, code from a different operating system etc - all these scenarios may put us in a position, where either linking is not possible or the runtime environment is not suitable.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-simple-toy-object-file\">A simple toy object file</h3>\n      <a href=\"#a-simple-toy-object-file\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>For the purposes of this article, let&#39;s create a simple toy object file, so we can use it in our experiments:</p><p><i>obj.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">int add5(int num)\n{\n    return num + 5;\n}\n\nint add10(int num)\n{\n    return num + 10;\n}</pre></code>\n            <p>Our source file contains only 2 functions, <code>add5</code> and <code>add10</code>, which adds 5 or 10 respectively to the only input parameter. It&#39;s a small but fully functional piece of code, and we can easily compile it into an object file:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ gcc -c obj.c \n$ ls\nobj.c  obj.o</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"loading-an-object-file-into-the-process-memory\">Loading an object file into the process memory</h3>\n      <a href=\"#loading-an-object-file-into-the-process-memory\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Now we will try to import the <code>add5</code> and <code>add10</code> functions from the object file and execute them. When we talk about executing an object file, we mean using an object file as some sort of a library. As we learned above, when we have an executable that utilises external shared libraries, the <i>dynamic loader</i> loads these libraries into the process address space for us. With object files, however, we have to do this manually, because ultimately we can&#39;t execute machine code that doesn&#39;t reside in the operating system&#39;s RAM. So, to execute object files we still need some kind of a wrapper program:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nstatic void load_obj(void)\n{\n    /* load obj.o into memory */\n}\n\nstatic void parse_obj(void)\n{\n    /* parse an object file and find add5 and add10 functions */\n}\n\nstatic void execute_funcs(void)\n{\n    /* execute add5 and add10 with some inputs */\n}\n\nint main(void)\n{\n    load_obj();\n    parse_obj();\n    execute_funcs();\n\n    return 0;\n}</pre></code>\n            <p>Above is a self-contained object loader program with some functions as placeholders. We will be implementing these functions (and adding more) in the course of this post.</p><p>First, as we established already, we need to load our object file into the process address space. We could just read the whole file into a buffer, but that would not be very efficient. Real-world object files might be big, but as we will see later, we don&#39;t need all of the object&#39;s file contents. So it is better to <a href=\"https://man7.org/linux/man-pages/man2/mmap.2.html\"><code>mmap</code></a> the file instead: this way the operating system will lazily read the parts from the file we need at the time we need them. Let&#39;s implement the <code>load_obj</code> function:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n/* for open(2), fstat(2) */\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n\n/* for close(2), fstat(2) */\n#include &lt;unistd.h&gt;\n\n/* for mmap(2) */\n#include &lt;sys/mman.h&gt;\n\n/* parsing ELF files */\n#include &lt;elf.h&gt;\n\n/* for errno */\n#include &lt;errno.h&gt;\n\ntypedef union {\n    const Elf64_Ehdr *hdr;\n    const uint8_t *base;\n} objhdr;\n\n/* obj.o memory address */\nstatic objhdr obj;\n\nstatic void load_obj(void)\n{\n    struct stat sb;\n\n    int fd = open(&quot;obj.o&quot;, O_RDONLY);\n    if (fd &lt;= 0) {\n        perror(&quot;Cannot open obj.o&quot;);\n        exit(errno);\n    }\n\n    /* we need obj.o size for mmap(2) */\n    if (fstat(fd, &amp;sb)) {\n        perror(&quot;Failed to get obj.o info&quot;);\n        exit(errno);\n    }\n\n    /* mmap obj.o into memory */\n    obj.base = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0);\n    if (obj.base == MAP_FAILED) {\n        perror(&quot;Maping obj.o failed&quot;);\n        exit(errno);\n    }\n    close(fd);\n}\n...</pre></code>\n            <p>If we don&#39;t encounter any errors, after <code>load_obj</code> executes we should get the memory address, which points to the beginning of our <code>obj.o</code> in the <code>obj</code> global variable. It is worth noting we have created a special union type for the <code>obj</code> variable: we will be parsing <code>obj.o</code> later (and peeking ahead - object files are actually <a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\">ELF files</a>), so will be referring to the address both as <code>Elf64_Ehdr</code> (ELF header structure in C) and a byte pointer (parsing ELF files involves calculations of byte offsets from the beginning of the file).</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-peek-inside-an-object-file\">A peek inside an object file</h3>\n      <a href=\"#a-peek-inside-an-object-file\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To use some code from an object file, we need to find it first. As I&#39;ve leaked above, object files are actually <a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\">ELF files</a> (the same format as Linux executables and shared libraries) and luckily they’re easy to parse on Linux with the help of the standard <code>elf.h</code> header, which includes many useful definitions related to the ELF file structure. But we actually need to know what we’re looking for, so a high-level understanding of an ELF file is needed.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"elf-segments-and-sections\">ELF segments and sections</h4>\n      <a href=\"#elf-segments-and-sections\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Segments (also known as program headers) and sections are probably the main parts of an ELF file and usually a starting point of any ELF tutorial. However, there is often some confusion between the two. Different sections contain different types of ELF data: executable code (which we are most interested in in this post), constant data, global variables etc. Segments, on the other hand, do not contain any data themselves - they just describe to the operating system how to properly load sections into RAM for the executable to work correctly. Some tutorials say &quot;a segment may include 0 or more sections&quot;, which is not entirely accurate: segments do not contain sections, rather they just indicate to the OS where in memory a particular section should be loaded and what is the access pattern for this memory (read, write or execute):</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7E14iCMhz5ADpvhMnfyswT/8f97b1cf69b5788744e31b1a5853c8db/segments-sections.png\" alt=\"segments and sections\" class=\"kg-image\" width=\"751\" height=\"620\" loading=\"lazy\"/>\n            \n            </figure><p>Furthermore, object files do not contain any segments at all: an object file is not meant to be directly loaded by the OS. Instead, it is assumed it will be linked with some other code, so ELF segments are usually generated by the linker, not the compiler. We can check this by using the <a href=\"https://man7.org/linux/man-pages/man1/readelf.1.html\">readelf command</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ readelf --segments obj.o\n\nThere are no program headers in this file.</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"object-file-sections\">Object file sections</h4>\n      <a href=\"#object-file-sections\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The same <a href=\"https://man7.org/linux/man-pages/man1/readelf.1.html\">readelf command</a> can be used to get all the sections from our object file:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ readelf --sections obj.o\nThere are 11 section headers, starting at offset 0x268:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       000000000000001e  0000000000000000  AX       0     0     1\n  [ 2] .data             PROGBITS         0000000000000000  0000005e\n       0000000000000000  0000000000000000  WA       0     0     1\n  [ 3] .bss              NOBITS           0000000000000000  0000005e\n       0000000000000000  0000000000000000  WA       0     0     1\n  [ 4] .comment          PROGBITS         0000000000000000  0000005e\n       000000000000001d  0000000000000001  MS       0     0     1\n  [ 5] .note.GNU-stack   PROGBITS         0000000000000000  0000007b\n       0000000000000000  0000000000000000           0     0     1\n  [ 6] .eh_frame         PROGBITS         0000000000000000  00000080\n       0000000000000058  0000000000000000   A       0     0     8\n  [ 7] .rela.eh_frame    RELA             0000000000000000  000001e0\n       0000000000000030  0000000000000018   I       8     6     8\n  [ 8] .symtab           SYMTAB           0000000000000000  000000d8\n       00000000000000f0  0000000000000018           9     8     8\n  [ 9] .strtab           STRTAB           0000000000000000  000001c8\n       0000000000000012  0000000000000000           0     0     1\n  [10] .shstrtab         STRTAB           0000000000000000  00000210\n       0000000000000054  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)</pre></code>\n            <p>There are different tutorials online describing the most popular ELF sections in detail. Another great reference is the <a href=\"https://man7.org/linux/man-pages/man5/elf.5.html\">Linux manpages project</a>. It is handy because it describes both sections’ purpose as well as C structure definitions from <code>elf.h</code>, which makes it a one-stop shop for parsing ELF files. However, for completeness, below is a short description of the most popular sections one may encounter in an ELF file:</p><ul><li><p><code>.text</code>: this section contains the executable code (the actual machine code, which was created by the compiler from our source code). This section is the primary area of interest for this post as it should contain the <code>add5</code> and <code>add10</code> functions we want to use.</p></li><li><p><code>.data</code> and <code>.bss</code>: these sections contain global and static local variables. The difference is: <code>.data</code> has variables with an initial value (defined like <code>int foo = 5;</code>) and <code>.bss</code> just reserves space for variables with no initial value (defined like <code>int bar;</code>).</p></li><li><p><code>.rodata</code>: this section contains constant data (mostly strings or byte arrays). For example, if we use a string literal in the code (for example, for <code>printf</code> or some error message), it will be stored here. Note, that <code>.rodata</code> is missing from the output above as we didn&#39;t use any string literals or constant byte arrays in <code>obj.c</code>.</p></li><li><p><code>.symtab</code>: this section contains information about the symbols in the object file: functions, global variables, constants etc. It may also contain information about external symbols the object file needs, like needed functions from the external libraries.</p></li><li><p><code>.strtab</code> and <code>.shstrtab</code>: contain packed strings for the ELF file. Note, that these are not the strings we may define in our source code (those go to the <code>.rodata</code> section). These are the strings describing the names of other ELF structures, like symbols from <code>.symtab</code> or even section names from the table above. ELF binary format aims to make its structures compact and of a fixed size, so all strings are stored in one place and the respective data structures just reference them as an offset in either <code>.shstrtab</code> or <code>.strtab</code> sections instead of storing the full string locally.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"the-symtab-section\">The <code>.symtab</code> section</h4>\n      <a href=\"#the-symtab-section\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>At this point, we know that the code we want to import and execute is located in the <code>obj.o</code>&#39;s <code>.text</code> section. But we have two functions, <code>add5</code> and <code>add10</code>, remember? At this level the <code>.text</code> section is just a byte blob - how do we know where each of these functions is located? This is where the <code>.symtab</code> (the &quot;symbol table&quot;) comes in handy. It is so important that it has its own dedicated parameter in <a href=\"https://man7.org/linux/man-pages/man1/readelf.1.html\">readelf</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ readelf --symbols obj.o\n\nSymbol table &#039;.symtab&#039; contains 10 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS obj.c\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1\n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    2\n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    3\n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5\n     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    6\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    4\n     8: 0000000000000000    15 FUNC    GLOBAL DEFAULT    1 add5\n     9: 000000000000000f    15 FUNC    GLOBAL DEFAULT    1 add10</pre></code>\n            <p>Let&#39;s ignore the other entries for now and just focus on the last two lines, because they conveniently have <code>add5</code> and <code>add10</code> as their symbol names. And indeed, this is the info about our functions. Apart from the names, the symbol table provides us with some additional metadata:</p><ul><li><p>The <code>Ndx</code> column tells us the index of the section, where the symbol is located. We can cross-check it with the section table above and confirm that indeed these functions are located in <code>.text</code> (section with the index <code>1</code>).</p></li><li><p><code>Type</code> being set to <code>FUNC</code> confirms that these are indeed functions.</p></li><li><p><code>Size</code> tells us the size of each function, but this information is not very useful in our context. The same goes for <code>Bind</code> and <code>Vis</code>.</p></li><li><p>Probably the most useful piece of information is <code>Value</code>. The name is misleading, because it is actually an offset from the start of the containing section in this context. That is, the <code>add5</code> function starts just from the beginning of <code>.text</code> and <code>add10</code> is located from 15th byte and onwards.</p></li></ul><p>So now we have all the pieces on how to parse an ELF file and find the functions we need.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"finding-and-executing-a-function-from-an-object-file\">Finding and executing a function from an object file</h3>\n      <a href=\"#finding-and-executing-a-function-from-an-object-file\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Given what we have learned so far, let&#39;s define a plan on how to proceed to import and execute a function from an object file:</p><ol><li><p>Find the ELF sections table and <code>.shstrtab</code> section (we need <code>.shstrtab</code> later to lookup sections in the section table by name).</p></li><li><p>Find the <code>.symtab</code> and <code>.strtab</code> sections (we need <code>.strtab</code> to lookup symbols by name in <code>.symtab</code>).</p></li><li><p>Find the <code>.text</code> section and copy it into RAM with executable permissions.</p></li><li><p>Find <code>add5</code> and <code>add10</code> function offsets from the <code>.symtab</code>.</p></li><li><p>Execute <code>add5</code> and <code>add10</code> functions.</p></li></ol><p>Let&#39;s start by adding some more global variables and implementing the <code>parse_obj</code> function:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\n/* sections table */\nstatic const Elf64_Shdr *sections;\nstatic const char *shstrtab = NULL;\n\n/* symbols table */\nstatic const Elf64_Sym *symbols;\n/* number of entries in the symbols table */\nstatic int num_symbols;\nstatic const char *strtab = NULL;\n\n...\n\nstatic void parse_obj(void)\n{\n    /* the sections table offset is encoded in the ELF header */\n    sections = (const Elf64_Shdr *)(obj.base + obj.hdr-&gt;e_shoff);\n    /* the index of `.shstrtab` in the sections table is encoded in the ELF header\n     * so we can find it without actually using a name lookup\n     */\n    shstrtab = (const char *)(obj.base + sections[obj.hdr-&gt;e_shstrndx].sh_offset);\n\n...\n}\n\n...</pre></code>\n            <p>Now that we have references to both the sections table and the <code>.shstrtab</code> section, we can lookup other sections by their name. Let&#39;s create a helper function for that:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\nstatic const Elf64_Shdr *lookup_section(const char *name)\n{\n    size_t name_len = strlen(name);\n\n    /* number of entries in the sections table is encoded in the ELF header */\n    for (Elf64_Half i = 0; i &lt; obj.hdr-&gt;e_shnum; i++) {\n        /* sections table entry does not contain the string name of the section\n         * instead, the `sh_name` parameter is an offset in the `.shstrtab`\n         * section, which points to a string name\n         */\n        const char *section_name = shstrtab + sections[i].sh_name;\n        size_t section_name_len = strlen(section_name);\n\n        if (name_len == section_name_len &amp;&amp; !strcmp(name, section_name)) {\n            /* we ignore sections with 0 size */\n            if (sections[i].sh_size)\n                return sections + i;\n        }\n    }\n\n    return NULL;\n}\n\n...</pre></code>\n            <p>Using our new helper function, we can now find the <code>.symtab</code> and <code>.strtab</code> sections:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\nstatic void parse_obj(void)\n{\n...\n\n    /* find the `.symtab` entry in the sections table */\n    const Elf64_Shdr *symtab_hdr = lookup_section(&quot;.symtab&quot;);\n    if (!symtab_hdr) {\n        fputs(&quot;Failed to find .symtab\\n&quot;, stderr);\n        exit(ENOEXEC);\n    }\n\n    /* the symbols table */\n    symbols = (const Elf64_Sym *)(obj.base + symtab_hdr-&gt;sh_offset);\n    /* number of entries in the symbols table = table size / entry size */\n    num_symbols = symtab_hdr-&gt;sh_size / symtab_hdr-&gt;sh_entsize;\n\n    const Elf64_Shdr *strtab_hdr = lookup_section(&quot;.strtab&quot;);\n    if (!strtab_hdr) {\n        fputs(&quot;Failed to find .strtab\\n&quot;, stderr);\n        exit(ENOEXEC);\n    }\n\n    strtab = (const char *)(obj.base + strtab_hdr-&gt;sh_offset);\n    \n...\n}\n\n...</pre></code>\n            <p>Next, let&#39;s focus on the <code>.text</code> section. We noted earlier in our plan that it is not enough to just locate the <code>.text</code> section in the object file, like we did with other sections. We would need to copy it over to a different location in RAM with executable permissions. There are several reasons for that, but these are the main ones:</p><ul><li><p>Many CPU architectures either don&#39;t allow execution of the machine code, which is <a href=\"https://en.wikipedia.org/wiki/Page_(computer_memory)\">unaligned in memory</a> (4 kilobytes for x86 systems), or they execute it with a performance penalty. However, the <code>.text</code> section in an ELF file is not guaranteed to be positioned at a page aligned offset, because the on-disk version of the ELF file aims to be compact rather than convenient.</p></li><li><p>We may need to modify some bytes in the <code>.text</code> section to perform relocations (we don&#39;t need to do it in this case, but will be dealing with relocations in future posts). If, for example, we forget to use the <code>MAP_PRIVATE</code> flag, when mapping the ELF file, our modifications may propagate to the underlying file and corrupt it.</p></li><li><p>Finally, different sections, which are needed at runtime, like <code>.text</code>, <code>.data</code>, <code>.bss</code> and <code>.rodata</code>, require different memory permission bits: the <code>.text</code> section memory needs to be both readable and executable, but not writable (it is considered a bad security practice to have memory both writable and executable). The <code>.data</code> and <code>.bss</code> sections need to be readable and writable to support global variables, but not executable. The <code>.rodata</code> section should be readonly, because its purpose is to hold constant data. To support this, each section must be allocated on a page boundary as we can only set memory permission bits on whole pages and not custom ranges. Therefore, we need to create new, page aligned memory ranges for these sections and copy the data there.</p></li></ul><p>To create a page aligned copy of the <code>.text</code> section, first we actually need to know the page size. Many programs usually just hardcode the page size to 4096 (4 kilobytes), but we shouldn&#39;t rely on that. While it&#39;s accurate for most x86 systems, other CPU architectures, like arm64, might have a different page size. So hard coding a page size may make our program non-portable. Let&#39;s find the page size and store it in another global variable:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\nstatic uint64_t page_size;\n\nstatic inline uint64_t page_align(uint64_t n)\n{\n    return (n + (page_size - 1)) &amp; ~(page_size - 1);\n}\n\n...\n\nstatic void parse_obj(void)\n{\n...\n\n    /* get system page size */\n    page_size = sysconf(_SC_PAGESIZE);\n\n...\n}\n\n...</pre></code>\n            <p>Notice, we have also added a convenience function <code>page_align</code>, which will round up the passed in number to the next page aligned boundary. Next, back to the <code>.text</code> section. As a reminder, we need to:</p><ol><li><p>Find the <code>.text</code> section metadata in the sections table.</p></li><li><p>Allocate a chunk of memory to hold the <code>.text</code> section copy.</p></li><li><p>Actually copy the <code>.text</code> section to the newly allocated memory.</p></li><li><p>Make the <code>.text</code> section executable, so we can later call functions from it.</p></li></ol><p>Here is the implementation of the above steps:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\n/* runtime base address of the imported code */\nstatic uint8_t *text_runtime_base;\n\n...\n\nstatic void parse_obj(void)\n{\n...\n\n    /* find the `.text` entry in the sections table */\n    const Elf64_Shdr *text_hdr = lookup_section(&quot;.text&quot;);\n    if (!text_hdr) {\n        fputs(&quot;Failed to find .text\\n&quot;, stderr);\n        exit(ENOEXEC);\n    }\n\n    /* allocate memory for `.text` copy rounding it up to whole pages */\n    text_runtime_base = mmap(NULL, page_align(text_hdr-&gt;sh_size), PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n    if (text_runtime_base == MAP_FAILED) {\n        perror(&quot;Failed to allocate memory for .text&quot;);\n        exit(errno);\n    }\n\n    /* copy the contents of `.text` section from the ELF file */\n    memcpy(text_runtime_base, obj.base + text_hdr-&gt;sh_offset, text_hdr-&gt;sh_size);\n\n    /* make the `.text` copy readonly and executable */\n    if (mprotect(text_runtime_base, page_align(text_hdr-&gt;sh_size), PROT_READ | PROT_EXEC)) {\n        perror(&quot;Failed to make .text executable&quot;);\n        exit(errno);\n    }\n}\n\n...</pre></code>\n            <p>Now we have all the pieces we need to locate the address of a function. Let&#39;s write a helper for it:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\nstatic void *lookup_function(const char *name)\n{\n    size_t name_len = strlen(name);\n\n    /* loop through all the symbols in the symbol table */\n    for (int i = 0; i &lt; num_symbols; i++) {\n        /* consider only function symbols */\n        if (ELF64_ST_TYPE(symbols[i].st_info) == STT_FUNC) {\n            /* symbol table entry does not contain the string name of the symbol\n             * instead, the `st_name` parameter is an offset in the `.strtab`\n             * section, which points to a string name\n             */\n            const char *function_name = strtab + symbols[i].st_name;\n            size_t function_name_len = strlen(function_name);\n\n            if (name_len == function_name_len &amp;&amp; !strcmp(name, function_name)) {\n                /* st_value is an offset in bytes of the function from the\n                 * beginning of the `.text` section\n                 */\n                return text_runtime_base + symbols[i].st_value;\n            }\n        }\n    }\n\n    return NULL;\n}\n\n...</pre></code>\n            <p>And finally we can implement the <code>execute_funcs</code> function to import and execute code from an object file:</p><p><i>loader.c</i>:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">...\n\nstatic void execute_funcs(void)\n{\n    /* pointers to imported add5 and add10 functions */\n    int (*add5)(int);\n    int (*add10)(int);\n\n    add5 = lookup_function(&quot;add5&quot;);\n    if (!add5) {\n        fputs(&quot;Failed to find add5 function\\n&quot;, stderr);\n        exit(ENOENT);\n    }\n\n    puts(&quot;Executing add5...&quot;);\n    printf(&quot;add5(%d) = %d\\n&quot;, 42, add5(42));\n\n    add10 = lookup_function(&quot;add10&quot;);\n    if (!add10) {\n        fputs(&quot;Failed to find add10 function\\n&quot;, stderr);\n        exit(ENOENT);\n    }\n\n    puts(&quot;Executing add10...&quot;);\n    printf(&quot;add10(%d) = %d\\n&quot;, 42, add10(42));\n}\n\n...</pre></code>\n            <p>Let&#39;s compile our loader and make sure it works as expected:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ gcc -o loader loader.c \n$ ./loader \nExecuting add5...\nadd5(42) = 47\nExecuting add10...\nadd10(42) = 52</pre></code>\n            <p>Voila! We have successfully imported code from <code>obj.o</code> and executed it. Of course, the example above is simplified: the code in the object file is self-contained, does not reference any global variables or constants, and does not have any external dependencies. In future posts we will look into more complex code and how to handle such cases.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"security-considerations\">Security considerations</h4>\n      <a href=\"#security-considerations\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Processing external inputs, like parsing an ELF file from the disk above, should be handled with care. The code from <i>loader.c</i> omits a lot of bounds checking and additional ELF integrity checks, when parsing the object file. The code is simplified for the purposes of this post, but most likely not production ready, as it can probably be exploited by specifically crafted malicious inputs. Use it only for educational purposes!</p><p>The complete source code from this post can be found <a href=\"https://github.com/cloudflare/cloudflare-blog/tree/master/2021-03-obj-file/1\">here</a>.</p>",
		"id": "73aVJfyo4dMAfJku0Q859K",
		"localeList": {
			"name": "How to execute an object file: Part 1 Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Ever wondered if it is possible to execute an object file without linking? Or use any object file as a library? Follow along to learn how to decompose an object file and import code from it along the way.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-03-02T12:00:00.000+00:00",
		"slug": "how-to-execute-an-object-file-part-1",
		"tags": [
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "2UVIYusJwlvsmPYl2AvSuR",
				"name": "Deep Dive",
				"slug": "deep-dive"
			}
		],
		"title": "How to execute an object file: Part 1",
		"updated_at": "2024-10-09T21:18:06.989Z",
		"url": "https://blog.cloudflare.com/how-to-execute-an-object-file-part-1"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}