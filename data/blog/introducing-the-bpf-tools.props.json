{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "In a recent article I described the basic concepts behind the use of Berkeley Packet Filter (aka BSD Packet filter or BPF) bytecode for high performance packet filtering, and the xt_bpf iptables module.",
		"feature_image": "https:undefined",
		"featured": false,
		"html": "<p>In <a href=\"/bpf-the-forgotten-bytecode\">a recent article</a> I described the basic concepts behind the use of Berkeley Packet Filter (aka BSD Packet filter or BPF) bytecode for high performance packet filtering, and the <a href=\"https://github.com/torvalds/linux/blob/master/net/netfilter/xt_bpf.c\">xt_bpf</a> iptables module. In this post I&#39;ll explain how we use BPF and xt_bpf as one tool to deal with large scale DDoS attacks.</p><p>And, today, CloudFlare is open sourcing the tools we&#39;ve created to generate and deploy BPF rules.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"the-code\">The Code</h3>\n            <a href=\"#the-code\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Our BPF Tools are now available on the CloudFlare Github: <a href=\"https://github.com/cloudflare/bpftools\">https://github.com/cloudflare/bpftools</a></p><p>For installation instructions review the <a href=\"https://github.com/cloudflare/bpftools#bpf-tools\">README</a>, but typing <code>make</code> should do most of the work:</p><p>$ git clone <a href=\"https://github.com/cloudflare/bpftools.git\">https://github.com/cloudflare/bpftools.git</a>\n$ cd bpftools\n$ make</p><p>The BPF Tools repository contains a number of simple Python scripts, some of them focus on analyzing pcap files, others focus more on the generation and use of the BPF bytecode itself:</p><ul><li><p><code>pcap2hex</code>, <code>hex2pcap</code></p></li><li><p><code>parsedns</code></p></li><li><p><code>bpfgen</code></p></li><li><p><code>filter</code></p></li><li><p><code>iptables_bpf</code>, <code>iptables_bpf_chain</code></p></li></ul><p>We rely on the BPF assembler from the Linux Kernel <a href=\"https://github.com/torvalds/linux/tree/master/tools/net\"><code>/tools/net</code></a> directory. To make your life easier we ship a copy in <code>linux_tools</code>.</p><p>Here at CloudFlare we run a very large number of <a href=\"https://en.wikipedia.org/wiki/Domain_Name_System#Authoritative_name_server\">authoritative DNS servers</a> and we constantly deal with malicious actors flooding our servers with, amongst other things, <a href=\"https://www.cloudflare.com/learning/dns/what-is-dns/\">DNS requests</a>. So no surprise that our current BPF Tools focus on DNS traffic, although they are easily adaptable to any other stateless floods.</p><p>The BPF Tools should be usable and in working order, but don&#39;t expect too much. These small utilities were written to be easily hackable and they will be in a state of constant flux: this <i>is</i> our toolkit after all. Please expect some degree of code instability.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"it-all-starts-with-a-pcap\">It all starts with a pcap</h3>\n            <a href=\"#it-all-starts-with-a-pcap\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Here&#39;s a concrete example of using these tools to identify and filter a DNS attack. This is based on a real world attack but the actual details have been changed for anonymization.</p><p>To start you need a <a href=\"http://www.tcpdump.org/manpages/pcap-savefile.5.txt\">pcap savefile</a> containing a traffic dump. For example to capture a pcap of DNS requests we run:</p><p>$ sudo tcpdump -pni eth0 -s0 -w example.pcap -vv -c 10000 \\\n&quot;ip and dst port 53&quot;\nlistening on eth0, link-type EN10MB (Ethernet)</p><p>It&#39;s important to record the traffic on the EN10MB (Ethernet) device, as the scripts expect to see packets with a 14-byte Ethernet header. If you forget about that and record on the <code>any</code> interface (LINUX_SLL) you can fix the pcap by using the <code>pcap2hex</code> / <code>hex2pcap</code> tools. They are able to amend the layer 2 header and make it look like Ethernet again:</p><p>$ cat sll.pcap | ./pcap2hex | ./hex2pcap &gt; ethernet.pcap</p><p>Here is a sample output of the <code>pcap2hex</code> tool after we captured requests going to our favorite domain <code>www.example.uk</code> (notice the <code>--ascii</code> flag):</p><p>$ cat example.pcap | ./pcap2hex --ascii | head\n000ffffff6603c94d5cb47f0080045000056817b4000f91147a3cba204c6\nadf53a1aa408003500426dd26366000000010000000000010e697471766d\n6e737a656c757a6f6a03777777076578616d706c6502756b000001000100\n00291000000080000000        ..S..`&lt;...G...E..V.{@...G.......\n:....5.Bm.cf...........itqvmnszeluzoj.<a href=\"http://www.example.uk\">www.example.uk</a>.......)\n........\n000ffffff6603c94d5cb47f008004520004fdf234000f41110107b1e341c\nadf53a1a84a00035003b4a99e25c00000001000000000001076969766c69\n657903777777076578616d706c6502756b00000100010000291000000080\n000000      ..S..`&lt;...G...E..O.#@.....{.4...:....5.;J..\\....\n.......iivliey.www.example.uk.......)........</p><p>Taking a look at the traffic, it looks like we captured a flood of requests to <code>&lt;random string&gt;.www.example.uk</code>! We see this kind of flood all the time. I believe the goal of this is to keep our DNS server busy preparing NXDOMAIN responses and not have enough CPU to serve legitimate traffic.</p><p>Let&#39;s take a closer look at these packets.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"parsing-the-dns-request\">Parsing the DNS request</h3>\n            <a href=\"#parsing-the-dns-request\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>With DNS traffic handy we can take a closer look at the details of the DNS requests. For that pick a hex-encoded packet from the output of <code>pcap2hex</code> and pass it to the <code>parsedns</code> script:</p><p>$ ./parsedns 000ffffff6603c94d5...\n...\n[.] l4: a408003500426dd2\nsource port: 41992\ndestination port: 53\nlength: 66\n[.] l5: 6366000000010000000000010e6974717...\nid: 0x6366\nflags: 0x0000 query op=0 rcode=0\nquestions: 1\nanswers: 0\nauth: 0\nextra: 1\n#-46         q[0]: &#39;itqvmnszeluzoj&#39; &#39;www&#39; &#39;example&#39; &#39;uk&#39; .\ntype=0x0001 class=0x0001\nextra[0]: .\ntype=0x0029 class=0x1000\nttl=32768 rrlen=0:\nbufsize=4096\ndnssec_ok_flag</p><p>This tool pretty prints a DNS packet and presents all the interesting bits. Sometimes the flooding tools have bugs and set a bit somewhere making it easy to distinguish malicious requests from legitimate DNS queries hitting our servers.</p><p>Unfortunately the request above looks pretty normal. We could distinguish the traffic on the <code>EDNS</code> DNS extension but some real recursors also set this flag as well, so this strategy would result in false positives.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"preparing-the-bpf\">Preparing the BPF</h3>\n            <a href=\"#preparing-the-bpf\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Blocking this flood is however, simple - we can safely assume that the <code>www.example.uk</code> domain doesn&#39;t have <i>any</i> subdomains, instead of looking at low level bits of DNS packets we can drop all the packets asking for <code>*.www.example.uk</code>.</p><p>The tool <code>bpfgen</code> generates the BPF bytecode to do that. This is the most important tool in the repo.</p><p>Right now it has three &quot;BPF generators&quot;: <code>dns</code>, <code>dns_validate</code> and <code>suffix</code>. We&#39;ll focus only on the first one which generates BPF rules matching given DNS domains. To match all the requests matching the pattern <code>*.www.example.uk</code> run:</p><p>$ ./bpfgen dns -- *.<a href=\"http://www.example.uk\">www.example.uk</a>\n18,177 0 0 0,0 0 0 20,12 0 0 0,7 0 0 0,80 0 0 0, ...</p><p>That does look pretty cryptic, here&#39;s how can you generate an assembly-like BPF syntax:</p><p>$ ./bpfgen --assembly dns -- *.<a href=\"http://www.example.uk\">www.example.uk</a>\nldx 4*([0]&amp;0xf)\n; l3_off(0) + 8 of udp + 12 of dns\nld #20\nadd x\ntax\n...</p><p>The generated code is way too long to post and explain here, I strongly recommend looking at the <code>bpftools/gen_dns.py</code> file and reviewing the kernel <a href=\"https://github.com/torvalds/linux/blob/master/Documentation/networking/filter.txt\"><code>networking/filter.txt</code></a> documentation.</p><p>For more details about the <code>bpfgen</code> tool and its features see the documentation:</p><p>$ ./bpfgen --help\n$ ./bpfgen dns -- --help\n$ ./bpfgen dns_validate -- --help\n$ ./bpfgen suffix -- --help</p><p>The BPF bytecode generated by <code>bpfgen</code> is somewhat special - it&#39;s prepared to be passed to the <code>xt_bpf</code> iptables module and <i>not</i> the usual tcpdump. The bytecode passed to <code>xt_bpf</code> must assume the packet starts from the IP header without any layer 2 header. This is not how it usually works for tcpdump which assumes packets do have a proper layer 2 header. In other words: you can&#39;t swap bytecodes between tcpdump and <code>xt_bpf</code>.</p><p>To work around that <code>bpfgen</code> has an <code>--offset</code> flag. To create BPF for <code>xt_bpf</code> you can supply the explicit <code>--offset=0</code> flag:</p><p>$ ./bpfgen --offset=0 dns -- *.<a href=\"http://www.example.uk\">www.example.uk</a></p><p>To create BPF for tcpdump on Ethernet packets you must supply <code>--offset=14</code> flag:</p><p>$ ./bpfgen --offset=14 dns -- *.<a href=\"http://www.example.uk\">www.example.uk</a></p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"verification\">Verification</h3>\n            <a href=\"#verification\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>It&#39;s always a good idea to test the bytecode before putting it on production servers. For that we have a <code>filter</code> script. It consumes a pcap file, runs it through a <i>tcpdump</i>-like BPF and produces another pcap with only packets that matched given bytecode.</p><p>To see what traffic will <i>match</i> our BPF:</p><p>$ cat example.pcap \\\n| ./filter -b &quot;`./bpfgen --offset 14 dns -- *.<a href=\"http://www.example.uk`\">www.example.uk`</a>&quot; \\\n| tcpdump -nr - | wc -l\n9997</p><p>Hooray, our BPF successfully matches 99.97% of the flood we recorded. Now let&#39;s see that which packets it will <i>not match</i>:</p><p>$ cat example.pcap \\\n| ./filter -b &quot;`./bpfgen -o 14 --negate dns *.<a href=\"http://www.example.uk`\">www.example.uk`</a>&quot; \\\n| tcpdump -nr - | wc -l\n3</p><p>It&#39;s often worthwhile to inspect the matched and unmatched packets and make sure the BPF is indeed correct.</p><p><b>Note</b>: <code>filter</code> uses the usual <code>libpcap</code> infrastructure, that&#39;s why it requires the BPF to consume a layer 2 header. We will likely rewrite that code and change <code>filter</code> to use BPF generated for <code>xt_bpf</code>.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"iptables\">iptables</h3>\n            <a href=\"#iptables\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>With the BPF bytecode tested we can safely deploy it to the servers. The simplest way to do it is to apply an <code>iptables</code> rule manually:</p><p>iptables -I INPUT 1 \\\n--wait -p udp --dport 53 \\\n-m bpf --bytecode &quot;14,0 0 0 20,177 0 0 0,12... \\\n-j DROP</p><p>(You will need a recent iptables with <code>xt_bpf</code> support.)</p><p>This can be very cumbersome. Especially because the <code>--bytecode</code> parameter contains spaces which makes it pretty unfriendly for parsing with bash or ssh.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"generating-a-bash-script\">Generating a bash script</h3>\n            <a href=\"#generating-a-bash-script\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>To speed up the process we have another tool <code>iptables_bpf</code>. It accepts almost the same parameters as <code>bpfgen</code> but, as opposed to printing a raw BPF bytecode, it produces a bash script:</p><p>$ ./iptables_bpf dns -- *.example.uk\nGenerated file &#39;bpf_dns_ip4_any_example_uk.sh&#39;</p><p>The generated script is fairly straightforward and at its core it applies an iptables rule like this:</p><p>iptables \\\n--wait -I INPUT 1 \\\n-i eth0 \\\n-p udp --dport 53 \\\n-m set --match-set bpf_dns_ip4_any_example_uk dst \\\n-m bpf --bytecode &quot;16,177 0 0 0,0 0 0 20,12 ... \\\n-m comment --comment &quot;dns -- *.example.uk&quot; \\\n-j DROP</p><p>As you can see, it depends on an ipset &quot;match-set&quot; named <code>bpf_dns_ip4_any_example_uk</code>. ipsets are a pretty recent addition to the iptables family and they allow us to control which destination IPs therule will be applied to. We use this for additional safety. When you deploy the generated script by default it will not match any traffic. Only when you add an IP to the ipset will the BPF rulebe executed. To add an IP to the ipset run:</p><p>ipset add bpf_dns_ip4_any_example_uk 1.1.1.1/32</p><p>Alternatively rerun the script with an IP as a parameter:</p><p>$ sudo ./bpf_dns_ip4_any_example_uk.sh 1.1.1.1/32</p><p>If things go wrong pass <code>--delete</code> to remove the BPF iptables rule and the ipset:</p><p>$ sudo ./bpf_dns_ip4_any_example_uk.sh --delete</p><p>Although fairly advanced and I hope practical, this generated script is not really intended as a fit-for-all deployment tool for all BPF scripts. Feel encouraged to tweak it or fork it for your needs.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"chaining-bpf-rules\">Chaining BPF rules</h3>\n            <a href=\"#chaining-bpf-rules\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In extreme cases you might want to chain BPF rules. As an example see the <code>iptables_bpf_chain</code> script, you can run it like this:</p><p>$ ./iptables_bpf_chain -w example_uk \\\n--accept <a href=\"http://www.example.uk\">www.example.uk</a> \\\n--accept ns.example.uk \\\n--drop any\nGenerated file &#39;example_uk_ip4.sh&#39;</p><p>The generated file will create the iptables chain <code>example_uk</code> and it will add three rules to it: two BPF rules accepting some packets and one rule dropping everything else. The chain will be referenced from the &quot;INPUT&quot; chain in a similar fashion to the previous example. Before using <code>iptables_bpf_chain</code> please do review it carefully.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"summary\">Summary</h3>\n            <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>This article only scratched the surface of our tools. They can do much more, like:</p><ul><li><p>match IPv6 packets</p></li><li><p>do suffix matching</p></li><li><p>match domains case insensitively</p></li><li><p>perform basic DNS request validation</p></li></ul><p>For details read the documentation with <code>--help</code>.</p><p>Fighting packet floods is tough, but with tools in place it can be managed efficiently. The <code>xt_bpf</code> iptables module is very effective and with our BPF generation tools it allows us to drop malicious traffic in iptables before it hits the application.</p><p>By sharing these tools we hope to help administrators around the world, we know we are not the only ones fighting packet floods!</p>",
		"id": "2xmicdqlhq3BgxAPFWY9aX",
		"localeList": {
			"name": "Introducing the BPF Tools Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2014-07-03T16:00:00.000+01:00",
		"slug": "introducing-the-bpf-tools",
		"tags": [
			{
				"id": "5kIxDMJCg3PXQxVINDL0Cw",
				"name": "Attacks",
				"slug": "attacks"
			},
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			}
		],
		"title": "Introducing the BPF Tools",
		"updated_at": "2024-10-10T00:35:21.781Z",
		"url": "https://blog.cloudflare.com/introducing-the-bpf-tools"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}