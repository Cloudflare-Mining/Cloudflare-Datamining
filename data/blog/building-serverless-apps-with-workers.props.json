{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Jonathan Spies",
				"slug": "jonathan-spies",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7M3ylmYYzZDjXk5AYCmOGe/5d13153b3c4c09d5300ab2dc0cb89b9f/jonathan-spies.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "You’ve had a chance to build a Cloudflare Worker. You’ve tried KV Storage and have a great use case for your Worker. You’ve even demonstrated the usefulness to your product or organization. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6EhgFGV0DVJ7ezha87Uj7z/f1f76260834d99dbb35b0cddb5a6cf2b/building-serverless-apps-with-workers.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7vmlIhRF33Wx5qO2z4kWeU/3d56afb7087c7687b4bbb2faf6343435/ZG9nZm9vZEAyeC5wbmc-.png\" alt=\"\" class=\"kg-image\" width=\"2000\" height=\"1038\" loading=\"lazy\"/>\n            \n            </figure><p>You’ve had a chance to build a <a href=\"https://developers.cloudflare.com/workers/about/\">Cloudflare Worker</a>. You’ve tried <a href=\"https://developers.cloudflare.com/workers/kv/\">KV Storage</a> and have a great use case for your Worker. You’ve even demonstrated the usefulness to your product or organization. Now you need to go from writing a single file in the Cloudflare Dashboard UI Editor to source controlled code with multiple environments deployed using your favorite CI tool.</p><p>Fortunately, we have a powerful and flexible <a href=\"https://developers.cloudflare.com/workers/api/\">API</a> for managing your workers. You can customize your deployment to your heart’s content. Our blog has already featured many things made possible by that API:</p><ul><li><p><a href=\"/introducing-wrangler-cli/\">The Wrangler CLI</a></p></li><li><p><a href=\"/a-ci/\">CI/CD Pipeline</a></p></li><li><p><a href=\"/deploying-workers-with-github-actions-serverless/\">Github Actions</a></p></li><li><p><a href=\"/create-cloudflare-worker-bootstrap-your-cloudflare-worker/\">Worker bootstrap template</a></p></li></ul><p>These tools make deployments easier to configure, but it still takes time to manage. The <a href=\"https://serverless.com/\">Serverless Framework</a> <a href=\"https://serverless.com/plugins/serverless-cloudflare-workers/\">Cloudflare Workers plugin</a> removes that deployment overhead so you can spend more time working on your application and less on your deployment.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"focus-on-your-application\">Focus on your application</h3>\n      <a href=\"#focus-on-your-application\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Here at Cloudflare, we’ve been working to rebuild our Access product to run entirely on Workers. The move will allow Access to take advantage of the resiliency, performance, and flexibility of Workers. We’ll publish a more detailed post about that migration once complete, but the experience required that we retool some of our process to match or existing development experience as much as possible.</p><p>To us this meant:</p><ul><li><p>Git</p></li><li><p>Easily deploy</p></li><li><p>Different environments</p></li><li><p>Unit Testing</p></li><li><p>CI Integration</p></li><li><p>Typescript/Multiple Files</p></li><li><p>Everything Must Be Automated</p></li></ul><p>The Cloudflare Access team looked at three options for automating all of these tools in our pipeline. All of the options will work and could be right for you, but custom scripting can be a chore to maintain and Terraform lacked some extensibility.</p><ol><li><p>Custom Scripting</p></li><li><p><a href=\"https://www.terraform.io/docs/providers/cloudflare/index.html\">Terraform</a></p></li><li><p>Serverless Framework</p></li></ol><p>We decided on the Serverless Framework. Serverless Framework provided a tool to mirror our existing process as closely as possible without too much DevOps overhead. Serverless is extremely simple and doesn’t interfere with the application code. You can get a project set up and deployed in seconds. It’s obviously less work than writing your own custom management scripts. But it also requires less boiler plate than Terraform because the Serverless Framework is designed for the “serverless” niche. However, if you are already using Terraform to manage other Cloudflare products, Terraform might be the best fit.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"walkthrough\">Walkthrough</h3>\n      <a href=\"#walkthrough\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Everything for the project happens in a YAML file called serverless.yml. Let’s go through the features of the configuration file.</p><p>To get started, we need to install serverless from npm and generate a new project.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm install serverless -g\nserverless create --template cloudflare-workers --path myproject\ncd myproject\nnpm install</pre></code>\n            <p>If you are an enterprise client, you want to use the cloudflare-workers-enterprise template as it will set up more than one worker (but don’t worry, you can add more to any template). Also, I’ll touch on this later, but if you want to write your workers in Rust, use the cloudflare-workers-rust template.</p><p>You should now have a project that feels familiar, ready to be added to your favorite source control. In the project should be a serverless.yml file like the following.</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">service:\n    name: hello-world\n\nprovider:\n  name: cloudflare\n  config:\n    accountId: CLOUDFLARE_ACCOUNT_ID\n    zoneId: CLOUDFLARE_ZONE_ID\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  hello:\n    name: hello\n    script: helloWorld  # there must be a file called helloWorld.js\n    events:\n      - http:\n          url: example.com/hello/*\n          method: GET\n          headers:\n            foo: bar\n            x-client-data: value</pre></code>\n            <p>The service block simply contains the name of your service. This will be used in your Worker script names if you do not overwrite them.</p><p>Under provider, name must be ‘cloudflare’  and you need to add your account and zone IDs. You can find them in the Cloudflare Dashboard.</p><p>The plugins section adds the Cloudflare specific code.</p><p>Now for the good part: functions. Each block under functions is a Worker script.</p><p><b>name</b>: (optional) If left blank it will be STAGE-service.name-script.identifier. If I removed name from this file and deployed in production stage, the script would be named production-hello-world-hello.</p><p><b>script</b>: the relative path to the javascript file with the worker script. I like to organize mine in a folder called handlers.</p><p><b>events</b>: Currently Workers only support http events. We call these routes. The example provided says that GET <a href=\"https://example.com/hello/\">https://example.com/hello/</a> will  cause this worker to execute. The headers block is for testing invocations.</p><p>At this point you can deploy your worker!</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">CLOUDFLARE_AUTH_EMAIL=you@yourdomain.com CLOUDFLARE_AUTH_KEY=XXXXXXXX serverless deploy</pre></code>\n            <p>This is very easy to deploy, but it doesn’t address our requirements. Luckily, there’s just a few simple modifications to make.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"maturing-our-yaml-file\">Maturing our YAML File</h3>\n      <a href=\"#maturing-our-yaml-file\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Here’s a more complex YAML file.</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">service:\n  name: hello-world\n\npackage:\n  exclude:\n    - node_modules/**\n  excludeDevDependencies: false\n\ncustom:\n  defaultStage: development\n  deployVars: ${file(./config/deploy.${self:provider.stage}.yml)}\n\nkv: &amp;kv\n  - variable: MYUSERS\n    namespace: users\n\nprovider:\n  name: cloudflare\n  stage: ${opt:stage, self:custom.defaultStage}\n  config:\n    accountId: ${env:CLOUDFLARE_ACCOUNT_ID}\n    zoneId: ${env:CLOUDFLARE_ZONE_ID}\n\nplugins:\n  - serverless-cloudflare-workers\n\nfunctions:\n  hello:\n    name: ${self:provider.stage}-hello\n    script: handlers/hello\n    webpack: true\n    environment:\n      MY_ENV_VAR: ${self:custom.deployVars.env_var_value}\n      SENTRY_KEY: ${self:custom.deployVars.sentry_key}\n    resources: \n      kv: *kv\n    events:\n      - http:\n          url: &quot;${self:custom.deployVars.SUBDOMAIN}.mydomain.com/hello&quot;\n          method: GET\n      - http:\n          url: &quot;${self:custom.deployVars.SUBDOMAIN}.mydomain.com/alsohello*&quot;\n          method: GET</pre></code>\n            <p>We can add a custom section where we can put custom variables to use later in the file.</p><p><b>defaultStage</b>: We set this to development so that forgetting to pass a stage doesn’t trigger a production deploy. Combined with the <b>stage</b> option under provider we can set the stage for deployment.</p><p><b>deployVars</b>: We use this custom variable to load another YAML file dependent on the stage. This lets us have different values for different stages. In development, this line loads the file <code>./config/deploy.development.yml</code>. Here’s an example file:</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">env_var_value: true\nsentry_key: XXXXX\nSUBDOMAIN: dev</pre></code>\n            <p><b>kv</b>: Here we are showing off a feature of YAML. If you assign a name to a block using the ‘&amp;’, you can use it later as a YAML variable. This is very handy in a multi script account. We could have named this variable anything, but we are naming it kv since it holds our Workers Key Value storage settings to be used in our function below.</p><p>Inside of the <b>kv</b> block we&#39;re creating a namespace and binding it to a variable available in your Worker. It will ensure that the namespace “users” exists and is bound to MYUSERS.</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">kv: &amp;kv\n  - variable: MYUSERS\n    namespace: users</pre></code>\n            <p><b>provider</b>: The only new part of the provider block is <b>stage</b>.</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">stage: ${opt:stage, self:custom.defaultStage}</pre></code>\n            <p>This line sets stage to either the command line option or custom.defaultStage if opt:stage is blank. When we deploy, we pass —stage=production to serverless deploy.</p><p>Now under our function we have added webpack, resources, and environment.</p><p><b>webpack</b>: If set to true, will simply bundle each handler into a single file for deployment. It will also take a string representing a path to a webpack config file so you can customize it. This is how we add Typescript support to our projects.</p><p><b>resources</b>: This block is used to automate resource creation. In resources we&#39;re linking back to the kv block we created earlier.</p><p><i>Side note: If you would like to include WASM bindings in your project, it can be done in a very similar way to how we included Workers KV. For more information on WASM, see the </i><a href=\"https://serverless.com/plugins/serverless-cloudflare-workers/\"><i>documentation</i></a><i>.</i></p><p><b>environment</b>: This is the butter for the bread that is managing configuration for different stages. Here we can specify values to bind to variables to use in worker scripts. Combined with YAML magic, we can store our values in the aforementioned config files so that we deploy different values in different stages. With environments, we can easily tie into our CI tool. The CI tool has our deploy.production.yml. We simply run the following command from within our CI.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sls deploy --stage=production</pre></code>\n            <p>Finally, I added a route to demonstrate that a script can be executed on multiple routes.</p><p>At this point I’ve covered (or hinted) at everything on our original list except Unit Testing. There are a few ways to do this.</p><p>We have a previous blog post about <a href=\"/unit-testing-worker-functions/\">Unit Testing</a> that covers using <a href=\"https://github.com/dollarshaveclub/cloudworker\">cloud worker</a>, a great tool built by <a href=\"https://www.dollarshaveclub.com/\">Dollar Shave Club</a>.</p><p>My team opted to use the classic node frameworks mocha and sinon. Because we are using Typescript, we can build for node or build for v8. You can also make mocha work for non-typescript projects if you use an <a href=\"https://nodejs.org/api/esm.html\">experimental feature that adds import/export support to node</a>.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">--experimental-modules</pre></code>\n            <p>We’re excited about moving more and more of our services to Cloudflare Workers, and the Serverless Framework makes that easier to do. If you’d like to learn even more or get involved with the project, see us on <a href=\"https://github.com/cloudflare/serverless-cloudflare-workers\">github.com</a>. For additional information on using Serverless Framework with Cloudflare Workers, check out our <a href=\"https://developers.cloudflare.com/workers/deploying-workers/serverless/\">documentation on the Serverless Framework</a>.</p>",
		"id": "40cVOSqV3lXK8azULKCab7",
		"localeList": {
			"name": "Eating Dogfood at Scale: How We Build Serverless Apps with Workers Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-04-19T14:00:00.000+01:00",
		"slug": "building-serverless-apps-with-workers",
		"tags": [
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "5x72ei67SoD11VQ0uqFtpF",
				"name": "API",
				"slug": "api"
			},
			{
				"id": "4YYee7nj2IYM3qb1AjguFP",
				"name": "CLI",
				"slug": "cli"
			},
			{
				"id": "1giXdvOjnUzv03BX3o7XBx",
				"name": "GitHub",
				"slug": "github"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			}
		],
		"title": "Eating Dogfood at Scale: How We Build Serverless Apps with Workers",
		"updated_at": "2024-10-10T00:32:11.816Z",
		"url": "https://blog.cloudflare.com/building-serverless-apps-with-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}