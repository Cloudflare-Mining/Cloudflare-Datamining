{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "7",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"fr-fr",
		"de-de",
		"ja-jp",
		"ko-kr",
		"es-es"
	],
	"post": {
		"authors": [
			{
				"name": "Matt Silverlock",
				"slug": "silverlock",
				"bio": "Director of Product at Cloudflare.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7xP5qePZD9eyVtwIesXYxh/e714aaa573161ec9eb48d59bd1aa6225/silverlock.jpeg",
				"location": null,
				"website": null,
				"twitter": "@elithrar",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Jérôme Schneider",
				"slug": "jerome",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4ydnymjeDJjlnRryLpDQUH/71981f68cfcf3962952400cf88955a5c/jerome.png",
				"location": "France",
				"website": null,
				"twitter": "@jeromeschneider",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Vectorize is our brand-new vector database offering, designed to let you build full-stack, AI-powered applications entirely on Cloudflare’s global network: and you can start building with it right away",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1c8wvy4jY6FSibQBUFAa8y/0ae663ad4fff3fe71d474833c043f0b9/vectorize-vector-database-open-beta.png",
		"featured": false,
		"html": "<p></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4UEegJQ4EtPbnJwh7UQZcd/2221274c908415bce2e1eba81a115d90/image2-21.png\" alt=\"Vectorize: a vector database for shipping AI-powered applications to production, fast\" class=\"kg-image\" width=\"1200\" height=\"668\" loading=\"lazy\"/>\n            \n            </figure><p>Vectorize is our brand-new <a href=\"https://www.cloudflare.com/learning/ai/what-is-vector-database/\">vector database</a> offering, designed to let you build full-stack, AI-powered applications entirely on Cloudflare’s global network: and you can start building with it right away. Vectorize is in open beta, and is available to any developer using <a href=\"https://workers.cloudflare.com/\">Cloudflare Workers</a>.</p><p>You can use Vectorize with <a href=\"/workers-ai\">Workers AI</a> to power semantic search, classification, recommendation and anomaly detection use-cases directly with Workers, improve the accuracy and context of answers from <a href=\"https://www.cloudflare.com/learning/ai/what-is-large-language-model/\">LLMs (Large Language Models)</a>, and/or bring-your-own <a href=\"https://www.cloudflare.com/learning/ai/what-are-embeddings/\">embeddings</a> from popular platforms, including OpenAI and Cohere.</p><p>Visit <a href=\"https://developers.cloudflare.com/vectorize/get-started/\">Vectorize’s developer documentation</a> to get started, or read on if you want to better understand what vector databases do and how Vectorize is different.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"why-do-i-need-a-vector-database\">Why do I need a vector database?</h2>\n      <a href=\"#why-do-i-need-a-vector-database\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n    <div class=\"flex anchor relative\">\n      <h3 id=\"machine-learning-models-cant-remember-anything-only-what-they-were-trained-on\">Machine learning models can’t remember anything: only what they were trained on.</h3>\n      <a href=\"#machine-learning-models-cant-remember-anything-only-what-they-were-trained-on\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Vector databases are designed to solve this, by capturing how an ML model represents data — including structured and unstructured text, images and audio — and storing it in a way that allows you to compare against <i>future</i> inputs. This allows us to leverage the power of existing machine-learning models and LLMs (Large Language Models) for content they haven’t been trained on: which, given the tremendous cost of training models, turns out to be extremely powerful.</p><p>To better illustrate why a vector database like Vectorize is useful, let’s pretend they don’t exist, and see how painful it is to give context to an ML model or LLM for a semantic search or recommendation task. Our goal is to understand what content is similar to our query and return it: based on our own dataset.</p><ol><li><p>Our user query comes in: they’re searching for “how to write to R2 from Cloudflare Workers”</p></li><li><p>We load up our entire documentation dataset — a thankfully “small” dataset at about 65,000 sentences, or 2.1 GB — and provide it alongside the query from our user. This allows the model to have the context it needs, based on our data.</p></li><li><p><b>We wait.</b></p></li><li><p><b>(A long time)</b></p></li><li><p>We get our similarity scores back, with the sentences most similar to the user’s query, and then work to map those back to URLs before we return our search results.</p></li></ol><p>… and then another query comes in, and we have to start this all over again.</p><p>In practice, this isn’t really possible: we can’t pass that much context in an API call (prompt) to most <a href=\"https://www.cloudflare.com/learning/ai/what-is-machine-learning/\">machine learning models</a>, and even if we could, it’d take tremendous amounts of memory and time to process our dataset over-and-over again.</p><p>With a vector database, we don’t have to repeat step 2: we perform it once, or as our dataset updates, and use our vector database to provide a form of long-term memory for our machine learning model. Our workflow looks a little more like this:</p><ol><li><p>We load up our entire documentation dataset, run it through our model, and store the resulting vector embeddings in our vector database (just once).</p></li><li><p>For each user query (and only the query) we ask the same model and retrieve a vector representation.</p></li><li><p>We query our vector database with that query vector, which returns the vectors closest to our query vector.</p></li></ol><p>If we looked at these two flows side by side, we can quickly see how inefficient and impractical it is to use our own dataset with an existing model without a vector database:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6nVc2lsVxxlTjVWb5fF8Gn/df03f68c7792ece281f887608f0bad2f/image4-11.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1333\" loading=\"lazy\"/>\n            \n            </figure><p>Using a vector database to help machine learning models remember.</p><p>From this simple example, it’s probably starting to make some sense: but you might also be wondering why you need a vector database instead of just a regular database.</p><p>Vectors are the model’s representation of an input: how it maps that input to its internal structure, or “features”. Broadly, the more similar vectors are, the more similar the model believes those inputs to be based on how it extracts features from an input.</p><p>This is seemingly easy when we look at example vectors of only a handful of dimensions. But with real-world outputs, searching across 10,000 to 250,000 vectors, each potentially 1,536 dimensions wide, is non-trivial. This is where vector databases come in: to make search work at scale, vector databases use a specific class of algorithm, such as k-nearest neighbors (<a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\">kNN</a>) or other approximate nearest neighbor (ANN) <a href=\"https://arxiv.org/abs/1603.09320\">algorithms</a> to determine vector similarity.</p><p>And although vector databases are extremely useful when building <a href=\"https://www.cloudflare.com/learning/ai/what-is-artificial-intelligence/\">AI</a> and machine learning powered applications, they’re not <i>only</i> useful in those use-cases: they can be used for a multitude of classification and anomaly detection tasks. Knowing whether a query input is similar — or potentially dissimilar — from other inputs can power content moderation (does this match known-bad content?) and security alerting (have I seen this before?) tasks as well.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"building-a-recommendation-engine-with-vector-search\">Building a recommendation engine with vector search</h2>\n      <a href=\"#building-a-recommendation-engine-with-vector-search\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We built Vectorize to be a powerful partner to <a href=\"https://developers.cloudflare.com/workers-ai/\">Workers AI</a>: enabling you to run vector search tasks as close to users as possible, and without having to think about how to scale it for production.</p><p>We’re going to take a real world example — building a (product) recommendation engine for an e-commerce store — and simplify a few things.</p><p>Our goal is to show a list of “relevant products” on each product listing page: a perfect use-case for vector search. Our input vectors in the example are placeholders, but in a real world application we would generate them based on product descriptions and/or cart data by passing them through a sentence similarity model (such as Worker’s AI’s <a href=\"https://developers.cloudflare.com/workers-ai/models/embedding/\">text embedding model</a>)</p><p>Each vector represents a product across our store, and we associate the URL of the product with it. We could also set the ID of each vector to the product ID: both approaches are valid. Our query — vector search — represents the product description and content for the product user is currently viewing.</p><p>Let’s step through what this looks like in code: this example is pulled straight from our <a href=\"https://developers.cloudflare.com/vectorize/get-started/\">developer documentation</a>:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">export interface Env {\n\t// This makes our vector index methods available on env.MY_VECTOR_INDEX.*\n\t// e.g. env.MY_VECTOR_INDEX.insert() or .query()\n\tTUTORIAL_INDEX: VectorizeIndex;\n}\n\n// Sample vectors: 3 dimensions wide.\n//\n// Vectors from a machine-learning model are typically ~100 to 1536 dimensions\n// wide (or wider still).\nconst sampleVectors: Array&lt;VectorizeVector&gt; = [\n\t{ id: &#039;1&#039;, values: [32.4, 74.1, 3.2], metadata: { url: &#039;/products/sku/13913913&#039; } },\n\t{ id: &#039;2&#039;, values: [15.1, 19.2, 15.8], metadata: { url: &#039;/products/sku/10148191&#039; } },\n\t{ id: &#039;3&#039;, values: [0.16, 1.2, 3.8], metadata: { url: &#039;/products/sku/97913813&#039; } },\n\t{ id: &#039;4&#039;, values: [75.1, 67.1, 29.9], metadata: { url: &#039;/products/sku/418313&#039; } },\n\t{ id: &#039;5&#039;, values: [58.8, 6.7, 3.4], metadata: { url: &#039;/products/sku/55519183&#039; } },\n];\n\nexport default {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise&lt;Response&gt; {\n\t\tif (new URL(request.url).pathname !== &#039;/&#039;) {\n\t\t\treturn new Response(&#039;&#039;, { status: 404 });\n\t\t}\n\t\t// Insert some sample vectors into our index\n\t\t// In a real application, these vectors would be the output of a machine learning (ML) model,\n\t\t// such as Workers AI, OpenAI, or Cohere.\n\t\tlet inserted = await env.TUTORIAL_INDEX.insert(sampleVectors);\n\n\t\t// Log the number of IDs we successfully inserted\n\t\tconsole.info(`inserted ${inserted.count} vectors into the index`);\n\n\t\t// In a real application, we would take a user query - e.g. &quot;durable\n\t\t// objects&quot; - and transform it into a vector emebedding first.\n\t\t//\n\t\t// In our example, we&#039;re going to construct a simple vector that should\n\t\t// match vector id #5\n\t\tlet queryVector: Array&lt;number&gt; = [54.8, 5.5, 3.1];\n\n\t\t// Query our index and return the three (topK = 3) most similar vector\n\t\t// IDs with their similarity score.\n\t\t//\n\t\t// By default, vector values are not returned, as in many cases the\n\t\t// vectorId and scores are sufficient to map the vector back to the\n\t\t// original content it represents.\n\t\tlet matches = await env.TUTORIAL_INDEX.query(queryVector, { topK: 3, returnVectors: true });\n\n\t\t// We map over our results to find the most similar vector result.\n\t\t//\n\t\t// Since our index uses the &#039;cosine&#039; distance metric, scores will range\n\t\t// from 1 to -1.  A value of &#039;1&#039; means the vector is the same; the\n\t\t// closer to 1, the more similar. Values of -1 (least similar) and 0 (no\n\t\t// match).\n\t\t// let closestScore = 0;\n\t\t// let mostSimilarId = &#039;&#039;;\n\t\t// matches.matches.map((match) =&gt; {\n\t\t// \tif (match.score &gt; closestScore) {\n\t\t// \t\tclosestScore = match.score;\n\t\t// \t\tmostSimilarId = match.vectorId;\n\t\t// \t}\n\t\t// });\n\n\t\treturn Response.json({\n\t\t\t// This will return the closest vectors: we&#039;ll see that the vector\n\t\t\t// with id = 5 has the highest score (closest to 1.0) as the\n\t\t\t// distance between it and our query vector is the smallest.\n\t\t\t// Return the full set of matches so we can see the possible scores.\n\t\t\tmatches: matches,\n\t\t});\n\t},\n};</pre></code>\n            <p>The code above is intentionally simple, but illustrates vector search at its core: we insert vectors into our database, and query it for vectors with the smallest distance to our query vector.</p><p>Here are the results, with the values included, so we visually observe that our query vector <code>[54.8, 5.5, 3.1]</code> is similar to our highest scoring match: <code>[58.799, 6.699, 3.400]</code> returned from our search. This index uses <a href=\"https://en.wikipedia.org/wiki/Cosine_similarity\">cosine</a> similarity to calculate the distance between vectors, which means that the closer the score to 1, the more similar a match is to our query vector.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">{\n  &quot;matches&quot;: {\n    &quot;count&quot;: 3,\n    &quot;matches&quot;: [\n      {\n        &quot;score&quot;: 0.999909,\n        &quot;vectorId&quot;: &quot;5&quot;,\n        &quot;vector&quot;: {\n          &quot;id&quot;: &quot;5&quot;,\n          &quot;values&quot;: [\n            58.79999923706055,\n            6.699999809265137,\n            3.4000000953674316\n          ],\n          &quot;metadata&quot;: {\n            &quot;url&quot;: &quot;/products/sku/55519183&quot;\n          }\n        }\n      },\n      {\n        &quot;score&quot;: 0.789848,\n        &quot;vectorId&quot;: &quot;4&quot;,\n        &quot;vector&quot;: {\n          &quot;id&quot;: &quot;4&quot;,\n          &quot;values&quot;: [\n            75.0999984741211,\n            67.0999984741211,\n            29.899999618530273\n          ],\n          &quot;metadata&quot;: {\n            &quot;url&quot;: &quot;/products/sku/418313&quot;\n          }\n        }\n      },\n      {\n        &quot;score&quot;: 0.611976,\n        &quot;vectorId&quot;: &quot;2&quot;,\n        &quot;vector&quot;: {\n          &quot;id&quot;: &quot;2&quot;,\n          &quot;values&quot;: [\n            15.100000381469727,\n            19.200000762939453,\n            15.800000190734863\n          ],\n          &quot;metadata&quot;: {\n            &quot;url&quot;: &quot;/products/sku/10148191&quot;\n          }\n        }\n      }\n    ]\n  }\n}</pre></code>\n            <p>In a real application, we could now quickly return product recommendation URLs based on the most similar products, sorting them by their score (highest to lowest), and increasing the topK value if we want to show more. The metadata stored alongside each vector could also embed a path to an <a href=\"https://developers.cloudflare.com/r2/\">R2 object</a>, a UUID for a row in a <a href=\"https://developers.cloudflare.com/d1/\">D1 database</a>, or a key-value pair from <a href=\"https://developers.cloudflare.com/kv/\">Workers KV</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"workers-ai-vectorize-full-stack-vector-search-on-cloudflare\">Workers AI + Vectorize: full stack vector search on Cloudflare</h3>\n      <a href=\"#workers-ai-vectorize-full-stack-vector-search-on-cloudflare\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In a real application, we need a machine learning model that can both generate vector embeddings from our original dataset (to seed our database) and <i>quickly</i> turn user queries into vector embeddings too. These need to be from the same model, as each model represents features differently.</p><p>Here’s a compact example building an entire end-to-end vector search pipeline on Cloudflare:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { Ai } from &#039;@cloudflare/ai&#039;;\nexport interface Env {\n\tTEXT_EMBEDDINGS: VectorizeIndex;\n\tAI: any;\n}\ninterface EmbeddingResponse {\n\tshape: number[];\n\tdata: number[][];\n}\n\nexport default {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise&lt;Response&gt; {\n\t\tconst ai = new Ai(env.AI);\n\t\tlet path = new URL(request.url).pathname;\n\t\tif (path.startsWith(&#039;/favicon&#039;)) {\n\t\t\treturn new Response(&#039;&#039;, { status: 404 });\n\t\t}\n\n\t\t// We only need to generate vector embeddings just the once (or as our\n\t\t// data changes), not on every request\n\t\tif (path === &#039;/insert&#039;) {\n\t\t\t// In a real-world application, we could read in content from R2 or\n\t\t\t// a SQL database (like D1) and pass it to Workers AI\n\t\t\tconst stories = [&#039;This is a story about an orange cloud&#039;, &#039;This is a story about a llama&#039;, &#039;This is a story about a hugging emoji&#039;];\n\t\t\tconst modelResp: EmbeddingResponse = await ai.run(&#039;@cf/baai/bge-base-en-v1.5&#039;, {\n\t\t\t\ttext: stories,\n\t\t\t});\n\n\t\t\t// We need to convert the vector embeddings into a format Vectorize can accept.\n\t\t\t// Each vector needs an id, a value (the vector) and optional metadata.\n\t\t\t// In a real app, our ID would typicaly be bound to the ID of the source\n\t\t\t// document.\n\t\t\tlet vectors: VectorizeVector[] = [];\n\t\t\tlet id = 1;\n\t\t\tmodelResp.data.forEach((vector) =&gt; {\n\t\t\t\tvectors.push({ id: `${id}`, values: vector });\n\t\t\t\tid++;\n\t\t\t});\n\n\t\t\tawait env.TEXT_EMBEDDINGS.upsert(vectors);\n\t\t}\n\n\t\t// Our query: we expect this to match vector id: 1 in this simple example\n\t\tlet userQuery = &#039;orange cloud&#039;;\n\t\tconst queryVector: EmbeddingResponse = await ai.run(&#039;@cf/baai/bge-base-en-v1.5&#039;, {\n\t\t\ttext: [userQuery],\n\t\t});\n\n\t\tlet matches = await env.TEXT_EMBEDDINGS.query(queryVector.data[0], { topK: 1 });\n\t\treturn Response.json({\n\t\t\t// We expect vector id: 1 to be our top match with a score of\n\t\t\t// ~0.896888444\n\t\t\t// We are using a cosine distance metric, where the closer to one,\n\t\t\t// the more similar.\n\t\t\tmatches: matches,\n\t\t});\n\t},\n};</pre></code>\n            <p>The code above does four things:</p><ol><li><p>It passes the three sentences to Workers AI’s <a href=\"https://developers.cloudflare.com/workers-ai/models/embedding/\">text embedding model</a> (<code>@cf/baai/bge-base-en-v1.5</code>) and retrieves their vector embeddings.</p></li><li><p>It inserts those vectors into our Vectorize index.</p></li><li><p>Takes the user query and transforms it into a vector embedding via the same Workers AI model.</p></li><li><p>Queries our Vectorize index for matches.</p></li></ol><p>This example might look “too” simple, but in a production application, we’d only have to change two things: just insert our vectors once (or periodically via <a href=\"https://developers.cloudflare.com/workers/configuration/cron-triggers/\">Cron Triggers</a>), and replace our three example sentences with real data stored in R2, a D1 database, or another storage provider.</p><p>In fact, this is incredibly similar to how we run <a href=\"https://developers.cloudflare.com/workers/ai/\">Cursor</a>, the AI assistant that can answer questions about Cloudflare Worker: we migrated Cursor to run on Workers AI and Vectorize. We generate text embeddings from our developer documentation using its built-in text embedding model, insert them into a Vectorize index, and transform user queries on the fly via that same model.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"byo-embeddings-from-your-favorite-ai-api\">BYO embeddings from your favorite AI API</h2>\n      <a href=\"#byo-embeddings-from-your-favorite-ai-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Vectorize isn’t just limited to Workers AI, though: it’s a fully-fledged, standalone vector database.</p><p>If you’re already using <a href=\"https://platform.openai.com/docs/guides/embeddings\">OpenAI’s Embedding API</a>, Cohere’s <a href=\"https://docs.cohere.com/reference/embed\">multilingual model</a>, or any other embedding API, then you can easily bring-your-own (BYO) vectors to Vectorize.</p><p>It works just the same: generate your embeddings, insert them into Vectorize, and pass your queries through the model before you query your index. Vectorize includes a few shortcuts for some of the most popular embedding models.</p>\n            <pre class=\"language-python\"><code class=\"language-python\"># Vectorize has ready-to-go presets that set the dimensions and distance metric for popular embeddings models\n$ wrangler vectorize create openai-index-example --preset=openai-text-embedding-ada-002</pre></code>\n            <p>This can be particularly useful if you already have an existing workflow around an existing embeddings API, and/or have validated a specific multimodal or multilingual embeddings model for your use-case.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"making-the-cost-of-ai-predictable\">Making the cost of AI predictable</h2>\n      <a href=\"#making-the-cost-of-ai-predictable\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There’s a tremendous amount of excitement around AI and ML, but there’s also one big concern: that it’s too expensive to experiment with, and hard to predict at scale.</p><p>With Vectorize, we wanted to bring a simpler pricing model to vector databases. Have an idea for a proof-of-concept at work? That should fit into our free-tier limits. Scaling up and optimizing your embedding dimensions for performance vs. accuracy? It shouldn’t break the bank.</p><p>Importantly, Vectorize aims to be predictable: you don’t need to estimate CPU and memory consumption, which can be hard when you’re just starting out, and made even harder when trying to plan for your peak vs. off-peak hours in production for a brand new use-case. Instead, you’re charged based on the total number of vector dimensions you store, and the number of queries against them each month. It’s our job to take care of scaling up to meet your query patterns.</p><p>Here’s the pricing for Vectorize — and if you have a Workers paid plan now, Vectorize is entirely free to use until 2024:</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n.tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-baqh{text-align:center;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n.tg .tg-amwm{font-weight:bold;text-align:center;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-amwm\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Workers Free (coming soon)</span></th>\n    <th class=\"tg-amwm\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Workers Paid ($5/month)</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Queried vector dimensions included</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">30M total queried dimensions / month</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">50M total queried dimensions / month</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Stored vector dimensions included</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">5M stored dimensions / month</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">10M stored dimensions / month</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Additional cost </span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">$0.04 / 1M vector dimensions queried or stored</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">$0.04 / 1M vector dimensions queried or stored</span></td>\n  </tr>\n</tbody>\n</table><!--kg-card-end: html--><p>Pricing is based entirely on what you store and query: <code>(total vector dimensions queried + stored) * dimensions_per_vector * price</code>. Query more? Easy to predict. Optimizing for smaller dimensions per vector to improve speed and reduce overall latency? Cost goes down. Have a few indexes for prototyping or experimenting with new use-cases? We don’t charge per-index.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/9i10jyPHmjy6FTjqtCD2S/8362250de55ae98d45068fc5d37dc7e4/image1-25.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1123\" loading=\"lazy\"/>\n            \n            </figure><p><i>Create as many as you need indexes to prototype new ideas and/or separate production from dev.</i></p><p>As an example: if you load 10,000 Workers AI vectors (384 dimensions each) and make 5,000 queries against your index each day, it’d result in 49 million total vector dimensions queried and <i>still</i> fit into what we include in the Workers Paid plan ($5/month). Better still: we don’t delete your indexes due to inactivity.</p><p>Note that while this pricing isn’t final, we expect few changes going forward. We want to avoid the element of surprise: there’s nothing worse than starting to build on a platform and realizing the pricing is untenable <i>after</i> you’ve invested the time writing code, tests and learning the nuances of a technology.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"vectorize\">Vectorize!</h2>\n      <a href=\"#vectorize\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Every Workers developer on a paid plan can start using Vectorize immediately: the open beta is available right now, and you can <a href=\"https://developers.cloudflare.com/vectorize/\">visit our developer documentation to get started</a>.</p><p>This is also just the beginning of the vector database story for us at Cloudflare. Over the next few weeks and months, we intend to land a new query engine that should further improve query performance, support even larger indexes, introduce sub-index filtering capabilities, increased metadata limits, and per-index analytics.</p><p>If you’re looking for inspiration on what to build, <a href=\"http://developers.cloudflare.com/vectorize/get-started/embeddings/\">see the semantic search tutorial</a> that combines Workers AI and Vectorize for document search, running entirely on Cloudflare. Or an example of <a href=\"https://developers.cloudflare.com/workers-ai/tutorials/build-a-retrieval-augmented-generation-ai/\">how to combine OpenAI and Vectorize</a> to give an LLM more context and dramatically improve the accuracy of its answers.</p><p>And if you have questions about how to use Vectorize for our product &amp; engineering teams, or just want to bounce an idea off of other developers building on Workers AI, join the #vectorize and #workers-ai channels on our <a href=\"https://discord.cloudflare.com/\">Developer Discord</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/V5sZHDJiYORdAiY3o6K6U/cd72b9e7eb6715300ce2b1afe4b7b26a/image6-3.png\" alt=\"\" class=\"kg-image\" width=\"1801\" height=\"448\" loading=\"lazy\"/>\n            \n            </figure><p></p>",
		"id": "5I4TqJNTxn1vCQd79HEUoZ",
		"localeList": {
			"name": "Vectorize: a vector database for shipping AI-powered applications to production, fast Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "Translated for Locale",
			"deDE": "Translated for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "Translated for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "Translated for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Vectorize is our brand-new vector database offering, designed to let you build full-stack, AI-powered applications entirely on Cloudflare’s global network: and you can start building with it right away. ",
		"metadata": {
			"title": "Vectorize: a vector database for shipping AI-powered applications to production, fast",
			"description": "Vectorize is our brand-new vector database offering, designed to let you build full-stack, AI-powered applications entirely on Cloudflare’s global network: and you can start building with it right away. ",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5Km9kWExCBgXAkB1xLfuKD/1d29ec0cf8619856d60460c4edd33af4/vectorize-vector-database-open-beta-PnLI7V.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2023-09-27T14:00:31.000+01:00",
		"slug": "vectorize-vector-database-open-beta",
		"tags": [
			{
				"id": "1Cv5JjXzKWKEA10JdYbXu1",
				"name": "Birthday Week",
				"slug": "birthday-week"
			},
			{
				"id": "1m3cvXsB5FqjKbhyk8OjzD",
				"name": "Vectorize",
				"slug": "vectorize"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "6Foe3R8of95cWVnQwe5Toi",
				"name": "AI",
				"slug": "ai"
			},
			{
				"id": "6txTUIMHOhipqANVWJGAmG",
				"name": "Database",
				"slug": "database"
			},
			{
				"id": "6QktrXeEFcl4e2dZUTZVGl",
				"name": "Product News",
				"slug": "product-news"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			}
		],
		"title": "Vectorize: a vector database for shipping AI-powered applications to production, fast",
		"updated_at": "2025-10-24T11:47:28.029Z",
		"url": "https://blog.cloudflare.com/vectorize-vector-database-open-beta"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}