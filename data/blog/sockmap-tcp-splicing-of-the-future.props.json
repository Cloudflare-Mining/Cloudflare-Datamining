{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "7",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "cccccblgtbhdtvkdkbdfcdvgiicuckkdkruvfceiuiur\n",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/b5eaPg3ZE1e4cmf0JeDVX/944eefde587a2b7cd54f3cb38e614fef/sockmap-tcp-splicing-of-the-future.jpg",
		"featured": false,
		"html": "<p>Recently we stumbled upon the holy grail for reverse proxies - a TCP socket splicing API. This caught our attention because, as you may know, we run a global network of reverse proxy services. Proper TCP socket splicing reduces the load on userspace processes and enables more efficient data forwarding. We realized that Linux Kernel&#39;s SOCKMAP infrastructure can be reused for this purpose. SOCKMAP is a very promising API and is likely to cause a tectonic shift in the architecture of data-heavy applications like software proxies.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/69XVqZWzoAEEazmpmVeARy/6977b3f52755ec4075cb3f38e5e8bbff/31958194737_e06ecd6fcc_o.jpg\" alt=\"31958194737_e06ecd6fcc_o\" class=\"kg-image\" width=\"500\" height=\"281\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://www.flickr.com/photos/mustadmarine/31958194737/\">Image</a> by <a href=\"https://www.flickr.com/photos/mustadmarine/\">Mustad Marine</a> public domain</p><p>But let’s rewind a bit.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"birthing-pains-of-l7-proxies\">Birthing pains of L7 proxies</h3>\n            <a href=\"#birthing-pains-of-l7-proxies\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Transmitting large amounts of data from userspace is inefficient. Linux provides a couple of specialized syscalls that aim to address this problem. For example, the <code>sendfile(2)</code> syscall (<a href=\"https://yarchive.net/comp/linux/splice.html\">which Linus doesn&#39;t like</a>) can be used to speed up transferring large files from disk to a socket. Then there is <code>splice(2)</code> which traditional proxies use to forward data between two TCP sockets. Finally, <code>vmsplice</code> can be used to stick memory buffer into a pipe without copying, but is very hard to use correctly.</p><p>Sadly, <code>sendfile</code>, <code>splice</code> and <code>vmsplice</code> are very specialized, synchronous and solve only one part of the problem - they avoid copying the data to userspace. They leave other efficiency issues unaddressed.</p><table><tr><td><p><b>between</b></p></td><td><p><b></b></p></td><td><p><b>avoid user-space memory</b></p></td><td><p><b>zerocopy</b></p></td></tr><tr><td><p>sendfile</p></td><td><p>disk file --&gt; socket</p></td><td><p>yes</p></td><td><p>no</p></td></tr><tr><td><p>splice</p></td><td><p>pipe &lt;--&gt; socket</p></td><td><p>yes</p></td><td><p>yes?</p></td></tr><tr><td><p>vmsplice</p></td><td><p>memory region --&gt; pipe</p></td><td><p>no</p></td><td><p>yes</p></td></tr></table><p>Processes that forward large amounts of data face three problems:</p><ol><li><p>Syscall cost: making multiple syscalls for every forwarded packet is costly.</p></li><li><p>Wakeup latency: the user-space process must be woken up often to forward the data. Depending on the scheduler, this may result in poor tail latency.</p></li><li><p>Copying cost: copying data from kernel to userspace and then immediately back to the kernel is not free and adds up to a measurable cost.</p></li></ol>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"many-tried\">Many tried</h3>\n            <a href=\"#many-tried\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Forwarding data between TCP sockets is a common practice. It&#39;s needed for:</p><ul><li><p>Transparent forward HTTP proxies, like Squid.</p></li><li><p>Reverse caching HTTP proxies, like Varnish or NGINX.</p></li><li><p>Load balancers, like HAProxy, Pen or Relayd.</p></li></ul><p>Over the years there <a href=\"https://www.haproxy.org/download/1.3/doc/tcp-splicing.txt\">have</a> been <a href=\"http://wwwconference.org/proceedings/www2002/refereed/627/index.html\">many</a> <a href=\"https://lwn.net/Articles/200902/\">attempts</a> to reduce the cost of dumb data forwarding between TCP sockets on Linux. This issue is generally called “TCP splicing”, “L7 splicing”, or “Socket splicing”.</p><p>Let’s compare the usual ways of doing TCP splicing. To simplify the problem, instead of writing a rich Layer 7 TCP proxy, we&#39;ll write a trivial TCP echo server.</p><p>It&#39;s not a joke. An echo server can illustrate TCP socket splicing well. You know - &quot;echo&quot; basically splices the socket… with itself!</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"naive-read-write-loop\">Naive: read write loop</h3>\n            <a href=\"#naive-read-write-loop\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The naive TCP echo server would look like:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">while data:\n    data = read(sd, 4096)\n    writeall(sd, data)</pre></code>\n            <p>Nothing simpler. On a blocking socket this is a totally valid program, and will work just fine. For completeness, <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-naive.c#L57-L78\">I prepared full code here</a>.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"splice-specialized-syscall\">Splice: specialized syscall</h3>\n            <a href=\"#splice-specialized-syscall\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Linux has an amazing <a href=\"http://man7.org/linux/man-pages/man2/splice.2.html\">splice(2) syscall</a>. It can tell the kernel to move data between a TCP buffer on a socket and a buffer on a pipe. The data remains in the buffers, on the kernel side. This solves the problem of needlessly having to copy the data between userspace and kernel-space. With the <code>SPLICE_F_MOVE</code> flag the kernel may be able to avoid copying the data at all!</p><p>Our program using <code>splice()</code> looks like:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">pipe_rd, pipe_wr = pipe()\nfcntl(pipe_rd, F_SETPIPE_SZ, 4096);\n\nwhile n:\n    n = splice(sd, pipe_wr, 4096)\n    splice(pipe_rd, sd, n)</pre></code>\n            <p>We still need wake up the userspace program and make two syscalls to forward any piece of data, but at least we avoid all the copying. <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-splice.c#L76-L98\">Full source</a>.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"io_submit-using-linux-aio-api\">io_submit: Using Linux AIO API</h3>\n            <a href=\"#io_submit-using-linux-aio-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p><a href=\"/io_submit-the-epoll-alternative-youve-never-heard-about/\">In a previous blog post about io_submit()</a> we proposed using the AIO interface with network sockets. Read the blog post for details, but <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-iosubmit.c#L81-L107\">here is the prepared program</a> that has the echo server loop implemented with only a single syscall.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4qk4EejV30qMZoVZ2RcMFW/d1020375b1a5083ccdd442cfdfba186b/452423494_31aa5caca5_z-1.jpg\" alt=\"452423494_31aa5caca5_z-1\" class=\"kg-image\" width=\"500\" height=\"375\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://www.flickr.com/photos/jrsnchzhrs/452423494\">Image</a> by <a href=\"https://www.flickr.com/photos/jrsnchzhrs/\">jrsnchzhrs</a> By-Nd 2.0</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"sockmap-the-ultimate-weapon\">SOCKMAP: The ultimate weapon</h3>\n            <a href=\"#sockmap-the-ultimate-weapon\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In recent years Linux Kernel introduced an <a href=\"https://lwn.net/Articles/740157/\">eBPF virtual machine</a>. With it, user-space programs can run specialized, non-turing-complete bytecode in the kernel context. Nowadays, it&#39;s possible to <a href=\"/tag/ebpf/\">select eBPF programs</a> for dozens of use cases, ranging from packet filtering, to policy enforcement.</p><p>From Kernel 4.14 Linux got new eBPF machinery that can be used for socket splicing - SOCKMAP. It was created by John Fastabend at <a href=\"https://cilium.io/blog/2018/04/24/cilium-security-for-age-of-microservices/\">Cilium.io</a>, exposing the <a href=\"https://www.kernel.org/doc/Documentation/networking/strparser.txt\">Strparser</a> interface to eBPF programs. Cilium uses SOCKMAP for Layer 7 policy enforcement, and all the logic it uses is embedded in an eBPF program. The API is not well documented, requires root and, from our experience, is <a href=\"https://lore.kernel.org/netdev/20190211090949.18560-1-jakub@cloudflare.com/\">slightly</a> <a href=\"https://lore.kernel.org/netdev/20190128091335.20908-1-jakub@cloudflare.com/\">buggy</a>. But it&#39;s very promising. Read more:</p><ul><li><p>LPC2018 - Combining kTLS and BPF for Introspection and Policy Enforcement <a href=\"http://vger.kernel.org/lpc_net2018_talks/ktls_bpf_paper.pdf\">Paper</a> <a href=\"https://www.youtube.com/watch?v=NnibidVRtWY\">Video</a> <a href=\"http://vger.kernel.org/lpc_net2018_talks/ktls_bpf.pdf\">Slides</a></p></li><li><p><a href=\"https://lwn.net/Articles/731133/\">Original SOCKMAP commit</a></p></li></ul><p>This is how to use SOCKMAP: SOCKMAP or specifically &quot;BPF_MAP_TYPE_SOCKMAP&quot;, is a type of eBPF map. This map is an &quot;array&quot; - indices are integers. All this is pretty standard. The magic is in the map values - they must be TCP socket descriptors.</p><p>This map is very special - it has two eBPF programs attached to it. You read it right: the eBPF programs live <i>attached to a map</i>, not attached to a socket, cgroup or network interface as usual. This is how you would set up <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-sockmap.c#L36-L80\">SOCKMAP in user program</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sock_map = bpf_create_map(BPF_MAP_TYPE_SOCKMAP, sizeof(int), sizeof(int), 2, 0)\n\nprog_parser = bpf_load_program(BPF_PROG_TYPE_SK_SKB, ...)\nprog_verdict = bpf_load_program(BPF_PROG_TYPE_SK_SKB, ...)\nbpf_prog_attach(prog_parser, sock_map, BPF_SK_SKB_STREAM_PARSER)\nbpf_prog_attach(prog_verdict, sock_map, BPF_SK_SKB_STREAM_VERDICT)</pre></code>\n            <p>Ta-da! At this point we have an established <code>sock_map</code> eBPF map, with two eBPF programs attached: parser and verdict. The next step is to add a TCP socket descriptor to this map. <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-sockmap.c#L130-L142\">Nothing simpler</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">int idx = 0;\nint val = sd;\nbpf_map_update_elem(sock_map, &amp;idx, &amp;val, BPF_ANY);</pre></code>\n            <p>At this point <i>the magic happens</i>. From now on, each time our socket <code>sd</code> receives a packet, prog_parser and prog_verdict are called. Their semantics are described in the <a href=\"https://www.kernel.org/doc/Documentation/networking/strparser.txt\">strparser.txt</a> and the <a href=\"https://lwn.net/Articles/731133/\">introductory SOCKMAP commit</a>. For simplicity, our trivial echo server only needs the minimal stubs. <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-sockmap-kern.c#L32-L43\">This is the eBPF code</a>:</p>\n            <pre class=\"language-.c\"><code class=\"language-.c\">SEC(&quot;prog_parser&quot;)\nint _prog_parser(struct __sk_buff *skb)\n{\n\treturn skb-&gt;len;\n}\n\nSEC(&quot;prog_verdict&quot;)\nint _prog_verdict(struct __sk_buff *skb)\n{\n\tuint32_t idx = 0;\n\treturn bpf_sk_redirect_map(skb, &amp;sock_map, idx, 0);\n}</pre></code>\n            <p>Side note: for the purposes of this test program, I wrote a minimal eBPF loader. It has no dependencies (neither bcc, libelf, nor libbpf) and can do basic relocations (like resolving the <code>sock_map</code> symbol mentioned above). <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/tbpf.c\">See the code</a>.</p><p>The call to <code>bpf_sk_redirect_map</code> is doing all the work. It tells the kernel: for the received packet, please oh please <i>redirect</i> it from a receive queue of some socket, to a transmit queue of the socket living in sock_map under index 0. In our case, these are the same sockets! Here we achieved exactly what the echo server is supposed to do, but purely in eBPF.</p><p>This technology has multiple benefits. First, the data is never copied to userspace. Secondly, we never need to wake up the userspace program. All the action is done in the kernel. Quite cool, isn&#39;t it?</p><p>We need one more piece of code, to hang the userspace program until the socket is closed. This is best done with good old <code>poll(2)</code>:</p>\n            <pre class=\"language-.c\"><code class=\"language-.c\">/* Wait for the socket to close. Let SOCKMAP do the magic. */\nstruct pollfd fds[1] = {\n    {.fd = sd, .events = POLLRDHUP},\n};\npoll(fds, 1, -1);</pre></code>\n            <p><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-02-tcp-splice/echo-sockmap.c#L144-L148\">Full code.</a></p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"the-benchmarks\">The benchmarks</h3>\n            <a href=\"#the-benchmarks\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>At this stage we have presented four simple TCP echo servers:</p><ul><li><p>naive read-write loop</p></li><li><p>splice</p></li><li><p>io_submit</p></li><li><p>SOCKMAP</p></li></ul><p>To recap, we are measuring the cost of three things:</p><ol><li><p>Syscall cost</p></li><li><p>Wakeup latency, mostly visible as tail latency</p></li><li><p>The cost of copying data</p></li></ol><p>Theoretically, SOCKMAP should beat all the others:</p><table><tr><td><p></p></td><td><p><b>syscall cost</b></p></td><td><p><b>waking up userspace</b></p></td><td><p><b>copying cost</b></p></td></tr><tr><td><p>read write loop</p></td><td><p>2 syscalls</p></td><td><p>yes</p></td><td><p>2 copies</p></td></tr><tr><td><p>splice</p></td><td><p>2 syscalls</p></td><td><p>yes</p></td><td><p>0 copy (?)</p></td></tr><tr><td><p>io_submit</p></td><td><p>1 syscall</p></td><td><p>yes</p></td><td><p>2 copies</p></td></tr><tr><td><p>SOCKMAP</p></td><td><p>none</p></td><td><p>no</p></td><td><p>0 copies</p></td></tr></table>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"show-me-the-numbers\">Show me the numbers</h3>\n            <a href=\"#show-me-the-numbers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>This is the part of the post where I&#39;m showing you the breathtaking numbers, clearly showing the different approaches. Sadly, benchmarking is hard, and well... SOCKMAP turned out to be the slowest. It&#39;s <a href=\"https://cyber.wtf/2017/07/28/negative-result-reading-kernel-memory-from-user-mode/\">important to publish negative results</a> so here they are.</p><p>Our test rig was as follows:</p><ul><li><p>Two bare-metal Xeon servers connected with a 25Gbps network.</p></li><li><p>Both have turbo-boost disabled, and the testing programs are CPU-pinned.</p></li><li><p>For better locality we localized RX and TX queues to one IRQ/CPU each.</p></li><li><p>The testing server runs a script that sends 10k batches of fixed-sized blocks of data. The script measures how long it takes for the echo server to return the traffic.</p></li><li><p>We do 10 separate runs for each measured echo-server program.</p></li><li><p>TCP: &quot;cubic&quot; and NONAGLE=1.</p></li><li><p>Both servers run the 4.14 kernel.</p></li></ul><p>Our analysis of the experimental data identified some outliers. We think some of the worst times, manifested as long echo replies, were caused by unrelated factors such as network packet loss. In the charts presented we, perhaps controversially, skip the bottom 1% of outliers in order to focus on what we think is the important data.</p><p>Furthermore, we spotted a bug in SOCKMAP. Some of the runs were delayed by up to whopping 64ms. Here is one of the tests:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">Values min:236.00 avg:669.28 med=390.00 max:78039.00 dev:3267.75 count:2000000\nValues:\n value |-------------------------------------------------- count\n     1 |                                                   0\n     2 |                                                   0\n     4 |                                                   0\n     8 |                                                   0\n    16 |                                                   0\n    32 |                                                   0\n    64 |                                                   0\n   128 |                                                   0\n   256 |                                                   3531\n   512 |************************************************** 1756052\n  1024 |                                             ***** 208226\n  2048 |                                                   18589\n  4096 |                                                   2006\n  8192 |                                                   9\n 16384 |                                                   1\n 32768 |                                                   0\n 65536 |                                                   11585\n131072 |                                                   1</pre></code>\n            <p>The great majority of the echo runs (of 128KiB in this case) were finished in the 512us band, while a small fraction stalled for 65ms. This is pretty bad and makes comparison of SOCKMAP to other implementations pretty meaningless. This is a second reason why we are skipping 1% of worst results from all the runs - it makes SOCKMAP numbers way more usable. Sorry.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"2mib-blocks-throughput\">2MiB blocks - throughput</h3>\n            <a href=\"#2mib-blocks-throughput\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The fastest of our programs was doing ~15Gbps over one flow, which seems to be a hardware limit. This is very visible in the first iteration, which shows the throughput of our echo programs.</p><p>This test shows: Time to transmit and receive 2MiB blocks of data, via our tested echo server. We repeat this 10k times, and run the test 10 times. After stripping the worst 1% numbers we get the following latency distribution:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4yxe0fOUjkJpcsD1uoCIm6/03169327d9ee3060e31aa1d59d12283a/numbers-2mib-2.png\" alt=\"numbers-2mib-2\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>This chart shows that both naive read+write and io_submit programs were able to achieve 1500us mean round trip time for TCP echo server of 2MiB blocks.</p><p>Here we clearly see that splice and SOCKMAP are slower than others. They were CPU-bound and unable to reach the line rate. We have raised the <a href=\"https://www.spinics.net/lists/netdev/msg539609.html\">unusual splice performance problems</a> in the past, but perhaps we should debug it one more time.</p><p>For each server we run the tests twice: without and with SO_BUSYPOLL setting. This setting should remove the &quot;wakeup latency&quot; and greatly reduce the jitter. The results show that naive and io_submit tests are almost identical. This is perfect! BUSYPOLL does indeed reduce the deviation and latency, at a cost of more CPU usage. Notice that neither splice nor SOCKMAP are affected by this setting.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"16kib-blocks-wakeup-time\">16KiB blocks - wakeup time</h3>\n            <a href=\"#16kib-blocks-wakeup-time\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Our second run of tests was with much smaller data sizes, sending tiny 16KiB blocks at a time. This test should illustrate the &quot;wakeup time&quot; of the tested programs.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/WxbvoQBvU00WzJldYpSED/b794cd76ed5acb14d807fd0fd624857a/numbers-16kib-1.png\" alt=\"numbers-16kib-1\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>In this test the non-BUSYPOLL runs of all the programs look quite similar (min and max values), with SOCKMAP being the exception. This is great - we can speculate the wakeup time is comparable. Surprisingly, the splice has slightly better median time from others. Perhaps this can be explained by CPU artifacts, like having better CPU cache locality due to fewer data copying. SOCKMAP is again, slowest with worst max and median times. Boo.</p><p>Remember we truncated the worst 1% of the data - we artificially shortened the &quot;max&quot; values.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"tl-dr\">TL;DR</h3>\n            <a href=\"#tl-dr\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In this blog post we discussed the theoretical benefits of SOCKMAP. Sadly, we noticed it&#39;s not ready for prime time yet. We compared it against splice, which we noticed didn&#39;t benefit from BUSYPOLL and had disappointing performance. We noticed that the naive read/write loop and iosubmit approaches have exactly the same performance characteristics and do benefit from BUSYPOLL to reduce jitter (wakeup time).</p><p>If you are piping data between TCP sockets, you should definitely take a look at SOCKMAP. While our benchmarks show it&#39;s not ready for prime time yet, with poor performance, high jitter and a couple of bugs, it&#39;s very promising. We are very excited about it. It&#39;s the first technology on Linux that truly allows the user-space process to offload TCP splicing to the kernel. It also has potential for much better performance than other approaches, ticking all the boxes of being async, kernel-only and totally avoiding needless copying of data.</p><p>This is not everything. SOCKMAP is able to pipe data across multiple sockets - you can imagine a full mesh of connections being able to send data to each other. Furthermore, it exposes the <code>strparser</code> API, which can be used to offload basic application framing. Combined with <a href=\"https://github.com/torvalds/linux/blob/master/Documentation/networking/tls.txt\">kTLS</a> you can combine it with transparent encryption. Furthermore, there are rumors of adding UDP support. The possibilities are endless.</p><p>Recently the kernel has been exploding with eBPveF innovations. It seems like we&#39;ve only just scratched the surface of the possibilities exposed by the modern eBPF interfaces.</p><p>Many thanks to <a href=\"https://twitter.com/jkbs0\">Jakub Sitnicki</a> for suggesting SOCKMAP in the first place, writing the proof of concept and now actually fixing the bugs we found. Go strong Warsaw office!</p>",
		"id": "53j7wbfn6eJxOvUzmnn7H1",
		"localeList": {
			"name": "SOCKMAP - TCP splicing of the future Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Proper TCP socket splicing reduces the load on userspace processes and enables more efficient data forwarding. We realized that Linux Kernel's SOCKMAP infrastructure can be reused for this purpose.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-02-18T13:13:02.000+00:00",
		"slug": "sockmap-tcp-splicing-of-the-future",
		"tags": [
			{
				"id": "5NpgoTJYJjhgjSLaY7Gt3p",
				"name": "TCP",
				"slug": "tcp"
			},
			{
				"id": "5x72ei67SoD11VQ0uqFtpF",
				"name": "API",
				"slug": "api"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "SOCKMAP - TCP splicing of the future",
		"updated_at": "2025-02-28T09:56:52.953Z",
		"url": "https://blog.cloudflare.com/sockmap-tcp-splicing-of-the-future"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}