{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "8",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Zak Cutner",
				"slug": "zak",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/81LwAwcC86m7Q9fOpRGHF/0ae006341853a5e482ab937674349204/zak.jpg",
				"location": null,
				"website": "https://zakcutner.uk",
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Firewall Rules lets customers filter the traffic hitting their site, powered by our Wirefilter engine. We’re excited to share some in-depth optimizations we have recently made to improve the performance of our edge.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2nbFtKrx4TvvzYMC5t6Jzd/1ec2a729185af375d29dd814a7e894c6/building-even-faster-interpreters-in-rust.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1NJezhsJZ3Up74AGwLZpi6/552e4017a10432d1eabf618d2b6b1b6d/Cloudflare-reflections-copy-2_2x.png\" alt=\"\" class=\"kg-image\" width=\"2214\" height=\"1067\" loading=\"lazy\"/>\n            \n            </figure><p>At Cloudflare, we’re <a href=\"/making-the-waf-40-faster/\">constantly working on</a> improving the performance of our edge — and that was exactly what my internship this summer entailed. I’m excited to share some improvements we’ve made to our popular <a href=\"/how-we-made-firewall-rules/\">Firewall Rules</a> product over the past few months.</p><p>Firewall Rules lets customers filter the traffic hitting their site. It’s built using our engine, Wirefilter, which takes powerful boolean expressions written by customers and matches incoming requests against them. Customers can then choose how to respond to traffic which matches these rules. We will discuss some in-depth optimizations we have recently made to Wirefilter, so you may wish to <a href=\"/building-fast-interpreters-in-rust/\">get familiar</a> with how it works if you haven’t already.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"minimizing-cpu-usage\">Minimizing CPU usage</h3>\n      <a href=\"#minimizing-cpu-usage\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As a new member of the Firewall team, I quickly learned that performance is important — even in our security products. We look for opportunities to make our customers’ Internet properties faster where it’s safe to do so, maximizing both security and performance.</p><p>Our engine is already heavily used, powering all of Firewall Rules. But we have bigger plans. More and more products like our <a href=\"https://support.cloudflare.com/hc/en-us/articles/200172016-Understanding-the-Cloudflare-Web-Application-Firewall-WAF\">Web Application Firewall</a> (WAF) will be running behind our Wirefilter-based engine, and it will become responsible for eating up a sizable chunk of our total CPU usage before long.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-to-measure-performance\">How to measure performance?</h3>\n      <a href=\"#how-to-measure-performance\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Measuring performance is a notoriously tricky task, and as you can probably imagine trying to do this in a highly distributed environment (aka <a href=\"https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/\">Cloudflare’s edge</a>) does not help. We’ve been surprised in the past by optimizations that look good on paper, but, when tested out in production, just don’t seem to do much.</p><p>Our solution? Performance measurement as a service — an isolated and reproducible benchmark for our Firewall engine and a framework for engineers to easily request runs and view results. It’s worth noting that we took a lot of inspiration from the fantastic <a href=\"https://perf.rust-lang.org/\">Rust Compiler benchmarks</a> to build this.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2j6ou7jUofaSYjEjoMej25/a380fb67cdca84b7b95ff13eb8d98203/image3-10.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"719\" loading=\"lazy\"/>\n            \n            </figure><p>Our benchmarking framework, showing how performance during different stages of processing Wirefilter expressions has changed over time [1].</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"what-to-measure\">What to measure?</h3>\n      <a href=\"#what-to-measure\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our next challenge was to find some meaningful performance metrics. Some experimentation quickly uncovered that time was far too volatile a measure for meaningful comparisons, so we turned to <a href=\"https://en.wikipedia.org/wiki/Hardware_performance_counter\">hardware counters</a> [2]. It’s not hard to find tools to measure these (<a href=\"https://perf.wiki.kernel.org/index.php/Main_Page\">perf</a> and <a href=\"https://software.intel.com/content/www/us/en/develop/tools/vtune-profiler.html\">VTune</a> are two such examples), although they (<a href=\"https://software.intel.com/content/www/us/en/develop/documentation/vtune-help/top/api-support/instrumentation-and-tracing-technology-apis/instrumentation-and-tracing-technology-api-reference/collection-control-api.html\">mostly</a>) don’t allow control over which parts of the program are recorded. In our case, we wished to individually record measurements for different stages of filter processing — parsing, compilation, analysis, and execution.</p><p>Once again we took inspiration from the Rust compiler, and its <a href=\"https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html\">self-profiling options</a>, using the <a href=\"https://www.man7.org/linux/man-pages/man2/perf_event_open.2.html\">perf_event_open</a> API to record counters from <i>inside</i> our binary. We then output something like the following, which our framework can easily ingest and store for later visualization.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5rMHtBLVjfrHV0BMfTvaZV/a53037be7211be732df9ced5169b8fe7/Screen-Shot-2020-09-24-at-10.20.42.png\" alt=\"\" class=\"kg-image\" width=\"1338\" height=\"860\" loading=\"lazy\"/>\n            \n            </figure><p>Output of our benchmarks in <a href=\"https://jsonlines.org/\">JSON Lines</a> format, showing a list of recordings for each combination of hardware counter and Wirefilter processing stage. We’ve used 10 repeats here for readability, but we use around 20, in addition to 5 warmup rounds, within our framework.</p><p>Whilst we mainly focussed on metrics relating to CPU usage, we also use a combination of <a href=\"https://man7.org/linux/man-pages/man2/getrusage.2.html\"><code>getrusage</code></a> and <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=695f055936938c674473ea071ca7359a863551e7\"><code>clear_refs</code></a> to find the maximum resident set size (RSS). This is useful to understand the memory impact of <a href=\"https://github.com/BurntSushi/aho-corasick\">particular algorithms</a> in addition to CPU.</p><p>But the challenge was not over. Cloudflare’s standard CI agents use virtualization and sandboxing for security and convenience, but this makes accessing hardware counters virtually impossible. Running our benchmarks on a dedicated machine gave us access to these counters, and ensured more reproducible results.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"speeding-up-the-speed-test\">Speeding up the speed test</h3>\n      <a href=\"#speeding-up-the-speed-test\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our benchmarks were designed from the outset to take an important place in our development process. For instance, we now perform a full benchmark run before releasing each new version to detect performance regressions.</p><p>But with our benchmarks in place, it quickly became clear that we had a problem. Our benchmarks simply weren’t fast enough — at least if we wanted to complete them in less than a few hours! The problem was we have a very large number  of filters. Since our engine would never usually execute requests against this many filters at once it was proving incredibly costly. We came up with a few tricks to cut this down…</p><ul><li><p><b><b><b>Deduplication.</b></b></b> It turns out that only around a third of filters are structurally unique (something that is easy to check as Wirefilter can helpfully serialize to JSON). We managed to cut down a great deal of time by ignoring duplicate filters in our benchmarks.</p></li><li><p><b><b><b>Sampling.</b></b></b> Still, we had too many filters and random sampling presented an easy solution. A more subtle challenge was to make sure that the random sample was always the same to maintain reproducibility.</p></li><li><p><b><b><b>Partitioning.</b></b></b> We worried that deduplication and sampling would cause us to miss important cases that are useful to optimize. By first partitioning filters by Wirefilter language feature, we can ensure we’re getting a good range of filters. It also helpfully gives us more detail about where specifically the impact of a performance change is.</p></li></ul><p>Most of these are trade-offs, but very necessary ones which allow us to run continual benchmarks without development speed grinding to a halt. At the time of writing, we’ve managed to get a benchmark run down to around 20 minutes using these ideas.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"optimizing-our-engine\">Optimizing our engine</h3>\n      <a href=\"#optimizing-our-engine\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With a benchmarking framework in place, we were ready to begin testing optimizations. But how do you optimize an interpreter like Wirefilter? <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">Just-in-time (JIT) compilation</a>, <a href=\"https://dl.acm.org/doi/10.1145/277652.277743\">selective inlining</a> and <a href=\"http://www.complang.tuwien.ac.at/andi/papers/dotnet_06.pdf\">replication</a> were some ideas floating around in the word of interpreters that seemed attractive. After all, we <a href=\"/building-fast-interpreters-in-rust/\">previously wrote</a> about the cost of dynamic dispatch in Wirefilter. All of these techniques aim to reduce that effect.</p><p>However, running some real filters through a profiler tells a different story. Most execution time, around 65%, is spent not resolving dynamic dispatch calls but instead performing <a href=\"https://developers.cloudflare.com/firewall/cf-firewall-language/operators/#comparison-operators\">operations</a> like comparison and searches. Filters currently in production tend to be pretty light on functions, but throw in a few more of these and even less time would be spent on dynamic dispatch. We suspect that even a fair chunk of the remaining 35% is actually spent reading the memory of request fields.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-7btt{border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-7btt\">Function</th>\n    <th class=\"tg-7btt\">CPU time</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0pky\"><span style=\"color:#905;background-color:#ddd\">`matches`</span> operator</td>\n    <td class=\"tg-0pky\">0.6%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\"><span style=\"color:#905;background-color:#ddd\">`in`</span> operator</td>\n    <td class=\"tg-0pky\">1.1%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\"><span style=\"color:#905;background-color:#ddd\">`eq`</span> operator</td>\n    <td class=\"tg-0pky\">11.8%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\"><span style=\"color:#905;background-color:#ddd\">`contains`</span> operator</td>\n    <td class=\"tg-0pky\">51.5%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">Everything else</td>\n    <td class=\"tg-0pky\">35.0%</td>\n  </tr>\n</tbody>\n</table>\n<figcaption>Breakdown of CPU time while executing a typical production filter.</figcaption><!--kg-card-end: html-->\n    <div class=\"flex anchor relative\">\n      <h3 id=\"an-adventure-in-substring-searching\">An adventure in substring searching</h3>\n      <a href=\"#an-adventure-in-substring-searching\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>By now, you shouldn’t be surprised that the <code>contains</code> operator was one of the first in line for optimization. If you’ve ever written a Firewall Rule, you’re probably already familiar with what it does — it checks whether a substring is present in the field you are matching against. For example, the following expression would match when the host is “example.com” or “<a href=\"http://www.example.net”\">www.example.net”</a>, but not when it is “cloudflare.com”. In <a href=\"https://en.wikipedia.org/wiki/String-searching_algorithm\">string searching algorithms</a>, this is commonly referred to as finding a ‘needle’ (“example”) within a ‘haystack’ (“example.com”).</p><p><code>http.host contains “example”</code></p><p>How does this work under the hood? Ordinarily, we may have used Rust’s <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.contains\">`String::contains` function</a> but Wirefilter also allows raw byte expressions that don’t necessarily conform to UTF-8.</p><p><code>http.host contains 65:78:61:6d:70:6c:65</code></p><p>We therefore used the <a href=\"https://crates.io/crates/memmem\">memmem crate</a> which performs a <a href=\"https://en.wikipedia.org/wiki/Two-way_string-matching_algorithm\">two-way substring search algorithm</a> on raw bytes.</p><p>Sounds good, right? It was, and it was working pretty well, although we’d noticed that rewriting `contains` filters using regular expressions could bizarrely often make them faster.</p><p><code>http.host matches “example”</code></p><p>Regular expressions are great, but since they’re far more powerful than the `contains` operator, they shouldn’t be faster than a specialized algorithm in simple cases like this one.</p><p>Something was definitely up. It turns out that <a href=\"https://crates.io/crates/regex\">Rust’s regex library</a> comes equipped with <a href=\"https://github.com/rust-lang/regex/blob/691606773f525be32a59a0c28eae203a79663706/src/literal/imp.rs#L24\">a whole host</a> of specialized matchers for what it deems to be simple expressions like this. The obvious question was whether we could therefore simply use the regex library. Interestingly, you may not have realized that the popular ripgrep tool does <a href=\"https://github.com/BurntSushi/ripgrep/blob/1b2c1dc67583d70d1d16fc93c90db80bead4fb09/crates/core/args.rs#L1479\">just that</a> when searching for fixed-string patterns.</p><p>However, our use case is a little different. Since we’re building an interpreter (and we’re using dynamic dispatch in any case), we would prefer to dispatch to a specialized case for `contains` expressions, rather than matching on some enum deep within the regex crate when the filter is executed. What’s more, there are some <a href=\"http://0x80.pl/articles/simd-strfind.html\">pretty</a> <a href=\"https://github.com/intel/hyperscan\">cool</a> <a href=\"https://github.com/jneem/teddy\">things</a> being done to perform substring searching that leverages SIMD instruction sets. So we wired up our engine to some <a href=\"https://github.com/WojciechMula/sse4-strstr\">previous work</a> by Wojciech Muła and the results were fantastic.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-7btt{border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-7btt\">Benchmark</th>\n    <th class=\"tg-7btt\">Improvement</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0pky\">Expressions using <span style=\"color:#905;background-color:#ddd\">`contains`</span> operator</td>\n    <td class=\"tg-0pky\">72.3%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">‘Simple’ expressions</td>\n    <td class=\"tg-0pky\">0.0%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">All expressions</td>\n    <td class=\"tg-0pky\">31.6%</td>\n  </tr>\n</tbody>\n</table>\n<figcaption>Improvements in instruction count using Wojciech Muła’s sse4-strstr library over the memmem crate with Wirefilter.</figcaption><!--kg-card-end: html--><p>I encourage you to <a href=\"http://0x80.pl/articles/simd-strfind.html\">read more</a> on “Algorithm 1”, which we used, but it works something like this (I’ve changed the order a little to help make it clearer). It’s worth <a href=\"https://en.wikipedia.org/wiki/SIMD\">reading up</a> on SIMD instructions if you’re unfamiliar with them — they’re the essence behind what makes this algorithm fast.</p><ol><li><p>We fill one SIMD register with the first byte of the needle being searched for, simply repeated over and over.</p></li><li><p>We load as much of our haystack as we can into another SIMD register and perform a bitwise equality operation with our previous register.</p></li><li><p>Now, any position in the resultant register that is 0 cannot be the start of the match since it doesn’t start with the same byte of the needle.</p></li><li><p>We now repeat this process with the last byte of the needle, offsetting the haystack, to rule out any positions that don’t end with the same byte as the needle.</p></li><li><p>Bitwise ANDing these two results together, we (hopefully) have now drastically reduced our potential matches.</p></li><li><p>Each of the remaining potential matches can be checked manually using a memcmp operation. If we find a match, then we’re done.</p></li><li><p>If not, we continue with the next part of our haystack and repeat until we’ve checked the entire thing.</p></li></ol>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"when-it-goes-wrong\">When it goes wrong</h3>\n      <a href=\"#when-it-goes-wrong\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>You may be wondering what happens if our haystack doesn’t fit neatly into registers. In the original algorithm, nothing. It simply continues reading into the oblivion after the end of the haystack until the last register is full, and uses a bitmask to ignore potential false-positives from this additional region of memory.</p><p>As we mentioned, security is our priority when it comes to optimizations, so we could never deploy something with this kind of behaviour. We ended up porting Muła’s library to Rust (we’ve also <a href=\"https://crates.io/crates/sliceslice\">open-sourced the crate</a>!) and performed an <a href=\"https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/coding-for-neon---part-2-dealing-with-leftovers\">overlapping registers modification</a> found in ARM’s blog.</p><p>It’s best illustrated by example — notice the difference between how we would fill registers on an imaginary SIMD instruction-set with 4-byte registers.</p><p><b>Before modification</b></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3OUJ2AojfLLoz1mZepPjg0/1b98003bf5fb2a44fed2366f6840fcae/image1-16.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"225\" loading=\"lazy\"/>\n            \n            </figure><p>How registers are filled in the original implementation for the haystack “abcdefghij”, red squares indicate out of bounds memory.</p><p><b>After modification</b></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2j5TTWwSXcV1Rtu7Uaoqsf/138c36a096cc6c201777028933a3f49c/image4-10.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"228\" loading=\"lazy\"/>\n            \n            </figure><p>How registers are filled with the overlapping modification for the same haystack, notice how ‘g’ and ‘h’ each appear in two registers.</p><p>In our case, repeating some bytes within two different registers will never change the final outcome, so this modification is allowed as-is. However, in reality, we found it was better to use a bitmask to exclude repeated parts of the final register and minimize the number of memcmp calls.</p><p>What if the haystack is too small to even fill a single register? In this case, we can’t use our overlapping trick since there’s nothing to overlap with. Our solution is straightforward: while we were primarily targeting AVX2, which can store 32-bytes in a lane, we can easily move down to another instruction set with smaller registers that the haystack can fit into. In reality, we don’t currently go any smaller than SSE2. Beyond this, we instead use an implementation of the <a href=\"https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm\">Rabin-Karp searching algorithm</a> which appears to perform well.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-7btt{border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-7btt\">Instruction set</th>\n    <th class=\"tg-7btt\">Register size</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0pky\">AVX2</td>\n    <td class=\"tg-0pky\">32 bytes</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">SSE2</td>\n    <td class=\"tg-0pky\">16 bytes</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">SWAR (u64)</td>\n    <td class=\"tg-0pky\">8 bytes</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">SWAR (u32)</td>\n    <td class=\"tg-0pky\">4 bytes</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">...</td>\n    <td class=\"tg-0pky\">...</td>\n  </tr>\n</tbody>\n</table>\n<figcaption>Register sizes in different SIMD instruction sets [3]. We did not consider AVX512 since support for this is not widespread enough.</figcaption><!--kg-card-end: html-->\n    <div class=\"flex anchor relative\">\n      <h3 id=\"is-it-always-fast\">Is it always fast?</h3>\n      <a href=\"#is-it-always-fast\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Choosing the first and last bytes of the needle to rule out potential matches is a great idea. It means that when it does come to performing a memcmp, we can ignore these, as we know they already match. Unfortunately, as Muła points out, this also makes the algorithm susceptible to a worst-case attack in some instances.</p><p>Let’s give an expression that a customer might write to illustrate this.</p><p><code>http.request.uri.path contains “/wp-admin/”</code></p><p>If we try to search for this within a very long sequence of ‘/’s, we will find a potential match in every position and make lots of calls to memcmp — essentially performing a slow <a href=\"https://en.wikipedia.org/wiki/String-searching_algorithm#Na%C3%AFve_string_search\">bruteforce substring search</a>.</p><p>Clearly we need to choose different bytes from the needle. But which ones should we choose? For each choice, an adversary can always find a slightly different, but equally troublesome, worst case. We instead use <a href=\"https://en.wikipedia.org/wiki/Randomized_algorithm\">randomness</a> to throw off our would-be adversary, picking the first byte of the needle as before, but then choosing another <i>random</i> byte to use.</p><p>Our new version is unsurprisingly slower than Muła’s, yet it still exhibits a great improvement over both the memmem and regex crates. Performance, but without sacrificing safety.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-fymr{border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-7btt{border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n.tg .tg-0pkz{border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-fymr\">Benchmark</th>\n    <th class=\"tg-7btt\" colspan=\"2\">Improvement</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0pky\"></td>\n    <td class=\"tg-fymr\">sse4-strstr (original)</td>\n    <td class=\"tg-7btt\">sliceslice (our version)</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">Expressions using <span style=\"color:#905;background-color:#ddd\">`contains`</span> operator</td>\n    <td class=\"tg-0pky\">72.3%</td>\n    <td class=\"tg-0pkz\">49.1%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">‘Simple’ expressions</td>\n    <td class=\"tg-0pky\">0.0%</td>\n    <td class=\"tg-0pkz\">0.1%</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">All expressions</td>\n    <td class=\"tg-0pky\">31.6%</td>\n    <td class=\"tg-0pkz\">24.0%</td>\n  </tr>\n</tbody>\n</table>\n<figcaption>Improvements in instruction count of using sse4-strstr and sliceslice over the memmem crate with Wirefilter.</figcaption><!--kg-card-end: html-->\n    <div class=\"flex anchor relative\">\n      <h3 id=\"whats-next\">What’s next?</h3>\n      <a href=\"#whats-next\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This is only a small taste of the performance work we’ve been doing, and we have much more yet to come. Nevertheless, none of this would have been possible without the support of my manager Richard and my mentor Elie, who contributed a lot of these ideas. I’ve learned so much over the past few months, but most of all that Cloudflare is an amazing place to be an intern!</p><p>[1] Since our benchmarks are not run within a production environment, results in this post do not represent traffic on our edge.</p><p>[2] We found instruction counts to be a particularly stable measure, and CPU cycles a particularly unstable one.</p><p>[3] Note that <a href=\"https://en.wikipedia.org/wiki/SWAR\">SWAR</a> is technically not an instruction set, but instead uses regular registers like vector registers.</p>",
		"id": "519hc6hT0fkJoLpme6IKrP",
		"localeList": {
			"name": "Building even faster interpreters in Rust Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Firewall Rules lets customers filter the traffic hitting their site, powered by our Wirefilter engine. We’re excited to share some in-depth optimizations we have recently made to improve the performance of our edge.",
		"metadata": {
			"title": "Building even faster interpreters in Rust",
			"description": "Firewall Rules lets customers filter the traffic hitting their site, powered by our Wirefilter engine. We’re excited to share some in-depth optimizations we have recently made to improve the performance of our edge.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6llNA3CO99OQExjJjtBR0w/ec1626463df31fd3acda810653750288/building-even-faster-interpreters-in-rust-ht4dby.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2020-09-24T12:00:00.000+01:00",
		"slug": "building-even-faster-interpreters-in-rust",
		"tags": [
			{
				"id": "4zulnloS9YSU4lEkORfTqo",
				"name": "Firewall",
				"slug": "firewall"
			},
			{
				"id": "4gN0ARax0fHxjtZL07THOe",
				"name": "Performance",
				"slug": "performance"
			},
			{
				"id": "w4e8pkoz9c8xNDVhy9eNe",
				"name": "Rust",
				"slug": "rust"
			},
			{
				"id": "lGCLqAT2SMojMzw5b6aio",
				"name": "WAF",
				"slug": "waf"
			}
		],
		"title": "Building even faster interpreters in Rust",
		"updated_at": "2025-10-03T19:42:26.304Z",
		"url": "https://blog.cloudflare.com/building-even-faster-interpreters-in-rust"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}