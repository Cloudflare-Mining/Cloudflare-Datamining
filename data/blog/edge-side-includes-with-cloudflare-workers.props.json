{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Stephane Nouvellon",
				"slug": "stephane",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6oK85NTBFrM6iFGDcmUcTr/be47c5e2cf21aadaf6163fe4f89880f9/stephane.jpg",
				"location": "London",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "At Cloudflare we’re accelerating web assets in a number of different ways. Part of this is caching, by storing the response given by the origin server directly within our 151+ global data centers.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3gNQvxZ6I9cTwFSRjR5MUY/1a76149a8917e75e5bcac5d5608b0859/edge-side-includes-with-cloudflare-workers.png",
		"featured": false,
		"html": "<p>At Cloudflare we’re accelerating web assets in a number of different ways. Part of this is <a href=\"https://www.cloudflare.com/cdn/\">caching</a>, by storing the response given by the origin server directly within our <a href=\"https://www.cloudflare.com/network/\">151+ global data centers</a>. This will dramatically improve the delivery of the resources as the visitor will directly get them from the data center closest to them, instead of waiting for us to fetch the request from the origin web server.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"the-issue-with-dynamic-but-not-a-lot-pages\">The issue with dynamic (but not a lot) pages</h3>\n            <a href=\"#the-issue-with-dynamic-but-not-a-lot-pages\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The subject we’re gonna cover today is the concept of Edge-Side-Includes. And what’s better than a real use-case to introduce what it is used for? Let’s take a website where all pages are including advertisements at the head and bottom. Could we consider these pages static? We couldn’t as at least part of this page is dynamic. Could we consider caching it? That’s a no again as it would mean the first dynamic part rendered will be cached and served for the other visitors trying to get the page. It would be a catastrophe if the advertisements are user-specific.</p><p>So the issue here is that we can’t cache the page. That’s quite a shame as it means that we’ll fetch the page again, and over again for every new request just to get this 1% portion of dynamic content.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"counter-measure-with-delta-compression\">Counter-measure with delta-compression?</h3>\n            <a href=\"#counter-measure-with-delta-compression\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Back in time, we’ve released <a href=\"https://www.cloudflare.com/website-optimization/railgun/\">Railgun</a>, which consist in doing delta-compression of the requests received by a web server so Railgun listener could just send the delta bytes since the last request. We’re also working on the inclusion of this delta-compression in our <a href=\"/argo-tunnel/\">Argo Tunnel</a> listener, which is a small agent opening tunnels to us so you don’t even have to have your applications public on the internet, a simple outbound HTTPS access is enough to publish, secure and accelerate applications on Internet.</p><p>In both cases, we’ll need to fetch the complete webpage in order to calculate the difference from the last request, right? This is where Edge-Side-Includes takes place.</p><p>The Edge-Side-Includes standard has been submitted to the W3C (<a href=\"https://www.w3.org/TR/esi-lang\">https://www.w3.org/TR/esi-lang</a>) in August 2001 and defines an XML markup language that can be inserted in HTML or other text based contents which defines how interstitial proxies/CDNs need to combine static and dynamic portion and were to get them. The result is that it’s possible to keep those 99% in cache and for the remaining 1%, the interstitial cache proxy will fetch directly from the destination defined in the Edge-Side-Include block for finally combining both static and dynamic parts and sending the final webpage to the visitor.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/31aYZUXaOHwqH6Aw2OQVqn/a89c67de77722e00e6c27173d03a8bea/static-and-dynamic-content-diagram-blog-post-edge-side-workers_2x-1.png\" alt=\"static-and-dynamic-content-diagram-blog-post-edge-side-workers@2x-1\" class=\"kg-image\" width=\"1474\" height=\"480\" loading=\"lazy\"/>\n            \n            </figure><p>ESI block example:</p>\n            <pre class=\"language-html\"><code class=\"language-html\">&lt;esi:include src=&quot;http://example.com/1.html&quot; alt=&quot;http://bak.example.com/2.html&quot; onerror=&quot;continue&quot;/&gt;</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"implementing-it-in-a-worker\">Implementing it in a Worker</h3>\n            <a href=\"#implementing-it-in-a-worker\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We released months ago <a href=\"https://www.cloudflare.com/products/cloudflare-workers/\">Cloudflare Workers</a>, our serverless framework which helps to implement custom logics directly within the Edge. The Workers are triggering in the path of the requests and the responses and can manipulate almost everything and spin subrequests on-the-fly.This could dramatically improve the time to action for the implementation of new logics on your applications since you won’t have to modify them anymore as this can directly be done in the Edge, even if your applications are hosted on a bunch of different locations (Cloud and on-premise).</p><p>This scenario sounds then quite compatible with what we can achieve with Cloudflare Workers. For memories, here are the actions the EDGE needs to do for implementing the ESIs:</p><ul><li><p>Fetching the static content</p></li><li><p>Searching in the payload for any <code>&lt;esi:include/&gt;</code> blocks</p></li><li><p>Fetching separately every ESI blocks found</p></li><li><p>Merging the static and dynamic contents</p></li><li><p>Sending the whole new payload to visitors</p></li></ul><p>For this purpose, I created a small page on my test web server, with the following content:</p>\n            <pre class=\"language-html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;ESI Demonstration&lt;/title&gt;\n&lt;script src=&quot;/cdn-cgi/apps/head/FRz8JyVlvChltLiN7yAq762_k_A.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;\n&lt;img align=&quot;absmiddle&quot; SRC=&quot;./images/logo.jpg&quot;&gt;\n&lt;body&gt;\n&lt;h1&gt;Cloudflare Edge-Side-Include demonstration&lt;/h1&gt;\n&lt;h3&gt;How to ESI with Cloudflare&lt;/h3&gt;\n&lt;p&gt;ESI (or Edge-Side-Include consist in fetching a globally static page with some dynamic fragment, this can be done directly from our EDGE with the workers, where the HTML page would be like that one:&lt;/p&gt;\n&lt;p&gt;Dynamic portion coming from https://httpbin.org/headers:&lt;/p&gt;\n&lt;esi:include src=&quot;https://httpbin.org/headers&quot; onerror=&quot;continue&quot; /&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre></code>\n            <p>So in this page we can see that most of the content will be static and we can find just before the end of the <code>&lt;body&gt;</code> an ESI pointing to <a href=\"https://httpbin.org/headers\">https://httpbin.org/headers</a> that the Edge will need to combine with the static content, in place of the ESI block.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"the-worker-explained\">The worker explained</h2>\n            <a href=\"#the-worker-explained\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          \n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&quot;fetch&quot;, event =&gt; {\n  event.respondWith(fetchAndStream(event.request))\n  event.passThroughOnException()\n})\n\nasync function fetchAndStream(request) {\n  let response = await fetch(request)\n  let contentType = response.headers.get(&#039;content-type&#039;)\n\n  if (!contentType || !contentType.startsWith(&quot;text/&quot;)) {\n    return response\n  }\n  let { readable, writable } = new TransformStream()\n  let newResponse = new Response(readable, response)\n  newResponse.headers.set(&#039;cache-control&#039;, &#039;max-age=0&#039;)\n  streamTransformBody(response.body, writable)\n  return newResponse\n}</pre></code>\n            <p>This is the main portion of the script, testing first if the response is text-based and return the content directly to the visitor if not. Then instanciating a stream pipeline to send to the visitor using a specific function called <code>streamTransformBody()</code> in charge of the payload chunking.</p><p>You&#39;ll notice that I&#39;m setting a <code>max-age=0</code> cache-control header in the response as I don&#39;t want browsers to cache this response in case of a bad configuration on the Origin side.</p><p>I’m also declaring this script as fail-safe so that the request will go through normally if raising an Exception. More debugging information can be found <a href=\"https://developers.cloudflare.com/workers/writing-workers/debugging-tips/\">on our developer HUB</a>. Feel free to adapt for your use-cases and for example sending the Exception to a specific header, or even fancier <a href=\"/dogfooding-edge-workers/\">sending the event to a logging tool</a>.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">async function handleTemplate(encoder, templateKey) {\n  const linkRegex = /(esi:include.*src=&quot;(.*?)&quot;.*\\/)/gm\n  let result = linkRegex.exec(templateKey);\n  let esi\n  if (!result) {\n    return encoder.encode(`&lt;${templateKey}&gt;`);\n  }\n  if (result[2]) {\n    esi = await subRequests(result[2]);\n  }\n  return encoder.encode(\n    `${esi}`\n  );\n}</pre></code>\n            <p>In this portion, we’re receiving the chunks and searching for ESI blocks and if found, getting the dynamic parts. You can see that when the regex is matching, we’re calling a <code>subRequest()</code> function. This function will fetch the content of the ESI destination and return + encode the received payload.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">async function subRequests(target){\n  const init = {\n            method: &#039;GET&#039;,\n            headers: {\n                &#039;user-agent&#039;: &#039;cloudflare&#039;\n            }\n        }\n  let response = await fetch(target, init)\n  let text = await response.text()\n  \n  return text\n}</pre></code>\n            <p>This portion is quite simple as it defines the function that does the subrequest to the ESI destination, pay attention to what the Origin server is serving as cache-control response header for those dynamic parts as we want to keep them dynamic and not cached by Cloudflare. It’s also possible to override the TTL via Cloudflare directly if you don’t want to modify your application. The documentation about how to manipulate Cloudflare features is available <a href=\"https://developers.cloudflare.com/workers/reference/cloudflare-features/\">on the developers HUB</a></p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">async function streamTransformBody(readable, writable) {\n  const startTag = &quot;&lt;&quot;.charCodeAt(0);\n  const endTag = &quot;&gt;&quot;.charCodeAt(0);\n  let reader = readable.getReader();\n  let writer = writable.getWriter();\n\n  let templateChunks = null;\n  while (true) {\n    let { done, value } = await reader.read();\n    if (done) break;\n    while (value.byteLength &gt; 0) {\n      if (templateChunks) {\n        let end = value.indexOf(endTag);\n        if (end === -1) {\n          templateChunks.push(value);\n          break;\n        } else {\n          templateChunks.push(value.subarray(0, end));\n          await writer.write(await translate(templateChunks));\n          templateChunks = null;\n          value = value.subarray(end + 1);\n        }\n      }\n      let start = value.indexOf(startTag);\n      if (start === -1) {\n        await writer.write(value);\n        break;\n      } else {\n        await writer.write(value.subarray(0, start));\n        value = value.subarray(start + 1);\n        templateChunks = [];\n      }\n    }\n  }\n  await writer.close();\n}</pre></code>\n            <p>In the <code>streamTransformBody()</code> function, I’m chunking the payload received in the readable object with specific boundaries in order to avoid chunks to terminate in the middle of a line or worse, in the middle of an ESI block.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">async function translate(chunks) {\n  const decoder = new TextDecoder();\n\n  let templateKey = chunks.reduce(\n    (accumulator, chunk) =&gt;\n      accumulator + decoder.decode(chunk, { stream: true }),\n    &quot;&quot;\n  );\n  templateKey += decoder.decode();\n\n  return handleTemplate(new TextEncoder(), templateKey);\n}</pre></code>\n            <p>The <code>translate()</code> function decode the chunks and send the stringified payload to the <code>handleTemplate()</code> function, which is for memories intended to properly replace the ESI by the dynamic pieces.</p><p>The complete worker script</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&quot;fetch&quot;, event =&gt; {\n  event.respondWith(fetchAndStream(event.request))\n  event.passThroughOnException()\n})\n\nasync function fetchAndStream(request) {\n  let response = await fetch(request)\n  let contentType = response.headers.get(&#039;content-type&#039;)\n\n  if (!contentType || !contentType.startsWith(&quot;text/&quot;)) {\n    return response\n  }\n  let { readable, writable } = new TransformStream()\n  let newResponse = new Response(readable, response)\n  newResponse.headers.set(&#039;cache-control&#039;, &#039;max-age=0&#039;)\n  streamTransformBody(response.body, writable)\n  return newResponse\n}\n\nasync function handleTemplate(encoder, templateKey) {\n  const linkRegex = /(esi:include.*src=&quot;(.*?)&quot;.*\\/)/gm\n  let result = linkRegex.exec(templateKey);\n  let esi\n  if (!result) {\n    return encoder.encode(`&lt;${templateKey}&gt;`);\n  }\n  if (result[2]) {\n    esi = await subRequests(result[2]);\n  }\n  return encoder.encode(\n    `${esi}`\n  );\n}\n\nasync function subRequests(target){\n  const init = {\n            method: &#039;GET&#039;,\n            headers: {\n                &#039;user-agent&#039;: &#039;cloudflare&#039;\n            }\n        }\n  let response = await fetch(target, init)\n  let text = await response.text()\n  \n  return text\n}\n\nasync function streamTransformBody(readable, writable) {\n  const startTag = &quot;&lt;&quot;.charCodeAt(0);\n  const endTag = &quot;&gt;&quot;.charCodeAt(0);\n  let reader = readable.getReader();\n  let writer = writable.getWriter();\n\n  let templateChunks = null;\n  while (true) {\n    let { done, value } = await reader.read();\n    if (done) break;\n    while (value.byteLength &gt; 0) {\n      if (templateChunks) {\n        let end = value.indexOf(endTag);\n        if (end === -1) {\n          templateChunks.push(value);\n          break;\n        } else {\n          templateChunks.push(value.subarray(0, end));\n          await writer.write(await translate(templateChunks));\n          templateChunks = null;\n          value = value.subarray(end + 1);\n        }\n      }\n      let start = value.indexOf(startTag);\n      if (start === -1) {\n        await writer.write(value);\n        break;\n      } else {\n        await writer.write(value.subarray(0, start));\n        value = value.subarray(start + 1);\n        templateChunks = [];\n      }\n    }\n  }\n  await writer.close();\n}\n\nasync function translate(chunks) {\n  const decoder = new TextDecoder();\n\n  let templateKey = chunks.reduce(\n    (accumulator, chunk) =&gt;\n      accumulator + decoder.decode(chunk, { stream: true }),\n    &quot;&quot;\n  );\n  templateKey += decoder.decode();\n\n  return handleTemplate(new TextEncoder(), templateKey);\n}</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"testing-the-script\">Testing the script</h3>\n            <a href=\"#testing-the-script\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Testing is easy, we’re going to cURL over the URL having my small HTML code presented earlier in the article, and see what looks like the answer.</p><p>cURL command:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">curl https://www.justalittlebyte.ovh/esi.html -sv 2&gt;&amp;1 | grep -E &quot;Cf-Ray|cf-cache-status|cf-ray&quot;</pre></code>\n            <p>The grep is trying to catch few things:</p><ul><li><p>First CF-Ray is for the request itself</p></li><li><p>CF-Cache-Status is the header Cloudflare is using indicating if the requests has been fetched from the cache</p></li><li><p>Second CF-Ray is the CF-Ray coming from the call made to <a href=\"https://httpbin.org/headers\">https://httpbin.org/headers</a>, this will change as the CF-Ray is unique for any new requests made through our Edge</p></li></ul><p>The answer is that one</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">&lt; cf-cache-status: HIT \n&lt; cf-ray: 447b3a379ce8bc3e-LHR\n    &quot;Cf-Ray&quot;: &quot;447b3a37d217bc3e-IAD&quot;,</pre></code>\n            <p>Doing it again</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">&lt; cf-cache-status: HIT\n&lt; cf-ray: 447b3a3c4b5fbc44-LHR\n    &quot;Cf-Ray&quot;: &quot;447b3a3c61f5bc44-IAD&quot;,</pre></code>\n            <p>and the page looks like this</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7tCYMjbCNgA3iSj8ys9n2x/5ceaf30d5b3399e2c11eba854fe5f5a7/ESI_Demonstration.jpg\" alt=\"ESI_Demonstration\" class=\"kg-image\" width=\"768\" height=\"576\" loading=\"lazy\"/>\n            \n            </figure><p>The most interesting comes from the cf-cache-status where we can see that the page is actually coming from our cache but the worker modified the payload as he detected an ESI block.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"share-your-worker-recipes\">Share your worker recipes</h3>\n            <a href=\"#share-your-worker-recipes\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>You can find additional worker recipes and examples in our <a href=\"https://developers.cloudflare.com/workers/recipes/\">official documentation</a></p><p>Have you written a worker that you&#39;d like to share? <a href=\"mailto:community@cloudflare.com\">Send it to us</a> and you might get featured on our blog or added to our Cloudflare worker recipe collection with a credit.</p>",
		"id": "3VUhOzE9CR0G9U2E9MggU5",
		"localeList": {
			"name": "Edge-Side-Includes with Cloudflare Workers Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "This article explains how to implement the Edge-Side-Includes with Cloudflare Workers.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-08-20T09:00:00.000+01:00",
		"slug": "edge-side-includes-with-cloudflare-workers",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Edge-Side-Includes with Cloudflare Workers",
		"updated_at": "2024-10-09T23:09:09.843Z",
		"url": "https://blog.cloudflare.com/edge-side-includes-with-cloudflare-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}