{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "9",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Last year we deployed a CSAM image scanning tool. This is so cool! Image processing is always hard, and deploying a real image identification system at a Cloudflare scale is no small achievement! But we hit a problem - the matching algorithm was too slow for our needs.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6tqb9LfivXlJtuEYHiQJrV/b65f59b6a7e5101d09056f65805ba55c/computing-euclidean-distance-on-144-dimensions.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4rNxjRfxGzhJI3MAVokLgA/8b8be5359634c3c75ecd5cfc696b6072/image1-62.png\" alt=\"Computing Euclidean distance on 144 dimensions\" class=\"kg-image\" width=\"1653\" height=\"853\" loading=\"lazy\"/>\n            \n            </figure><p>Late last year I read a blog post about <a href=\"/the-csam-scanning-tool/\">our CSAM image scanning tool</a>. I remember thinking: this is so cool! Image processing is always hard, and deploying a real image identification system at Cloudflare is no small achievement!</p><p>Some time later, I was chatting with Kornel: &quot;We have all the pieces in the image processing pipeline, but we are struggling with the performance of one component.&quot; Scaling to Cloudflare needs ain&#39;t easy!</p><p>The problem was in the speed of the matching algorithm itself. Let me elaborate. As John explained in his blog post <a href=\"/the-csam-scanning-tool\">on the CSAM Scanning Tool</a>, the image matching algorithm creates a fuzzy hash from a processed image. The hash is exactly 144 bytes long. For example, it might look like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">00e308346a494a188e1043333147267a 653a16b94c33417c12b433095c318012\n5612442030d14a4ce82c623f4e224733 1dd84436734e4a5d6e25332e507a8218\n6e3b89174e30372d</pre></code>\n            <p>The hash is designed to be used in a fuzzy matching algorithm that can find &quot;nearby&quot;, related images. The specific algorithm is well defined, but making it fast is left to the programmer — and at Cloudflare we need the matching to be done super fast. We want to match thousands of hashes per second, of images passing through our network, against a database of millions of known images. To make this work, we need to seriously optimize the matching algorithm.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"naive-quadratic-algorithm\">Naive quadratic algorithm</h3>\n            <a href=\"#naive-quadratic-algorithm\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The first algorithm that comes to mind has <code>O(K*N)</code> complexity: for each query, go through every hash in the database. In naive implementation, this creates a lot of work. But how much work exactly?</p><p>First, we need to explain how fuzzy matching works.</p><p>Given a query hash, the fuzzy match is the &quot;closest&quot; hash in a database. This requires us to define a distance. We treat each hash as a vector containing 144 numbers, identifying a point in a 144-dimensional space. Given two such points, we can calculate the distance using the standard Euclidean formula.</p><p>For our particular problem, though, we are interested in the &quot;closest&quot; match in a database only if the distance is lower than some predefined threshold. Otherwise, when the distance is large,  we can assume the images aren&#39;t similar. This is the expected result — most of our queries will not have a related image in the database.</p><p>The <a href=\"https://en.wikipedia.org/wiki/Euclidean_distance\">Euclidean distance</a> equation used by the algorithm is standard:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5p3VcvTiFKgdwx5xLkRRWv/33fa46b931b1764cf6e51df3198e0a23/image3-41.png\" alt=\"The Euclidean distance equation used by the algorithm is standard\" class=\"kg-image\" width=\"575\" height=\"39\" loading=\"lazy\"/>\n            \n            </figure><p>To calculate the distance between two 144-byte hashes, we take each byte, calculate the delta, square it, sum it to an accumulator, do a square root, and ta-dah! We have the distance!</p><p><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-naive.c#L11-L20\">Here&#39;s how to count the squared distance in C</a>:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4lwPTgH8PmEYB8mMyOhbsH/f660b81e92c9ff46a422bdbf1af18321/image4-24.png\" alt=\"Here's how to count the squared distance in C\" class=\"kg-image\" width=\"912\" height=\"302\" loading=\"lazy\"/>\n            \n            </figure><p>This function returns the squared distance. We avoid computing the actual distance to save us from running the square root function - it&#39;s slow. Inside the code, for performance and simplicity, we&#39;ll mostly operate on the squared value. We don&#39;t need the actual distance value, we just need to find the vector with the smallest one. In our case it doesn&#39;t matter if we&#39;ll compare distances or squared distances!</p><p>As you can see, fuzzy matching is basically a standard problem of finding the closest point in a multi-dimensional space. Surely this has been solved in the past — but let&#39;s not jump ahead.</p><p>While this code might be simple, we expect it to be rather slow. Finding the smallest hash distance in a database of, say, 1M entries, would require going over all records, and would need at least:</p><ol><li><p>144 * 1M subtractions</p></li><li><p>144 * 1M multiplications</p></li><li><p>144 * 1M additions</p></li></ol><p>And more. This alone adds up to 432 million operations! How does it look in practice? To illustrate this blog post <a href=\"https://github.com/cloudflare/cloudflare-blog/tree/master/2020-12-mmdist\">we prepared a full test suite</a>. The large database of known hashes can be <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/generate.c\">well emulated by random data</a>. The query hashes can&#39;t be random and must be slightly more sophisticated, otherwise the exercise wouldn&#39;t be that interesting. We generated the test smartly by byte-swaps of the actual data from the database — this allows us to precisely control the distance between test hashes and database hashes. <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/gentest.py\">Take a look at the scripts for details</a>. Here&#39;s our first run of <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-naive.c\">the first, naive, algorithm</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ make naive\n&lt; test-vector.txt ./mmdist-naive &gt; test-vector.tmp\nTotal: 85261.833ms, 1536 items, avg 55.509ms per query, 18.015 qps</pre></code>\n            <p>We matched 1,536 test hashes against a database of 1 million random vectors in 85 seconds. It took 55ms of CPU time on average to find the closest neighbour. This is rather slow for our needs.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"simd-for-help\">SIMD for help</h3>\n            <a href=\"#simd-for-help\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>An obvious improvement is to use more complex SIMD instructions. SIMD is a way to instruct the CPU to process multiple data points using one instruction. This is a perfect strategy when dealing with vector problems — as is the case for our task.</p><p>We settled on using AVX2, with 256 bit vectors. We did this for a simple reason — newer AVX versions are not supported by our AMD CPUs. Additionally, in the past, we were <a href=\"/on-the-dangers-of-intels-frequency-scaling/\">not thrilled by the AVX-512 frequency scaling</a>.</p><p>Using AVX2 is easier said than done. There is no single instruction to count Euclidean distance between two uint8 vectors! The fastest way of counting the full distance of two 144-byte vectors <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-naive-avx2.c#L13-L36\">with AVX2 we could find is authored</a> by <a href=\"https://twitter.com/thecomp1ler\">Vlad</a>:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7yFtHcZSRvyub5vHtjDXKE/54596189ea43193a5fd51653ec73daea/image2-39.png\" alt=\"\" class=\"kg-image\" width=\"1352\" height=\"646\" loading=\"lazy\"/>\n            \n            </figure><p>It’s actually simpler than it looks: load 16 bytes, convert vector from uint8 to int16, subtract the vector, store intermediate sums as int32, repeat. At the end, we need to do complex 4 instructions to extract the partial sums into the final sum. <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-naive-avx2.c\">This AVX2 code</a> improves the performance around 3x:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ make naive-avx2 \nTotal: 25911.126ms, 1536 items, avg 16.869ms per query, 59.280 qps</pre></code>\n            <p>We measured 17ms per item, which is still below our expectations. Unfortunately, we can&#39;t push it much further without major changes. The problem is that this code is limited by memory bandwidth. The measurements come from my Intel i7-5557U CPU, which has the max theoretical memory bandwidth of just 25GB/s. The database of 1 million entries takes 137MiB, so it takes at least 5ms to feed the database to my CPU. With this naive algorithm we won&#39;t be able to go below that.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"vantage-point-tree-algorithm\">Vantage Point Tree algorithm</h3>\n            <a href=\"#vantage-point-tree-algorithm\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Since the naive brute force approach failed, we tried using more sophisticated algorithms. My colleague <a href=\"https://github.com/kornelski/vpsearch\">Kornel Lesiński implemented</a> a super cool <a href=\"https://en.wikipedia.org/wiki/Vantage-point_tree\">Vantage Point algorithm</a>. After a few ups and downs, optimizations and rewrites, we gave up. Our problem turned out to be unusually hard for this kind of algorithm.</p><p>We observed <a href=\"https://en.wikipedia.org/wiki/Curse_of_dimensionality\">&quot;the curse of dimensionality&quot;</a>. Space partitioning algorithms don&#39;t work well in problems with large dimensionality — and in our case, we have an enormous number of 144 dimensions. K-D trees are doomed. Locality-sensitive hashing is also doomed. It&#39;s a bizarre situation in which the space is unimaginably vast, but everything is close together. The volume of the space is a 347-digit-long number, but the maximum distance between points is just 3060 - sqrt(255*255*144).</p><p>Space partitioning algorithms are fast, because they gradually narrow the search space as they get closer to finding the closest point. But in our case, the common query is never close to any point in the set, so the search space can’t be narrowed to a meaningful degree.</p><p>A VP-tree was a promising candidate, because it operates only on distances, subdividing space into near and far partitions, like a binary tree. When it has a close match, it can be very fast, and doesn&#39;t need to visit more than <code>O(log(N))</code> nodes. For non-matches, its speed drops dramatically. The algorithm ends up visiting nearly half of the nodes in the tree. Everything is close together in 144 dimensions! Even though the algorithm avoided visiting more than half of the nodes in the tree, the cost of visiting remaining nodes was higher, so the search ended up being slower overall.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"smarter-brute-force\">Smarter brute force?</h3>\n            <a href=\"#smarter-brute-force\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>This experience got us thinking. Since space partitioning algorithms can&#39;t narrow down the search, and still need to go over a very large number of items, maybe we should focus on going over all the hashes, extremely quickly. We must be smarter about memory bandwidth though — it was the limiting factor in the naive brute force approach before.</p><p>Perhaps we don&#39;t need to fetch all the data from memory.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"short-distance\">Short distance</h3>\n            <a href=\"#short-distance\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The breakthrough came from the realization that we don&#39;t need to count the full distance between hashes. Instead, we can compute only a subset of dimensions, say 32 out of the total of 144. If this distance is already large, then there is no need to compute the full one! Computing more points is not going to reduce the Euclidean distance.</p><p>The proposed algorithm works as follows:</p><p>1. Take the query hash and extract a 32-byte short hash from it</p><p>2. Go over all the 1 million 32-byte short hashes from the database. They must be densely packed in the memory to allow the CPU to perform good prefetching and avoid reading data we won&#39;t need.</p><p>3. If the distance of the 32-byte short hash is greater or equal a best score so far, move on</p><p>4. Otherwise, investigate the hash thoroughly and compute the full distance.</p><p>Even though this algorithm needs to do less arithmetic and memory work, it&#39;s not faster than the previous naive one. See <code>make short-avx2</code>. The problem is: we still need to compute a full distance for hashes that are promising, and there are quite a lot of them. Computing the full distance for promising hashes adds enough work, both in ALU and memory latency, to offset the gains of this algorithm.</p><p>There is one detail of our particular application of the image matching problem that will help us a lot moving forward. As we described earlier, the problem is less about finding the closest neighbour and more about proving that the neighbour with a reasonable distance doesn&#39;t exist. Remember — in practice, we don&#39;t expect to find many matches! We expect almost every image we feed into the algorithm to be unrelated to image hashes stored in the database.</p><p>It&#39;s sufficient for our algorithm to prove that no neighbour exists within a predefined distance threshold. Let&#39;s assume we are not interested in hashes more distant than, say, 220, which squared is 48,400. <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-short-avx2.c\">This makes our short-distance algorithm variation</a> work much better:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ make short-avx2-threshold\nTotal: 4994.435ms, 1536 items, avg 3.252ms per query, 307.542 qps</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"origin-distance-variation\">Origin distance variation</h3>\n            <a href=\"#origin-distance-variation\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/rp4oarmXrL2JtieXZ4VWB/56dd69e834fa27e7c0c5cb0eb7544a58/image6-11.png\" alt=\"\" class=\"kg-image\" width=\"1081\" height=\"375\" loading=\"lazy\"/>\n            \n            </figure><p>At some point, John noted that the threshold allows additional optimization. We can order the hashes by their distance from some origin point. Given a query hash which has origin distance of A, we can inspect only hashes which are distant between |A-threshold| and |A+threshold| from the origin. This is pretty much how each level of Vantage Point Tree works, just simplified. This optimization — ordering items in the database by their distance from origin point — is relatively simple and can help save us a bit of work.</p><p>While great on paper, this method doesn&#39;t introduce much gain in practice, as the vectors are not grouped in clusters — they are pretty much random! For the threshold values we are interested in, the origin distance algorithm variation gives us ~20% speed boost, which is okay but not breathtaking. This change might bring more benefits if we ever decide to reduce the threshold value, so it might be worth doing for production implementation. However, it doesn&#39;t work well with query batching.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"transposing-data-for-better-avx\">Transposing data for better AVX</h3>\n            <a href=\"#transposing-data-for-better-avx\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>But we&#39;re not done with AVX optimizations! The usual problem with AVX is that the instructions don&#39;t normally fit a specific problem. Some serious mind twisting is required to adapt the right instruction to the problem, or to reverse the problem so that a specific instruction can be used. AVX2 doesn&#39;t have useful &quot;horizontal&quot; uint16 subtract, multiply and add operations. For example, <code>_mm_hadd_epi16</code> exists, but it&#39;s slow and cumbersome.</p><p>Instead, we can twist the problem to make use of fast available uint16 operands. For example we can use:</p><ol><li><p>_mm256_sub_epi16</p></li><li><p>_mm256_mullo_epi16</p></li><li><p>and _mm256_add_epu16.</p></li></ol><p>The <code>add</code> would overflow in our case, but fortunately there is add-saturate _mm256_adds_epu16.</p><p>The saturated <code>add</code> is great and saves us conversion to uint32. It just adds a small limitation: the threshold passed to the program (i.e., the max squared distance) must fit into uint16. However, this is fine for us.</p><p>To effectively use these instructions we need to transpose the data in the database. Instead of storing hashes in rows, we can store them in columns:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/29kHAIq6T1Mfif5MVP3Jol/7369ea0b4a38a416a4367bb9865996ca/image1-63.png\" alt=\"\" class=\"kg-image\" width=\"1653\" height=\"853\" loading=\"lazy\"/>\n            \n            </figure><p>So instead of:</p><ol><li><p>[a1, a2, a3],</p></li><li><p>[b1, b2, b3],</p></li><li><p>[c1, c2, c3],</p></li></ol><p>...</p><p>We can lay it out in memory transposed:</p><ol><li><p>[a1, b1, c1],</p></li><li><p>[a2, b2, c2],</p></li><li><p>[a3, b3, c3],</p></li></ol><p>...</p><p>Now we can load 16 first bytes of hashes using one memory operation. In the next step, we can subtract the first byte of the querying hash using a single instruction, and so on. The algorithm stays exactly the same as defined above; we just make the data easier to load and easier to process for AVX.</p><p><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-short-inv-avx2.c#L138-L147\">The hot loop code</a> even looks relatively pretty:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2Xb2h3rI8mXT1yeiQcVYfn/4a7eb556d7aea0014c3944b301b52b0d/image5-26.png\" alt=\"\" class=\"kg-image\" width=\"577\" height=\"157\" loading=\"lazy\"/>\n            \n            </figure><p>With the well-tuned batch size and short distance size parameters we can <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2020-12-mmdist/mmdist-short-inv-avx2.c\">see the performance of this algorithm</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ make short-inv-avx2\nTotal: 1118.669ms, 1536 items, avg 0.728ms per query, 1373.062 qps</pre></code>\n            <p>Whoa! This is pretty awesome. We started from 55ms per query, and we finished with just 0.73ms. There are further micro-optimizations possible, like memory prefetching or using huge pages to reduce page faults, but they have diminishing returns at this point.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4dBsIg3yHloEmyLqUyfETK/3119d166040ef5d6b96d03acc9873120/image7-8.png\" alt=\"\" class=\"kg-image\" width=\"512\" height=\"410\" loading=\"lazy\"/>\n            \n            </figure><p>Roofline model from Denis Bakhvalov&#39;s book‌‌</p><p>If you are interested in architectural tuning such as this, take a look at <a href=\"https://book.easyperf.net/perf_book\">the new performance book by Denis Bakhvalov</a>. It discusses roofline model analysis, which is pretty much what we did here.</p><p><a href=\"https://github.com/cloudflare/cloudflare-blog/tree/master/2020-12-mmdist\">Do take a look at our code</a> and tell us if we missed some optimization!</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"summary\">Summary</h3>\n            <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>What an optimization journey! We jumped between memory and ALU bottlenecked code. We discussed more sophisticated algorithms, but in the end, a brute force algorithm — although tuned — gave us the best results.</p><p>To get even better numbers, I experimented with Nvidia GPU using CUDA. The CUDA intrinsics like <code>vabsdiff4</code> and <code>dp4a</code> fit the problem perfectly. The V100 gave us some amazing numbers, but I wasn&#39;t fully satisfied with it. Considering how many AMD Ryzen cores with AVX2 we can get for the cost of a single server-grade GPU, we leaned towards general purpose computing for this particular problem.</p><p>This is a great example of the type of complexities we deal with every day. Making even the best technologies work “at Cloudflare scale” requires thinking outside the box. Sometimes we rewrite the solution dozens of times before we find the optimal one. And sometimes we settle on a brute-force algorithm, just very very optimized.</p><p>The computation of hashes and image matching are challenging problems that require running very CPU intensive operations.. The CPU we have available on the edge is scarce and workloads like this are incredibly expensive. Even with the optimization work talked about in this blog post, running the CSAM scanner at scale is a challenge and has required a huge engineering effort. And we’re not done! We need to solve more hard problems before we&#39;re satisfied. If you want to help, consider <a href=\"https://www.cloudflare.com/careers/\">applying</a>!</p>",
		"id": "3xsrCKMSJ12rBqyQDNejcu",
		"localeList": {
			"name": "Computing Euclidean distance on 144 dimensions Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Last year we deployed a CSAM image scanning tool. This is so cool! Image processing is always hard, and deploying a real image identification system at a Cloudflare scale is no small achievement! But we hit a problem - the matching algorithm was too slow for our needs.",
		"metadata": {
			"title": "Computing Euclidean distance on 144 dimensions",
			"description": "Last year we deployed a CSAM image scanning tool. This is so cool! Image processing is always hard, and deploying a real image identification system at a Cloudflare scale is no small achievement! But we hit a problem - the matching algorithm was too slow for our needs.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2EU5rpuHaPsPcycDC7fTl1/6312ca6d1625416a7de3088c20a504c7/computing-euclidean-distance-on-144-dimensions-MGlQ3e.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2020-12-18T12:00:00.000+00:00",
		"slug": "computing-euclidean-distance-on-144-dimensions",
		"tags": [
			{
				"id": "4gN0ARax0fHxjtZL07THOe",
				"name": "Performance",
				"slug": "performance"
			},
			{
				"id": "2kPXcZlQ7I9S1hKI5tRYxl",
				"name": "Optimization",
				"slug": "optimization"
			},
			{
				"id": "1OAcGRrbAS8T2hKb2tqB7N",
				"name": "Speed",
				"slug": "speed"
			}
		],
		"title": "Computing Euclidean distance on 144 dimensions",
		"updated_at": "2024-10-09T23:12:56.306Z",
		"url": "https://blog.cloudflare.com/computing-euclidean-distance-on-144-dimensions"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}