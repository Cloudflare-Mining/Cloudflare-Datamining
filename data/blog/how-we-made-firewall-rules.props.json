{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "David Kitchen",
				"slug": "david-kitchen",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1WfzwK0fF2VI7ESKdIJ3p6/39b00b09172c0d80de88a1f2f13b49aa/david-kitchen.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Recently we launched Firewall Rules, a new feature that allows you to construct expressions that perform complex matching against HTTP requests and then choose how that traffic is handled.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4dVb16xBKjh11KivOjM6rZ/20c69684be5d8dc62521e966b60209cf/how-we-made-firewall-rules.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3YBt6GfBRgckIDNZtZwZDz/96b59aaed5bcd35d4b82f520b5b3532b/image1-1.png\" alt=\"\" class=\"kg-image\" width=\"650\" height=\"519\" loading=\"lazy\"/>\n            \n            </figure><p>Recently we launched <a href=\"/announcing-firewall-rules/\">Firewall Rules</a>, a new feature that allows you to construct expressions that perform complex matching against HTTP requests and then choose how that traffic is handled. As a Firewall feature you can, of course, block traffic. The expressions we support within Firewall Rules along with powerful control over the order in which they are applied allows complex new behaviour.</p><p>In this blog post I tell the story of Cloudflare’s <a href=\"https://www.cloudflare.com/features-page-rules/\">Page Rules</a> mechanism and how Firewall Rules came to be. Along the way I’ll look at the technical choices that led to us building the new matching engine in Rust.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-evolution-of-the-cloudflare-firewall\">The evolution of the Cloudflare Firewall</h3>\n      <a href=\"#the-evolution-of-the-cloudflare-firewall\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare offers two types of firewall for web applications, a managed firewall in the form of a <a href=\"https://en.wikipedia.org/wiki/Web_application_firewall\">WAF</a> where we write and maintain the rules for you, and a configurable firewall where you write and maintain rules. In this article, we will focus on the configurable firewall.</p><p>One of the earliest Cloudflare firewall features was the IP Access Rule. It dates backs to the earliest versions of the Cloudflare Firewall and simply allows you to block traffic from specific IP addresses:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request IP equals 203.0.113.1 then block the request</pre></code>\n            <p>As attackers and spammers frequently launched attacks from a given network we also introduced the <a href=\"https://en.wikipedia.org/wiki/Autonomous_system_(Internet)\">ASN</a> matching capability:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request IP belongs to ASN 64496 then block the request</pre></code>\n            <p>We also allowed blocking ranges of addresses defined by <a href=\"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">CIDR</a> notation when an IP was too specific and an ASN too broad:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request IP is within 203.0.113.0/24 then block the request</pre></code>\n            <p>Blocking is not the only action you might need and so other actions are available:</p><ul><li><p>Allowlist = apply no other firewall rules and allow the request to pass this part of the firewall</p></li><li><p>Challenge = issue a <a href=\"https://en.wikipedia.org/wiki/CAPTCHA\">CAPTCHA</a> and if this is passed then allow the request but otherwise deny. This would be used to determine if the request came from a human operator</p></li><li><p>JavaScript challenge = issue an automated JavaScript challenge and if this is passed then allow the request. This would be used to determine if the request came from a simple stateless bot (perhaps a wget or curl script)</p></li><li><p>Block = deny the request</p></li></ul><p>Cloudflare also has Page Rules. Page Rules allow you to match full URIs and then perform actions such as redirects or to raise the security level which can be considered firewall functions:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request URI matches /nullroute then redirect to http://127.0.0.1</pre></code>\n            <p>Cloudflare also added GeoIP information within an HTTP header and the firewall was extended to include that:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request IP originates from county GB then CAPTCHA the request</pre></code>\n            <p>All of the above existed in Cloudflare pre-2014, and then during 2016 we set about to identify the most commonly requested firewall features (according to Customer Support tickets and feedback from paying customers) and provide a self-service solution. From that analysis, we added three new capabilities during late 2016: Rate Limiting, User Agent Rules, and Zone Lockdown.</p><p>Whilst Cloudflare automatically stops very large denial of service attacks, rate limiting allowed customers to stop smaller attacks that were a real concern to them but were low enough volume that Cloudflare’s DDoS defences were not being applied.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request method is POST and request URI matches /wp-admin/index.php and response status code is 403 and more than 3 requests like this occur in a 15 minute time period then block the traffic for 2 hours</pre></code>\n            <p>User Agent rules are as simple as:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request user_agent is `Fake User Agent` then CAPTCHA the request</pre></code>\n            <p>Zone Lockdown, however was the first default deny feature. The Cloudflare Firewall could be thought of as “allow all traffic, except where a rule exists to block it”. Zone Lockdown is the opposite “for a given URI, block all traffic, except where a rule exists to allow it”.</p><p>Zone Lockdown allowed customers could to block access to a public website for all but a few IP addresses or IP ranges. For example, many customers wanted access to a staging website to only be available to their office IP addresses.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request URI matches https://staging.example.com/ and request IP not in 203.0.113.0/24 then block the request</pre></code>\n            <p>Finally, an Enterprise customer could also contact Cloudflare and have a truly bespoke rule created for them within the WAF engine.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"seeing-the-problem\">Seeing the problem</h3>\n      <a href=\"#seeing-the-problem\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The firewall worked well for simple mitigation, but it didn’t fully meet the needs of our customers.</p><p>Each of the firewall features had targeted a single attribute, and the interfaces and implementations reflected that. Whilst the Cloudflare Firewall had evolved to solve a problem as each problem arose, these did not work together. In late 2017 you could sum up the firewall capabilities as:</p><p>You can block any attack traffic on any criteria, so long as you <b>only</b> pick <b>one</b> of:</p><ul><li><p>IP</p></li><li><p>CIDR</p></li><li><p>ASN</p></li><li><p>Country</p></li><li><p>User Agent</p></li><li><p>URI</p></li></ul><p>We saw the problem, but how to fix it?</p><p>We match our firewall rules in two ways:</p><ul><li><p>Lookup matching</p></li><li><p>String pattern matching</p></li></ul><p>Lookup matching covers the IP, CIDR, ASN, Country and User Agent rules. We would create a key in our globally distributed key/value data store Quicksilver, and store the action in the value:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">Key   = zone:www.example.com_ip:203.0.113.1\nValue = block</pre></code>\n            <p>When a request for <code>www.example.com</code> is received, we look at the IP address of the client that made the request, construct the key and perform the lookup. If the key exists in the store, then the value would tell us what action to perform, in this case if the client IP were <code>203.0.113.1</code> then we would block the request.</p><p>Lookup matching is a joy to work with, it is O(1) complexity meaning that a single request would only perform a single lookup for an IP rule regardless of how many IP rules a customer had. Whilst most customers had a few rules, some customers had hundreds of thousands of rules (typically created automatically by combining fail2ban or similar with a Cloudflare API call).</p><p>Lookups work well when you are only looking up a single value. If you need to combine an IP and a User Agent we would need to produce keys that composed these values together. This massively increases the number of keys that you need to publish.</p><p>String pattern matching occurs where URI matching is required. For our Page Rules feature this meant combining all of the Page Rules into a single regular expression that we would apply to the request URI whilst handling a request.</p><p>If you had Page Rules that said (in order):</p><ul><li><p>Match <code>*/wp-admin/index.php</code> and then block</p></li><li><p>Then match <code>*/xmlrpc.php</code> and then block</p></li></ul><p>These are converted into:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">^(?&lt;block__1&gt;(?:.*/wp-admin/index.php))|(?&lt;block__2&gt;(?:.*/xmlrpc.php))$</pre></code>\n            <p>Yes, you read that correctly. Each Page Rule was appended to a single regular expression in the order of execution, and the naming group is used as an overload for the desired action.</p><p>This works surprisingly well as <a href=\"https://swtch.com/~rsc/regexp/regexp1.html\">regular expression matching can be simple and fast</a> especially when the regular expression matches against a single value like the URI, but as soon as you want to match the URI plus an IP range it becomes less obvious how to extend this.</p><p>This is what we had, a set of features that worked really well providing you want to match a single property of a request. The implementation also meant that none of these features could be trivially extended to embrace multiple properties at a time. We needed something else, a fast way to compute if a request matches a rule that could contain multiple properties as well as pattern matching.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-solution-that-works-now-and-in-the-future\">A solution that works now and in the future</h3>\n      <a href=\"#a-solution-that-works-now-and-in-the-future\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Over time Cloudflare engineers authored internal posts exploring how a new matching engine might work. The first thing that occurred to every engineer was that the matching must be an expression. These ideas followed a similar approach which we would construct an expression within JSON as a DSL (Domain Specific Language) of our expression language. This DSL could describe matching a request and a UI could render this, and a backend could process it.</p><p>Early proposals looked like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">{\n  &quot;And&quot;: [\n    {\n      &quot;Equals&quot;{\n        &quot;host&quot;: &quot;www.example.com&quot;\n      }\n    },\n    &quot;Or&quot;: [\n      {\n        &quot;Regex&quot;: {\n          &quot;path&quot;: &quot;^(?: .*/wp-admin/index.php)$&quot;\n        }\n      }{\n        &quot;Regex&quot;: {\n          &quot;path&quot;: &quot;^(?: .*/xmlrpc.php)$&quot;\n        }\n      }\n    ]\n  ]\n}</pre></code>\n            <p>The JSON describes an expression that computers can easily turn into a rule to apply, but people find this hard to read and work with.</p><p>As we did not wish to display JSON like this in our dashboard we thought about how we might summarise it for a UI:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">if request host equals www.example.com and (request path matches ^(?:.*/wp-admin/index.php)$ or request path matches ^(?:.*/xmlrpc.php)$)</pre></code>\n            <p>And there came an epiphany. As engineers working we’ve seen an expression language similar to this before, so may I introduce to you our old friend <a href=\"https://www.wireshark.org\">Wireshark</a><b>®</b>.</p><p>Wireshark is a network protocol analyzer. To use it you must run a packet capture to record network traffic from a capture device (usually a network card). This is then saved to disk as a .pcap file which you subsequently open in the Wireshark GUI. The Wireshark GUI has a display filter entry box, and when you fill in a display filter the GUI will dissect the saved packet capture such that it will determine which packets match the expression and then show those in the GUI.</p><p>But we don’t need to do that. In fact, for our scenario that approach does not work as we have a firewall and need to make decisions in real-time as part of the HTTP request handling rather than via the packet capture process.</p><p>For Cloudflare, we would want to use something like the expression language that is the <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html\">Wireshark Display Filters</a> but without the capture and dissection as we would want to do this potentially thousands of times per request without noticeable delay.</p><p>If we were able to use a Wireshark-style expression language then we can reduce the JSON encapsulated expression above to:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">http.host eq &quot;www.example.com&quot; and (http.request.path ~ &quot;wp-admin/index\\.php&quot; or http.request.path ~ &quot;xmlrpc.php&quot;)</pre></code>\n            <p>This is human readable, machine parseable, succinct.</p><p>It also benefits from being highly similar to Wireshark. For security engineers used to working with Wireshark when investigating attacks it offers a degree of portability from an investigation tool to a mitigation engine.</p><p>To make this work we would need to collect the properties of the request into a simple data structure to match the expressions against. Unlike the packet capture approach we run our firewall within the context of an HTTP server and the web server has already computed the request properties, so we can avoid dissection and populate the fields from the web server knowledge:</p><!--kg-card-begin: html--><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>http.cookie</pre></td>\n<td><pre style=\"margin:0px;\"><code>session=8521F670545D7865F79C3D7BED C29CCE;-background=light</code></pre></td>\n</tr><tr>\n<td>http.host</td>\n<td><pre style=\"margin:0px;\"><code>www.example.com</code></pre></td>\n</tr><tr>\n<td>http.referer</td>\n<td></td>\n</tr><tr>\n<td>http.request.method</td>\n<td><pre style=\"margin:0px;\"><code>GET</code></pre></td>\n</tr><tr>\n<td>http.request.uri</td>\n<td><pre style=\"margin:0px;\"><code>/articles/index?section=539061&expand=comments</code></pre></td>\n</tr><tr>\n<td>http.request.uri.path</td>\n<td><pre style=\"margin:0px;\"><code>/articles/index</code></pre></td>\n</tr><tr>\n<td>http.request.uri.query</td>\n<td><pre style=\"margin:0px;\"><code>section=539061&expand=comments</code></pre></td>\n</tr><tr>\n<td>http.user_agent</td>\n<td><pre style=\"margin:0px;\"><code>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36</code></pre></td>\n</tr><tr>\n<td>http.x_forwarded_for</td>\n<td></td>\n</tr><tr>\n<td>ip.src</td>\n<td><pre style=\"margin:0px;\"><code>203.0.113.1</code></pre></td>\n</tr><tr>\n<td>ip.geoip.asnum</td>\n<td><pre style=\"margin:0px;\"><code>64496</code></pre></td>\n</tr><tr>\n<td>ip.geoip.country</td>\n<td><pre style=\"margin:0px;\"><code>GB</code></pre></td>\n</tr><tr>\n<td>ssl</td>\n<td><pre style=\"margin:0px;\"><code>true</code></pre></td>\n</tr>\n</tbody>\n</table><!--kg-card-end: html--><p>With a table of HTTP request properties and an expression language that can provide a <a href=\"https://developers.cloudflare.com/firewall/cf-firewall-rules/fields-and-expressions/\">matching expression</a> we were 90% of the way towards a solution! All we needed for the <a href=\"https://en.wikipedia.org/wiki/Hofstadter%27s_law\">last 90%</a> was the matching engine itself that would provide us with an answer to the question: Does this request match one of the expressions?</p><p>Enter wirefilter.</p><p>Wirefilter is the name of the Rust library that Cloudflare has created, and it provides:</p><ul><li><p>The ability for Cloudflare to define a set of fields of types, i.e. <code>ip.src</code> is a field of type <code>IPAddress</code></p></li><li><p>The ability to define a table of properties from all of the fields that are defined</p></li><li><p>The ability to parse an expression and to say whether it is syntactically valid, whether the fields in the expression are valid against the fields defined, and whether the operators used for a field are valid for the type of the field</p></li><li><p>The ability to apply an expression to a table and return a true|false response indicating whether the evaluated expression matches the request</p></li></ul><p>It is named wirefilter as a hat tip towards Wireshark for inspiring our Wireshark-like expression language and also because in our context of the Cloudflare Firewall these expressions act as a filter over traffic.</p><p>The implementation of wirefilter allows us to embed this matching engine within our REST API which is written in Go:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">// scheme stores the list of fields and their types that an expression can use\nvar scheme = filterexpr.Scheme{\n\t&quot;http.cookie&quot;:                     filterexpr.TypeString,\n\t&quot;http.host&quot;:                       filterexpr.TypeString,\n\t&quot;http.referer&quot;:                    filterexpr.TypeString,\n\t&quot;http.request.full_uri&quot;:           filterexpr.TypeString,\n\t&quot;http.request.method&quot;:             filterexpr.TypeString,\n\t&quot;http.request.uri&quot;:                filterexpr.TypeString,\n\t&quot;http.request.uri.path&quot;:           filterexpr.TypeString,\n\t&quot;http.request.uri.query&quot;:          filterexpr.TypeString,\n\t&quot;http.user_agent&quot;:                 filterexpr.TypeString,\n\t&quot;http.x_forwarded_for&quot;:            filterexpr.TypeString,\n\t&quot;ip.src&quot;:                          filterexpr.TypeIP,\n\t&quot;ip.geoip.asnum&quot;:                  filterexpr.TypeNumber,\n\t&quot;ip.geoip.country&quot;:                filterexpr.TypeString,\n\t&quot;ssl&quot;:                             filterexpr.TypeBool,\n}</pre></code>\n            <p>Later we validate expressions provided to the API:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">// expression here is a string that may look like:\n// `ip.src eq 203.0.113.1`\nexpressionHash, err := filterexpr.ValidateFilter(scheme, expression)\nif fve, ok := err.(*filterexpr.ValidationError); ok {\n\tvalidationErrs = append(validationErrs, fve.Ascii)\n} else if err != nil {\n\treturn nil, stderrors.Errorf(&quot;failed to validate filter: %v&quot;, err)\n}</pre></code>\n            <p>This tells us whether the expression is syntactically correct and also whether the field operators and values match the field type. If the expression is valid then we can use the returned hash to determine uniqueness (the hash is generated inside wirefilter so that uniqueness can ignore blanks and minor differences).</p><p>The expressions are then published to our global network of PoPs and are consumed by Lua within our web proxy. The web proxy has the same list of fields that the API does, and is now responsible for building the table of properties from the context within the web proxy:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">-- The `traits` table defines the mapping between the fields and\n-- the corresponding values from the nginx evaluation context.\nlocal traits = {\n   [&#039;http.host&#039;] = field.str(function(ctx) return ctx.host end),\n   [&#039;http.cookie&#039;] = field.str(function(ctx)\n      local value = ctx.req_headers.cookie or &#039;&#039;\n      if type(value) == &#039;table&#039; then\n         value = table.concat(value, &quot;;&quot;)\n      end\n      return value\n   end),\n   [&#039;http.referer&#039;] = field.str(function(ctx) return ctx.req_headers.referer or &#039;&#039; end),\n   [&#039;http.request.method&#039;] = field.str(function(ctx) return ctx.method end),\n   [&#039;http.request.uri&#039;] = field.str(function(ctx)\n      return ctx.rewrite_uri or ctx.request_uri\n   end),\n   [&#039;http.request.uri.path&#039;] = field.str(function(ctx)\n      return ctx.uri or &#039;/&#039;\n   end),\n   ...</pre></code>\n            <p>With this per-request table describing a request we can see test the filters. In our case what we’re doing here is:</p><ul><li><p>Fetch a list of all the expressions we would like to match against the request</p></li><li><p>Check whether any expression, when applied via wirefilter to the table above, return true as having matched</p></li><li><p>For all matched expressions check the associated actions and their priority</p></li></ul><p>The actions are not part of the matching itself. Once we have a list of matched expressions we determine which action takes precedence and that is the one that we will execute.</p><p>Wirefilter then, is a generic library that provides this matching capability that we’ve plugged into our Go APIs and our Lua web proxy, and we use that to power the Cloudflare Firewall.</p><p>We chose Rust for wirefilter as early in the project we recognised that if we attempted to make implementations of this in Go and Lua, that it would result in inconsistencies that attackers may be able to exploit. We needed our API and edge proxy to behave exactly the same. For this needed a library, both could call and we could choose one of our existing languages at the edge like C, C++, Go, Lua or even implement this not as a library but as a worker in JavaScript. With a mixed set of requirements of performance, memory safety, low memory use, and the capability to be part of other products that we’re working on like Spectrum, Rust stood out as the strongest option.</p><p>With a library in place and the ability to now match all HTTP traffic, how to get that to a public API and UI without diluting the capability? The problems that arose related to specificity and mutual exclusion.</p><p>In the past all of our firewall rules had a single dimension to them: i.e. act on IP addresses. And this meant that we had a single property of a single type and whilst there were occasionally edge cases for the most part there were strategies to answer the question “Which is the most specific rule?”. I.e. an IP address is more specific then a /24 which is more specific than a /8. Likewise with URI matching an overly simplistic strategy is that the longer a URI the more specific it is. And if we had 2 IP rules, then only 1 could ever have matched as a request does not come from 2 IPs at once so mutual exclusion is in effect.</p><p>The old system meant that given 2 rules, we could implicitly and trivially say “this rule is most specific so use the action associated with this rule”.</p><p>With wirefilter powering Firewall Rules, it isn’t obvious that an IP address is more or less specific when compared to a URI. It gets even more complex when a rule can have negation, as a rule that matches a /8 is less specific than a rule that <b>does not</b> match a single IP (the whole address space except this IP - one of the gotchas of Firewall Rules is also a source of it’s power; you can invert your firewall into a <a href=\"https://www.owasp.org/index.php/Positive_security_model\">positive security model</a>.</p><p>As we couldn’t answer specificity using the expression alone, we needed another aspect of the Firewall Rule to provide us this guidance and we realised that customers already had a mechanism to tell us which rules were important… the action.</p><p>Given a set of rules, we logically have ordered them according to their action (Log has highest priority, Block has lowest):</p><ol><li><p>Log</p></li><li><p>Allow</p></li><li><p>Challenge (CAPTCHA)</p></li><li><p>JavaScript Challenge</p></li><li><p>Block</p></li></ol><p>For the vast majority of scenarios this proves to be good enough.</p><p>What about when that isn’t good enough though? Do we have examples of complex configuration that break that approach? Yes!</p><p>Because the expression language within Firewall Rules is so powerful, and we can support many Firewall Rules, it means that we can now create different firewall configuration for different parts of a web site. i.e. /blog could have wholly different rules than /shop, or for different audiences, i.e. visitors from your office IPs might be allowed on a given URI but everyone else trying to access that URI may be blocked.</p><p>In this scenario you need the ability to say “run all of these rules first, and then run the other rules”.</p><p>In single machine firewalls like iptables, OS X Firewall, or your home router firewall, the firewall rules were explicitly ordered so that when you match the first rule it terminates execution and you won’t hit the next rule. When you add a new rule the entire set of rules is republished and this helps to guarantee this behaviour. But this approach does not work well for a <a href=\"https://www.cloudflare.com/learning/cloud/what-is-a-cloud-firewall/\">Cloud Firewall</a> as a large website with many web applications typically also has a large number of firewall rules. Republishing all of these rules in a single transaction can be slow and if you are adding lots of rules quickly this can lead to delays to the final state being live.</p><p>If we published individual rules and supported explicit ordering, we risked race conditions where two rules that both were configured in position 4 might exist at the same time and the behaviour if they matched the request would be non-determinable.</p><p>We solved this by introducing a priority value, where 1 is the highest priority and as an int32 you can create low priority rules all the way down to priority = 2147483647. Not providing a priority value is the equivalent of “lowest” and runs after all rules that have a priority.</p><p>Priority does not have to be a unique value within Firewall Rules. If two rules are of equal priority then we resort to the order of precedence of the actions as defined earlier.</p><p>This provides us a few benefits:</p><ol><li><p>Because priority allows rules that share a priority to exist we can publish rules 1 at a time… when you add a new rule the speed at which we deploy that globally is not affected by the number of rules you already have.</p></li><li><p>If you do have existing rules in a system that does sequentially order the rules, you can import those into Firewall Rules and preserve their order, i.e. this rule should always run before that rule.</p></li><li><p>But you don’t have to use priority exclusively for ordering as you can also use priority for grouping. For example you may say that all spammers are priority=10000 and all trolls are priority = 5000.</p></li></ol><p>Finally… let’s look at those fields again, <code>http.request.path</code> notice that <code>http</code> prefix? By following the naming convention Wireshark has (see their <a href=\"https://www.wireshark.org/docs/dfref/\">Display Filter Reference</a>) we have not limited this firewall capability solely to a HTTP web proxy. It is a small leap to imagine that if a <a href=\"https://www.cloudflare.com/products/cloudflare-spectrum/\">Spectrum</a>  application declares itself as running SMTP that we could also define fields that understand SMTP and allow filtering of traffic on other application protocols or even at layer 4.</p><p>What we have built in Firewall Rules gives us these features today:</p><ul><li><p>Rich expression language capable of targeting traffic precisely and in real-time</p></li><li><p>Fast global deployment of individual rules</p></li><li><p>A lot of control over the management and organisation of Firewall Rules</p></li></ul><p>And in the future, we have a product that can go beyond HTTP and be a true Cloud Firewall for all protocols…the Cloudflare Firewall with Firewall Rules.</p>",
		"id": "2ZJuPaDwCLknYvVUR1SPwG",
		"localeList": {
			"name": "How we made Firewall Rules Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-03-04T13:00:00.000+00:00",
		"slug": "how-we-made-firewall-rules",
		"tags": [
			{
				"id": "4zulnloS9YSU4lEkORfTqo",
				"name": "Firewall",
				"slug": "firewall"
			},
			{
				"id": "5VvYFsAHWSvCVOGdBUbUmi",
				"name": "Page Rules",
				"slug": "page-rules"
			},
			{
				"id": "w4e8pkoz9c8xNDVhy9eNe",
				"name": "Rust",
				"slug": "rust"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "lGCLqAT2SMojMzw5b6aio",
				"name": "WAF",
				"slug": "waf"
			}
		],
		"title": "How we made Firewall Rules",
		"updated_at": "2025-10-03T18:36:41.558Z",
		"url": "https://blog.cloudflare.com/how-we-made-firewall-rules"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}