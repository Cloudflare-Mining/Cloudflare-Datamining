{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Junade Ali",
				"slug": "junade-ali",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3OWtXkEWho3HaulkNRp0L2/8ae3c35ad8c0f7df43d8fc9c35bfe87f/junade-ali.jpg",
				"location": null,
				"website": null,
				"twitter": "@IcyApril",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "It is now commonly accepted as fact that web performance is critical for business. Slower sites can affect conversion rates on e-commerce stores, they can affect your sign-up rate on your SaaS service and lower the readership of your content.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3IdlUoQJcvZrOrfBx1T8Dl/3ca71c1fa0562cb0d0284e4bfbf98124/the-curious-case-of-caching-csrf-tokens.jpg",
		"featured": false,
		"html": "<p>It is now commonly accepted as fact that web performance is critical for business. Slower sites can affect conversion rates on <a href=\"https://www.cloudflare.com/ecommerce/\">e-commerce stores</a>, they can affect your sign-up rate on your SaaS service and lower the readership of your content.</p><p>In the run-up to Thanksgiving and Black Friday, e-commerce sites turned to services like Cloudflare to help <a href=\"https://www.cloudflare.com/solutions/ecommerce/optimization/\">optimise their performance</a> and withstand the traffic spikes of the shopping season.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1Bees9K4tKCi83vUBqpmsf/0436f1a0d72b5230e17b5a8ee2b90889/23910AEA00000578-2852835-Shoppers_scramble_to_pick_up_one-8_1417169462181.jpg\" alt=\"\" class=\"kg-image\" width=\"962\" height=\"643\" loading=\"lazy\"/>\n            \n            </figure><p>In preparation, an e-commerce customer joined Cloudflare on the 9th November, a few weeks before the shopping season. Instead of joining via our Enterprise plan, they were a self-serve customer who signed-up by subscribing to our Business plan online and switching their nameservers over to us.</p><p>Their site was running Magento, a notably slow e-commerce platform - filled with lots of interesting PHP, with a considerable amount of soft code in XML. Running version 1.9, the platform was somewhat outdated (Magento was totally rewritten in version 2.0 and subsequent releases).</p><p>Despite the somewhat dated technology, the e-commerce site was &quot;good enough&quot; for this customer and had done it&#39;s job for many years.</p><p>They were the first to notice an interesting technical issue surrounding how performance and security can often feel at odds with each other. Although they were the first to highlight this issue, into the run-up of Black Friday, we ultimately saw around a dozen customers on Magento 1.8/1.9 have similar issues.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"initial-optimisations\">Initial Optimisations</h3>\n      <a href=\"#initial-optimisations\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>After signing-up for Cloudflare, the site owners attempted to make some changes to ensure their site was loading quickly.</p><p>The website developers had already ensured the site was loading over HTTPS, in doing so they were able to ensure their site was loading over the new HTTP/2 Protocol and made some changes to ensure their site was optimised for HTTP/2 (for details, see our blog post on <a href=\"/http-2-for-web-developers/\">HTTP/2 For Web Developers</a>).</p><p>At Cloudflare we&#39;ve taken steps to ensure that there isn&#39;t a latency overhead for establishing a secure TLS connection, here is a non-complete list of optimisations we use:</p><ul><li><p><a href=\"/tls-session-resumption-full-speed-and-secure/\">TLS Session Resumption</a></p></li><li><p><a href=\"/high-reliability-ocsp-stapling/\">OCSP Stapling</a></p></li><li><p>Fast <a href=\"/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/\">Elliptic Curve Cryptography</a> prioritised</p></li><li><p><a href=\"/optimizing-tls-over-tcp-to-reduce-latency/\">Dynamic TLS Record Sizing</a></p></li></ul><p>Additionally, they had enabled <a href=\"/announcing-support-for-http-2-server-push-2/\">HTTP/2 Server Push</a> to ensure critical CSS/JS assets could be pushed to clients when they made their first request. Without Server Push, a client has to download the HTML response, interpret it and then work out assets it needs to download.</p><p>Big images were Lazy Loaded, only downloading them when they needed to be seen by the users. Additionally, they had enabled a Cloudflare feature called <a href=\"/a-very-webp-new-year-from-cloudflare/\">Polish</a>. With this enabled, Cloudflare dynamically works out whether it&#39;s faster serve an image in <a href=\"https://developers.google.com/speed/webp/\">WebP</a> (a new image format developed by Google) or whether it&#39;s faster to serve it in a different format.</p><p>These optimisations did make some improvement to performance, but their site was still slow.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"respect-the-ttfb\">Respect The TTFB</h3>\n      <a href=\"#respect-the-ttfb\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In web performance, there are a few different things which can affect the response times - I&#39;ve crudely summarised them into the following three categories:</p><ul><li><p><b>Connection &amp; Request Time</b> - Before a request can be sent off for a website to load something, a few things need to happen: DNS queries, a TCP handshake to establish the connection with the web server and a TLS handshake to establish a secure connection</p></li><li><p><b>Page Render</b> - A dynamic site needs to query databases, call APIs, write logs, render views, etc before a response can be made to a client</p></li><li><p><b>Response Speed</b> - Downloading the response from web server, browser-side rendering of the HTML and pulling the other resources linked in the HTML</p></li></ul><p>The e-commerce site had taken steps to improve their <i>Response Speed</i> by enabling HTTP/2 and performing other on-site optimisations. They had also optimised their <i>Connection &amp; Response Time</i> by using a <a href=\"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/\">CDN service</a> like Cloudflare to provide fast DNS and reduce latency when optimising TLS/TCP connections.</p><p>However, they now realised the critical step they needed to optimise was around the <i>Page Render</i> that would happen on their web server.</p><p>By looking at a Waterfall View of how their site loaded (similar to the one below) they could see the main constraint.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3xj4dTK90yYqCe8l77rAtH/a85111cd2d50928073dc90d7233baac1/time-to-first-byte.png\" alt=\"\" class=\"kg-image\" width=\"787\" height=\"230\" loading=\"lazy\"/>\n            \n            </figure><p>Example Waterfall view from WebSiteOptimization.com</p><p>On the initial request, you can see the green &quot;Time to First Byte&quot; view taking a very long time.</p><p>Many browsers have tools for viewing Waterfall Charts like the one above, Google provide some excellent documentation for Chrome on doing this: <a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/\">Get Started with Analyzing Network Performance in Chrome DevTools</a>. You can also generate these graphs fairly easily from site speed test tools like <a href=\"https://www.webpagetest.org/\">WebPageTest.org</a>.</p><p>Time to First Byte itself is an often misunderstood metric and often can&#39;t be attributed to a single fault. For example; using a CDN service like Cloudflare may increase TTFB by a few milliseconds, but do so to the benefit of an overall load time. This can be as the CDN is adding additional compression functionality to speed up the response, or simply as it has to establish a connection back to the origin web server (which isn&#39;t visible by the client).</p><p>There are instances where it is important to debug why TTFB is a problem. For example; in this instance, the e-commerce platform was taking upwards of 3 seconds just to generate the HTML response. In this case, it was clear the constraint was the server-side <i>Page Render</i>.</p><p>When the web server was generating dynamic content, it was having to query databases and perform logic before a request could be served. In most instances (i.e. a product page) the page would be identical to every other request. It would only be when someone would add something to their shopping cart that the site would really become dynamic.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"enabling-cookie-based-caching\">Enabling Cookie-Based Caching</h3>\n      <a href=\"#enabling-cookie-based-caching\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Before someone logs into the the Magento admin panel or adds something to their shopping cart, the page view is anonymous and will be served up identically to every visitor. It will only be the when an anonymous visitor logs in or adds something to their shopping cart that they will see a page that&#39;s dynamic and unlike every other page that&#39;s been rendered.</p><p>It therefore is possible to cache those anonymous requests so that Magento on an origin server doesn&#39;t need to constantly regenerate the HTML.</p><p>Cloudflare users on our Business Plan are able to cache anonymous page views when using Magneto using our Bypass Cache on Cookie functionality. This allows for static HTML to be cached at our edge, with no need for it to be regenerated from request to request.</p><p>This provides a huge performance boost for the first few page visits of a visitor, and allows them still to interact with the dynamic site when they need to. Additionally, it helps keep load down on the origin server in the event of traffic spikes, sparing precious server CPU time for those who need it to complete dynamic actions like paying for an order.</p><p>Here&#39;s an example of how this can be configured in Cloudflare using the Page Rules functionality:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7pBjTSCiHvMVLi5J1spu0E/9731ebfb1521b397c7fa22e19fbc263a/Screen-Shot-2017-11-30-at-13.57.40.png\" alt=\"Magento Cache Cookie Bypass\" class=\"kg-image\" width=\"1490\" height=\"1304\" loading=\"lazy\"/>\n            \n            </figure><p>The Page Rule configuration above instructs Cloudflare to &quot;Cache Everything (including HTML), but bypass the cache when it sees a request which contains any of the cookies: <code>external_no_cache</code>, <code>PHPSESSID</code> or <code>adminhtml</code>. The final <code>Edge Cache TTL</code> setting just instructs Cloudflare to keep HTML files in cache for a month, this is necessary as Magento by default uses headers to discourage caching.</p><p>The site administrator configured their site to work something like this:</p><ol><li><p>On the first request, the user is anonymous and their request indistinguishable from any other - their page can be served from the Cloudflare cache</p></li><li><p>When the customer adds something to their shopping cart, they do that via a <code>POST</code> request - as methods like <code>POST</code>, <code>PUT</code> and <code>DELETE</code> are intended to change a resource, they bypass the Cloudflare cache</p></li><li><p>On the <code>POST</code> request to add something to their shopping cart, Magento will set a cookie called <code>external_no_cache</code></p></li><li><p>As the site owner has configured Cloudflare to bypass the cache when we see a request containing the <code>external_no_cache</code> cookie, all subsequent requests go direct to origin</p></li></ol><p>This behaviour can be summarised in the following crude diagram:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/ZuitM2bncUoJNYpHFC1A1/e6678ca0768bf540ea8a23acbb09a6f3/Screen-Shot-2017-12-12-at-14.00.59.png\" alt=\"\" class=\"kg-image\" width=\"1566\" height=\"1050\" loading=\"lazy\"/>\n            \n            </figure><p>The site administrators initially enabled this configuration on a subdomain for testing purposes, but noticed something rather strange. When they would add something to the cart on their test site, the cart would show up empty. If they then tried again to add something to the cart, the item would be added successfully.</p><p>The customer reported one additional, interesting piece of information - when they tried to mimic this cookie-based caching behaviour internally using Varnish, they faced the exact same issue.</p><p>In essence, the <i>Add to Cart</i> functionality would fail, but only on the first request. This was indeed odd behaviour, and the customer reached out to Cloudflare Support.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"debugging\">Debugging</h3>\n      <a href=\"#debugging\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The customer wrote in just as our Singapore office were finishing up their afternoon and was initially triaged by a Support Engineer in that office.</p><p>The Support Agent evaluated what the problem was and initially identified that if the <code>frontend</code> cookie was missing, the <i>Add to Cart</i> functionality would fail.</p><p>No matter which page you access on Magento, it will attempt to set a <code>frontend</code> cookie, even if it doesn&#39;t add an <code>external_no_cache</code> cookie</p><p>When Cloudflare caches static content, the default behaviour is to strip away any cookies coming from the server if the file is going to end up in cache - this is a security safeguard to prevent customers accidentally caching private session cookies. This applies when a cached response contains a <code>Set-Cookie</code> header, but does not apply when the cookie is set via JavaScript - in order to allow functionality like Google Analytics to work.</p><p>They had identified that the caching logic at our network edge was working fine, but for whatever reason Magento would refuse to add something to a shopping cart without a valid <code>frontend</code> cookie. Why was this?</p><p>As Singapore handed their shift work over to London, the Support Engineer working on this ticket decided to escalate the ticket up to me. This was largely as, towards the end of last year, I had owned the re-pricing of this feature (which opened it up to our self-service Business plan users, instead of being Enterprise-only). That said; I had not touched Magneto in many years, even when I was working in digital agencies I wasn&#39;t the most enthusiastic to build on it.</p><p>The Support Agent provided some internal comments that described the issue in detail and their own debugging steps, with an effective &quot;TL;DR&quot; summary:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/78Icys6dPunTt7NhKgPJA0/b8e0e03814e7ca602a7445f6cecc0ec3/Screen-Shot-2017-11-30-at-20.42.09.png\" alt=\"\" class=\"kg-image\" width=\"1154\" height=\"240\" loading=\"lazy\"/>\n            \n            </figure><p>Debugging these kinds of customer issues is not as simple as putting breakpoints into a codebase. Often, for our Support Engineers, the customers origin server acts as a black-box and there can be many moving parts, and they of course have to manage the expectations of a real customer at the other end. This level of problem solving fun, is one of the reasons I still like answering customer support tickets when I get a chance.</p><p>Before attempting to debug anything, I double checked that the Support Agent was correct that nothing had gone wrong on our end - I trusted their judgement and no others customers were reporting their caching functionality had broken, but it is always best to cross-check manual debugging work. I ran some checks to ensure that there were no regressions in our Lua codebase that controls caching logic:</p><ul><li><p>Checked that there were no changes to this logic in our internal code respository</p></li><li><p>Check that automated tests are still in place and build successfully</p></li><li><p>Run checks on production to verify that caching behaviour still works as normal</p></li></ul><p>As Cloudflare has customers across so many platforms, I also checked to ensure that there were no breaking changes in Magento codebase that would cause this bug to occur. Occasionally we find our customers accidentally come across bugs in CMS platforms which are unreported. This, fortunately, was not one of those instances.</p><p>The next step is to attempt to replicate the issue locally and away from the customers site. I spun up a vanilla instance of Magento 1.9 and set it up with an identical Cloudflare configuration. The experiment was successful and I was able to replicate the customer issue.</p><p>I had an instinctive feeling that it was the Cross Site Request Forgery Protection functionality that was at fault here and I started tweaking my own test Magento installation to see if this was the cases.</p><p>Cross Site Request Forgery attacks work by exploiting the fact that one site on the internet can get a client to make requests to another site.</p><p>For example; suppose you have an online bank account with the ability to send money to other accounts. Once logged in, there is a form to send money which uses the following HTML:</p>\n            <pre class=\"language-html\"><code class=\"language-html\">&lt;form action=&quot;https://example.com/send-money&quot;&gt;\nAccount Name:\n&lt;input type=&quot;text&quot; name=&quot;account_name&quot; /&gt;\nAmount:\n&lt;input type=&quot;text&quot; name=&quot;amount&quot; /&gt;\n&lt;input type=&quot;submit&quot; /&gt;\n&lt;/form&gt;</pre></code>\n            <p>After logging in and doing your transactions, you don&#39;t log-out of the website - but you simply navigate elsewhere online. Whilst browsing around you come across a button on a website that contains the text &quot;Click me! Why not?&quot;. You click the button, and £10,000 goes from your bank account to mine.</p><p>This happens because the button you clicked was connected to an endpoint on the banking website, and contained hidden fields instructing it to send me £10,000 of your cash:</p>\n            <pre class=\"language-html\"><code class=\"language-html\">&lt;form action=&quot;https://example.com/send-money&quot;&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;account_name&quot; value=&quot;Junade Ali&quot; /&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;amount&quot; value=&quot;10,000&quot; /&gt;\n&lt;input type=&quot;submit&quot; value=&quot;Click me! Why not?&quot; /&gt;\n&lt;/form&gt;</pre></code>\n            <p>In order to prevent these attacks, CSRF Tokens are inserted as hidden fields into web forms:</p>\n            <pre class=\"language-html\"><code class=\"language-html\">&lt;form action=&quot;https://example.com/send-money&quot;&gt;\nAccount Name:\n&lt;input type=&quot;text&quot; name=&quot;account_name&quot; /&gt;\nAmount:\n&lt;input type=&quot;text&quot; name=&quot;amount&quot; /&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;csrf_protection&quot; value=&quot;hunter2&quot; /&gt;\n&lt;input type=&quot;submit&quot; /&gt;\n&lt;/form&gt;</pre></code>\n            <p>A cookie is first set on the clients computer containing a random session cookie. When a form is served to the client, a CSRF token is generated using that cookie. The server will check that the CSRF token submitted in the HTML form actually matches the session cookie, and if it doesn&#39;t block the request.</p><p>In this instance, as there was no session cookie ever set (Cloudflare would strip it out before it entered cache), the <code>POST</code> request to the <i>Add to Cart</i> functionality could never verify the CSRF token and the request would fail.</p><p>Due to CSRF vulnerabilities, Magento applied CSRF protection to all forms; this broke Full Page Cache implementations in Magento 1.8.x/1.9.x. You can find all the details in the <a href=\"https://magento.com/security/patches/supee-6285\">SUPEE-6285 patch documentation</a> from Magento.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"caching-content-with-csrf-protected-forms\">Caching Content with CSRF Protected Forms</h3>\n      <a href=\"#caching-content-with-csrf-protected-forms\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To validate that CSRF Tokens were definitely at fault here, I completely disabled CSRF Protection in Magento. Obviously you should never do this in production, I found it slightly odd that they even had a UI toggle for this!</p><p>Another method which was created in the Magento Community was an extension to disable CSRF Protection just for the Add To Cart functionality (<a href=\"https://github.com/deivisonarthur/Inovarti_FixAddToCartMage18/blob/master/README.md\">Inovarti_FixAddToCartMage18</a>), under the argument that CSRF risks are far reduced when we&#39;re talking about <i>Add to Cart</i> functionality. This is still not ideal, we should ideally have CSRF Protection on every form when we&#39;re talking about actions which change site behaviour.</p><p>There is, however, a third way. I did some digging and identified a Magento plugin that effectively uses JavaScript to inject a dynamic CSRF token the moment a user clicks the <i>Add to Cart</i> button but just before the request is actually submitted. There&#39;s quite a lengthy Github thread which outlines this issue and references the Pull Requests which fixed this behaviour in the <a href=\"https://github.com/nexcess/magento-turpentine/issues/345\">the Magento Turpentine plugin</a>. I won&#39;t repeat the set-up instructions here, but they can be found in an article I&#39;ve written on the Cloudflare Knowledge Base: <a href=\"https://support.cloudflare.com/hc/en-us/articles/236168808-Caching-Static-HTML-with-Magento-version-1-2-\">Caching Static HTML with Magento (version 1 &amp; 2)</a></p><p>Effectively what happens here is that the dynamic CSRF token is only injected into the web page the moment that it&#39;s needed. This is actually the behaviour that&#39;s implemented in other e-commerce platforms and Magento 2.0+, allowing Full Page Caching to be implemented quite easily. We had to recommend this plugin as it wouldn&#39;t be practical for the site owner to simply update to Magneto 2.</p><p>One thing to be wary of when exposing CSRF tokens via an AJAX endpoint is <a href=\"https://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses\">JSON Hijacking</a>. There are some tips on how you can prevent this in the <a href=\"https://www.owasp.org/index.php/AJAX_Security_Cheat_Sheet#Always_return_JSON_with_an_Object_on_the_outside\">OWASP AJAX Security Cheat Sheet</a>. Iain Collins has a Medium post with further discussion on the security merits of <a href=\"https://medium.com/@iaincollins/csrf-tokens-via-ajax-a885c7305d4a\">CSRF Tokens via AJAX</a> (that said, however you&#39;re performing CSRF prevention, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same Origin Policies</a> and <a href=\"https://www.owasp.org/index.php/HttpOnly\">HTTPOnly cookies</a> FTW!).</p><p>There is an even cooler way you can do this using Cloudflare&#39;s <a href=\"/introducing-cloudflare-workers/\">Edge Workers</a> offering. Soon this will allow you to run JavaScript at our Edge network, and you can use that to dynamically insert CSRF tokens into cached content (and, then either perform cryptographic validation of CSRF either at our Edge or the Origin itself using a shared secret).</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"but-this-has-been-a-problem-since-2015\">But this has been a problem since 2015?</h3>\n      <a href=\"#but-this-has-been-a-problem-since-2015\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Another interesting observation is that the Magento patch which caused this interesting behaviour had been around since July 7, 2015. Why did our Support Team only see this issue in the run-up to Black Friday in 2017? What&#39;s more, we ultimately saw around a dozen support tickets around this exact issue on Magento 1.8/1.9 over the course over 6 weeks.</p><p>When an Enterprise customer ordinarily joins Cloudflare, there is a named Solutions Engineer who gets them up and running and ensures there is no pain; however when you sign-up online with a credit card, your forgo this privilege.</p><p>Last year, we released Bypass Cache on Cookie to self-serve users when a lot of e-commerce customers were in their Christmas/New Year release freeze and not making changes to their websites. Since then, there were no major shopping events; most the sites enabling this feature were new build websites using Magento 2 where this wasn&#39;t an issue.</p><p>In the run-up to Black Friday, performance and coping under load became a key consideration for developers working on legacy e-commerce websites - and they turned to Cloudflare. Given the large, but steady, influx of e-commerce websites joining Cloudflare - the low overall percentage of those on Magento 1.8/1.9 became noticeable.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"conclusion\">Conclusion</h3>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Caching anonymous page views is an important, and in some cases, essential mechanism to dramatically improve site performance to substantially reduce site load, especially during traffic spikes. Whilst aggressively caching content when users are anonymous, you can bypass the cache and allow users to use the dynamic functionality your site has to offer.</p><p>When you need to insert a dynamic state into cached content, JavaScript offers a nice compromise. JavaScript allows us to cache HTML for anonymous page visits, but insert a state when the users interact in a certain way. In essence, defusing this conflict between performance and security. In the future you&#39;ll be able to run this JavaScript logic at our network edge using Cloudflare <a href=\"/introducing-cloudflare-workers/\">Edge Workers</a>.</p><p>It also remains important to respect the RESTful properties of HTTP and ensure <code>GET</code>, <code>OPTIONS</code> and <code>HEAD</code> requests remain safe and instead using <code>POST</code>, <code>PUT</code>, <code>PATCH</code> and <code>DELETE</code> as necessary.</p><p>If you&#39;re interested in debugging interesting technical problems on a network that sees around 10% of global internet traffic, <a href=\"https://www.cloudflare.com/careers/jobs/?department=Customer+Support\">we&#39;re hiring for Support Engineers</a> in San Francisco, London, Austin and Singapore.</p>",
		"id": "3eU2FDtvxwJSqAIlRad4rB",
		"localeList": {
			"name": "The Curious Case of Caching CSRF Tokens Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2017-12-13T14:00:00.000+00:00",
		"slug": "the-curious-case-of-caching-csrf-tokens",
		"tags": [
			{
				"id": "5VvYFsAHWSvCVOGdBUbUmi",
				"name": "Page Rules",
				"slug": "page-rules"
			},
			{
				"id": "7xVFrC2ME3CztgeqnLfaqZ",
				"name": "SaaS",
				"slug": "saas"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "5US4l4wdDysuDpZ4ktL3yP",
				"name": "HTTPS",
				"slug": "https"
			},
			{
				"id": "5RrjSR5vIOJAfRdT8966hf",
				"name": "Cache",
				"slug": "cache"
			}
		],
		"title": "The Curious Case of Caching CSRF Tokens",
		"updated_at": "2024-10-10T00:33:47.485Z",
		"url": "https://blog.cloudflare.com/the-curious-case-of-caching-csrf-tokens"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}