{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Jakub Sitnicki",
				"slug": "jakub",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6RLFhbkBfkn8gecOR2w7wW/1146ae51b6182b10a997c82813c13503/jakub.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "It is unlikely we can tell you anything new about the extended Berkeley Packet Filter, eBPF for short, if you've read all the great man pages, docs, guides, and some of our blogs out there. But we can tell you a war story, who doesn't like those? ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6bsvYlZJnTR8ZngKkyoizz/3cb9d04ac676775e16d93d4cc7fcd436/ebpf-cant-count.jpg",
		"featured": false,
		"html": "<p></p><p>Grant mechanical calculating machine, public domain <a href=\"https://en.wikipedia.org/wiki/File:Grant_mechanical_calculating_machine_1877.jpg\">image</a></p><p>It is unlikely we can tell you anything new about the extended Berkeley Packet Filter, eBPF for short, if you&#39;ve read all the great <a href=\"http://man7.org/linux/man-pages/man2/bpf.2.html\">man pages</a>, <a href=\"https://www.kernel.org/doc/Documentation/networking/filter.txt\">docs</a>, <a href=\"https://cilium.readthedocs.io/en/latest/bpf/\">guides</a>, and some of our <a href=\"https://blog.cloudflare.com/epbf_sockets_hop_distance/\">blogs</a> out there.</p><p>But we can tell you a war story, and who doesn&#39;t like those? This one is about how eBPF lost its ability to count for a while<a href=\"#f1\"><sup>1</sup></a>.</p><p>They say in our Austin, Texas office that all good stories start with &quot;y&#39;all ain&#39;t gonna believe this… tale.&quot; This one though, starts with a <a href=\"https://lore.kernel.org/netdev/CAJPywTJqP34cK20iLM5YmUMz9KXQOdu1-+BZrGMAGgLuBWz7fg@mail.gmail.com/\">post</a> to Linux netdev mailing list from <a href=\"https://twitter.com/majek04\">Marek Majkowski</a> after what I heard was a long night:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2z8UE9I87Kpw8ONzxBH3WW/96500c2ee678248af9c22936bb49cdee/ebpf_bug_email_netdev.png\" alt=\"\" class=\"kg-image\" width=\"1486\" height=\"710\" loading=\"lazy\"/>\n            \n            </figure><p>Marek&#39;s findings were quite shocking - if you subtract two 64-bit timestamps in eBPF, the result is garbage. But only when running as an unprivileged user. From root all works fine. Huh.</p><p>If you&#39;ve seen Marek&#39;s <a href=\"https://speakerdeck.com/majek04/linux-at-cloudflare\">presentation</a> from the Netdev 0x13 conference, you know that we are using BPF socket filters as one of the defenses against simple, volumetric DoS attacks. So potentially getting your packet count wrong could be a Bad Thing™, and affect legitimate traffic.</p><p>Let&#39;s try to reproduce this bug with a simplified <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/bpf/filter.c#L63\">eBPF socket filter</a> that subtracts two 64-bit unsigned integers passed to it from <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/run_bpf.go#L93\">user-space</a> though a BPF map. The input for our BPF program comes from a <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/bpf/filter.c#L44\">BPF array map</a>, so that the values we operate on are not known at build time. This allows for easy experimentation and prevents the compiler from optimizing out the operations.</p><p>Starting small, eBPF, what is 2 - 1? View the code <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/run_bpf.go#L93\">on our GitHub</a>.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./run-bpf 2 1\narg0                    2 0x0000000000000002\narg1                    1 0x0000000000000001\ndiff                    1 0x0000000000000001</pre></code>\n            <p>OK, eBPF, what is 2^32 - 1?</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./run-bpf $[2**32] 1\narg0           4294967296 0x0000000100000000\narg1                    1 0x0000000000000001\ndiff 18446744073709551615 0xffffffffffffffff</pre></code>\n            <p>Wrong! But if we ask nicely with sudo:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo ./run-bpf $[2**32] 1\n[sudo] password for jkbs:\narg0           4294967296 0x0000000100000000\narg1                    1 0x0000000000000001\ndiff           4294967295 0x00000000ffffffff</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"who-is-messing-with-my-ebpf\">Who is messing with my eBPF?</h3>\n      <a href=\"#who-is-messing-with-my-ebpf\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>When computers stop subtracting, you know something big is up. We called for reinforcements.</p><p>Our colleague Arthur Fabre <a href=\"https://lore.kernel.org/netdev/20190301113901.29448-1-afabre@cloudflare.com/\">quickly noticed</a> something is off when you examine the eBPF code loaded into the kernel. It turns out kernel doesn&#39;t actually run the eBPF it&#39;s supplied - it sometimes rewrites it first.</p><p>Any sane programmer would expect 64-bit subtraction to be expressed as <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/bpf/filter.s#L47\">a single eBPF instruction</a></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ llvm-objdump -S -no-show-raw-insn -section=socket1 bpf/filter.o\n…\n      20:       1f 76 00 00 00 00 00 00         r6 -= r7\n…</pre></code>\n            <p>However, that&#39;s not what the kernel actually runs. Apparently after the rewrite the subtraction becomes a complex, multi-step operation.</p><p>To see what the kernel is actually running we can use little known <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/bpf/bpftool?h=v5.0\">bpftool utility</a>. First, we need to load our BPF</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./run-bpf --stop-after-load 2 1\n[2]+  Stopped                 ./run-bpf 2 1</pre></code>\n            <p>Then list all BPF programs loaded into the kernel with <code>bpftool prog list</code></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo bpftool prog list\n…\n5951: socket_filter  name filter_alu64  tag 11186be60c0d0c0f  gpl\n        loaded_at 2019-04-05T13:01:24+0200  uid 1000\n        xlated 424B  jited 262B  memlock 4096B  map_ids 28786</pre></code>\n            <p>The most recently loaded <code>socket_filter</code> must be our program (<code>filter_alu64</code>). Now we now know its id is 5951 and we can list its bytecode with</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo bpftool prog dump xlated id 5951\n…\n  33: (79) r7 = *(u64 *)(r0 +0)\n  34: (b4) (u32) r11 = (u32) -1\n  35: (1f) r11 -= r6\n  36: (4f) r11 |= r6\n  37: (87) r11 = -r11\n  38: (c7) r11 s&gt;&gt;= 63\n  39: (5f) r6 &amp;= r11\n  40: (1f) r6 -= r7\n  41: (7b) *(u64 *)(r10 -16) = r6\n…</pre></code>\n            <p>bpftool can also display the JITed code with: <code>bpftool prog dump jited id 5951</code>.</p><p>As you see, subtraction is replaced with a series of opcodes. That is unless you are root. When running from root all is good</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo ./run-bpf --stop-after-load 0 0\n[1]+  Stopped                 sudo ./run-bpf --stop-after-load 0 0\n$ sudo bpftool prog list | grep socket_filter\n659: socket_filter  name filter_alu64  tag 9e7ffb08218476f3  gpl\n$ sudo bpftool prog dump xlated id 659\n…\n  31: (79) r7 = *(u64 *)(r0 +0)\n  32: (1f) r6 -= r7\n  33: (7b) *(u64 *)(r10 -16) = r6\n…</pre></code>\n            <p>If you&#39;ve spent any time using eBPF, you must have experienced first hand the dreaded eBPF verifier. It&#39;s a merciless judge of all eBPF code that will reject any programs that it deems not worthy of running in kernel-space.</p><p>What perhaps nobody has told you before, and what might come as a surprise, is that the very same verifier will actually also <a href=\"https://elixir.bootlin.com/linux/v4.20.13/source/kernel/bpf/verifier.c#L6421\">rewrite and patch up your eBPF code</a> as needed to make it safe.</p><p>The problems with subtraction were introduced by an inconspicuous security fix to the verifier. The patch in question first landed in Linux 5.0 and was backported to 4.20.6 stable and 4.19.19 LTS kernel. <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=979d63d50c0c0f7bc537bf821e056cc9fe5abd38\">The over 2000 words long commit message</a> doesn&#39;t spare you any details on the attack vector it targets.</p><p>The mitigation stems from <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-7308\">CVE-2019-7308</a> vulnerability <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1711\">discovered by Jann Horn at Project Zero</a>, which exploits pointer arithmetic, i.e. adding a scalar value to a pointer, to trigger speculative memory loads from out-of-bounds addresses. Such speculative loads change the CPU cache state and can be used to mount a <a href=\"https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html\">Spectre variant 1 attack</a>.</p><p>To mitigate it the eBPF verifier rewrites any arithmetic operations on pointer values in such a way the result is always a memory location within bounds. The patch demonstrates how arithmetic operations on pointers get rewritten and we can spot a familiar pattern there</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/8irnzqpgIARBl3UdtS30S/5e885701ef2fe3a9426b1e960e48f0d1/bpf_commit.png\" alt=\"\" class=\"kg-image\" width=\"1585\" height=\"1026\" loading=\"lazy\"/>\n            \n            </figure><p>Wait a minute… What pointer arithmetic? We are just trying to subtract two scalar values. How come the mitigation kicks in?</p><p>It shouldn&#39;t. It&#39;s a bug. The eBPF verifier keeps track of what kind of values the ALU is operating on, and in this corner case the state was ignored.</p><p>Why running BPF as root is fine, you ask? If your program has <code>CAP_SYS_ADMIN</code> privileges, side-channel mitigations <a href=\"https://elixir.bootlin.com/linux/v5.0/source/kernel/bpf/verifier.c#L7218\">don&#39;t</a> <a href=\"https://elixir.bootlin.com/linux/v5.0/source/kernel/bpf/verifier.c#L3109\">apply</a>. As root you already have access to kernel address space, so nothing new can leak through BPF.</p><p>After our report, <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3612af783cf52c74a031a2f11b82247b2599d3cd\">the fix</a> has quickly landed in v5.0 kernel and got backported to stable kernels 4.20.15 and 4.19.28. Kudos to Daniel Borkmann for getting the fix out fast. However, kernel upgrades are hard and in the meantime we were left with code running in production that was not doing what it was supposed to.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"32-bit-alu-to-the-rescue\">32-bit ALU to the rescue</h3>\n      <a href=\"#32-bit-alu-to-the-rescue\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As one of the eBPF maintainers <a href=\"https://lore.kernel.org/netdev/af0643e0-08a1-6326-2a80-71892de1bf56@iogearbox.net/\">has pointed out</a>, 32-bit arithmetic operations are not affected by the verifier bug. This opens a door for a work-around.</p><p>eBPF registers, <code>r0</code>..<code>r10</code>, are 64-bits wide, but you can also access just the lower 32 bits, which are exposed as subregisters <code>w0</code>..<code>w10</code>. You can operate on the 32-bit subregisters using BPF ALU32 instruction subset. LLVM 7+ can generate eBPF code that uses this instruction subset. Of course, you need to you ask it nicely with trivial <code>-Xclang -target-feature -Xclang +alu32</code> toggle:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cat sub32.c\n#include &quot;common.h&quot;\n\nu32 sub32(u32 x, u32 y)\n{\n        return x - y;\n}\n$ clang -O2 -target bpf -Xclang -target-feature -Xclang +alu32 -c sub32.c\n$ llvm-objdump -S -no-show-raw-insn sub32.o\n…\nsub32:\n       0:       bc 10 00 00 00 00 00 00         w0 = w1\n       1:       1c 20 00 00 00 00 00 00         w0 -= w2\n       2:       95 00 00 00 00 00 00 00         exit</pre></code>\n            <p>The <code>0x1c</code> <a href=\"https://elixir.bootlin.com/linux/v5.0/source/include/uapi/linux/bpf_common.h#L11\">opcode</a> of the instruction #1, which can be broken down as <code>BPF_ALU | BPF_X | BPF_SUB</code> (read more in the <a href=\"https://www.kernel.org/doc/Documentation/networking/filter.txt\">kernel docs</a>), is the 32-bit subtraction between registers we are looking for, as opposed to regular 64-bit subtract operation <code>0x1f = BPF_ALU64 | BPF_X | BPF_SUB</code>, which will get rewritten.</p><p>Armed with this knowledge we can borrow a page from <a href=\"https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic\">bignum arithmetic</a> and subtract 64-bit numbers using just 32-bit ops:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">u64 sub64(u64 x, u64 y)\n{\n        u32 xh, xl, yh, yl;\n        u32 hi, lo;\n\n        xl = x;\n        yl = y;\n        lo = xl - yl;\n\n        xh = x &gt;&gt; 32;\n        yh = y &gt;&gt; 32;\n        hi = xh - yh - (lo &gt; xl); /* underflow? */\n\n        return ((u64)hi &lt;&lt; 32) | (u64)lo;\n}</pre></code>\n            <p>This code compiles as expected on normal architectures, like x86-64 or ARM64, but BPF Clang target plays by its own rules:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ clang -O2 -target bpf -Xclang -target-feature -Xclang +alu32 -c sub64.c -o - \\\n  | llvm-objdump -S -\n…  \n      13:       1f 40 00 00 00 00 00 00         r0 -= r4\n      14:       1f 30 00 00 00 00 00 00         r0 -= r3\n      15:       1f 21 00 00 00 00 00 00         r1 -= r2\n      16:       67 00 00 00 20 00 00 00         r0 &lt;&lt;= 32\n      17:       67 01 00 00 20 00 00 00         r1 &lt;&lt;= 32\n      18:       77 01 00 00 20 00 00 00         r1 &gt;&gt;= 32\n      19:       4f 10 00 00 00 00 00 00         r0 |= r1\n      20:       95 00 00 00 00 00 00 00         exit</pre></code>\n            <p>Apparently the compiler decided it was better to operate on 64-bit registers and discard the upper 32 bits. Thus we weren&#39;t able to get rid of the problematic <code>0x1f</code> opcode. Annoying, back to square one.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"surely-a-bit-of-ir-will-do\">Surely a bit of IR will do?</h3>\n      <a href=\"#surely-a-bit-of-ir-will-do\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The problem was in Clang frontend - compiling C to IR. We know that BPF &quot;assembly&quot; backend for LLVM can generate bytecode that uses ALU32 instructions. Maybe if we tweak the Clang compiler&#39;s output just a little we can achieve what we want. This means we have to get our hands dirty with the LLVM Intermediate Representation (IR).</p><p>If you haven&#39;t heard of LLVM IR before, now is a good time to do some <a href=\"http://www.aosabook.org/en/llvm.html\">reading</a><a href=\"#f2\"><sup>2</sup></a>. In short the LLVM IR is what Clang produces and LLVM BPF backend consumes.</p><p>Time to write IR by hand! Here&#39;s a hand-tweaked <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/bpf/sub64_ir.ll#L7\">IR variant</a> of our <code>sub64()</code> function:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">define dso_local i64 @sub64_ir(i64, i64) local_unnamed_addr #0 {\n  %3 = trunc i64 %0 to i32      ; xl = (u32) x;\n  %4 = trunc i64 %1 to i32      ; yl = (u32) y;\n  %5 = sub i32 %3, %4           ; lo = xl - yl;\n  %6 = zext i32 %5 to i64\n  %7 = lshr i64 %0, 32          ; tmp1 = x &gt;&gt; 32;\n  %8 = lshr i64 %1, 32          ; tmp2 = y &gt;&gt; 32;\n  %9 = trunc i64 %7 to i32      ; xh = (u32) tmp1;\n  %10 = trunc i64 %8 to i32     ; yh = (u32) tmp2;\n  %11 = sub i32 %9, %10         ; hi = xh - yh\n  %12 = icmp ult i32 %3, %5     ; tmp3 = xl &lt; lo\n  %13 = zext i1 %12 to i32\n  %14 = sub i32 %11, %13        ; hi -= tmp3\n  %15 = zext i32 %14 to i64\n  %16 = shl i64 %15, 32         ; tmp2 = hi &lt;&lt; 32\n  %17 = or i64 %16, %6          ; res = tmp2 | (u64)lo\n  ret i64 %17\n}</pre></code>\n            <p>It may not be pretty but it does produce <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/bpf/sub64_ir.s#L5\">desired BPF code</a> when compiled<a href=\"#f3\"><sup>3</sup></a>. You will likely find the <a href=\"https://llvm.org/docs/LangRef.html\">LLVM IR reference</a> helpful when deciphering it.</p><p>And voila! First working solution that produces correct results:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./run-bpf -filter ir $[2**32] 1\narg0           4294967296 0x0000000100000000\narg1                    1 0x0000000000000001\ndiff           4294967295 0x00000000ffffffff</pre></code>\n            <p>Actually using this hand-written IR function from C is tricky. See <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/build.ninja#L27\">our code on GitHub</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6zQLSvXLH19lXCjYnstl2a/f8fb73710fc8e5eda96476006974eea5/LED_DISP-1.JPG.jpeg\" alt=\"\" class=\"kg-image\" width=\"1280\" height=\"385\" loading=\"lazy\"/>\n            \n            </figure><p>public domain <a href=\"https://en.wikipedia.org/wiki/File:LED_DISP.JPG\">image</a> by <a href=\"https://commons.wikimedia.org/wiki/User:Sergei_Frolov\">Sergei Frolov</a></p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-final-trick\">The final trick</h3>\n      <a href=\"#the-final-trick\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Hand-written IR does the job. The downside is that linking IR modules to your C modules is hard. Fortunately there is a better way. You can persuade Clang to stick to 32-bit ALU ops in generated IR.</p><p>We&#39;ve already seen the problem. To recap, if we ask Clang to subtract 32-bit integers, it will operate on 64-bit values and throw away the top 32-bits. Putting C, IR, and eBPF side-by-side helps visualize this:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/33bbylbcFR7zuF7NwxHcTs/fa9f110a71ab6e5f5cf8f7d70aadd587/sub32_v1.png\" alt=\"\" class=\"kg-image\" width=\"1224\" height=\"362\" loading=\"lazy\"/>\n            \n            </figure><p>The trick to get around it is to declare the 32-bit variable that holds the result as <code>volatile</code>. You might already know the <a href=\"https://en.wikipedia.org/wiki/Volatile_(computer_programming)\"><code>volatile</code> keyword</a> if you&#39;ve written Unix signal handlers. It basically tells the compiler that the value of the variable may change under its feet so it should refrain from reorganizing loads (reads) from it, as well as that stores (writes) to it might have side-effects so changing the order or eliminating them, by skipping writing it to the memory, is not allowed either.</p><p>Using <code>volatile</code> makes Clang emit <a href=\"https://llvm.org/docs/LangRef.html#volatile-memory-accesses\">special loads and/or stores</a> at the IR level, which then on eBPF level translates to writing/reading the value from memory (stack) on every access. While this sounds not related to the problem at hand, there is a surprising side-effect to it:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2fEaCu15LmmeauGv7Vh1Wb/354c4a8aa60da7a7e5797fe0f951508d/sub32_v2.png\" alt=\"\" class=\"kg-image\" width=\"1386\" height=\"324\" loading=\"lazy\"/>\n            \n            </figure><p>With volatile access compiler doesn&#39;t promote the subtraction to 64 bits! Don&#39;t ask me why, although I would love to hear an explanation. For now, consider this a hack. One that does not come for free - there is the overhead of going through the stack on each read/write.</p><p>However, if we play our cards right we just might reduce it a little. We don&#39;t actually need the volatile load or store to happen, we just want the side effect. So instead of declaring the value as volatile, which implies that both reads and writes are volatile, let&#39;s try to make only the writes volatile with a help of a macro:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">/* Emits a &quot;store volatile&quot; in LLVM IR */\n#define ST_V(rhs, lhs) (*(volatile typeof(rhs) *) &amp;(rhs) = (lhs))</pre></code>\n            <p>If this macro looks strangely familiar, it&#39;s because it does the same thing as <a href=\"https://elixir.bootlin.com/linux/v5.1-rc5/source/include/linux/compiler.h#L214\"><code>WRITE_ONCE()</code> macro</a> in the Linux kernel. Applying it to our example:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3qQ1CrUvUBsJJE09xVqzA1/bc84a1c3fdd5a855c505c56c2273e664/sub32_v3.png\" alt=\"\" class=\"kg-image\" width=\"1424\" height=\"304\" loading=\"lazy\"/>\n            \n            </figure><p>That&#39;s another <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2019-04-ebpf-alu32/bpf/filter.c#L143\">hacky but working solution</a>. Pick your poison.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/28GXw3wm8YlUgg9nvnBwEx/2939bf7b36758a66685385e16a48cc5f/poison_bottles-2.jpg\" alt=\"\" class=\"kg-image\" width=\"640\" height=\"480\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC BY-SA 3.0</a> <a href=\"https://commons.wikimedia.org/wiki/File:D-BW-Kressbronn_aB_-_Kl%C3%A4ranlage_067.jpg\">image</a> by ANKAWÜ</p><p>So there you have it - from C, to IR, and back to C to hack around a bug in eBPF verifier and be able to subtract 64-bit integers again. Usually you won&#39;t have to dive into LLVM IR or assembly to make use of eBPF. But it does help to know a little about it when things don&#39;t work as expected.</p><p>Did I mention that 64-bit addition is also broken? Have fun fixing it!</p><hr/><p><sup>1</sup> Okay, it was more like 3 months time until the bug was discovered and fixed.</p><p><sup>2</sup> Some even think that it is <a href=\"https://idea.popcount.org/2013-07-24-ir-is-better-than-assembly/\">better than assembly</a>.</p><p><sup>3</sup> How do we know? The litmus test is to look for statements matching <code>r[0-9] [-+]= r[0-9]</code> in BPF assembly.</p>",
		"id": "2fXVvP0CJO4Bt4KuJthpbx",
		"localeList": {
			"name": "eBPF can't count?! Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-05-03T14:00:00.000+01:00",
		"slug": "ebpf-cant-count",
		"tags": [
			{
				"id": "44lQSGkjHLg5W8THkxpMnh",
				"name": "eBPF",
				"slug": "ebpf"
			},
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			}
		],
		"title": "eBPF can't count?!",
		"updated_at": "2025-10-24T10:01:40.776Z",
		"url": "https://blog.cloudflare.com/ebpf-cant-count"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}