{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "3",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Steven Pack",
				"slug": "stevenpack",
				"bio": "Partner Engineering Director",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5KBJRA6GGkWLzkmUgwTrMs/82479e6c25be69362e444cdcad205625/stevenpack.png",
				"location": "San Francisco Bay Area, California",
				"website": null,
				"twitter": "@steven_pack",
				"facebook": null
			}
		],
		"excerpt": "As a fast-growing engineering organization, ownership of services changes fairly frequently. Many cycles get burned in chat with questions like \"Who owns service x now?",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/P8HKBpFRPti4PyeNjqyUh/45ce7ccc4343ec416073a8512f5997a4/rapid-development-of-serverless-chatbots-with-cloudflare-workers-and-workers-kv.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7KiDis2Ki65ox7urlr4a4b/6cd4b8365cf245434a629f47083e53cf/chat-bot_2x_optimized.png\" alt=\"chat-bot@2x_optimized\" class=\"kg-image\" width=\"3195\" height=\"1598\" loading=\"lazy\"/>\n            \n            </figure><p>I&#39;m the Product Manager for the Application Services team here at Cloudflare. We recently identified a need for a new tool around service ownership. As a fast-growing engineering organization, ownership of services changes fairly frequently. Many cycles get burned in chat with questions like &quot;Who owns service x now?</p><p>Whilst it&#39;s easy to see how a tool like this saves a few seconds per day for the asker and askee, and saves on some mental context switches, the time saved is unlikely to add up to the cost of development and maintenance.</p>\n            <pre class=\"language-10\"><code class=\"language-10\">= 5 minutes per day\nx 260 work days \n= 1300 mins \n/ 60 mins \n= 20 person hours per year</pre></code>\n            <p>So a 20-hour investment in that tool would pay itself back in a year valuing everyone&#39;s time the same. While we&#39;ve made great strides in improving the efficiency of building tools at Cloudflare, 20 hours is a stretch for an end-to-end build, deploy and operation of a new tool.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"enter-cloudflare-workers-workers-kv\">Enter Cloudflare Workers + Workers KV</h3>\n            <a href=\"#enter-cloudflare-workers-workers-kv\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The more I use Serverless and Workers, the more I&#39;m struck with the benefits of:</p><h4>1. Reduced operational overhead</h4><p>When I upload a Worker, it&#39;s automatically distributed to 175+ data centers. I don&#39;t have to be worried about uptime - it will be up, and it will be fast.</p><h4>2. Reduced dev time</h4><p>With operational overhead largely removed, I&#39;m able to focus purely on code. A constrained problem space like this lends itself really well to Workers. I reckon we can knock this out in well under 20 hours.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"requirements\">Requirements</h3>\n            <a href=\"#requirements\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>At Cloudflare, people ask these questions in Chat, so that&#39;s a natural interface to service ownership. Here&#39;s the spec:</p><table><tr><td><p><b>Use Case</b></p></td><td><p><b>Input</b></p></td><td><p><b>Output</b></p></td></tr><tr><td><p>Add</p></td><td><p>@ownerbot add Jira IT <a href=\"http://web.archive.org/web/20190624175546/http://chat.google.com/room/ABC123\">http://chat.google.com/room/ABC123</a></p></td><td><p>Service added</p></td></tr><tr><td><p>Delete</p></td><td><p>@ownerbot delete Jira</p></td><td><p>Service deleted</p></td></tr><tr><td><p>Question</p></td><td><p>@ownerbot Kibana</p></td><td><p>SRE Core owns Kibana. The room is: <a href=\"http://web.archive.org/web/20190624175546/http://chat.google.com/ABC123\">http://chat.google.com/ABC123</a></p></td></tr><tr><td><p>Export</p></td><td><p>@ownerbot export</p></td><td><p><code>[{name: &quot;Kibana&quot;, owner: &quot;SRE Core&quot;...}]</code></p></td></tr></table>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"hello-ownerbot\">Hello @ownerbot</h3>\n            <a href=\"#hello-ownerbot\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Following the <a href=\"https://developers.google.com/hangouts/chat/how-tos/bots-develop\">Hangouts Chat API Guide</a>, let&#39;s start with a hello world bot.</p><ol><li><p>To configure the bot, go to the <a href=\"https://developers.google.com/hangouts/chat/how-tos/bots-publish\">Publish</a> page and scroll down to the <b>Enable The API</b> button:</p></li><li><p>Enter the bot name</p></li><li><p>Download the private key JSON file</p></li><li><p>Go to the <a href=\"https://console.developers.google.com/\">API Console</a></p></li><li><p>Search for the <b>Hangouts Chat API</b> (<i>Note: not the Google+ Hangouts API</i>)\n</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7mQUzoV7nOtkEjVc5IOxnf/5981969de5b73cec65d8146eeec3b383/api-console-hangouts-chat-api-1.png\" alt=\"api-console-hangouts-chat-api-1\" class=\"kg-image\" width=\"1710\" height=\"250\" loading=\"lazy\"/>\n            \n            </figure></li><li><p>Click <b>Configuration</b> on the left menu</p></li><li><p>Fill out the form as per below <a href=\"#fn1\">[1]</a></p><ul><li><p>Use a hard to guess URL. I <a href=\"https://www.guidgenerator.com/online-guid-generator.aspx\">generate a guide</a> and use that in the URL.</p></li><li><p>The URL will be the route you associate with your Worker in the Dashboard\n</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6LfF9FngUCK4THzSlrnFho/ecfee7e37965cdfb841e4f1a304959cd/bot-configuration-1.png\" alt=\"bot-configuration-1\" class=\"kg-image\" width=\"2000\" height=\"1820\" loading=\"lazy\"/>\n            \n            </figure></li></ul></li><li><p>Click Save</p></li></ol><p>So Google Chat should know about our bot now. Back in Google Chat, click in the &quot;Find people, rooms, bots&quot; text box and choose &quot;Message a Bot&quot;. Your bot should show up in the search:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6En5Ilq95DEcC1hQEfpCO/3c9e5a928f68f279d96e16bc62934b3e/message-a-bot.png\" alt=\"message-a-bot\" class=\"kg-image\" width=\"1946\" height=\"858\" loading=\"lazy\"/>\n            \n            </figure><p>It won&#39;t be too useful just yet, as we need to create our Worker to receive the messages and respond!</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"the-worker\">The Worker</h3>\n            <a href=\"#the-worker\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In the Workers dashboard, create a script and associate with the route you defined in step #7 (the one with the guide). It should look something like below. <a href=\"#fn2\">[2]</a></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pjvx9aep146V4aVSCBjvV/41307cdb04256dea6036ff1c6fab1902/route.png\" alt=\"route\" class=\"kg-image\" width=\"1246\" height=\"546\" loading=\"lazy\"/>\n            \n            </figure><p>The Google Chatbot interface is pretty simple, but weirdly obfuscated in the Hangouts API guide IMHO. You have to reverse engineer the python example.</p><p>Basically, if we message our bot like <code>@ownerbot-blog Kibana</code>, we&#39;ll get a message like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">  {\n    &quot;type&quot;: &quot;MESSAGE&quot;,\n    &quot;message&quot;: {\n      &quot;argumentText&quot;: &quot;Kibana&quot;\n    }\n  }</pre></code>\n            <p>To respond, we need to respond with <code>200 OK</code> and JSON body like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">content-length: 27\ncontent-type: application/json\n\n{&quot;text&quot;:&quot;Hello chat world&quot;}</pre></code>\n            <p>So, the minimum Chatbot Worker looks something like this:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&#039;fetch&#039;, event =&gt; { event.respondWith(process(event.request)) });\n\nfunction process(request) {\n  let body = {\n\ttext: &quot;Hello chat world&quot;\n  }\n  return new Response(JSON.stringify(body), {\n    status: 200,\n    headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n        &quot;Cache-Control&quot;: &quot;no-cache&quot;\n    }\n  });\n}</pre></code>\n            <p>Save and deploy that, and we should be able to message our bot:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4BL2D9sXew5rPpVLtif5bS/d75d9c07bbb51ff94de92115e34a8d71/google-chatbot-hello-world-response.png\" alt=\"google-chatbot-hello-world-response\" class=\"kg-image\" width=\"1462\" height=\"680\" loading=\"lazy\"/>\n            \n            </figure><p><b>Success</b>!</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"implementation\">Implementation</h3>\n            <a href=\"#implementation\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>OK, on to the meat of the code. Based on the requirements, I see a need for an <code>AddCommand</code>, <code>QueryCommand</code>, <code>DeleteCommand</code> and <code>HelpCommand</code>. I also see some sort of <code>ServiceDirectory</code> that knows how to add, delete and retrieve services.</p><p>I created a CommandFactory which accepts a ServiceDirectory, as well as an implementation of a KV store, which will be Workers KV in production, but I&#39;ll mock out in tests.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">class CommandFactory {\n    constructor(serviceDirectory, kv) {\n        this.serviceDirectory = serviceDirectory;\n        this.kv = kv;\n    }\n\n    create(argumentText) {\n        let parts = argumentText.split(&#039; &#039;);\n        let primary = parts[0];       \n        \n        switch (primary) {\n            case &quot;add&quot;:\n                return new AddCommand(argumentText, this.serviceDirectory, this.kv);\n            case &quot;delete&quot;:\n                return new DeleteCommand(argumentText, this.serviceDirectory, this.kv);\n            case &quot;help&quot;:\n                return new HelpCommand(argumentText, this.serviceDirectory, this.kv);\n            default:\n                return new QueryCommand(argumentText, this.serviceDirectory, this.kv);\n        }\n    }\n}</pre></code>\n            <p>OK, so if we receive a message like <code>@ownerbot add</code>, we&#39;ll interpret it as an <code>AddCommand</code>, but if it&#39;s not something we recognize, we&#39;ll assume it&#39;s a <code>QueryCommand</code> like <code>@ownerbot Kibana</code> which makes it easy to parse commands.</p><p>OK, our commands need a service directory, which will look something like this:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">class ServiceDirectory {     \n    get(serviceName) {...}\n    async add(service) {...}\n    async delete(serviceName) {...}\n    find(serviceName) {...}\n    getNames() {...}\n}</pre></code>\n            <p>Let&#39;s build some commands. Oh, and my chatbot is going to be Ultima IV themed, because... reasons.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">class AddCommand extends Command {\n\n    async respond() {\n        let cmdParts = this.commandParts;\n        if (cmdParts.length !== 6) {\n            return new OwnerbotResponse(&quot;Adding a service requireth Name, Owner, Room Name and Google Chat Room Url.&quot;, false);\n        }\n        let name = this.commandParts[1];\n        let owner = this.commandParts[2];\n        let room = this.commandParts[3];\n        let url = this.commandParts[4];\n        let aliasesPart = this.commandParts[5];\n        let aliases = aliasesPart.split(&#039; &#039;);\n        let service = {\n            name: name,\n            owner: owner,\n            room: room,\n            url: url,\n            aliases: aliases\n        }\n        await this.serviceDirectory.add(service);\n        return new OwnerbotResponse(`My codex of knowledge has expanded to contain knowledge of ${name}. Congratulations virtuous Paladin.`);\n    }\n}</pre></code>\n            <p>The nice thing about the <a href=\"https://en.wikipedia.org/wiki/Command_pattern\">Command</a> pattern for chatbots, is you can encapsulate the logic of each command for testing, as well as compose series of commands together to test out conversations. Later, we could extend it to support undo. Let&#39;s test the <code>AddCommand</code></p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">  it(&#039;requires all args&#039;, async function() {\n            let addCmd = new AddCommand(&quot;add AdminPanel &#039;Internal Tools&#039; &#039;Internal Tools&#039;&quot;, dir, kv); //missing url            \n            let res = await addCmd.respond();\n            console.log(res.text);\n            assert.equal(res.success, false, &quot;Adding with missing args should fail&quot;);            \n        });\n\n        it(&#039;returns success for all args&#039;, async function() {\n            let addCmd = new AddCommand(&quot;add AdminPanel &#039;Internal Tools&#039; &#039;Internal Tools Room&#039; &#039;http://chat.google.com/roomXYZ&#039;&quot;, dir, kv);            \n            let res = await addCmd.respond();\n            console.debug(res.text);\n            assert.equal(res.success, true, &quot;Should have succeeded with all args&quot;);            \n        });</pre></code>\n            \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ mocha -g &quot;AddCommand&quot;\n  AddCommand\n    add\n      ✓ requires all args\n      ✓ returns success for all args\n  2 passing (19ms)</pre></code>\n            <p>So far so good. But adding commands to our ownerbot isn&#39;t going to be so useful unless we can query them.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">class QueryCommand extends Command {\n    async respond() {\n        let service = this.serviceDirectory.get(this.argumentText);\n        if (service) {\n            return new OwnerbotResponse(`${service.owner} owns ${service.name}. Seeketh thee room ${service.room} - ${service.url})`);\n        }\n        let serviceNames = this.serviceDirectory.getNames().join(&quot;, &quot;);\n        return new OwnerbotResponse(`I knoweth not of that service. Thou mightst asketh me of: ${serviceNames}`);\n    }\n}</pre></code>\n            <p>Let&#39;s write a test that runs an <code>AddCommand</code> followed by a <code>QueryCommand</code></p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">describe (&#039;QueryCommand&#039;, function() {\n    let kv = new MockKeyValueStore();\n    let dir = new ServiceDirectory(kv);\n    await dir.init();\n\n    it(&#039;Returns added services&#039;, async function() {    \n        let addCmd = new AddCommand(&quot;add AdminPanel &#039;Internal Tools&#039; &#039;Internal Tools Room&#039; url &#039;alias&#039; abc123&quot;, dir, kv);            \n        await addCmd.respond();\n\n        let queryCmd = new QueryCommand(&quot;AdminPanel&quot;, dir, kv);\n        let res = await queryCmd.respond();\n        assert.equal(res.success, true, &quot;Should have succeeded&quot;);\n        assert(res.text.indexOf(&#039;Internal Tools&#039;) &gt; -1, &quot;Should have returned the team name in the query response&quot;);\n    })\n})</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"demo\">Demo</h3>\n            <a href=\"#demo\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>A lot of the code as been elided for brevity, but you can view the <a href=\"https://github.com/stevenpack/ownerbot\">full source on GitHub</a>. Let&#39;s take it for a spin!</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/UJpvFMBP0gI5gx6ggEadY/303538f35b351adb396c9f3a0da38c94/ownerbot1-1.gif\" alt=\"ownerbot1-1\" class=\"kg-image\" width=\"847\" height=\"526\" loading=\"lazy\"/>\n            \n            </figure>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"learnings\">Learnings</h3>\n            <a href=\"#learnings\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Some of the things I learned during the development of @ownerbot were:</p><ul><li><p>Chatbots are an awesome use case for Serverless. You can deploy and not worry again about the infrastructure</p></li><li><p>Workers KV means extends the range of useful chatbots to include stateful bots like @ownerbot</p></li><li><p>The <code>Command</code> pattern provides a useful way to encapsulate the parsing and responding to commands in a chatbot.</p></li></ul><p>In <b>Part 2</b> we&#39;ll add authentication to ensure we&#39;re only responding to requests from our instance of Google Chat</p><ol><li><p>For simplicity, I&#39;m going to use a static shared key, but Google have recently rolled out a more <a href=\"https://developers.google.com/hangouts/chat/how-tos/bots-develop?hl=en_US#verifying_bot_authenticity\">secure method</a> for verifying the caller&#39;s authenticity, which we&#39;ll expand on in Part 2. <a href=\"#fnref1\">↩︎</a></p></li><li><p>This UI is the multiscript version available to Enterprise customers. You can still implement the bot with a single Worker, you&#39;ll just need to recognize and route requests to your chatbot code. <a href=\"#fnref2\">↩︎</a></p></li></ol><p></p>",
		"id": "6pbqrsfFAJTY87DgBJAxT9",
		"localeList": {
			"name": "Rapid Development of Serverless Chatbots with Cloudflare Workers and Workers KV Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "As a fast-growing engineering organization, ownership of services changes fairly frequently. Many cycles get burned in chat with questions like \"Who owns service x now?",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"published_at": "2019-04-25T14:00:00.000+01:00",
		"slug": "rapid-development-of-serverless-chatbots-with-cloudflare-workers-and-workers-kv",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "q88b6J14cYlPx98w6u1If",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Rapid Development of Serverless Chatbots with Cloudflare Workers and Workers KV",
		"updated_at": "2025-03-10T04:23:19.797Z",
		"url": "https://blog.cloudflare.com/rapid-development-of-serverless-chatbots-with-cloudflare-workers-and-workers-kv"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}