{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "15",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Sharon Goldberg",
				"slug": "goldbe",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6cKoimXGrudpdJuCAzYWGI/d84cd85760c1a34559532fc16f5f8d66/goldbe.png",
				"location": "Boston",
				"website": null,
				"twitter": "@goldbe",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Miro Haller (Guest Author)",
				"slug": "miro",
				"bio": "UC San Diego",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/38m0gHyq8tMjqEaOyWa3SQ/fdb6114930a79b41da7fb40d686daabc/miro.jpg",
				"location": null,
				"website": null,
				"twitter": "@miro_haller",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Nadia Heninger (Guest Author)",
				"slug": "nadia",
				"bio": "UC San Diego",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6y5LaJ7DoRP5vMs2UFT6u/9e275467c55b7871b8aadd318b369736/nadia.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Michael Milano (Guest Author)",
				"slug": "michael-milano",
				"bio": "BastionZero",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/71sKcHOIMJeEwPy9t6HPpI/748268d62e5304e16d912069d21240d7/michael-milano.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Dan Shumow (Guest Author)",
				"slug": "dan-shumow-guest-author",
				"bio": "Microsoft Research",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3MZQqqX7fawHFMNlQEprWF/947211f1fada4662047212953434bc35/dan-shumow-guest-author.jpg",
				"location": null,
				"website": null,
				"twitter": "@realDRBGBreaker",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Marc Stevens (Guest Author)",
				"slug": "marc-stevens-guest-author",
				"bio": "Centrum Wiskunde & Informatica, Amsterdam",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1yTBWc1nsjhQ8jw6VMeUh6/322ec4827502e3eaf894955c3223c942/marc-stevens-guest-author.jpg",
				"location": null,
				"website": null,
				"twitter": "@realhashbreaker",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Adam Suhl (Guest Author)",
				"slug": "adam-suhl-guest-author",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6TRFlHnVIfXX2cQhjt7wuc/86f2173516450dfa1e035b04cd4671c6/Screenshot_2024-12-21_at_17.56.35.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "The RADIUS protocol is commonly used to control administrative access to networking gear. Despite its importance, RADIUS hasn’t changed much in decades. We discuss an attack on RADIUS as a case study for why it’s important for legacy protocols to keep up with advancements in cryptography",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/lvHstwJ5eqI3HtZNBz1aJ/8abb1c5a0d95d6a1a2f0017c78fc0fda/radius-udp-vulnerable-md5-attack.png",
		"featured": false,
		"html": "<p>The MD5 cryptographic hash function was first broken in 2004, when <a href=\"https://iacr.org/archive/eurocrypt2005/34940019/34940019.pdf\">researchers</a> demonstrated the first MD5 collision, namely two different messages X1 and X2 where MD5(X1) = MD5 (X2). Over the years, attacks on MD5 have only <a href=\"https://www.iacr.org/archive/eurocrypt2007/45150001/45150001.pdf\">continued</a> to <a href=\"https://eprint.iacr.org/2009/111.pdf\">improve</a>, getting faster and more effective <a href=\"https://en.wikipedia.org/wiki/Flame_(malware)\">against</a> <a href=\"https://www.ndss-symposium.org/wp-content/uploads/2017/09/transcript-collision-attacks-breaking-authentication-tls-ike-ssh.pdf\">real</a> <a href=\"https://www.akamai.com/blog/security-research/exploiting-critical-spoofing-vulnerability-microsoft-cryptoapi\">protocols</a>. But despite continuous advancements in cryptography, MD5 has lurked in network protocols for years, and is still playing a critical role in some protocols even today.</p><p>One such protocol is <a href=\"https://en.wikipedia.org/wiki/RADIUS\">RADIUS (Remote Authentication Dial-In User Service)</a>. RADIUS was first designed in 1991 – during the era of dial-up Internet – but it remains an important authentication protocol used for remote access to routers, switches, and other networking gear by users and administrators. In addition to being used in networking environments, RADIUS is sometimes also used in industrial control systems.  RADIUS traffic is still <a href=\"https://datatracker.ietf.org/doc/draft-ietf-radext-deprecating-radius/\">commonly transported over UDP</a> in the clear, protected only by outdated cryptographic constructions based on MD5.</p><p>In this post, we present an improved attack against MD5 and use it to exploit all authentication modes of RADIUS/UDP apart from those that use EAP (<a href=\"https://datatracker.ietf.org/doc/html/rfc3748\">Extensible Authentication Protocol</a>). The attack allows a Monster-in-the-Middle (MitM) with access to RADIUS traffic to gain unauthorized administrative access to devices using RADIUS for authentication, without needing to brute force or steal passwords or shared secrets. This post discusses the attack and provides an overview of mitigations that network operators can use to improve the security of their RADIUS deployments.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/128HlLk4YY6iwwDQl2naHy/527eb41a400396e915ed805292de1fe4/image9-1.png\" alt=\"RADIUS/UDP in Password Authentication Protocol (PAP) mode.  Our attack also applies to RADIUS/UDP CHAP and RADIUS/UDP MS-CHAP authentication modes as well.\" class=\"kg-image\" width=\"1371\" height=\"537\" loading=\"lazy\"/>\n            \n            </figure><p>RADIUS/UDP in Password Authentication Protocol (PAP) mode. Our attack also applies to RADIUS/UDP CHAP and RADIUS/UDP MS-CHAP authentication modes as well.</p><p>In a typical RADIUS use case, an end user gets administrative access to a router, switch, or other networked device by entering a username and password with administrator privileges at a login prompt. The target device runs a RADIUS client which queries a remote RADIUS server to determine whether the username and password are valid for login. This communication between the RADIUS client and RADIUS server is very sensitive: if an attacker can violate the integrity of this communication, it can control who can gain administrative access to the device, even if the connection between user and device is secure. An attacker that gains administrative access to a router or switch can redirect traffic, drop or add routes, and generally control the flow of network traffic. This makes RADIUS an important protocol for the security of modern networks.</p><p>Our understanding of cryptography and protocol design was fairly unrefined when RADIUS was first introduced in the 1990s. Despite this, the protocol hasn’t changed much, likely because updating RADIUS deployments can be tricky due to its use in legacy devices (e.g. routers) that are harder to upgrade.</p><p>RADIUS traffic is commonly sent over internal networks, and in our research we did not broadly measure how organizations configure it internally.  Anecdotal evidence suggests that RADIUS/UDP remains popular. (<a href=\"https://www.blastradius.fail/pdf/radius.pdf\">See our paper for some case studies of large organizations using RADIUS/UDP</a>). While it is possible to send <a href=\"https://datatracker.ietf.org/doc/html/rfc6614\">RADIUS over TLS</a> (sometimes also called RADSEC), the Internet Engineering Task Force (IETF) still considers the <a href=\"https://datatracker.ietf.org/doc/html/rfc6614\">specification for RADIUS/TLS</a> to be “<a href=\"https://www.ietf.org/process/process/informational-vs-experimental/#:~:text=in%20any%20sense.-,4.2.1%20Experimental,-The%20%22Experimental%22%20designation\">experimental</a>”, and is currently still in the process of specifying <a href=\"https://datatracker.ietf.org/doc/draft-ietf-radext-radiusdtls-bis/01/\">RADIUS over TLS or DLTS</a> as “<a href=\"https://www.ietf.org/process/informal/#:~:text=2.3.%20Standards%20track%20documents\">standards track</a>”.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2vh2ZZQu14kW1ipbQVsGGb/30189350ae37c12c076805d3520637dd/image8-1.png\" alt=\"RADIUS/TLS, also sometimes known as RADSEC\" class=\"kg-image\" width=\"1371\" height=\"540\" loading=\"lazy\"/>\n            \n            </figure><p>RADIUS/TLS, also sometimes known as RADSEC</p><p>Prior to our work, there was no publicly-known attack exploiting MD5 to violate the integrity of the RADIUS/UDP traffic. However, attacks continue to get faster, cheaper, become more widely available, and become more practical against real protocols. Protocols that we thought might be “secure enough”, in spite of their reliance on outdated cryptography, tend to crack as attacks continue to improve over time.</p><p>In our attack, a MitM gains unauthorized access to a networked device by violating the integrity of communications between the device’s RADIUS client and its RADIUS server. In other words, our MitM attacker has access to RADIUS traffic and uses it to pivot into unauthorized access to the devices hosting the RADIUS clients that generated this RADIUS traffic. From there, the attacker can gain administrative access to the networking device and thus control the Internet traffic that flows through the network.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5LYE2xhdiZ3y9kPzsvdXvq/e70d9c9f0e0e94291f5ddbb16df43c62/unnamed-2.png\" alt=\"Overview of the Blast-RADIUS attack on RADIUS/UDP in PAP mode\" class=\"kg-image\" width=\"1600\" height=\"537\" loading=\"lazy\"/>\n            \n            </figure><p>Overview of the Blast-RADIUS attack on RADIUS/UDP in PAP mode</p><p>This Blast-RADIUS attack was devised in collaboration with researchers at the <a href=\"https://cryptosec.ucsd.edu/\">University of California San Diego (UCSD)</a>, <a href=\"https://www.cwi.nl/en/groups/cryptology/\">CWI Amsterdam</a>, <a href=\"https://www.microsoft.com/en-us/research/group/security-and-cryptography/\">Microsoft</a>, and <a href=\"https://www.bastionzero.com/\">BastionZero</a>. In response, CERT has assigned <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3596\">CVE-2024-3596</a> and <a href=\"https://kb.cert.org/vuls/id/456537\">VU#456537</a> and worked with RADIUS vendors and developers to coordinate disclosure.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"radius-udp-and-its-ad-hoc-use-of-md5\">RADIUS/UDP and its ad hoc use of MD5</h3>\n      <a href=\"#radius-udp-and-its-ad-hoc-use-of-md5\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>RADIUS/UDP has many modes, and our attacks work on all authentication modes except for those using EAP (<a href=\"https://datatracker.ietf.org/doc/html/rfc3748\">Extensible Authentication Protocol</a>).  To simplify exposition, we start by focusing on the RADIUS/UDP PAP (Password Authentication Protocol) authentication mode.</p><p>With RADIUS/UDP PAP authentication, the RADIUS client sends a username and password in an <i>Access-Request</i> packet to the RADIUS server over UDP.  The server drops the packet if its source IP address does not match a known client, but otherwise the <i>Access-Request</i> is entirely unauthenticated. This makes it vulnerable to modifications by a MitM.</p><p>The RADIUS server responds with either an <i>Access-Reject</i>, <i>Access-Accept</i> (or possibly also an <i>Access-Challenge</i>) packet sent to the RADIUS client over UDP.  These response packets are “authenticated” with an ad hoc “<a href=\"https://en.wikipedia.org/wiki/Message_authentication_code\">message authentication code (MAC)</a>” to prevent modifications by an MitM. This “MAC” is based on MD5 and is called the <i>Response Authenticator.</i></p><p>This ad hoc construction in the <i>Response Authenticator</i> attribute has been part of the RADIUS protocol <a href=\"https://datatracker.ietf.org/doc/draft-ietf-nasreq-radius/01/\">since 1994</a>. It was not changed in 1997, when <a href=\"https://datatracker.ietf.org/doc/html/rfc2104\">HMAC was standardized</a> in order to construct a provably-secure cryptographic MAC using a cryptographic hash function. It was not changed in 2004, when <a href=\"https://link.springer.com/chapter/10.1007/11426639_2\">the first collisions in MD5 were found</a>. And it is still part of the protocol today.</p><p>In this post, we’ll describe our improved attack on MD5 as it is used in the RADIUS <i>Response Authenticator</i>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-radius-response-authenticator\">The RADIUS Response Authenticator</h3>\n      <a href=\"#the-radius-response-authenticator\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The <i>Response Authenticator</i> “authenticates” RADIUS responses via an ad hoc MD5 construction that involves concatenating several fields in the RADIUS request and response packets, appending a Secret shared between RADIUS client and RADIUS server, and then hashing the result with MD5. Specifically, the <i>Response Authenticator</i> is computed as</p><p>MD5( Code || ID || Len || Request Authenticator || Attributes || Secret )</p><p>where the Code, ID, Length, and Attributes are copied directly from the response packet, and Request Authenticator is a 16-byte random nonce and included in the corresponding request packet.</p><p>But the RADIUS <i>Response Authenticator</i> is not a good <a href=\"https://en.wikipedia.org/wiki/Message_authentication_code\">message authentication code (MAC)</a>. Here’s why:</p><ul><li><p>First, let’s simplify the construction in the Response Authenticator as: the “MAC” on message X1 is computed as MD5 (X1 || Secret) where X1 is a message and Secret is the secret key for the “MAC”.</p></li><li><p>Next, we note that MD5 is vulnerable to <a href=\"http://Length_extension_attack\">length extension attacks</a>. Namely, given MD5(X) for an unknown X, along with the length of X, then anyone who knows Y can compute MD5(X || Y).Length extension attacks are possible because of how MD5 processes inputs in consecutive blocks, and are the primary reason why <a href=\"https://datatracker.ietf.org/doc/html/rfc2104\">HMAC was standardized in 1997</a>.</p></li><li><p>This block-wise processing is also an issue for the Response Authenticator of RADIUS. If someone finds an MD5 collision, namely two different messages X1 and X2 such that MD5(X1) = MD5(x2), then it follows that MD5 (X1 || Secret) = MD5 (X2 || Secret).</p></li></ul><p>This breaks the security of the &quot;MAC&quot;. Here’s how: consider an attacker that finds two messages X1 and X2 that are an MD5 collision. The attacker then learns the &quot;MAC&quot; on X1, which isMD5 (X1 || Secret). Now the attacker can forge the “MAC” on X2 without ever needing to know the Secret, simply by reusing the “MAC” on X1. This attack violates the security definition of a <a href=\"https://en.wikipedia.org/wiki/Message_authentication_code\">message authentication code</a>.</p><ul><li><p>This attack is especially concerning since <a href=\"https://link.springer.com/chapter/10.1007/11426639_2\">finding MD5 collisions has been possible since 2004</a>.The first attacks on MD5 in 2004 produced so-called “identical prefix collisions” of the formMD5 (P || G1 || S) = MD5 (P || G2 || S), where P is a meaningful message, S is a meaningful message, and G1 and G2 are meaningless gibberish. This attack has since been made very fast and can now run on a regular consumer laptop in seconds. While this attack is a devastating blow for any cryptographic hash function, it’s still pretty difficult to use gibberish messages (with identical prefixes) to create practical attacks on real protocols like RADIUS.In 2007, a more <a href=\"https://www.iacr.org/archive/eurocrypt2007/45150001/45150001.pdf\">powerful attack was presented</a>, the “chosen-prefix collision attack”. This attack is slower and more costly, but allows the prefixes in the collision to be different, making it valuable for <a href=\"https://eprint.iacr.org/2009/111.pdf\">practical attacks on real protocols</a>. In other words, the collision is of the formMD5 (P1 || G1 || S) = MD5 (P2 || G2 || S), where P1 and P2 are different freely-chosen meaningful messages, G1 and G2 are meaningless gibberish and S is a meaningful message. We will use an improved version of this attack to break the security of the RADIUS/UDP Response Authenticator.Roughly speaking, in our attack, P1 will correspond to a RADIUS Access-Reject, and P2 will correspond to a RADIUS Access-Accept, thus allowing us to break the security of the protocol by letting an unauthorized user log into a networking device running a RADIUS client.</p></li></ul><p>Before we move on, note that in 2000, <a href=\"https://datatracker.ietf.org/doc/html/rfc2869\">RFC2869</a> added support for HMAC-MD5 to RADIUS/UDP, using a new attribute called <i>Message-Authenticator</i>. HMAC thwarts attacks that use hash function collisions to break the security of a MAC, and HMAC is <a href=\"https://eprint.iacr.org/2006/043.pdf\">a secure MAC as long as the underlying hash function is a pseudorandom function</a>. As of this writing, we have not seen a public attack demonstrating that HMAC-MD5 is not a good MAC.</p><p>Nevertheless, the RADIUS specifications state that <i>Message-Authenticator</i> is optional for all modes of RADIUS/UDP apart from those that use EAP (<a href=\"https://datatracker.ietf.org/doc/html/rfc3748\">Extensible Authentication Protocol</a>). Our attack is for non-EAP authentication modes of RADIUS/UDP using default setups that do not use <i>Message-Authenticator</i>. We further discuss <i>Message-Authenticator</i> and EAP later in this post.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"blast-radius-attack\">Blast-RADIUS attack</h3>\n      <a href=\"#blast-radius-attack\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Given that the ad hoc MD5 construction in the <i>Response Authenticator</i> is usually the only thing protecting the integrity of the RADIUS/UDP message, can we exploit it to break the security of the RADIUS/UDP protocol? Yes, we can.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5j93fliyvr8dbiYEzC4UAG/4029c0b402fce7c1fe9c2ead3537b0e6/AD_4nXei5_IU_xNU4pWzH-3M9XOKZGXH78BzN8OTsDh4KZ_YopiWvctzhZs3uG33f1SMU7gNE_MWvmsXrH1zyA5ziN0BH2D4FoYbC9OaVSlT5LR9STkGScd03q-XAUQe\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"314\" loading=\"lazy\"/>\n            \n            </figure><p>But it wasn’t that easy. We needed to optimize and improve existing chosen-prefix collision attacks on MD5 to (a) make them fast enough to work on packets in flight, (b) respect the limitations imposed by the RADIUS protocol and (c) the RADIUS/UDP packet format.</p><p>Here is how we did it. The attacker uses a MitM between a RADIUS client (e.g. a router) and RADIUS server to change an <i>Access-Reject</i> packet into an <i>Access-Accept</i> packet by exploiting weaknesses in MD5, thus gaining unauthorized access (to the router). The detailed flow of the attack is in the diagram below.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6YqtRYeDSSaP7Z54HjX4zz/d673f089cd9d6eb1635a91c6e8d1a1ff/unnamed--7--1.png\" alt=\"Details of the Blast-RADIUS attack\" class=\"kg-image\" width=\"1600\" height=\"636\" loading=\"lazy\"/>\n            \n            </figure><p>Details of the Blast-RADIUS attack</p><p>Let’s walk through each step of the attack.</p><p>1. First, the attacker tries to log in to the device running to the RADIUS client using a bogus username and password.</p><p>2. The RADIUS client sends an <i>Access-Request</i> packet that is intercepted by the MitM.</p><p>3. Next, the MitM then executes an MD5 chosen-prefix collision attack as follows:</p><p>Prefix P1 corresponds to attributes hashed with MD5 to produce the <i>Response Authenticator</i> of an <i>Access-Reject</i> packet. Prefix P2 corresponds to the attributes for an <i>Access-Accept</i> packet. The MitM can predict P1 and P2 simply by looking at the <i>Access-Request</i> packet that it intercepted.</p><p>Next, the attacker then runs the MD5 chosen-prefix collision attack to find the two gibberish blocks, G1 (the RejectGib shown in the figure above) and G2 (the AcceptGib) to obtain an MD5 collision between P1 || RejectGib and P2 || AcceptGib.</p><p>Now we need to get the collision gibberish into the RADIUS packets somehow.</p><p>4. To do this, we are going to use an optional RADIUS/UDP attribute called the <i>Proxy-State</i>.  The <i>Proxy-State</i> is an ideal place to stuff this gibberish because a RADIUS server must echo back any information it receives in a <i>Proxy-State</i> attribute from the RADIUS client. Even better for our attacker, the <i>Proxy-State</i> must also be hashed by MD5 in the corresponding response’s <i>Response Authenticator.</i></p><p>Our MitM takes the gibberish RejectGib and adds it into the <i>Access-Request</i> packet that the MitM intercepted as multiple <i>Proxy-State</i> attributes.  For this to work, we had to ensure that our collision gibberish (RejectGib and AcceptGib) is properly formatted as multiple <i>Proxy-State</i> attributes. This is one novel cryptographic aspect of our attack that you <a href=\"https://www.blastradius.fail/pdf/radius.pdf\">read more about here</a>.</p><p>Next, we are going to exploit the fact that the RADIUS server will echo back the gibberish in its response.</p><p>5. The RADIUS server receives the modified <i>Access-Request</i> and responds with an <i>Access-Reject</i> packet. This <i>Access-Reject</i> packet includes (a) the <i>Proxy-State</i> attributes containing the RejectGib and (b) a <i>Response Authenticator</i> computed as MD5 (P1 || RejectGib || Secret).</p><p>Note that we have successfully changed the input to the <i>Response Authenticator</i> to be one of the MD5 collisions found by the MitM!</p><p>6. Finally, the MitM intercepts the <i>Access-Reject</i> packet, and extracts the <i>Response-Authenticator</i> from the intercepted packet, and uses it to forge an <i>Access-Accept</i> packet using our MD5 collision.</p><p>The forged packet is (a) formatted as an <i>Access-Accept</i> packet that (b) has the AcceptGib in <i>Proxy-State</i> and (c) copies the <i>Response Authenticator</i> from the <i>Access-Reject</i> packet that the MitM intercepted from the server.</p><p>We have now used our MD5 collision to replace an <i>Access-Reject</i> with an <i>Access-Accept.</i></p><p>7. The forged <i>Access-Accept</i> packet arrives at the RADIUS client, which accepts it because</p><p>the input to the <i>Response Authenticator</i> is P2 || AcceptGib</p><p>the <i>Response-Authenticator</i> is MD5 (P1 || RejectGib || Secret)</p><p>P1 || RejectGib is an MD5 collision with P2 || AcceptGib, which implies that</p><p>MD5 (P1 || RejectGib || Secret) = MD5 (P2 || AcceptGib || Secret)In other words, the <i>Response-Authenticator</i> on the forged <i>Access-Accept</i> packet is valid.</p><p>The attacker has successfully logged into the device.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"but-the-attack-has-to-be-fast\">But, the attack has to be fast.</h3>\n      <a href=\"#but-the-attack-has-to-be-fast\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>For all of this to work, our MD5 collision attack had to be fast! If finding the collision takes too long, the client could time out while waiting for a response packet and the attack would fail.</p><p>Importantly, the attack cannot be precomputed. One of the inputs to the <i>Response Authenticator</i> is the <i>Request Authenticator</i> attribute, a 16-byte random nonce included in the request packet. Because the <i>Request Authenticator</i> is freshly chosen for every request, the MitM cannot predict the <i>Request Authenticator</i> without intercepting the request packet in flight.</p><p>Existing collision attacks on MD5 were too slow for realistic client timeouts; when we started our work, reported attacks took hours (or even up to a day) to find MD5 chosen-prefix collisions. So, we had to devise a new, faster attack on MD5.</p><p>To do this, our team improved <a href=\"https://github.com/cr-marcstevens/hashclash/pull/37\">existing chosen-prefix collision attacks on MD5 and optimized them for speed and space</a> (in addition to figuring out how to make our collision gibberish fit into RADIUS <i>Proxy-State</i> attributes). We demonstrated an improved attack that can run in minutes on an aging cluster of about 2000 CPU cores ranging from 7 to 10 years old, plus four newer low-end GPUs <a href=\"https://cse.ucsd.edu/\">at UCSD</a>. Less than two months after we started this project, we could <a href=\"https://www.blastradius.fail/pdf/radius.pdf\">execute the attack</a> in under five minutes, and validate (in a lab setting) that it works on popular commercial RADIUS implementations.</p><p>While many RADIUS devices (like the ones we tested in the lab) tolerate timeouts of five minutes, the default timeouts on most devices are closer to 30 or 60 seconds. Nevertheless, at this point, we had proved our attack. The attack is highly parallelizable. A sophisticated adversary would have easy access to better computing resources than we did, or could further optimize the attack using low-cost cloud compute resources, GPUs or hardware. In other words, a motivated attacker could use better computing resources to get our attack working against RADIUS devices with timeouts shorter than 5 minutes.</p><p>It was late January 2024. We had an attack that allows an attacker with MitM access to RADIUS/UDP traffic in PAP mode to gain unauthorized access to devices that use RADIUS to decide who should have administrative access to the device. We stopped our work, wrote up a <a href=\"https://www.blastradius.fail/pdf/radius.pdf\">paper</a>, and got in touch with CERT to coordinate disclosure. In response, CERT has assigned <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3596\">CVE-2024-3596</a> and <a href=\"https://kb.cert.org/vuls/id/456537\">VU#456537</a> to this vulnerability, which affects all authentication modes of RADIUS/UDP apart from those that use EAP.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"whats-next\">What’s next?</h3>\n      <a href=\"#whats-next\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>It’s never easy to update network protocols, especially protocols like RADIUS that have been widely used since the 1990s and enjoy multi-vendor support. Nevertheless, we hope this research will provide an opportunity for network operators to review the security of their RADIUS deployments, and to take advantage of patches released by many RADIUS vendors in response to our work.</p><p><b>Transitioning to RADIUS over TLS:</b> Following our work, many more vendors now offer <a href=\"https://datatracker.ietf.org/doc/html/rfc6614\">RADIUS over TLS</a> (sometimes known as RADSEC), which wraps the entire RADIUS packet payload into a TLS stream sent from RADIUS client to RADIUS server. This is the best mitigation against our attack and any new MD5 attacks that might emerge.</p><p>Before implementing this mitigation, network operators should verify that they can upgrade both their RADIUS clients and their RADIUS servers to support RADIUS over TLS. There is a risk that legacy clients that cannot be upgraded or patched would still need to speak RADIUS/UDP.</p><p><b>Patches for RADIUS/UDP.</b> There is also a new short-term mitigation for RADIUS/UDP.  In this post, we only cover mitigations for client-server deployments; see this <a href=\"https://networkradius.com/assets/pdf/radius_and_md5_collisions.pdf\">new whitepaper by Alan DeKok</a> for mitigations for more complex “multihop” RADIUS deployment that involve more parties than just a client and a server.</p><p>Earlier, we mentioned that the RADIUS specifications have a <i>Message-Authenticator</i> attribute that uses HMAC-MD5 and is optional for RADIUS/UDP modes that do not use EAP. The new mitigation involves making the <i>Message-Authenticator</i> a requirement for both request and response packets for all modes of RADIUS/UDP. The mitigation works because <i>Message-Authenticator</i> uses HMAC-MD5, which is not susceptible to our MD5 chosen-prefix collision attack.</p><p>Specifically:</p><ol><li><p>The recipient of any RADIUS/UDP packet must always require the packet to contain a <i>Message-Authenticator</i>, and must validate the HMAC-MD5 in the <i>Message-Authenticator</i>.</p></li><li><p>RADIUS servers should send the <i>Message-Authenticator</i> as the first attribute in every <i>Access-Accept</i> or <i>Access-Reject</i> response sent by the RADIUS server.</p></li></ol><p>There are a few things to watch out for when applying this patch in practice. Because RADIUS is a client-server protocol, we need to consider (a) the efficacy of the patch if it is not uniformly applied to all RADIUS clients and servers and (b) the risk of the patch breaking client-server compatibility.</p><p>Let’s first look at (a) efficacy. Patching only the client does not stop our attacks. Why? Because the mitigation requires the sender to include a <i>Message-Authenticator</i> in the packet, AND the recipient to require a <i>Message-Authenticator</i> to be present in the packet and to validate it. (In other words, both client and server have to change their behaviors.)   If the recipient does not require the <i>Message-Authenticator</i> to be present in the packet, the MitM could do a downgrade attack where it strips the <i>Message-Authenticator</i> from the packet and our attack would still work.  Meanwhile, there is some evidence (<a href=\"https://networkradius.com/assets/pdf/radius_and_md5_collisions.pdf\">see this whitepaper by Alan DeKok</a>) that patching only the server might be more effective, due to mitigation #2, sending the <i>Message-Authenticator</i> as the first attribute in the response packet.</p><p>Now let’s consider (b) the risk of breaking client-server compatibility.</p><p>Deploying the patch on clients is unlikely to break compatibility, because the RADIUS specifications have long required that RADIUS servers MUST be able to process any <i>Message-Authenticator</i> attribute sent by a RADIUS client. That said, we cannot rule out the existence of RADIUS servers that do not comply with this long-standing aspect of the specification, so we suggest testing against the RADIUS servers before patching clients.</p><p>On the other side, patching the server without breaking compatibility with legacy clients could be trickier. Commercial RADIUS servers are mostly built on one of a tiny number of implementations (like <a href=\"https://freeradius.org/\">FreeRADIUS</a>), and actively-maintained implementations should be up-to-date on mitigations. However, there is a wider set of RADIUS client implementations, some of which are legacy and difficult to patch. If an unpatched legacy client does not know how to send a <i>Message Authenticator</i> attribute, then the server cannot require it from that client without breaking backwards compatibility.</p><p>The bottom line is that for all of this to work, it is important to patch servers AND patch clients.</p><p>You can find more discussion on RADIUS/UDP mitigations in a <a href=\"https://networkradius.com/assets/pdf/radius_and_md5_collisions.pdf\">new whitepaper by Alan DeKok</a>, which also contains guidance on how to apply these mitigations to more complex “multihop” RADIUS deployments.</p><p><b>Isolating RADIUS traffic.</b> It has long been a best practice to avoid sending RADIUS/UDP or RADIUS/TCP traffic in the clear over the public Internet. On internal networks, a best practice is to isolate RADIUS traffic in a restricted-access management VLAN or to tunnel it over TLS or IPsec. This is helpful because it makes RADIUS traffic more difficult for attackers to access, so that it’s harder to execute our attack. That said, an attacker may still be able to execute our attack to accomplish a privilege escalation if a network misconfiguration or compromise allows a MitM to access RADIUS traffic. Thus, the other mitigations we mention above are valuable even if RADIUS traffic is isolated.</p><p><b>Non-mitigations.</b> While it is possible to use TCP as transport for RADIUS, RADIUS/TCP is experimental, and offers no benefit over RADIUS/UDP or RADIUS/TLS. (Confusingly, RADIUS/TCP is sometimes also called <a href=\"https://en.wikipedia.org/wiki/RadSec\">RADSEC</a>; but in this post we only use RADSEC to describe RADIUS/TLS.) We discuss other non-mitigations in our <a href=\"https://www.blastradius.fail/pdf/radius.pdf\">paper</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-side-note-about-eap-tls\">A side note about EAP-TLS</h3>\n      <a href=\"#a-side-note-about-eap-tls\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>When we were checking inside Cloudflare for internal exposure to the Blast-RADIUS attack, we found EAP-TLS used in certain office routers in our internal Wi-Fi networks. We ultimately concluded that these routers were not vulnerable to the attack. Nevertheless, we share our experience here to provide more exposition about the use of EAP (<a href=\"https://datatracker.ietf.org/doc/html/rfc3748\">Extensible Authentication Protocol</a>) and its implications for security. RADIUS uses EAP in several different modes which can be very <a href=\"https://freeradius.org/documentation/freeradius-server/4.0~alpha1/howto/modules/eap/index.html\">complicated</a> and are not the focus of this post. Still, we provide a limited sketch of <a href=\"https://www.cloudradius.com/the-stages-of-802-1x-authentication/\">EAP-TLS</a> to show how it is different from RADIUS/TLS.</p><p>First, it is important to note that even though EAP-TLS and RADIUS/TLS have similar names, the two protocols are very different.  RADIUS/TLS encapsulates RADIUS traffic in TLS (as described above).  But EAP-TLS does not; in fact, EAP-TLS sends RADIUS traffic over UDP!</p><p>EAP-TLS only uses the TLS handshake to authenticate the user; the TLS handshake is executed between the user and the RADIUS server.  However, TLS is not used to encrypt or authenticate the RADIUS packets; the RADIUS client and RADIUS still communicate in the clear over UDP.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/77YFHepvxIYqZoQuMisPC3/b0f8a1ab74d2a3233d393e4dcd7b6680/unnamed--1--2.png\" alt=\"\" class=\"kg-image\" width=\"1371\" height=\"566\" loading=\"lazy\"/>\n            \n            </figure><ol><li><p>The user initiates EAP authentication with the RADIUS client.</p></li><li><p>The RADIUS client sends a RADIUS/UDP Access Request to the RADIUS server over UDP.</p></li><li><p>The user and the Authentication Server engage in a TLS handshake. This TLS handshake may or may not be encapsulated inside RADIUS/UDP packets.</p></li><li><p>The parties may communicate further.</p></li><li><p>The RADIUS server sends the RADIUS client a RADIUS/UDP Access-Accept (or Access-Reject) packet over UDP.</p></li><li><p>The RADIUS client indicates to the user that the EAP login was successful (or not).</p></li></ol><p>As shown in the figure, with EAP-TLS the Access-Request and Access-Accept/Access-Reject are RADIUS/UDP messages. Therefore, there is a question as to whether a Blast-RADIUS attack can be executed against these RADIUS/UDP messages.</p><p>We have not demonstrated any attack against an implementation of EAP-TLS in RADIUS.</p><p>However, we cannot rule out the possibility that some EAP-TLS implementations could be vulnerable to a variant of our attack. This is due to ambiguities in the RADIUS specifications. At a high level, the issue is that:</p><ol><li><p>The RADIUS specifications require that any RADIUS/UDP packet with EAP attributes includes the HMAC-MD5 Message-Authenticator attribute, which would stop our attack.</p></li><li><p>However, what happens if a MitM attacker strips the EAP attributes from the RADIUS/UDP response packet?  If the MitM could get away with stripping out the EAP attribute, it could also get away with stripping out the <i>Message-Authenticator</i> (which is optional for non-EAP modes of RADIUS/UDP), and a variant of the Blast-RADIUS attack might work. The ambiguity follows because the specifications are unclear on what the RADIUS client should do if it sent a request with an EAP attribute but got back a response without an EAP attribute and without a Message-Authenticator. See more details and specific quotes from the specifications in our <a href=\"https://www.blastradius.fail/pdf/radius.pdf\">paper</a>.</p></li></ol><p>Therefore, we emphasize that the recommended mitigation is RADIUS/TLS (also called RADSEC), which is different from EAP-TLS.</p><p>As a final note, we mentioned that the Cloudflare’s office routers that were using EAP-TLS were not vulnerable to the Blast-RADIUS attack. This is because these routers were set to run with local authentication, where both the RADIUS client and the RADIUS server are confined inside the router (thus preventing a MitM from gaining access to the traffic sent between RADIUS client and RADIUS server, preventing our attack). Nevertheless, we should note that this vendor’s routers have many settings, some of which involve using an external RADIUS server. Fortunately, this vendor is one of many that have recently released support for RADIUS/TLS (also called RADSEC).</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"work-in-the-ietf\">Work in the IETF</h3>\n      <a href=\"#work-in-the-ietf\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The IETF is an important venue for standardizing network protocols like RADIUS. The <a href=\"https://datatracker.ietf.org/wg/radext/about/\">IETF’s radext working group</a> is currently considering an initiative to <a href=\"https://datatracker.ietf.org/doc/draft-ietf-radext-deprecating-radius/\">deprecate RADIUS/UDP</a> and create a “standards track” specification of <a href=\"https://datatracker.ietf.org/doc/draft-ietf-radext-radiusdtls-bis/01/\">RADIUS over TLS or DTLS</a>, that should help accelerate the deployment of RADIUS/TLS in the field. We hope that our work will accelerate the community’s ongoing efforts to secure RADIUS and reduce its reliance on MD5.</p>",
		"id": "48Euekkrb6ge4LqbNE9TsI",
		"localeList": {
			"name": "RADIUS/UDP vulnerable to improved MD5 collision attack Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "The RADIUS protocol is commonly used to control administrative access to networking gear. Despite its importance, RADIUS hasn’t changed much in decades. We discuss an attack on RADIUS as a case study for why it’s important for legacy protocols to keep up with advancements in cryptography.",
		"metadata": {
			"title": "RADIUS/UDP vulnerable to improved MD5 collision attack",
			"description": "The RADIUS protocol is commonly used to control administrative access to networking gear. Despite its importance, RADIUS hasn’t changed much in decades. We discuss an attack on RADIUS as a case study for why it’s important for legacy protocols to keep up with advancements in cryptography.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6f5UjwVH7XAmWQ6KeCFgyZ/e09d5329c58018cd24b3758a65fbf92f/radius-udp-vulnerable-md5-attack-KfYln9.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2024-07-09T13:00:59.000+01:00",
		"slug": "radius-udp-vulnerable-md5-attack",
		"tags": [
			{
				"id": "2pFyOCtANFB5qS6nbtQbVp",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities"
			}
		],
		"title": "RADIUS/UDP vulnerable to improved MD5 collision attack",
		"updated_at": "2025-10-24T10:01:33.217Z",
		"url": "https://blog.cloudflare.com/radius-udp-vulnerable-md5-attack"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}