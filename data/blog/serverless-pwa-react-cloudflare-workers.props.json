{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Sevki Hasirci",
				"slug": "sevki",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/kaOBCzRpCM06xaZBTgI9Z/39cf6cd9931f422963ae70333054976c/sevki.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "The story of how I learned that you can build Progressive Web Apps on the Cloudflare’s Edge.",
		"feature_image": "https:undefined",
		"featured": false,
		"html": "<p>Let me tell you the story of how I learned that you can build Progressive Web Apps on Cloudflare’s network around the globe with one JavaScript bundle that runs both in the browser and on Cloudflare Workers with <i>no modification</i> and <i>no separate bundling</i> for client and server. And when registered as a Service Worker, the same JavaScript bundle will turn your page into a Progressive Web App that doesn’t even make network requests. Here&#39;s how that works...</p><blockquote><p>&quot;Any resemblance to actual startups, living or IPO&#39;d, is purely coincidental and unintended&quot; - @sevki</p></blockquote>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"a-possibly-apocryphal-story\">A (possibly apocryphal) Story</h3>\n            <a href=\"#a-possibly-apocryphal-story\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>I recently met up with some old friends in London who told me they were starting a new business. They did what every coder would do... they quickly hacked something together, bought a domain, and registered the GitHub org and thus Buzzwords was born.</p><p>The idea was simple: you could feed the name of your application into a machine learning model and it would generate the configuration files for your deployment for various container orchestrators. They achieved this by going through millions of deployment configurations and training a linear regression model by gamifying quantum computing because blockchain, or something (I told you this story was apocryphal).</p><p>I was intrigued, to say the least, but I was playing it cool. One of the co-founders broke the silence, &quot;So, does any of these sound like something you&#39;d like to work on?&quot; I struggled with it for tens of seconds. You see I only recently started this new job at Cloudflare, and I actually like my job and the people I work with. So I said, &quot;Hell yeah, man, let&#39;s change the world one container at a time&quot;. One of them said, &quot;Well, since we really can’t pay you right now, and we don&#39;t seem to be able to set aside enough time to build our website, would you mind helping us out with that on a trial basis, like an interview?&quot; I enthusiastically accepted.</p><p>So while the Buzzwords crew were busy producing HYPE, I set off to build their website. As any business starting up, discover-ability is paramount to them, so Buzzwords definitely needs to be optimized for search engines so they can generate organic traffic from keywords like &quot;machine learning&quot;, &quot;YAML&quot;, &quot;containers&quot; and &quot;blockchain&quot;.</p><p>When parsing dynamic pages, crawlers need to do more work, there is an inherent penalty for using fancy frameworks compared to plain old HTML.</p><p>Don’t take my word for it, as Google <a href=\"https://developers.google.com/search/docs/guides/dynamic-rendering\">cautions</a>;</p><blockquote><p>Currently, it&#39;s difficult to process JavaScript and not all search engine crawlers are able to process it successfully or immediately. In the future, we hope that this problem can be fixed, but in the meantime, we recommend dynamic rendering as a workaround solution to this problem.</p></blockquote><p>Yet, the Buzzwords folks still wanted something fancy I told them about this new thing called <a href=\"https://reactjs.org/docs/hooks-overview.html\">React hooks</a>. I slammed a La Croix and put together the 2018 equivalent of <i>Hello, World!</i> which is still <i>Hello, World!</i> but with an ? at the end.</p>\n            <pre class=\"language-jsx\"><code class=\"language-jsx\">import React from &quot;react&quot;;\nimport ReactDOMServer from &quot;react-dom/server&quot;;\n\nclass HelloMessage extends React.Component {\n  render() {\n    return &lt;div&gt;Hello, {this.props.name} ?&lt;/div&gt;;\n  }\n}\n\nasync function handleRequest(event) {\n  return new Response(ReactDOMServer.renderToString(&lt;HelloMessage name=&quot;World&quot; /&gt;), {\n    headers: {\n      &quot;Content-Type&quot;: &quot;text/html&quot;\n    }\n  });\n}\n\nself.addEventListener(&quot;fetch&quot;, event =&gt; {\n  event.respondWith(handleRequest(event));\n});\n</pre></code>\n            <p>Other than setting up Webpack to bundle your code, this is pretty much all you need to get started with React and Cloudflare Workers. But <i>Hello, World!</i> is hardly a startup website. Thankfully, since all startup websites look exactly the same it&#39;s really not that hard to build one. First, I mapped the paths to pages:</p>\n            <pre class=\"language-jsx\"><code class=\"language-jsx\">let routes = {\n  &quot;/&quot;: &lt;Home /&gt;,\n  &quot;/hype&quot;: &lt;Hype /&gt;,\n  &quot;/careers&quot;: &lt;Careers /&gt;\n};</pre></code>\n            <p>Instead of rendering any old component, I just used the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\">URL</a>&#39;s <code>pathname</code>, available both in the browser and the edge, to pick the correct component.</p>\n            <pre class=\"language-jsx\"><code class=\"language-jsx\">const header = `&lt;!DOCTYPE html&gt; &lt;!-- ... --&gt;`;\nconst footer = `&lt;/html&gt; &lt;!-- ... --&gt;`;\nasync function handleRequest(event) {\n     const u = new URL(event.request.url);\n    let body = ReactDOMServer.renderToString(React.cloneElement(routes[u.pathname], {name:&quot;World&quot;} ));\n    return new Response(header + body + footer, {\n        headers: {\n            &quot;Content-Type&quot;: &quot;text/html&quot;\n        }\n    });\n}</pre></code>\n            <p>But what good is it to use React when you just render HTML and nothing is interactive anymore? Unfortunately, we can’t use React.render to make it interactive again, thankfully React.hydrate allows us to continue rendering applications where they left off at the server, instead of re-rendering everything from scratch.</p><p>Going back to <i>Hello, World!</i> if we don&#39;t give it the same state, it will not print anything after <i>Hello</i>. So, all I had to do was add these three lines.</p>\n            <pre class=\"language-jsx\"><code class=\"language-jsx\">if (typeof navigator !== &quot;undefined&quot;) {\n\tconst app = document.querySelector(&quot;#app&quot;);\n\tReactDOM.hydrate(React.cloneElement(routes[location.pathname], {name:&quot;World&quot;} ), app);\n}</pre></code>\n            <p>One of the co-founders was very quick to pick up on the fact that I was using the same routes table for both rendering and hydrating. &quot;That&#39;s because I used the same exact bundle&quot; I explained, &quot;because Cloudflare Workers use the same Web APIs that are available in the browser. There is no need to compile different versions of the same logic and split things into <code>server.js</code> and <code>client.js</code>. <code>fetch</code> is <code>fetch</code> and that&#39;s that. No polyfills.&quot; I added from my high horse.</p><p>They still felt that this wasn’t buzzwordy enough. So I asked them if they&#39;ve heard of Progressive Web Apps, they stared back with a blank look on their face, I proceeded to explain.</p><p>&quot;It&#39;s the name given to a set of standard web technologies, which helps you build native-feeling applications using Service Workers, JavaScript and WASM&quot;</p><p>&quot;Oh cool! So it&#39;s like an Electron app!&quot; one of the co-founders grunted.</p><p>&quot;NO! STOP TRYING TO MAKE EVERYTHING BUZZWORDY!&quot; I whispered before I proceeded to explain PWAs are. Progressive Web Apps once installed, gives extra functionality to your app that make it act and feel like a native application. For instance, PWAs can receive notifications, work offline and do work in the background without blocking UI changes. The underlying technology is supported by <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps/get-started\">Microsoft</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Apps/Progressive\">Google</a>, <a href=\"https://webkit.org/status/#specification-service-workers\">Apple</a>, Samsung, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Apps/Progressive\">Mozilla</a> and Cloudflare. Not only that but, any PWA you build on Workers can be submitted to <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/progressive-web-apps/microsoft-store\">Microsoft&#39;s App Store</a> and then installed on a Windows desktop, or added to your phone’s home screen, or a Chrome desktop, and it will then run as a standalone app. I copy and pasted a code snippet from the <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\">Google Web Fundamentals Blog</a> to register a Service Worker. (Great thing about sharing APIs is sharing documentation too!)</p>\n            <pre class=\"language-jsx\"><code class=\"language-jsx\">if (typeof navigator !== &quot;undefined&quot;) { // if (pid != 0)\n  window.addEventListener(&quot;load&quot;, function() {\n    const app = document.querySelector(&quot;#app&quot;);\n    ReactDOM.hydrate(React.cloneElement(routes[location.pathname], {name:&quot;World&quot;}), app);\n    if (&quot;serviceWorker&quot; in navigator) {\n      navigator.serviceWorker.register(&quot;/worker.js&quot;).then(\n        function(registration) {\n          // Registration was successful\n          console.log(\n            &quot;ServiceWorker registration successful with scope: &quot;,\n            registration.scope\n          );\n        },\n        function(err) {\n          // registration failed :(\n          console.log(&quot;ServiceWorker registration failed: &quot;, err);\n        }\n      );\n    }\n  });\n}</pre></code>\n            <p>Thus the same code that hijacks fetches on Cloudflare Workers will do so on browsers too using the same exact <code>ReactDOMServer.renderToString</code> function to render the page offline.</p>\n            <pre class=\"language-js\"><code class=\"language-js\">async function handleRequest(event) {\n  const u = new URL(event.request.url);\n  if (u.pathname in routes) {\n    let rendered = ReactDOMServer.renderToString(React.cloneElement(routes[u.pathname],{name:&quot;World&quot;}));\n    return new Response(header + rendered + footer, {\n      headers: {\n        &quot;Content-Type&quot;: &quot;text/html&quot;\n      }\n    });\n  }\n  return  fetch(event.request);\n}  </pre></code>\n            <p>Then I pulled up the network tab and reloaded the page:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4EEipczCnsXYR4G4tzTbqs/af61e885ec97d28f34dc88570ced5557/networktab.png\" alt=\"\" class=\"kg-image\" width=\"826\" height=\"282\" loading=\"lazy\"/>\n            \n            </figure><p>I continued to explain: every request except for the buzzwords.app request is repeated. That&#39;s because a Service Worker basically acts as a proxy, grabbing requests preventing the browser default load behaviour, allowing you to define how a request should be fetched. Since the first thing we have done was to add a call back for the fetch event (both on Cloudflare Workers, and Service Workers) it will call that function for each fetch event. “But wait there&#39;s more!”, I should have exclaimed, but I didn&#39;t. But they knew what was up, they could tell by how intensely I was staring at the code.  </p><p>As my <i>pièce de résistance</i> I searched for <a href=\"/cache-api-for-cloudflare-workers-is-now-in-beta/\">Cloudflare Workers Cache</a>, and copy and pasted some more code. Which made the handleRequest function look like this:</p>\n            <pre class=\"language-jsx\"><code class=\"language-jsx\">async function handleRequest(event) {\n  const u = new URL(event.request.url);\n  if (u.pathname in routes) {\n    let rendered = ReactDOMServer.renderToString(React.cloneElement(routes[u.pathname],{name:&quot;World&quot;}));\n    return new Response(header + rendered + footer, {\n      headers: {\n        &quot;Content-Type&quot;: &quot;text/html&quot;\n      }\n    });\n  }\n  let cache = await caches.open(&quot;buzz&quot;);\n  let response = await cache.match(event.request);\n  if (!response) {\n    response = await fetch(event.request);\n    event.waitUntil(cache.put(event.request, response.clone()));\n  }\n  return response;\n}</pre></code>\n            <p>This code works both on Cloudflare Workers and for Service Workers. If the page requested is not available on the Worker, it will check the cache, if it&#39;s not available in the cache, it will fetch it from the origin, making not only the code but also the behaviours truly isomorphic.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6ctZ9ye3RDUd6gQUuD62XX/3ecd703851c1d90dceb256b45dfc5a91/networktab-2.png\" alt=\"\" class=\"kg-image\" width=\"823\" height=\"173\" loading=\"lazy\"/>\n            \n            </figure><p>I pulled up the network tab again, reloaded the page and showed them all the repeated requests had now disappeared. I then turned off the WiFi and hit reload to show that the application was in fact still working offline.</p><p>Folks, this is not HYPE, this is more, using this technique you can build applications that run exactly the same on the server, as they do in the browser. If the browser has support, it will work offline and will not cost you a single dime more when it’s online, if the browser doesn’t support it, or even if JavaScript is disabled, it will still render. And you can take the same application and submit them to Microsoft&#39;s App Store, install them as standalone applications on your Android phone or Chromebook. All without having to write a single line more than you would have to build a web page.</p><p>All the code from this blog post is available on the Cloudflare GitHub.</p><p>If you just want to use React to do static page rendering on Cloudflare Workers you can clone <a href=\"https://github.com/cloudflare/workers-react-example\">https://github.com/cloudflare/workers-react-example</a> and do <code>cd workers &amp;&amp; yarn install &amp;&amp; yarn preview</code> to get your page rendering on cloudflareworkers.com instantly</p><p>If you want the full Progressive Web App experience you can clone <a href=\"https://github.com/cloudflare/workers-react-pwa-example\">https://github.com/cloudflare/workers-react-pwa-example</a> and set up terraform variables to upload your Worker script to both Cloudflare and a storage bucket to start building your application in a couple of minutes.</p><p>Please let us know if you build on this, we&#39;d love to know what you do with it.</p>",
		"id": "3J5h5jb5xdvQm8zwGUYvpW",
		"localeList": {
			"name": "Serverless Progressive Web Apps using React with Cloudflare Workers Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-11-23T13:29:35.000+00:00",
		"slug": "serverless-pwa-react-cloudflare-workers",
		"tags": [
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			}
		],
		"title": "Serverless Progressive Web Apps using React with Cloudflare Workers",
		"updated_at": "2024-10-10T00:32:41.702Z",
		"url": "https://blog.cloudflare.com/serverless-pwa-react-cloudflare-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}