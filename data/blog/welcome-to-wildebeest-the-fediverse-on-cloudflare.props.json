{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "13",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"zh-tw"
	],
	"post": {
		"authors": [
			{
				"name": "Celso Martinho",
				"slug": "celso",
				"bio": "From when Mosaic took over Gopher. Engineering Director at Cloudflare.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pzgat1zmt1oF1byi7hskH/7b25e8e00117ee44afe36ad27d7d8032/celso.png",
				"location": "Portugal, Lisbon",
				"website": "https://celso.io/",
				"twitter": "@celso",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Sven Sauleau",
				"slug": "sven",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4AvybzTkWLlF4cdTgLrE3q/0d45d87578c7668f3d62e49095bb4409/sven.jpg",
				"location": null,
				"website": null,
				"twitter": "@svensauleau",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Today we're announcing Wildebeest, an open-source, easy-to-deploy ActivityPub and Mastodon-compatible server built entirely on top of Cloudflare's Supercloud.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1n5Iwpm31bsuCZynzG4JJ5/7821fc837a6929fc8c1df3b86f7f18b9/welcome-to-wildebeest-the-fediverse-on-cloudflare.png",
		"featured": false,
		"html": "<p></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5BbRRixkMxcIiNYgdA9go/f2d1e27e932958951271d36ccffa2c16/Wildebeest.png\" alt=\"Welcome to Wildebeest: the Fediverse on Cloudflare\" class=\"kg-image\" width=\"1600\" height=\"900\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://en.wikipedia.org/wiki/Fediverse\">The Fediverse</a> has been a hot topic of discussion lately, with thousands, if not <a href=\"https://bitcoinhackers.org/@mastodonusercount\">millions</a>, of new users creating accounts on platforms like <a href=\"https://joinmastodon.org/\">Mastodon</a> to either move entirely to &quot;the other side&quot; or experiment and learn about this new social network.</p><p>Today we&#39;re introducing <a href=\"https://github.com/cloudflare/wildebeest\">Wildebeest</a>, an open-source, easy-to-deploy ActivityPub and Mastodon-compatible server built entirely on top of Cloudflare&#39;s Supercloud. If you want to run your own spot in the Fediverse you can now do it entirely on Cloudflare.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"the-fediverse-built-on-cloudflare\">The Fediverse, built on Cloudflare</h2>\n      <a href=\"#the-fediverse-built-on-cloudflare\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Today you&#39;re left with two options if you want to join the Mastodon federated network: either you join one of the <a href=\"https://joinmastodon.org/servers\">existing servers</a> (servers are also called communities, and each one has its own infrastructure and rules), or you can run your self-hosted server.</p><p>There are a few reasons why you&#39;d want to run your own server:</p><ul><li><p>You want to create a new community and attract other users over a common theme and usage rules.</p></li><li><p>You don&#39;t want to have to trust third-party servers or abide by their policies and want your server, under your domain, for your personal account.</p></li><li><p>You want complete control over your data, personal information, and content and visibility over what happens with your instance.</p></li></ul><p>The Mastodon gGmbH non-profit organization provides a server implementation using Ruby, Node.js, PostgreSQL and Redis. Running the <a href=\"https://github.com/mastodon/mastodon\">official server</a> can be challenging, though. You need to own or rent a server or VPS somewhere; you have to install and configure the software, set up the database and public-facing web server, and configure and protect your network against attacks or abuse. And then you have to maintain all of that and deal with constant updates. It&#39;s a lot of scripting and technical work before you can get it up and running; definitely not something for the less technical enthusiasts.</p><p>Wildebeest serves two purposes: you can quickly deploy your Mastodon-compatible server on top of Cloudflare and connect it to the Fediverse in minutes, and you don&#39;t need to worry about maintaining or protecting it from abuse or attacks; Cloudflare will do it for you automatically.</p><p>Wildebeest is not a managed service. It&#39;s your instance, data, and code running in our cloud under your Cloudflare account. Furthermore, it&#39;s <a href=\"https://github.com/cloudflare/wildebeest\">open-sourced</a>, which means it keeps evolving with more features, and anyone can <a href=\"https://github.com/cloudflare/wildebeest/pulls\">extend</a> and improve it.</p><p>Here&#39;s what we support today:</p><ul><li><p><a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a>, <a href=\"https://www.rfc-editor.org/rfc/rfc7033\">WebFinger</a>, <a href=\"https://github.com/cloudflare/wildebeest/tree/main/functions/nodeinfo\">NodeInfo</a>, <a href=\"https://datatracker.ietf.org/doc/html/rfc8030\">WebPush</a> and <a href=\"https://docs.joinmastodon.org/api/\">Mastodon-compatible</a> APIs. Wildebeest can connect to or receive connections from other Fediverse servers.</p></li><li><p>Compatible with the most popular Mastodon <a href=\"https://github.com/nolanlawson/pinafore\">web</a> (like <a href=\"https://github.com/nolanlawson/pinafore\">Pinafore</a>), desktop, and <a href=\"https://joinmastodon.org/apps\">mobile clients</a>. We also provide a simple read-only web interface to explore the timelines and user profiles.</p></li><li><p>You can publish, edit, boost, or delete posts, sorry, toots. We support text, images, and (soon) video.</p></li><li><p>Anyone can follow you; you can follow anyone.</p></li><li><p>You can search for content.</p></li><li><p>You can register one or multiple accounts under your instance. Authentication can be email-based on or using any Cloudflare Access compatible IdP, like GitHub or Google.</p></li><li><p>You can edit your profile information, avatar, and header image.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"how-we-built-it\">How we built it</h2>\n      <a href=\"#how-we-built-it\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our implementation is built entirely on top of our <a href=\"https://www.cloudflare.com/cloudflare-product-portfolio/\">products</a> and <a href=\"https://developers.cloudflare.com/\">APIs</a>. Building Wildebeest was another excellent opportunity to showcase our technology stack&#39;s power and versatility and prove how anyone can also use Cloudflare to build larger applications that involve multiple systems and complex requirements.</p><p>Here&#39;s a birds-eye diagram of Wildebeest&#39;s architecture:</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/33R5UHXYSBDBUsoFLMkoC8/0304880c93af0a41d168616da4c73b90/Screenshot-2023-02-08-at-10.58.01-AM.png\" alt=\"\" class=\"kg-image\" width=\"1464\" height=\"1016\" loading=\"lazy\"/>\n            \n            </figure><p>Let&#39;s get into the details and get technical now.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"cloudflare-pages\">Cloudflare Pages</h3>\n      <a href=\"#cloudflare-pages\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>At the core, Wildebeest is a <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a> project running its code using <a href=\"https://developers.cloudflare.com/pages/platform/functions/\">Pages Functions</a>. Cloudflare Pages provides an excellent foundation for building and deploying your application and serving your bundled assets, Functions gives you full access to the Workers ecosystem, where you can run any code.</p><p>Functions has a built-in <a href=\"https://developers.cloudflare.com/pages/platform/functions/routing/\">file-based router</a>. The <a href=\"https://github.com/cloudflare/wildebeest/tree/main/functions\">/functions</a> directory structure, which is uploaded by Wildebeest’s continuous deployment builds, defines your application routes and what files and code will process each HTTP endpoint request. This routing technique is similar to what other frameworks like Next.js <a href=\"https://nextjs.org/docs/routing/introduction\">use</a>.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5NsNlFYtyqKVzhFFBuGeRW/767c9b102b9d97ad067c343df387c5db/2b.png\" alt=\"\" class=\"kg-image\" width=\"1558\" height=\"706\" loading=\"lazy\"/>\n            \n            </figure><p>For example, Mastodon’s <a href=\"https://docs.joinmastodon.org/methods/timelines/#public\">/api/v1/timelines/public</a> API endpoint is handled by <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/api/v1/timelines/public.ts\">/functions/api/v1/timelines/public.ts</a> with the onRequest method.</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export onRequest = async ({ request, env }) =&gt; {\n\tconst { searchParams } = new URL(request.url)\n\tconst domain = new URL(request.url).hostname\n...\n\treturn handleRequest(domain, env.DATABASE, {})\n}\n\nexport async function handleRequest(\n    …\n): Promise&lt;Response&gt; {\n    …\n}\n</pre></code>\n            <p>Unit testing these endpoints becomes easier too, since we only have to call the handleRequest() function from the testing framework. Check one of our <a href=\"https://jestjs.io/\">Jest</a> tests, <a href=\"https://github.com/cloudflare/wildebeest/blob/main/backend/test/mastodon.spec.ts\">mastodon.spec.ts</a>:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">import * as v1_instance from &#039;wildebeest/functions/api/v1/instance&#039;\n\ndescribe(&#039;Mastodon APIs&#039;, () =&gt; {\n\tdescribe(&#039;instance&#039;, () =&gt; {\n\t\ttest(&#039;return the instance infos v1&#039;, async () =&gt; {\n\t\t\tconst res = await v1_instance.handleRequest(domain, env)\n\t\t\tassert.equal(res.status, 200)\n\t\t\tassertCORS(res)\n\n\t\t\tconst data = await res.json&lt;Data&gt;()\n\t\t\tassert.equal(data.rules.length, 0)\n\t\t\tassert(data.version.includes(&#039;Wildebeest&#039;))\n\t\t})\n       })\n})\n</pre></code>\n            <p>As with any other regular Worker, Functions also lets you set up <a href=\"https://developers.cloudflare.com/pages/platform/functions/bindings/\">bindings</a> to interact with other Cloudflare products and features like <a href=\"https://developers.cloudflare.com/workers/runtime-apis/kv/\">KV</a>, <a href=\"https://developers.cloudflare.com/r2/data-access/workers-api/workers-api-reference/\">R2</a>, <a href=\"https://developers.cloudflare.com/d1/\">D1</a>, <a href=\"https://developers.cloudflare.com/workers/runtime-apis/durable-objects/\">Durable Objects</a>, and more. The list keeps growing.</p><p>We use Functions to implement a large portion of the official <a href=\"https://docs.joinmastodon.org/api/\">Mastodon API</a> specification, making Wildebeest compatible with the existing ecosystem of other servers and client applications, and also to run our own read-only web frontend under the same project codebase.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/Wz8EZKQyMvyEfDvH7cOV9/02183c976fe7c619c2fc4f8e99795463/3b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"824\" loading=\"lazy\"/>\n            \n            </figure><p>Wildebeest’s web frontend uses <a href=\"https://qwik.builder.io/\">Qwik</a>, a general-purpose web framework that is optimized for speed, uses modern concepts like the JSX JavaScript syntax extension and supports server-side-rendering (SSR) and static site generation (SSG).</p><p>Qwik provides a <a href=\"https://qwik.builder.io/integrations/deployments/cloudflare-pages/\">Cloudflare Pages Adaptor</a> out of the box, so we use that (check our <a href=\"https://developers.cloudflare.com/pages/framework-guides/deploy-a-qwik-site/\">framework guide</a> to know more about how to deploy a Qwik site on Cloudflare Pages). For styling we use the <a href=\"https://tailwindcss.com/\">Tailwind CSS</a> framework, which Qwik supports natively.</p><p>Our frontend website code and static assets can be found under the <a href=\"https://github.com/cloudflare/wildebeest/tree/main/frontend\">/frontend</a> directory. The application is handled by the <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/%5B%5Bpath%5D%5D.ts\">/functions/[[path]].js</a> dynamic route, which basically catches all the non-API requests, and then <a href=\"https://github.com/cloudflare/wildebeest/blob/main/frontend/src/entry.cloudflare-pages.tsx\">invokes</a> Qwik’s own internal router, <a href=\"https://qwik.builder.io/qwikcity/routing/overview/\">Qwik City</a>, which takes over everything else after that.</p><p>The power and versatility of Pages and Functions routes make it possible to run both the backend APIs and a server-side-rendered dynamic client, effectively a full-stack app, under the same project.</p><p>Let&#39;s dig even deeper now, and understand how the server interacts with the other components in our architecture.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"d1\">D1</h3>\n      <a href=\"#d1\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Wildebeest uses <a href=\"https://developers.cloudflare.com/d1/\">D1</a>, Cloudflare’s first SQL database for the Workers platform built on top of SQLite, now open to everyone in <a href=\"/d1-open-alpha/\">alpha</a>, to store and query data. Here’s our schema:</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/67Xq9kbn6qh2XgRveGSdHt/3a020d6c71a89f0020b8fb7e87433601/4b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"1163\" loading=\"lazy\"/>\n            \n            </figure><p>The schema will probably change in the future, as we add more features. That’s fine, D1 supports <a href=\"https://developers.cloudflare.com/d1/platform/migrations/\">migrations</a> which are great when you need to update your database schema without losing your data. With each new Wildebeest version, we can create a <a href=\"https://github.com/cloudflare/wildebeest/blob/main/migrations/0001_add-unique-following.sql\">new migration</a> file if it requires database schema changes.</p>\n            <pre class=\"language-sql\"><code class=\"language-sql\">-- Migration number: 0001 \t 2023-01-16T13:09:04.033Z\n\nCREATE UNIQUE INDEX unique_actor_following ON actor_following (actor_id, target_actor_id);\n</pre></code>\n            <p>D1 exposes a powerful <a href=\"https://developers.cloudflare.com/d1/platform/client-api/\">client API</a> that developers can use to manipulate and query data from Worker scripts, or in our case, Pages Functions.</p><p>Here’s a simplified example of how we interact with D1 when you start following someone on the Fediverse:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export async function addFollowing(db, actor, target, targetAcct): Promise&lt;UUID&gt; {\n\tconst query = `INSERT OR IGNORE INTO actor_following (id, actor_id, target_actor_id, state, target_actor_acct) VALUES (?, ?, ?, ?, ?)`\n\tconst out = await db\n\t\t.prepare(query)\n\t\t.bind(id, actor.id.toString(), target.id.toString(), STATE_PENDING, targetAcct)\n\t\t.run()\n\treturn id\n}\n</pre></code>\n            <p>Cloudflare’s culture of dogfooding and building on top of our own products means that we sometimes experience their shortcomings before our users. We did face a few challenges using D1, which is built on SQLite, to store our data. Here are two examples.</p><p><a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a> uses <a href=\"https://www.rfc-editor.org/rfc/rfc4122.txt\">UUIDs</a> to identify objects and reference them in URIs extensively. These objects need to be stored in the database. Other databases like PostgreSQL provide built-in functions to <a href=\"https://www.postgresql.org/docs/current/functions-uuid.html\">generate unique identifiers</a>. SQLite and D1 don&#39;t have that, yet, it’s in our roadmap.</p><p>Worry not though, the Workers runtime supports <a href=\"https://developers.cloudflare.com/workers/runtime-apis/web-crypto/\">Web Crypto</a>, so we use crypto.randomUUID() to get our unique identifiers. Check the <a href=\"https://github.com/cloudflare/wildebeest/blob/main/backend/src/activitypub/actors/inbox.ts\">/backend/src/activitypub/actors/inbox.ts</a>:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export async function addObjectInInbox(db, actor, obj) {\n\tconst id = crypto.randomUUID()\n\tconst out = await db\n\t\t.prepare(&#039;INSERT INTO inbox_objects(id, actor_id, object_id) VALUES(?, ?, ?)&#039;)\n\t\t.bind(id, actor.id.toString(), obj.id.toString())\n\t\t.run()\n}</pre></code>\n            <p>Problem solved.</p><p>The other example is that we need to store dates with sub-second resolution. Again, databases like PostgreSQL have that:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">psql&gt; select now();\n2023-02-01 11:45:17.425563+00</pre></code>\n            <p>However SQLite falls short with:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sqlite&gt; select datetime();\n2023-02-01 11:44:02</pre></code>\n            <p>We worked around this problem with a small hack using <a href=\"https://www.sqlite.org/lang_datefunc.html\">strftime()</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sqlite&gt; select strftime(&#039;%Y-%m-%d %H:%M:%f&#039;, &#039;NOW&#039;);\n2023-02-01 11:49:35.624</pre></code>\n            <p>See our <a href=\"https://github.com/cloudflare/wildebeest/blob/main/migrations/0000_initial.sql\">initial SQL schema</a>, look for the <i>cdate</i> defaults.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"images\">Images</h3>\n      <a href=\"#images\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Mastodon content has a lot of rich media. We don&#39;t need to reinvent the wheel and build an image pipeline; Cloudflare Images <a href=\"https://developers.cloudflare.com/images/\">provides APIs</a> to upload, transform, and serve optimized images from our global CDN, so it&#39;s the perfect fit for Wildebeest&#39;s requirements.</p><p>Things like posting content images, the profile avatar, or headers, all use the Images APIs. See <a href=\"https://github.com/cloudflare/wildebeest/blob/main/backend/src/media/image.ts\">/backend/src/media/image.ts</a> to understand how we interface with Images.</p>\n            <pre class=\"language-js\"><code class=\"language-js\">async function upload(file: File, config: Config): Promise&lt;UploadResult&gt; {\n\tconst formData = new FormData()\n\tconst url = `https://api.cloudflare.com/client/v4/accounts/${config.accountId}/images/v1`\n\n\tformData.set(&#039;file&#039;, file)\n\n\tconst res = await fetch(url, {\n\t\tmethod: &#039;POST&#039;,\n\t\tbody: formData,\n\t\theaders: {\n\t\t\tauthorization: &#039;Bearer &#039; + config.apiToken,\n\t\t},\n\t})\n\n      const data = await res.json()\n\treturn data.result\n}</pre></code>\n            <p>If you&#39;re curious about Images for your next project, here&#39;s a tutorial on <a href=\"https://developers.cloudflare.com/images/cloudflare-images/tutorials/integrate-cloudflare-images/\">how to integrate Cloudflare Images</a> on your website.</p><p>Cloudflare Images is also available from the dashboard. You can use it to browse or manage your catalog quickly.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1A4gwBFdbSGDvS4DAJRyhR/95849178c4b10c82d5f619ffc1153ba0/5b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"1170\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"queues\">Queues</h3>\n      <a href=\"#queues\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The <a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a> protocol is chatty by design. Depending on the size of your social graph, there might be a lot of back-and-forth HTTP traffic. We can’t have the clients blocked waiting for hundreds of Fediverse message deliveries every time someone posts something.</p><p>We needed a way to work asynchronously and launch background jobs to offload data processing away from the main app and keep the clients snappy. The official Mastodon server has a similar strategy using <a href=\"https://docs.joinmastodon.org/admin/scaling/#sidekiq\">Sidekiq</a> to do background processing.</p><p>Fortunately, we don&#39;t need to worry about any of this complexity either. <a href=\"https://developers.cloudflare.com/queues/\">Cloudflare Queues</a> allows developers to send and receive messages with guaranteed delivery, and offload work from your Workers&#39; requests, effectively providing you with asynchronous batch job capabilities.</p><p>To put it simply, you have a queue topic identifier, which is basically a buffered list that scales automatically, then you have one or more producers that, well, produce structured messages, JSON objects in our case, and put them in the queue (you define their schema), and finally you have one or more consumers that subscribes that queue, receive its messages and process them, at their own speed.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5m1TSSTZesMX1jt7K7YpHS/c192aa543426e12c03b2c753f4e4b8c4/6b.png\" alt=\"\" class=\"kg-image\" width=\"1432\" height=\"390\" loading=\"lazy\"/>\n            \n            </figure><p>Here’s the <a href=\"https://developers.cloudflare.com/queues/learning/how-queues-works/\">How Queues works</a> page for more information.</p><p>In our case, the main application produces queue jobs whenever any incoming API call requires long, expensive operations. For example, when someone posts, sorry, <i>toots</i> something, we need to broadcast that to their followers&#39; inboxes, potentially triggering many requests to remote servers. <a href=\"https://github.com/cloudflare/wildebeest/blob/main/backend/src/activitypub/deliver.ts\">Here we are</a> queueing a job for that, thus freeing the APIs to keep responding:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export async function deliverFollowers(\n\tdb: D1Database,\n\tfrom: Actor,\n\tactivity: Activity,\n\tqueue: Queue\n) {\n\tconst followers = await getFollowers(db, from)\n\n\tconst messages = followers.map((id) =&gt; {\n\t\tconst body = {\n\t\t\tactivity: JSON.parse(JSON.stringify(activity)),\n\t\t\tactorId: from.id.toString(),\n\t\t\ttoActorId: id,\n\t\t}\n\t\treturn { body }\n\t})\n\n\tawait queue.sendBatch(messages)\n}</pre></code>\n            <p>Similarly, we don&#39;t want to stop the main APIs when remote servers deliver messages to our instance inboxes. Here&#39;s Wildebeest creating asynchronous jobs when it <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/ap/users/%5Bid%5D/inbox.ts\">receives messages</a> in the inbox:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export async function handleRequest(\n\tdomain: string,\n\tdb: D1Database,\n\tid: string,\n\tactivity: Activity,\n\tqueue: Queue,\n): Promise&lt;Response&gt; {\n\tconst handle = parseHandle(id)\n\n\tconst actorId = actorURL(domain, handle.localPart)\nconst actor = await actors.getPersonById(db, actorId)\n\n      // creates job\n\tawait queue.send({\n\t\ttype: MessageType.Inbox,\n\t\tactorId: actor.id.toString(),\n\t\tactivity,\n\t})\n\n\t// frees the API\n\treturn new Response(&#039;&#039;, { status: 200 })\n}</pre></code>\n            <p>And the final piece of the puzzle, our <a href=\"https://github.com/cloudflare/wildebeest/tree/main/consumer\">queue consumer</a> runs in a separate Worker, independently from the Pages project. The consumer listens for new messages and processes them sequentially, at its rhythm, freeing everyone else from blocking. When things get busy, the queue grows its buffer. Still, things keep running, and the jobs will eventually get dispatched, freeing the main APIs for the critical stuff: responding to remote servers and clients as quickly as possible.</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export default {\n\tasync queue(batch, env, ctx) {\n\t\tfor (const message of batch.messages) {\n\t\t\t…\n\n\t\t\tswitch (message.body.type) {\n\t\t\t\tcase MessageType.Inbox: {\n\t\t\t\t\tawait handleInboxMessage(...)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase MessageType.Deliver: {\n\t\t\t\t\tawait handleDeliverMessage(...)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n}</pre></code>\n            <p>If you want to get your hands dirty with Queues, here’s a simple example on <a href=\"https://developers.cloudflare.com/queues/examples/send-errors-to-r2/\">Using Queues to store data in R2</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"caching-and-durable-objects\">Caching and Durable Objects</h3>\n      <a href=\"#caching-and-durable-objects\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Caching repetitive operations is yet another strategy for improving performance in complex applications that require data processing. A famous Netscape developer, Phil Karlton, once said: &quot;There are only two hard things in Computer Science: <b>cache invalidation</b> and naming things.&quot;</p><p>Cloudflare obviously knows a lot about caching since <a href=\"https://developers.cloudflare.com/cache/\">it&#39;s a core feature</a> of our global CDN. We also provide <a href=\"https://developers.cloudflare.com/workers/learning/how-kv-works/\">Workers KV</a> to our customers, a global, low-latency, key-value data store that anyone can use to cache data objects in our data centers and build fast websites and applications.</p><p>However, KV achieves its performance by being eventually consistent. While this is fine for many applications and use cases, it&#39;s not ideal for others.</p><p>The ActivityPub protocol is highly transactional and can&#39;t afford eventual consistency. Here&#39;s an example: generating complete timelines is expensive, so we cache that operation. However, when you post something, we need to invalidate that cache before we reply to the client. Otherwise, the new post won&#39;t be in the timeline and the client can fail with an error because it doesn’t see it. This actually happened to us with one of the most popular clients.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7mBZfs5UZumkHzh9ITpUSn/1f9d5e53e7d61417d962a9fd566df9e6/7b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"511\" loading=\"lazy\"/>\n            \n            </figure><p>We needed to get clever. The team discussed a few options. Fortunately, our API catalog has plenty of options. Meet <a href=\"https://developers.cloudflare.com/workers/learning/using-durable-objects/\">Durable Objects</a>.</p><p>Durable Objects are single-instance Workers that provide a transactional storage API. They&#39;re ideal when you need central coordination, strong consistency, and state persistence. You can use Durable Objects in cases like handling the state of <a href=\"https://developers.cloudflare.com/workers/learning/using-websockets/#durable-objects-and-websocket-state\">multiple WebSocket</a> connections, coordinating and routing messages in a <a href=\"https://github.com/cloudflare/workers-chat-demo\">chatroom</a>, or even <a href=\"/doom-multiplayer-workers/\">running a multiplayer game like Doom</a>.</p><p>You know where this is going now. Yes, we implemented our key-value caching subsystem for Wildebeest <a href=\"https://github.com/cloudflare/wildebeest/tree/main/do\">on top of a Durable Object</a>. By taking advantage of the DO&#39;s native transactional storage API, we can have strong guarantees that whenever we create or change a key, the next read will always return the latest version.</p><p>The idea is so simple and effective that it took us literally a <a href=\"https://github.com/cloudflare/wildebeest/blob/main/do/src/index.ts\">few lines of code</a> to implement a key-value cache with two primitives: HTTP PUT and GET.</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export class WildebeestCache {\n\tasync fetch(request: Request) {\n\t\tif (request.method === &#039;GET&#039;) {\n\t\t\tconst { pathname } = new URL(request.url)\n\t\t\tconst key = pathname.slice(1)\n\t\t\tconst value = await this.storage.get(key)\n\t\t\treturn new Response(JSON.stringify(value))\n\t\t}\n\n\t\tif (request.method === &#039;PUT&#039;) {\n\t\t\tconst { key, value } = await request.json()\n\t\t\tawait this.storage.put(key, value)\n\t\t\treturn new Response(&#039;&#039;, { status: 201 })\n\t\t}\n\t}\n}</pre></code>\n            <p>Strong consistency it is. Let&#39;s move to user registration and authentication now.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"zero-trust-access\">Zero Trust Access</h3>\n      <a href=\"#zero-trust-access\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The official Mastodon server <a href=\"https://docs.joinmastodon.org/user/signup/\">handles user registrations</a>, typically using email, before you can choose your local username and start using the service. Handling user registration and authentication can be daunting and time-consuming if we were to build it from scratch though.</p><p>Furthermore, people don&#39;t want to create new credentials for every new service they want to use and instead want more convenient OAuth-like authorization and authentication methods so that they can reuse their existing Apple, Google, or GitHub accounts.</p><p>We wanted to simplify things using Cloudflare’s built-in features. Needless to say, we have a product that handles user onboarding, authentication, and <a href=\"https://developers.cloudflare.com/cloudflare-one/policies/access/policy-management/\">access policies</a> to any application behind Cloudflare; it&#39;s called <a href=\"https://developers.cloudflare.com/cloudflare-one/\">Zero Trust</a>. So we put Wildebeest behind it.</p><p>Zero Trust Access can either do one-time PIN (<a href=\"https://en.wikipedia.org/wiki/One-time_password\">OTP</a>) authentication using email or single-sign-on (SSO) with many identity providers (examples: Google, Facebook, GitHub, LinkedIn), including any generic one supporting <a href=\"https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/generic-saml/\">SAML 2.0</a>.</p><p>When you start using Wildebeest with a client, you don&#39;t need to register at all. Instead, you go straight to log in, which will redirect you to the Access page and handle the authentication according to the policy that you, the owner of your instance, configured.</p><p>The policy defines who can authenticate, and how.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1zDpfgueYrKRmhmNvHCBGX/68b6b579fcb33110566b07ea6e5a3d3e/8b.png\" alt=\"\" class=\"kg-image\" width=\"1366\" height=\"527\" loading=\"lazy\"/>\n            \n            </figure><p>When authenticated, Access will redirect you back to Wildebeest. The first time this happens, we will detect that we don&#39;t have information about the user and ask for your Username and Display Name. This will be asked only once and is what will be to create your public Mastodon profile.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/76J7DmTtShD7slpawYXNAE/ccc908ed0dffb75a7ce6afc7b0b55510/9b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"897\" loading=\"lazy\"/>\n            \n            </figure><p>Technically, Wildebeest implements the <a href=\"https://docs.joinmastodon.org/spec/oauth/#implementation\">OAuth 2 specification</a>. <a href=\"https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust/\">Zero Trust</a> protects the <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/oauth/authorize.ts\">/oauth/authorize</a> endpoint and issues a valid <a href=\"https://developers.cloudflare.com/cloudflare-one/identity/authorization-cookie/validating-json/\">JWT token</a> in the request headers when the user is authenticated. Wildebeest then reads and verifies the JWT and returns an authorization code in the URL redirect.</p><p>Once the client has an authorization code, it can use the <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/oauth/token.ts\">/oauth/token</a> endpoint to obtain an API access token. Subsequent API calls inject a bearer token in the Authorization header:</p><p><code>Authorization: Bearer access_token</code></p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"deployment-and-continuous-integration\">Deployment and Continuous Integration</h3>\n      <a href=\"#deployment-and-continuous-integration\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We didn&#39;t want to run a managed service for Mastodon as it would somewhat diminish the concepts of federation and data ownership. Also, we recognize that ActivityPub and Mastodon are emerging, fast-paced technologies that will evolve quickly and in ways that are difficult to predict just yet.</p><p>For these reasons, we thought the best way to help the ecosystem right now would be to provide an open-source software package that anyone could use, customize, improve, and deploy on top of our cloud. Cloudflare will obviously keep improving Wildebeest and support the community, but we want to give our Fediverse maintainers complete control and ownership of their instances and data.</p><p>The remaining question was, how do we distribute the Wildebeest bundle and make it easy to deploy into someone&#39;s account when it requires configuring so many Cloudflare features, and how do we facilitate updating the software over time?</p><p>The solution ended up being a clever mix of using GitHub with <a href=\"https://github.com/features/actions\">GitHub Actions</a>, <a href=\"https://developers.cloudflare.com/workers/platform/deploy-button/\">Deploy with Workers</a>, and <a href=\"https://github.com/cloudflare/terraform-provider-cloudflare\">Terraform</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5V8fRfu3U03n2ZVNtsh01L/404637763a8476b425a562ff5bbf8739/Screenshot-2023-02-08-at-11.13.05-AM-1.png\" alt=\"\" class=\"kg-image\" width=\"1300\" height=\"87\" loading=\"lazy\"/>\n            \n            </figure><p>The Deploy with Workers button is a specially crafted link that auto-generates a workflow page where the user gets asked some questions, and Cloudflare handles authorizing GitHub to deploy to Workers, automatically forks the Wildebeest repository into the user&#39;s account, and then configures and deploys the project using a <a href=\"https://github.com/marketplace/actions/deploy-to-cloudflare-workers-with-wrangler\">GitHub Actions</a> workflow.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3MhyoOAbQEjlNnEhwl70Jm/5000c8c1dc1dfea549ee6ca62f8460b4/10b.png\" alt=\"\" class=\"kg-image\" width=\"1300\" height=\"1189\" loading=\"lazy\"/>\n            \n            </figure><p>A GitHub Actions <a href=\"https://docs.github.com/en/actions/using-workflows/about-workflows\">workflow</a> is a YAML file that declares what to do in every step. Here’s the <a href=\"https://github.com/cloudflare/wildebeest/blob/main/.github/workflows/deploy.yml\">Wildebeest workflow</a> (simplified):</p>\n            <pre class=\"language-yaml\"><code class=\"language-yaml\">name: Deploy\non:\n  push:\n    branches:\n      - main\n  repository_dispatch:\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    timeout-minutes: 60\n    steps:\n      - name: Ensure CF_DEPLOY_DOMAIN and CF_ZONE_ID are defined\n        ...\n      - name: Create D1 database\n        uses: cloudflare/wrangler-action@2.0.0\n        with:\n          command: d1 create wildebeest-${{ env.OWNER_LOWER }}\n        ...\n      - name: retrieve Zero Trust organization\n        ...\n      - name: retrieve Terraform state KV namespace\n        ...\n      - name: download VAPID keys\n        ...\n      - name: Publish DO\n      - name: Configure\n        run: terraform plan &amp;&amp; terraform apply -auto-approve\n      - name: Create Queue\n        ...\n      - name: Publish consumer\n        ...\n      - name: Publish\n        uses: cloudflare/wrangler-action@2.0.0\n        with:\n          command: pages publish --project-name=wildebeest-${{ env.OWNER_LOWER }} .</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"updating-wildebeest\">Updating Wildebeest</h4>\n      <a href=\"#updating-wildebeest\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This workflow runs automatically every time the main branch changes, so updating the Wildebeest is as easy as synchronizing the upstream official repository with the fork. You don&#39;t even need to use git commands for that; GitHub provides a convenient Sync button in the UI that you can simply click.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6vkcs7XzLMZdihq7z5n2L5/b83e8499970012ebcf0b47e686b6518a/11b.png\" alt=\"\" class=\"kg-image\" width=\"500\" height=\"352\" loading=\"lazy\"/>\n            \n            </figure><p>What&#39;s more? Updates are incremental and non-destructive. When the GitHub Actions workflow redeploys Wildebeest, we only make the necessary changes to your configuration and nothing else. You don&#39;t lose your data; we don&#39;t need to delete your existing configurations. Here’s how we achieved this:</p><p>We use <a href=\"https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs\">Terraform</a>, a declarative configuration language and tool that interacts with our APIs and can query and configure your Cloudflare features. Here&#39;s the trick, whenever we apply a new configuration, we keep a copy of the Terraform state for Wildebeest in a <a href=\"https://developers.cloudflare.com/workers/learning/how-kv-works/\">Cloudflare KV</a> key. When a new deployment is triggered, we get that state from the KV copy, calculate the differences, then change only what&#39;s necessary.</p><p>Data loss is not a problem either because, as you read above, D1 supports <a href=\"https://developers.cloudflare.com/d1/platform/migrations/\">migrations</a>. If we need to add a new column to a table or a new table, we don&#39;t need to destroy the database and create it again; we just apply the necessary SQL to that change.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3UW6Qm1KE662wiFVgrWFPZ/ba80730c09161abc81c85bb89fd758b3/12b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"protection-optimization-and-observability-naturally\">Protection, optimization and observability, naturally</h3>\n      <a href=\"#protection-optimization-and-observability-naturally\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Once Wildebeest is up and running, you can protect it from bad traffic and malicious actors. Cloudflare offers you <a href=\"https://www.cloudflare.com/ddos/\">DDoS</a>, <a href=\"https://www.cloudflare.com/waf/\">WAF</a>, and <a href=\"https://www.cloudflare.com/products/bot-management/\">Bot Management</a> protection out of the box at a click&#39;s distance.</p><p>Likewise, you&#39;ll get instant network and content delivery optimizations from our products and <a href=\"https://www.cloudflare.com/analytics/\">analytics</a> on how your Wildebeest instance is performing and being used.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4EYUh9pE5NNPnpj9mwVSfz/7d97cf99ad29cd9436b8e48c7918cd24/13b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"934\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"activitypub-webfinger-nodeinfo-and-mastodon-apis\">ActivityPub, WebFinger, NodeInfo and Mastodon APIs</h3>\n      <a href=\"#activitypub-webfinger-nodeinfo-and-mastodon-apis\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Mastodon popularized the Fediverse concept, but many of the underlying technologies used have been around for quite a while. This is one of those rare moments when everything finally comes together to create a working platform that answers an actual use case for Internet users. Let&#39;s quickly go through the protocols that Wildebeest had to implement:</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"activitypub\">ActivityPub</h4>\n      <a href=\"#activitypub\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><a href=\"https://www.w3.org/TR/activitypub/\">ActivityPub</a> is a decentralized social networking protocol and has been around as a W3C recommendation since at least 2018. It defines client APIs for creating and manipulating content and server-to-server APIs for content exchange and notifications, also known as federation. ActivityPub uses <a href=\"https://www.w3.org/TR/activitystreams-core/\">ActivityStreams</a>, an even older W3C protocol, for its vocabulary.</p><p>The concepts of <a href=\"https://www.w3.org/TR/activitypub/#actors\">Actors</a> (profiles), messages or <a href=\"https://www.w3.org/TR/activitypub/#obj\">Objects</a> (the toots), <a href=\"https://www.w3.org/TR/activitypub/#inbox\">inbox</a> (where you receive toots from people you follow), and <a href=\"https://www.w3.org/TR/activitypub/#outbox\">outbox</a> (where you send your toots to the people you follow), to name a few of many other actions and activities, are all defined on the ActivityPub specification.</p><p>Here’s our folder with the <a href=\"https://github.com/cloudflare/wildebeest/tree/main/backend/src/activitypub\">ActivityPub implementation</a>.</p>\n            <pre class=\"language-js\"><code class=\"language-js\">import type { APObject } from &#039;wildebeest/backend/src/activitypub/objects&#039;\nimport type { Actor } from &#039;wildebeest/backend/src/activitypub/actors&#039;\n\nexport async function addObjectInInbox(db, actor, obj) {\n\tconst id = crypto.randomUUID()\n\tconst out = await db\n\t\t.prepare(&#039;INSERT INTO inbox_objects(id, actor_id, object_id) VALUES(?, ?, ?)&#039;)\n\t\t.bind(id, actor.id.toString(), obj.id.toString())\n\t\t.run()\n}\n</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"webfinger\">WebFinger</h4>\n      <a href=\"#webfinger\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>WebFinger is a simple HTTP protocol used to discover information about any entity, like a profile, a server, or a specific feature. It resolves URIs to resource objects.</p><p>Mastodon uses <a href=\"https://www.rfc-editor.org/rfc/rfc7033\">WebFinger</a> lookups to discover information about remote users. For example, say you want to interact with @<a href=\"mailto:user@example.com\">user@example.com</a>. Your local server would <a href=\"https://github.com/cloudflare/wildebeest/blob/main/backend/src/webfinger/index.ts\">request</a> <a href=\"https://example.com/.well-known/webfinger?resource=acct:user@example.com\">https://example.com/.well-known/webfinger?resource=acct:user@example.com</a> (using the <a href=\"https://www.rfc-editor.org/rfc/rfc7565\">acct scheme</a>) and get something like this:</p>\n            <pre class=\"language-json\"><code class=\"language-json\">{\n    &quot;subject&quot;: &quot;acct:user@example.com&quot;,\n    &quot;aliases&quot;: [\n        &quot;https://example.com/ap/users/user&quot;\n    ],\n    &quot;links&quot;: [\n        {\n            &quot;rel&quot;: &quot;self&quot;,\n            &quot;type&quot;: &quot;application/activity+json&quot;,\n            &quot;href&quot;: &quot;https://example.com/ap/users/user&quot;\n        }\n    ]\n}\n</pre></code>\n            <p>Now we know how to interact with <code>@user@example.com</code>, using the <code>https://example.com/ap/users/user endpoint</code>.</p><p>Here’s our WebFinger <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/.well-known/webfinger.ts\">response</a>:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export async function handleRequest(request, db): Promise&lt;Response&gt; {\n\t…\n\tconst jsonLink = /* … link to actor */\n\n\tconst res: WebFingerResponse = {\n\t\tsubject: `acct:...`,\n\t\taliases: [jsonLink],\n\t\tlinks: [\n\t\t\t{\n\t\t\t\trel: &#039;self&#039;,\n\t\t\t\ttype: &#039;application/activity+json&#039;,\n\t\t\t\thref: jsonLink,\n\t\t\t},\n\t\t],\n\t}\n\treturn new Response(JSON.stringify(res), { headers })\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"mastodon-api\">Mastodon API</h4>\n      <a href=\"#mastodon-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Finally, things like setting your server information, profile information, generating timelines, notifications, and searches, are all Mastodon-specific APIs. The Mastodon open-source project defines a catalog of REST APIs, and you can find all the documentation for them on <a href=\"https://docs.joinmastodon.org/api/\">their website</a>.</p><p>Our Mastodon API implementation can be found <a href=\"https://github.com/cloudflare/wildebeest/tree/main/functions/api\">here</a> (REST endpoints) and <a href=\"https://github.com/cloudflare/wildebeest/tree/main/backend/src/mastodon\">here</a> (backend primitives). Here’s an example of Mastodon’s server information <a href=\"https://docs.joinmastodon.org/methods/instance/#v2\">/api/v2/instance</a> implemented by <a href=\"https://github.com/cloudflare/wildebeest/blob/main/functions/api/v2/instance.ts\">Wildebeest</a>:</p>\n            <pre class=\"language-js\"><code class=\"language-js\">export async function handleRequest(domain, db, env) {\n\n\tconst res: InstanceConfigV2 = {\n\t\tdomain,\n\t\ttitle: env.INSTANCE_TITLE,\n\t\tversion: getVersion(),\n\t\tsource_url: &#039;https://github.com/cloudflare/wildebeest&#039;,\n\t\tdescription: env.INSTANCE_DESCR,\n\t\tthumbnail: {\n\t\t\turl: DEFAULT_THUMBNAIL,\n\t\t},\n\t\tlanguages: [&#039;en&#039;],\n\t\tregistrations: {\n\t\t\tenabled: false,\n\t\t},\n\t\tcontact: {\n\t\t\temail: env.ADMIN_EMAIL,\n\t\t},\n\t\trules: [],\n\t}\n\n\treturn new Response(JSON.stringify(res), { headers })\n}</pre></code>\n            <p>Wildebeest also implements <a href=\"https://github.com/cloudflare/wildebeest/tree/main/backend/src/webpush\">WebPush</a> for client notifications and <a href=\"https://github.com/cloudflare/wildebeest/tree/main/functions/nodeinfo\">NodeInfo</a> for server information.</p><p>Other Mastodon-compatible servers had to implement all these protocols <a href=\"https://pleroma.social/\">too</a>; Wildebeest is one of them. The community is very active in discussing future enhancements; we will keep improving our compatibility and adding support to more features over time, ensuring that Wildebeest plays well with the Fediverse ecosystem of servers and clients emerging.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"get-started-now\">Get started now</h3>\n      <a href=\"#get-started-now\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Enough about technology; let&#39;s get you into the Fediverse. We tried to detail all the steps to deploy your server. To start using Wildebeest, head to the public GitHub repository and check our <a href=\"https://github.com/cloudflare/wildebeest/blob/main/README.md\">Get Started tutorial</a>.</p><p>Most of Wildebeest&#39;s dependencies offer a generous free plan that allows you to try them for personal or hobby projects that aren&#39;t business-critical, however you will need to subscribe an <a href=\"https://www.cloudflare.com/products/cloudflare-images/\">Images</a> plan (the lowest tier should be enough for most needs) and, depending on your server load, <a href=\"https://developers.cloudflare.com/workers/platform/limits/#unbound-usage-model\">Workers Unbound</a> (again, the minimum cost should be plenty for most use cases).</p><p>Following our dogfooding mantra, Cloudflare is also officially joining the Fediverse today. You can start following our Mastodon accounts and get the same experience of having regular updates from Cloudflare as you get from us on other social platforms, using your favorite Mastodon apps. These accounts are entirely running on top of a Wildebeest server:</p><ul><li><p><a href=\"https://cloudflare.social/@cloudflare\">@cloudflare@cloudflare.social</a> - Our main account</p></li><li><p><a href=\"https://cloudflare.social/@radar\">@radar@cloudflare.social</a> - Cloudflare Radar</p></li></ul>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2QJsY2PkGqLfVQCDJc1AlH/d52823cfd8d2d9e7de9845686790a3bf/14b.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"722\" loading=\"lazy\"/>\n            \n            </figure><p>Wildebeest is compatible with most client apps; we are confirmed to work with the official Mastodon <a href=\"https://play.google.com/store/apps/details?id=org.joinmastodon.android\">Android</a> and <a href=\"https://apps.apple.com/us/app/mastodon-for-iphone/id1571998974\">iOS</a> apps, <a href=\"https://pinafore.social/\">Pinafore</a>, <a href=\"https://mastodon.social/@JPEGuin/109315609418460036\">Mammoth</a>, and <a href=\"https://tooot.app/\">tooot</a>, and looking into others like <a href=\"https://tapbots.com/ivory/\">Ivory</a>. If your favorite isn’t working, please submit an <a href=\"https://github.com/cloudflare/wildebeest/issues\">issue here</a>, we’ll do our best to help support it.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"final-words\">Final words</h3>\n      <a href=\"#final-words\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Wildebeest was built entirely on top of our <a href=\"/welcome-to-the-supercloud-and-developer-week-2022/\">Supercloud</a> stack. It was one of the most complete and complex projects we have created that uses various Cloudflare products and features.</p><p>We hope this write-up inspires you to not only try deploying Wildebeest and joining the Fediverse, but also building your next application, however demanding it is, on top of Cloudflare.</p><p>Wildebeest is a minimally viable Mastodon-compatible server right now, but we will keep improving it with more features and supporting it over time; after all, we&#39;re using it for our official accounts. It is also open-sourced, meaning you are more than welcome to contribute with pull requests or feedback.</p><p>In the meantime, we opened a <a href=\"https://discord.com/channels/595317990191398933/1064925651464896552\">Wildebeest room</a> on our <a href=\"https://discord.gg/cloudflaredev\">Developers Discord Server</a> and are keeping an eye open on the GitHub repo <a href=\"https://github.com/cloudflare/wildebeest/issues\">issues</a> tab. Feel free to engage with us; the team is eager to know how you use Wildebeest and answer your questions.</p><p><i>PS: The code snippets in this blog were simplified to benefit readability and space (the TypeScript types and error handling code were removed, for example). Please refer to the GitHub repo links for the complete versions.</i></p>",
		"id": "5dmHcGVas7xv8tKbRbWLWN",
		"localeList": {
			"name": "Welcome to Wildebeest: the Fediverse on Cloudflare Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "Translated for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Today we're announcing Wildebeest, an open-source, easy-to-deploy ActivityPub and Mastodon-compatible server built entirely on top of Cloudflare's Supercloud.",
		"metadata": {
			"title": "Welcome to Wildebeest: the Fediverse on Cloudflare",
			"description": "Today we're announcing Wildebeest, an open-source, easy-to-deploy ActivityPub and Mastodon-compatible server built entirely on top of Cloudflare's Supercloud.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4ao71KIzGg6KD2zS9ad72S/adef09b57563c1f671b8e26436364e1c/welcome-to-wildebeest-the-fediverse-on-cloudflare-ZX72Xj.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2023-02-08T19:00:00.000+00:00",
		"slug": "welcome-to-wildebeest-the-fediverse-on-cloudflare",
		"tags": [
			{
				"id": "20mfyhPTPg8HznC1uuBsXg",
				"name": "Wildebeest",
				"slug": "wildebeest"
			},
			{
				"id": "3kr4meEhp1NrKwm01XXeqk",
				"name": "Cloudflare Pages",
				"slug": "cloudflare-pages"
			},
			{
				"id": "UKt2GEAUQsbObsNqZ3Pr7",
				"name": "D1",
				"slug": "d1"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3QNaVNNpUXrfZYUGDJkXwA",
				"name": "Cloudflare Zero Trust",
				"slug": "cloudflare-zero-trust"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "2UI24t7uddD0CIIUJCu1f4",
				"name": "SASE",
				"slug": "sase"
			}
		],
		"title": "Welcome to Wildebeest: the Fediverse on Cloudflare",
		"updated_at": "2024-10-09T23:22:48.766Z",
		"url": "https://blog.cloudflare.com/welcome-to-wildebeest-the-fediverse-on-cloudflare"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}