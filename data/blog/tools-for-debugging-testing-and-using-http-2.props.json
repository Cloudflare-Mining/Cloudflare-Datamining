{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5vGNsXzZrtSLn2X30pnpUY/6f350e7dd36058a6422f9199b452bb02/john-graham-cumming.jpg",
				"location": "Lisbon, Portugal",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "With CloudFlare's release of HTTP/2 for all our customers the web suddenly has a lot of HTTP/2 connections. To get the most out of HTTP/2 you'll want to be using an up to date web browser (all the major browsers support HTTP/2).",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4Ivp262lsHhESGeTQ4ydEz/f0f699dc52b2dd19f43b5466af029925/tools-for-debugging-testing-and-using-http-2.png",
		"featured": false,
		"html": "<p>With CloudFlare&#39;s release of HTTP/2 for all our customers the web suddenly has a lot of HTTP/2 connections. To get the most out of HTTP/2 you&#39;ll want to be using an up to date web browser (all the major browsers support HTTP/2).</p><p>But there are some non-browser tools that come in handy when working with HTTP/2. This blog post starts with a useful browser add-on, and then delves into command-line tools, load testing, conformance verification, development libraries and packet decoding for HTTP/2.</p><p>If you know of something that I&#39;ve missed please write a comment.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"browser-indicators\">Browser Indicators</h3>\n      <a href=\"#browser-indicators\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>For Google Chrome there&#39;s a handy <a href=\"https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en\">HTTP/2 and SPDY Indicator</a> extension that adds a colored lightning bolt to the browser bar showing the protocol being used when a web page is viewed.</p><p>The blue lightning bolt shown here indicates that the CloudFlare home page was served using HTTP/2:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5oLd6mBoInw37IHY1A2EuQ/82331d2180273d64fa55a756b757c0f8/Screen-Shot-2015-12-03-at-12-08-25.png\" alt=\"\" class=\"kg-image\" width=\"1590\" height=\"321\" loading=\"lazy\"/>\n            \n            </figure><p>A green lightning bolt indicates the site was served using SPDY and gives the SPDY version number. In this case SPDY/3.1:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5mis7IT15cGk32zcQAl73M/9747e4c2afc6d1a891e9b75ee6249895/Screen-Shot-2015-12-03-at-12-15-10.png\" alt=\"\" class=\"kg-image\" width=\"1604\" height=\"355\" loading=\"lazy\"/>\n            \n            </figure><p>A grey lightning bolt indicates that neither HTTP/2 no SPDY were used. Here the web page was served using HTTP/1.1.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/30VuLV8Q9qqPC2hpvtkU3l/3440efe822df32649b80a2547de2252c/Screen-Shot-2015-12-03-at-12-10-18.png\" alt=\"\" class=\"kg-image\" width=\"1618\" height=\"363\" loading=\"lazy\"/>\n            \n            </figure><p>There&#39;s a similar extension for <a href=\"https://addons.mozilla.org/en-GB/firefox/addon/spdy-indicator/\">Firefox</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"online-testing\">Online testing</h4>\n      <a href=\"#online-testing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There&#39;s also a handy <a href=\"https://tools.keycdn.com/http2-test\">online tool</a> to check any individual web site.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/DwWwyYZflqaees6W4aJaw/fea382962f1dbb50827f29b480cb72a8/Screen-Shot-2015-12-03-at-12-22-11.png\" alt=\"\" class=\"kg-image\" width=\"1746\" height=\"592\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"claire\">Claire</h4>\n      <a href=\"#claire\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>CloudFlare also has a Google Chrome extension called <a href=\"https://chrome.google.com/webstore/detail/claire/fgbpcgddpmjmamlibbaobboigaijnmkl\">Claire</a> that gives information about how a web page was loaded. For example here&#39;s the information that Claire shows for a site using CloudFlare that uses <a href=\"https://www.cloudflare.com/ipv6\">IPv6</a>, <a href=\"https://www.cloudflare.com/railgun\">Railgun</a>, and HTTP/2.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5xZKZgNYat4xEKVCyzYhn4/c4db4e2c32cccd4e78b8361fddb4ebcf/Screen-Shot-2015-12-03-at-17-12-50.png\" alt=\"\" class=\"kg-image\" width=\"717\" height=\"762\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"command-line-tools\">Command-line Tools</h3>\n      <a href=\"#command-line-tools\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There&#39;s a handy command-line tool called <a href=\"https://github.com/stefanjudis/is-http2-cli\">is-http</a> which is installed using npm as follows:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm install -g is-http2-cli</pre></code>\n            <p>Once installed you can check the HTTP/2 status of a web on the command-line:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ is-http2 www.cloudflare.com\n✓ HTTP/2 supported by www.cloudflare.com\nSupported protocols: h2 spdy/3.1 http/1.1\n\n$ is-http2 www.amazon.com\n× HTTP/2 not supported by www.amazon.com\nSupported protocols: http/1.1</pre></code>\n            <p>The <code>is-http</code> tool is also useful because it gives you a list of the protocols advertised by the server. As you can see <a href=\"http://www.cloudflare.com\">www.cloudflare.com</a> supports HTTP/2, HTTP/1.1 and SPDY/3.1.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"curl\">curl</h4>\n      <a href=\"#curl\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In version 7.43.0 the venerable <code>curl</code> tool got HTTP/2 support when it&#39;s linked with the <a href=\"https://nghttp2.org/\">nghttp</a> library. To build <code>curl</code> from sources you&#39;ll need OpenSSL, zlib, nghttp2 and libev. I used the following sequence of commands.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ curl -LO http://dist.schmorp.de/libev/libev-4.20.tar.gz\n$ tar zvxf libev-4.20.tar.gz\n$ cd libev-4.20\n$ ./configure\n$ make\n$ sudo make install\n\n$ curl -LO https://www.openssl.org/source/openssl-1.0.2d.tar.gz\n$ tar zxvf openssl-1.0.2d.tar.gz\n$ cd openssl-1.0.2d\n$ ./config shared zlib-dynamic\n$ make &amp;&amp; make test\n$ sudo make install\n\n$ curl -LO http://zlib.net/zlib-1.2.8.tar.gz\n$ tar zxvf zlib-1.2.8.tar.gz\n$ cd zlib-1.2.8\n$ ./configure\n$ make &amp;&amp; make test\n$ sudo make install\n\n$ curl -LO https://github.com/tatsuhiro-t/nghttp2/releases/download/v1.5.0/nghttp2-1.5.0.tar.gz\n$ tar zxvf nghttp2-1.5.0.tar.gz\n$ cd nghttp2-1.5.0\n$ OPENSSL_CFLAGS=&quot;-I/usr/local/ssl/include&quot; OPENSSL_LIBS=&quot;-L/usr/local/ssl/lib -lssl -lcrypto -ldl&quot; ./configure\n$ make\n$ sudo make install\n\n$ curl -LO http://curl.haxx.se/download/curl-7.46.0.tar.gz\n$ tar zxvf curl-7.46.0.tar.gz\n$ cd curl-7.46.0\n$ ./configure\n$ make &amp;&amp; make test\n$ sudo make install\n$ sudo ldconfig</pre></code>\n            <p>Once installed <code>curl</code> has a new <code>--http2</code> option that causes it to use HTTP/2 (if it can). The <code>-v</code> verbose option will show information about the use of HTTP/2:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ curl -vso /dev/null --http2 https://www.cloudflare.com/\n[...]\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n* TCP_NODELAY set\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* Using Stream ID: 1 (easy handle 0xc3dba0)\n[...]</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"nghttp2\">nghttp2</h4>\n      <a href=\"#nghttp2\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you built <code>curl</code> using my instructions above you will have built and installed some tools that come with the <a href=\"https://nghttp2.org/\">nghttp2</a> library. One of those is a command-line client called <code>nghttp</code>. It can be used like <code>curl</code> to download from the web using HTTP/2 but it also has a handy verbose option that shows that actual HTTP/2 frames sent and received.</p><p>By running it with <code>-nv</code> you get HTTP/2 and throw away the actual downloaded page. Here&#39;s its output when downloading <a href=\"http://www.cloudflare.com\">www.cloudflare.com</a> using HTTP/2. On a terminal with color support it uses coloring to highlight different parts of the log.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5XhV2QcvnnoVSUERRpyGgP/d204e9ebeaff7da0cac4ead13aa053a5/Screen-Shot-2015-12-03-at-13-24-46.png\" alt=\"\" class=\"kg-image\" width=\"1265\" height=\"1259\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"h2c\">h2c</h4>\n      <a href=\"#h2c\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Another curl-like command-line tool for HTTP/2 is <a href=\"https://github.com/fstab/h2c\">h2c</a>. It also enables dumping of HTTP/2 frames and has a nice feature that it runs in the background and keeps connections to servers alive and has a useful &#39;wiretap&#39; feature for intercepting an HTTP/2 for debugging.</p><p>If you have <a href=\"https://golang.org/dl/\">Go 1.5.1</a> installed then you can download it as follows:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ export GO15VENDOREXPERIMENT=1\n$ go get github.com/fstab/h2c</pre></code>\n            <p>You start <code>h2c</code> running by doing <code>h2c start &amp;</code> which sets it running in the background. You can then communicate with a web server like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"> $ h2c connect www.cloudflare.com\n $ h2c get /\n $ h2c disconnect</pre></code>\n            <p>And it will perform the HTTP request. To see detailed output at the HTTP/2 you start h2c with the <code>--dump</code> parameter:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"> $ h2c start --dump</pre></code>\n            <p>You will then get detailed output dumped by that process, in color, of the HTTP/2 frames being used.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5QvyA73OaYNPT3ZJSOHay/ca5212fabad813467a33235b4653affd/Screen-Shot-2015-12-03-at-13-11-19.png\" alt=\"\" class=\"kg-image\" width=\"811\" height=\"1151\" loading=\"lazy\"/>\n            \n            </figure><p>Details of the wiretap feature are in [this blog post](<a href=\"http://unrestful.io/2015/08/28/wiretap.html\">http://unrestful.io/2015/08/28/wiretap.html</a>).</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"openssl-s_client\">openssl s_client</h4>\n      <a href=\"#openssl-s_client\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you just want to find out what protocols a web site supports OpenSSL&#39;s <code>s_client</code> can be used. If you specify an empty <code>-nextprotoneg</code> option OpenSSL sends an empty TLS option asking for negotiation of the next protocol and the server responds with a complete list of protocols it supports.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ openssl s_client -connect www.cloudflare.com:443 -nextprotoneg &#039;&#039;\nCONNECTED(00000003)\nProtocols advertised by server: h2, spdy/3.1, http/1.1</pre></code>\n            <p>There you can see that <a href=\"http://www.cloudflare.com\">www.cloudflare.com</a> support HTTP/2 (the h2), SPDY/3.1 and HTTP/1.1.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"h2i\">h2i</h4>\n      <a href=\"#h2i\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you want to do low level HTTP/2 debugging there&#39;s an interactive client call <a href=\"https://github.com/golang/net/tree/master/http2/h2i\">h2i</a>. Once again it requires that you have Go installed. To get it, run</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ go get github.com/golang/net/http2/h2i</pre></code>\n            <p>You can then use <code>h2i</code> to connect to a site that uses HTTP/2 and send it individual HTTP/2 frames. For example, here&#39;s the start of session connecting to <a href=\"http://www.cloudflare.com\">www.cloudflare.com</a> and requesting the home page using the <code>headers</code> command which allows you to type in a standard HTTP/1.1 request.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ h2i www.cloudflare.com\nConnecting to www.cloudflare.com:443 ...\nConnected to 198.41.214.163:443\nNegotiated protocol &quot;h2&quot;\n[FrameHeader SETTINGS len=18]\n [MAX_CONCURRENT_STREAMS = 128]\n [INITIAL_WINDOW_SIZE = 2147483647]\n [MAX_FRAME_SIZE = 16777215]\n[FrameHeader WINDOW_UPDATE len=4]\n  Window-Increment = 2147418112\n\nh2i&gt; headers\n (as HTTP/1.1)&gt; GET / HTTP/1.1\n (as HTTP/1.1)&gt; Host: www.cloudflare.com\n (as HTTP/1.1)&gt;\n  Opening Stream-ID 1:\n  :authority = www.cloudflare.com\n  :method = GET\n  :path = /\n  :scheme = https\n [FrameHeader HEADERS flags=END_HEADERS stream=1 len=819]\n   :status = &quot;200&quot;\n   server = &quot;cloudflare-nginx&quot;\n   date = &quot;Fri, 04 Dec 2015 10:36:15 GMT&quot;\n   content-type = &quot;text/html&quot;\n   last-modified = &quot;Thu, 03 Dec 2015 22:27:41 G MT&quot; \n   strict-transport-security = &quot;max-age=31536000&quot;\n   x-content-type-options = &quot;nosniff&quot;\n   x-frame-options = &quot;SAMEORIGIN&quot;\n   cf-cache-status = &quot;HIT&quot;\n   expires = &quot;Fri, 04 Dec 2015 14:36:15 GMT&quot;\n   cache-control = &quot;public, max-age=14400&quot;\n [FrameHeader DATA stream=1 len=7261]\n   &quot;&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;!</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"load-testing\">Load Testing</h3>\n      <a href=\"#load-testing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The <a href=\"https://nghttp2.org\">nghttp2</a> library also includes a load testing tool called <a href=\"https://nghttp2.org/documentation/h2load.1.html\">h2load</a> which can be used a little like <a href=\"https://httpd.apache.org/docs/2.2/programs/ab.html\">ab</a>. There&#39;s a useful <a href=\"https://nghttp2.org/documentation/h2load-howto.html\">HOWTO</a> on using the tool.</p><p>I ran it against the CloudFlare test server like this:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/hWDbuK231mcZwO1JOKtvo/b012e7a9e6863bd360992858f0e24b8d/Screen-Shot-2015-12-03-at-16-02-50.png\" alt=\"\" class=\"kg-image\" width=\"1778\" height=\"940\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"conformance\">Conformance</h3>\n      <a href=\"#conformance\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you are testing an HTTP/2 implementation there&#39;s a useful tool called h2spec which runs through a conformance test against a real HTTP/2 server. To use it first install <a href=\"https://golang.org/dl/\">Go 1.5.1</a> and then do</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ go get github.com/summerwind/h2spec/cmd/h2spec</pre></code>\n            <p>I only recommend it for testing locally running HTTP/2 servers. If you built <code>nghttp2</code> above while building <code>curl</code> you will also have the <code>nghttpd</code> HTTP/2 server available. You can run <code>h2spec</code> against it like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ nghttpd --no-tls -D -d /tmp 8888\n$ h2spec -p 8888</pre></code>\n            <p><code>h2spec</code> will run a battery of tests against the server and output conformance information with a reference to the relevant part of <a href=\"https://tools.ietf.org/html/rfc7540\">RFC7540</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1fHO4ABgKvK4LFEnRKf3sT/5613c3aafbdefdeae8584f09d476b9ae/Screen-Shot-2015-12-03-at-14-49-07.png\" alt=\"\" class=\"kg-image\" width=\"1667\" height=\"1269\" loading=\"lazy\"/>\n            \n            </figure><p>If you need to test a number of web sites to see which support HTTP/2 there&#39;s a tool called <a href=\"https://github.com/jgrahamc/h2scan\">h2scan</a>. Feed it a list of web sites and it will check to see if they support HTTPS, SPDY/3.1 and HTTP/2.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cat examples\nwww.cloudflare.com\nwww.amazon.com\nwww.yahoo.com\n$ h2scan --fields &lt; examples\nname,resolves,port443Open,tlsWorks,httpsWorks,cloudflare,spdyAnnounced,http2Announced,spdyWorks,http2Works,npn\nwww.cloudflare.com,t,t,t,t,t,t,t,t,t,h2 spdy/3.1 http/1.1\nwww.amazon.com,t,t,t,t,f,f,f,-,-,http/1.1\nwww.yahoo.com,t,t,t,t,f,t,f,t,-,spdy/3.1 spdy/3 http/1.1 http/1.0</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"useful-libraries\">Useful Libraries</h3>\n      <a href=\"#useful-libraries\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you are working in C and need to add HTTP/2 support to a program there&#39;s the <a href=\"https://nghttp2.org/\">nghttp2</a> library that is full implementation of HTTP/2 with a simple interface. Their <a href=\"https://nghttp2.org/documentation/tutorial-client.html#libevent-client-c\">HTTP/2 client tutorial</a> explains how to use the library to add HTTP/2 client capabilities. nghttp2 can also be used for <a href=\"https://nghttp2.org/documentation/tutorial-server.html#libevent-server-c\">servers</a>.</p><p>Go programmers will find full HTTP/2 support will arrive with Go 1.6. If you can&#39;t wait until then there&#39;s an extension package for HTTP/2 <a href=\"https://godoc.org/golang.org/x/net/http2\">golang.org/x/net/http2</a> . Details <a href=\"https://http2.golang.org/\">here</a>.</p><p>There&#39;s a pure Ruby implementation of HTTP/2 available from <a href=\"https://github.com/igrigorik/http-2\">Ilya Grigorik</a>.</p><p>Haskell programmers can use the <a href=\"https://hackage.haskell.org/package/http2\">http2</a> hackage.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"packet-snooping\">Packet Snooping</h3>\n      <a href=\"#packet-snooping\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The popular Wireshark packet analyzer added decoding on HTTP/2 in version <a href=\"https://www.wireshark.org/docs/relnotes/wireshark-1.12.0.html#_new_protocol_support\">1.12.0</a> and fully decodes HTTP/2 frames. Unfortunately most HTTP/2 is sent over TLS which means that, by default, Wireshark will not be able to decrypt the packets to be able to get to the HTTP/2 for decoding.</p><p>Fortunately, there is a workaround if you are using Google Chrome for testing. It is possible to get Chrome to save the symmetric cryptographic key used for TLS connections to a file and Wireshark is able to read that file to decode TLS connections.</p><p>This is done by setting the <code>SSLKEYLOGFILE</code> environment variable before running Chrome. I&#39;m running on Mac OS X and use Google Chrome Canary for testing so I run:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">% export SSLKEYLOGFILE=`pwd`/sslkey.log\n% /Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary</pre></code>\n            <p>Google Chrome will then write session keys to that file. In Wireshark I configure it to read the file by going to Preferences, expanding the Protocols list.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3VtO5XasCO2zeTqVfoTSPw/bc93d70e94487845510f5a8bbb4a0b06/Screen-Shot-2015-12-03-at-15-48-59.png\" alt=\"\" class=\"kg-image\" width=\"1766\" height=\"1218\" loading=\"lazy\"/>\n            \n            </figure><p>Then I find SSL and set the Pre-Main-Secret log filename to point to the same file.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1MluGb7E88xSg352ummOYT/7bd9b00a4580287fe629502873e5c81e/Screen-Shot-2015-12-03-at-15-49-44.png\" alt=\"\" class=\"kg-image\" width=\"1766\" height=\"1218\" loading=\"lazy\"/>\n            \n            </figure><p>Then Wireshark can decode the TLS connections made by that browser. Here&#39;s the beginning of a connection between Google Chrome Canary and the experimental server <a href=\"https://http2.cloudflare.com/\">https://http2.cloudflare.com/</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3g7dIhFoqbTfoj24iX4Yu/535556886753cc531e686595f96004c4/Screen-Shot-2015-12-03-at-15-51-04.png\" alt=\"\" class=\"kg-image\" width=\"2956\" height=\"1814\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"chrome-developer-view\">Chrome Developer View</h3>\n      <a href=\"#chrome-developer-view\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Finally, if you are looking at the performance of your own web site it can be handy to understand which parts of the page were downloaded using HTTP/2 and which were not. You can do that pretty easily using the Developer view in Google Chrome. Here&#39;s a shot of the CloudFlare blog loaded in Chrome. There&#39;s an additional Protocol fields available on the pop-up menu.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3KIWDKeDrHOsJYLQxKDFcT/f28684e2e951ad03a2d3db3db5075ee6/Screen-Shot-2015-12-04-at-10-46-21.png\" alt=\"\" class=\"kg-image\" width=\"2682\" height=\"1511\" loading=\"lazy\"/>\n            \n            </figure><p>Once added you can sort by protocol to see which parts were HTTP/2 (the h2) and which were other protocols.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4yftvuhcm97tnJvQJou28Z/53e7051e0112f8c01ac7edb1d6d0d96d/Screen-Shot-2015-12-04-at-10-46-29.png\" alt=\"\" class=\"kg-image\" width=\"2681\" height=\"1512\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"learning-about-http-2\">Learning about HTTP/2</h3>\n      <a href=\"#learning-about-http-2\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <ol><li><p>Short <a href=\"https://www.cloudflare.com/http2/what-is-http2/\">introduction to HTTP/2</a> from CloudFlare.</p></li><li><p><a href=\"http://daniel.haxx.se/http2/\">http2 explained</a> from the creator of <code>curl</code>.</p></li><li><p>The <a href=\"http://http2.github.io/\">home page</a> of the HTTP/2 working group with lots of information plus a list of useful <a href=\"https://github.com/http2/http2-spec/wiki/Tools\">tools</a>.</p></li></ol>",
		"id": "4j93RdB2JSheBauKZqi3x2",
		"localeList": {
			"name": "Tools for debugging, testing and using HTTP/2 Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2015-12-04T12:56:36.000+00:00",
		"slug": "tools-for-debugging-testing-and-using-http-2",
		"tags": [
			{
				"id": "3lxBe7kJ3IDjqgqMaBU1QJ",
				"name": "HTTP2",
				"slug": "http2"
			},
			{
				"id": "683doBhQG1RNA5TdzbpraJ",
				"name": "Google",
				"slug": "google"
			},
			{
				"id": "6sK5rczHk0pkaWhDEfVHAh",
				"name": "Claire",
				"slug": "claire"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			}
		],
		"title": "Tools for debugging, testing and using HTTP/2",
		"updated_at": "2025-10-24T09:38:14.591Z",
		"url": "https://blog.cloudflare.com/tools-for-debugging-testing-and-using-http-2"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}