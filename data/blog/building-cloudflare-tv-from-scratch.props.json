{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Oliver Yu",
				"slug": "oliver",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6PrGM6fV5VuI3QyplwhOPf/603b4ecc500a7dd5f8cda1aee5822b76/oliver.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Cloudflare TV is a 24x7 TV channel that takes you behind-the-scenes and let’s you hear directly from the builders working on your favorite Cloudflare products. This blog post covers the story of why we decided to build Cloudflare TV in-house and some of the technologies that make it possible.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5CyecMgjSKfZ4S5YIo4AYm/944c32fe83bb159fdd87f48338a3334f/building-cloudflare-tv-from-scratch.png",
		"featured": false,
		"html": "<p></p><p>Cloudflare TV is inspired by television shows of the 90s that shared the newest, most exciting developments in computing and music videos. We had three basic requirements for Cloudflare TV:</p><ol><li><p>Guest participation should be as simple as joining a Zoom call</p></li><li><p>There should be 24x7 programming. Something interesting should be playing <i>all the time</i></p></li><li><p>Everything should happen in the cloud and we should never have to ask anyone “to leave their computer on” to have the stream running 24 hours a day</p></li></ol>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/j8JPvjtPqbNC7OMfkqYhK/04f32b8fcc5bd60c87169357f4191cba/image1.png\" alt=\"\" class=\"kg-image\" width=\"578\" height=\"134\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"we-didnt-set-out-to-build-cloudflare-tv-from-scratch\">We didn’t set out to build Cloudflare TV from <i>scratch</i></h3>\n      <a href=\"#we-didnt-set-out-to-build-cloudflare-tv-from-scratch\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Building a lot of the technology behind Cloudflare TV from scratch was not part of the plan, especially given our aggressive timeline. So why did we decide to pursue it? After evaluating multiple live streaming solutions, we reached the following conclusion:</p><ul><li><p>24x7 linear streaming is not something that is a priority for most video streaming platforms. This makes sense: the rise of <a href=\"https://www.cloudflare.com/developer-platform/solutions/video-on-demand/\">video-on-demand</a> and event-based live streaming has come at the expense of linear streaming.</p></li><li><p>Most broadcasting platforms have their own guest apps which must be downloaded and set up in advance. This introduces unnecessary friction compared to clicking a link in the calendar invite to join a video call.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"wait-can-we-just-use-zoom-cloudflare\"><i>“Wait! Can we just use Zoom + Cloudflare?”</i></h3>\n      <a href=\"#wait-can-we-just-use-zoom-cloudflare\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>One of the core goals of Cloudflare TV was to make it easy for presenters, and what’s easier than letting them use the tools they already know? Everyone on our team is familiar with Zoom, and so are many of the guests who will be appearing on Cloudflare TV. Better yet, Zoom almost always &quot;just works&quot;.</p><p>So when we discovered that Zoom lets you push live video to any RTMP end point, we started experimenting with the feature.</p><p>“RTMP” stands for Real-Time Messaging Protocol and was originally developed to facilitate low-latency communication using TCP via Macromedia Flash. RTMP has outlived Flash and is widely used by platforms, including YouTube, to enable live video streaming. RTMP is a push protocol and platforms like YouTube provide RTMP endpoints which are simply URLs. Most video broadcast apps will let you configure multiple RTMP endpoints, which tells the app “<i>hey send my live video feed from my phone or computer to these services</i>.” If you find yourself watching a live video that is being broadcasted on multiple services, it is very likely made possible by RTMP.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/31W6iKPpSmg0aAB0PjhDGb/a809f622de9a52b470541484233f5ea4/image3.png\" alt=\"\" class=\"kg-image\" width=\"578\" height=\"396\" loading=\"lazy\"/>\n            \n            </figure><p>Zoom lets you provide RTMP endpoints and instruct it to send the live video feed of Zoom calls to, in our case, Cloudflare TV’s RTMP. Before we could use this feature, we needed to be able to ingest RTMP video feeds.</p><p>First, we set up an NGINX server with the RTMP module:</p>\n            <pre class=\"language-code\"><code class=\"language-code\">apt-get install build-essential libpcre3 libpcre3-dev libssl-dev git zlib1g-dev -y\nmkdir ~/build &amp;&amp; cd ~/build\ngit clone git://github.com/arut/nginx-rtmp-module.git\nwget http://nginx.org/download/nginx-1.14.1.tar.gz\ntar xzf nginx-1.14.1.tar.gz\ncd nginx-1.14.1\nsudo ./configure --with-http_ssl_module --add-module=../nginx-rtmp-module\nsudo make\nsudo make install</pre></code>\n            <p>Next, we configured <code>nginx.conf</code> so NGINX can not only ingest the RTMP feed, but also make it streamable to the end user. A browser typically can’t stream from an RTMP source. We need NGINX to take the RTMP feed and create HLS/DASH segments.</p><p>We defined an application called <code>live</code> inside <code>nginx.conf.</code> Within the live application, we can add directives to ingest RTMP and output HLS:</p>\n            <pre class=\"language-json\"><code class=\"language-json\">...\nrtmp {\n    server {\n        ...\n        application live {\n            allow play all;\n            live on;\n\n            # sample HLS\n            hls on;\n            hls_path /mnt/hls/;\n            hls_fragment 1;\n            hls_playlist_length 4;\n            hls_sync 100ms;\n        }\n    }\n}\n</pre></code>\n            <p>Once we had NGINX set up to ingest RTMP and HLS, we followed Zoom’s instructions on <a href=\"https://support.zoom.us/hc/en-us/articles/360028478292-Streaming-a-Meeting-or-Webinar-on-YouTube-Live\">Custom Live Streaming</a>. And soon enough, we had a basic prototype of live streaming Zoom calls using the Cloudflare network!</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"transitions-without-interruption\">Transitions without interruption</h3>\n      <a href=\"#transitions-without-interruption\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So we met our number one requirement of making the guest experience as easy as joining a video call. But Cloudflare TV isn&#39;t going to be one never-ending call. We needed a way to smoothly transition between multiple calls over the course of the day, and to replay some of our favorite segments.</p><p>For example, we may have live programming from 1000 to 1100 followed by two hours of pre-recorded (or replayed) content. When the live programming ends at 1100, the video experience would break and the user would need to hit refresh to see the next show on the schedule.</p><p>So how do we fix this? We determined we needed the following:</p><ol><li><p>Ability to set the programming (the <i>“what plays when?”)</i> many days in advance</p></li><li><p>Have “virtual rooms” ingesting video from different sources (live events, pre-recorded videos stored using our Cloudflare Stream product)</p></li></ol><p>Once we have a schedule and “virtual rooms”, we can dynamically switch what is currently playing on-air to the appropriate “virtual room” streaming the content.</p><p>To implement this, we used Contentful, Workers, and Brave (an open-source video editor).</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5XUFf7AdV7b8Wfh6ZG0hTg/54532516d529bee7c145daa52b931c04/image2.png\" alt=\"\" class=\"kg-image\" width=\"650\" height=\"400\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"brave\">Brave</h3>\n      <a href=\"#brave\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/32SC1qaxTOiSGmirYSKsdD/b5911f46cdc34b13e829375578b77405/image4.png\" alt=\"\" class=\"kg-image\" width=\"608\" height=\"329\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://github.com/bbc/brave\">Brave</a> is an open-source project started by the BBC. Using Brave, we were able to set up multiple virtual rooms and smoothly make any virtual room go on-air.</p><p>Under the hood, Brave is doing two key things:</p><ol><li><p>pulling multiple video feeds from various sources and placing them in virtual rooms</p></li><li><p>pushing the final (“on air feed”) to NGINX <i>every second of the day</i></p></li></ol>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"contentful\">Contentful</h3>\n      <a href=\"#contentful\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><a href=\"http://contentful.com/\">Contentful</a> is a headless content management platform designed to be API-first; it eliminated the need for a database and helped us build our scheduling feature rapidly.</p><p>Most of the necessary fields are pretty straightforward for a CMS: title, presenters, and, of course, the time slot. Each of these is automatically synced with the publicly-facing schedule at <a href=\"https://cloudflare.tv/schedule\">cloudflare.tv/schedule</a>.</p><p>We are able to use Workers to fetch events from Contentful:</p>\n            <pre class=\"language-json\"><code class=\"language-json\">export async function fetchEventRaw(id: string) {\n  let r = await fetch(`${CONTENTFUL_API}/entries/${id}`, {\n    headers: {\n      &#039;Content-Type&#039;: &#039;application/json&#039;,\n      Authorization: `Bearer ${CONTENTFUL_ADMIN}`,\n    },\n  })\n  return unwrap(r, &#039;Failed to retrieve event&#039;)\n}</pre></code>\n            <p>The more complex piece was integrating this with Zoom. Each segment needs its own Zoom meeting, and it’d be pretty arduous to create these manually. So when we publish in Contentful, Contentful makes a call to a Worker endpoint. The Worker endpoint automatically generates a Zoom meeting — and provides the Programming Team with the customized invite to send to the guest.</p><p>For example, when a new event is added to Contentful, Contentful notifies our Worker endpoint which creates a new meeting and configures it so it is being pushed to Cloudflare TV:</p>\n            <pre class=\"language-json\"><code class=\"language-json\">export async function createMeeting(ev: TVEvent) {\n  const headers = await zoomHeaders()\n\n  const alternative_hosts = ev.altHosts ? ev.altHosts.join(&#039;,&#039;) : &#039;&#039;\n\n  ev.zoomPassword = genPassword()\n\n  let r = await fetch(`https://api.zoom.us/v2/users/${ev.studio}@cloudflare.com/meetings`, {\n    method: &#039;POST&#039;,\n    headers,\n    body: JSON.stringify({\n      topic: ev.title,\n      type: 2,\n      start_time: ev.start,\n      duration: ev.duration,\n      timezone: &#039;UTC&#039;,\n      agenda: ev.description,\n      password: ev.zoomPassword,\n      settings: {\n        host_video: true,\n        participant_video: false,\n        alternative_hosts,\n        cn_meeting: false,\n        in_meeting: false,\n        join_before_host: true,\n        mute_upon_entry: true,\n        watermark: false,\n        use_pmi: false,\n        approval_type: 2,\n        audio: &#039;both&#039;,\n        auto_recording: &#039;cloud&#039;,\n        enforce_login: false,\n      },\n    }),\n  })\n  let data = await unwrap(r, &#039;Failed to create ZOOM meeting&#039;)\n  log(&#039;zoom: &#039;, data)\n\n  ev.meetingId = data.id\n  ev.zoomUrl = data.join_url\n\n  // push livestream configuration data to meeting\n  r = await fetch(`https://api.zoom.us/v2/meetings/${ev.meetingId}/livestream`, {\n    method: &#039;PATCH&#039;,\n    headers,\n    body: JSON.stringify({\n      //TODO: make configurable\n      stream_url: CFTV_RTMP_ENDPOINT,\n      stream_key: ev.studio,\n      page_url: &#039;https://cloudflare.tv&#039;,\n    }),\n  })\n  await unwrap(r, &#039;Failed to update LiveStream config&#039;)\n\n  return ev\n}</pre></code>\n            <p>The other upside to using Contentful is that many members of our team already have familiarity with it, so it reduces the overhead of learning a new tool.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"workers\">Workers</h3>\n      <a href=\"#workers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So far, we’ve described the different pieces of the backend (NGINX, Brave, Contentful) that make Cloudflare TV possible. How do we bring them all together? Cloudflare Workers serves as the glue that brings these systems together. The <a href=\"https://cloudflare.tv/\">Cloudflare TV frontend</a> is built on Worker Sites. The frontend calls our Worker endpoints to fetch data, such as the programming calendar.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"thinking-ahead\">Thinking Ahead...</h3>\n      <a href=\"#thinking-ahead\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We’re just getting started with Cloudflare TV. We have a long wish list of features we’d really like to see. Here are some of the features we can’t wait to work on:</p><ul><li><p>Improve the viewing experience by adding closed-caption support</p></li><li><p>Enable our viewers to call in and ask questions and contribute to the conversation</p></li><li><p>Bring Cloudflare TV to platforms like Apple TV and Roku</p></li></ul>",
		"id": "6n1f4DWW7cUcgbNbTHcqFR",
		"localeList": {
			"name": "Building Cloudflare TV from scratch Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Cloudflare TV is a 24x7 TV channel taking you behind-the-scenes and let’s you hear directly from the builders working on your favorite Cloudflare products.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2020-07-07T12:00:00.000+01:00",
		"slug": "building-cloudflare-tv-from-scratch",
		"tags": [
			{
				"id": "2lpv2daeYndRIyDp7rTa07",
				"name": "Live Streaming",
				"slug": "live-streaming"
			},
			{
				"id": "7mVMfcxp4tMqKil9jj8BJa",
				"name": "Cloudflare Stream",
				"slug": "cloudflare-stream"
			},
			{
				"id": "4g8tPriKOAUwdUT4jNPebe",
				"name": "Life at Cloudflare",
				"slug": "life-at-cloudflare"
			},
			{
				"id": "5bflRzis7L2XZC0Rx1y1Sl",
				"name": "Cloudflare TV",
				"slug": "cloudflare-tv"
			}
		],
		"title": "Building Cloudflare TV from scratch",
		"updated_at": "2025-10-24T09:42:19.353Z",
		"url": "https://blog.cloudflare.com/building-cloudflare-tv-from-scratch"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}