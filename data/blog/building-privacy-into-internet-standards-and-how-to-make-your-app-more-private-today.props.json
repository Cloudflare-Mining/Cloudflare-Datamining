{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "7",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"zh-tw",
		"ja-jp",
		"ko-kr"
	],
	"post": {
		"authors": [
			{
				"name": "Mari Galicer",
				"slug": "mari",
				"bio": "Product Manager, Consumer Privacy",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6Gh4G4hhni5rwz8W2Nj7Ok/06696413b61cc3f15c37281d9670a723/mari.png",
				"location": null,
				"website": null,
				"twitter": "@mmvri",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Christopher Wood",
				"slug": "christopher",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/EAlXDk7jyC8y5YJUgvUmR/ff577ba53cb138b58a7387aa75f2b458/christopher.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Privacy Gateway enables privacy-forward applications to use Cloudflare as a trusted Relay, limiting which identifying information, including IP addresses, is visible to their infrastructure",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/75gyIJpzUn71VRfwfiz5OW/e46280405e9430bd8c283e684e6ed54b/building-privacy-into-internet-standards-and-how-to-make-your-app-more-private-today.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4Mkyxm0JM8rpNjftdciTJL/e9c10aad999b5b1dc44824f7406b7650/image2-14.png\" alt=\"Building privacy into Internet standards and how to make your app more private today\" class=\"kg-image\" width=\"1999\" height=\"1125\" loading=\"lazy\"/>\n            \n            </figure><p>If you’re running a privacy-oriented application or service on the Internet, your options to provably protect users’ privacy are limited. You can minimize logs and data collection but even then, at a network level, every HTTP request needs to come from <i>somewhere.</i> Information generated by HTTP requests, like users’ IP addresses and TLS fingerprints, can be sensitive especially when combined with application data.</p><p>Meaningful improvements to your users’ privacy require a change in how HTTP requests are sent from client devices to the server that runs your application logic. This was the motivation for Privacy Gateway: a service that relays encrypted HTTP requests and responses between a client and application server. With Privacy Gateway, Cloudflare knows where the request is coming from, but not what it contains, and applications can see what the request contains, but not where it comes from. <b>Neither Cloudflare nor the application server has the full picture</b>, improving end-user privacy.</p><p>We recently deployed Privacy Gateway for <a href=\"https://flo.health/\">Flo Health Inc</a>., a leading female health app, for the launch of their <a href=\"https://www.theverge.com/2022/9/14/23351957/flo-period-tracker-privacy-anonymous-mode\">Anonymous Mode</a>. With Privacy Gateway in place, all request data for Anonymous Mode users is encrypted between the app user and Flo, which prevents Flo from seeing the IP addresses of those users and Cloudflare from seeing the contents of that request data.</p><p>With Privacy Gateway in place, several other privacy-critical applications are possible:</p><ul><li><p>Browser developers can collect user telemetry in a privacy-respecting manner– what extensions are installed, what defaults a user might have changed — while removing what is still a potentially personal identifier (the IP address) from that data.</p></li><li><p>Users can visit a healthcare site to report a Covid-19 exposure without worrying that the site is tracking their IP address and/or location.</p></li><li><p>DNS resolvers can serve DNS queries without linking who made the request with what website they’re visiting – a pattern we’ve implemented with <a href=\"/oblivious-dns/\">Oblivious DNS</a>.Privacy Gateway is based on <a href=\"https://datatracker.ietf.org/doc/draft-ietf-ohai-ohttp/\">Oblivious HTTP (OHTTP), an emerging IETF standard</a> and is built upon standard <a href=\"https://datatracker.ietf.org/doc/html/rfc9180\">hybrid public-key cryptography</a>.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"how-does-it-work\">How does it work?</h2>\n      <a href=\"#how-does-it-work\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The main innovation in the Oblivious HTTP standard – beyond a basic proxy service – is that these messages are encrypted <i>to the application’s server</i>, such that Privacy Gateway learns nothing of the application data beyond the source and destination of each message.</p><p>Privacy Gateway enables application developers and platforms, especially those with strong privacy requirements, to build something that closely resembles a “<a href=\"https://en.wikipedia.org/wiki/Mix_network\">Mixnet</a>”: an approach to obfuscating the source and destination of a message across a network. To that end, Privacy Gateway consists of three main components:</p><ol><li><p><b>Client:</b> the user’s device, or any client that’s configured to forward requests to Privacy Gateway.</p></li><li><p><b>Privacy Gateway:</b> a service operated by Cloudflare and designed to relay requests between the Client and the Gateway, without being able to observe the contents within.</p></li><li><p><b>Application server</b>: the origin or application web server responsible for decrypting requests from clients, and encrypting responses back.</p></li></ol><p>If you were to imagine request data as the contents of the envelope (a letter) and the IP address and request metadata as the address on the outside, with Privacy Gateway, Cloudflare is able to see the envelope’s address and safely forward it to its destination without being able to see what’s inside.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2sYdEzCvuyKU7h3wIUKju0/b845a85835291ffe7c9751355b9c6b5f/image4-9.png\" alt=\"\" class=\"kg-image\" width=\"1524\" height=\"1052\" loading=\"lazy\"/>\n            \n            </figure><p>An Oblivious HTTP transaction using Privacy Gateway</p><p>In slightly more detail, the data flow is as follows:</p><ol><li><p>Client <a href=\"https://datatracker.ietf.org/doc/html/draft-thomson-http-oblivious-02#section-5.1\">encapsulates an HTTP request</a> using the public key of the application server, and sends it to Privacy Gateway over an HTTPS connection.</p></li><li><p>Privacy Gateway forwards the request to the server over its own, separate HTTPS connection with the application server.</p></li><li><p>The application server  decapsulates the request, forwarding it to the target server which can produce the response.</p></li><li><p>The application server returns an <a href=\"https://datatracker.ietf.org/doc/html/draft-thomson-http-oblivious-02#section-5.2\">encapsulated response</a> to Privacy Gateway, which then forwards the result to the client.As specified in the protocol, requests from the client to the server are encrypted using HPKE, a state-of-the-art standard for public key encryption – which you can read more about <a href=\"/hybrid-public-key-encryption/\">here</a>. We’ve taken additional measures to ensure that OHTTP’s use of HPKE is secure by conducting a <a href=\"/stronger-than-a-promise-proving-oblivious-http-privacy-properties/\">formal analysis of the protocol</a>, and we expect to publish a deeper analysis in the coming weeks.</p></li></ol>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"how-privacy-gateway-improves-end-user-privacy\">How Privacy Gateway improves end-user privacy</h2>\n      <a href=\"#how-privacy-gateway-improves-end-user-privacy\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This interaction offers two types of privacy, which we informally refer to as <i>request privacy</i> and <i>client privacy</i>.</p><p>Request privacy means that the application server does not learn information that would otherwise be revealed by an HTTP request, such as IP address, geolocation, TLS and HTTPS fingerprints, and so on. Because Privacy Gateway uses a separate HTTPS connection between itself and the application server, all of this per-request information revealed to the application server represents that of Privacy Gateway, not of the client. However, developers need to take care to not send personally identifying information in the contents of requests. If the request, once decapsulated, includes information like users’ email, phone number, or credit card info, for example, Privacy Gateway will not meaningfully improve privacy.</p><p>Client privacy is a stronger notion. Because Cloudflare and the application server are not colluding to share individual user’s data, from the server’s perspective, each individual transaction came from some unknown client behind Privacy Gateway. In other words, a properly configured Privacy Gateway deployment means that applications cannot link any two requests to the same client. In particular, with Privacy Gateway, privacy loves company. If there is only one end-user making use of Privacy Gateway, then it only provides request privacy (since the client IP address remains hidden from the Gateway). It would not provide client privacy, since the server would know that each request corresponds to the same, single client. Client privacy requires that there be many users of the system, so the application server cannot make this determination.</p><p>To better understand request and client privacy, consider the following HTTP request between a client and server:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6tEmiR5nN2XWpa1EqATvBY/e74edca6ab779548c43aaa357fd88578/image3-7.png\" alt=\"\" class=\"kg-image\" width=\"808\" height=\"384\" loading=\"lazy\"/>\n            \n            </figure><p>Normal HTTP configuration with a client anonymity set of size 1</p><p>If a client connects directly to the server (or “Gateway” in OHTTP terms), the server is likely to see information about the client, including the IP address, TLS cipher used, and a degree of location data based on that IP address:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">- ipAddress: 192.0.2.33 # the client’s real IP address\n- ASN: 7922\n- AS Organization: Comcast Cable\n- tlsCipher: AEAD-CHACHA20-POLY1305-SHA256 # potentially unique\n- tlsVersion: TLSv1.3\n- Country: US\n- Region: California\n- City: Campbell</pre></code>\n            <p>There’s plenty of sensitive information here that might be unique to the end-user. In other words, the connection offers neither request nor client privacy.</p><p>With Privacy Gateway, clients do not connect directly to the application server itself. Instead, they connect to Privacy Gateway, which in turn connects to the server. This means that the server only observes connections from Privacy Gateway, not individual connections from clients, yielding a different view:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">- ipAddress: 104.16.5.5 # a Cloudflare IP\n- ASN: 13335\n- AS Organization: Cloudflare\n- tlsCipher: ECDHE-ECDSA-AES128-GCM-SHA256 # shared across several clients\n- tlsVersion: TLSv1.3\n- Country: US\n- Region: California\n- City: Los Angeles</pre></code>\n            \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/34pNp8QRamMWLMqBpT2Q05/4b400b029df3a7ad8821e7da69dd30b9/image1-18.png\" alt=\"\" class=\"kg-image\" width=\"1712\" height=\"364\" loading=\"lazy\"/>\n            \n            </figure><p>Privacy Gateway configuration with a client anonymity set of size k</p><p>This is request privacy. All information about the client’s location and identity are hidden from the application server. And all details about the application data are hidden from Privacy Gateway. For sensitive applications and protocols like DNS, keeping this metadata separate from the application data is an important step towards improving end-user privacy.</p><p>Moreover, applications should take care to not reveal sensitive, per-client information in their individual requests. Privacy Gateway cannot guarantee that applications do not send identifying info – such as email addresses, full names, etc – in request bodies, since it cannot observe plaintext application data. Applications which reveal user identifying information in requests may violate client privacy, but not request privacy. This is why – unlike our full <a href=\"/privacy-edge-making-building-privacy-first-apps-easier/\">application-level Privacy Proxy</a> product – Privacy Gateway is <i>not</i> meant to be used as a generic proxy-based protocol for arbitrary applications and traffic. It is meant to be a special purpose protocol for sensitive applications, including DNS (as is evidenced by <a href=\"/oblivious-dns/\">Oblivious DNS-over-HTTPS</a>), telemetry data, or generic API requests as discussed above.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"integrating-privacy-gateway-into-your-application\">Integrating Privacy Gateway into your application</h2>\n      <a href=\"#integrating-privacy-gateway-into-your-application\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Integrating with Privacy Gateway requires applications to implement the client and server side of the OHTTP protocol. Let’s walk through what this entails.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"server-integration\">Server Integration</h3>\n      <a href=\"#server-integration\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The server-side part of the protocol is responsible for two basic tasks:</p><ol><li><p>Publishing a public key for request encapsulation; and</p></li><li><p>Decrypting encapsulated client requests, processing the resulting request, and encrypting the corresponding response.</p></li></ol><p>A <a href=\"https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#name-key-configuration\">public encapsulation key</a>, called a key configuration, consists of a key identifier (so the server can support multiple keys at once for rotation purposes), cryptographic algorithm identifiers for encryption and decryption, and a public key:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">HPKE Symmetric Algorithms {\n  HPKE KDF ID (16),\n  HPKE AEAD ID (16),\n}\n\nOHTTP Key Config {\n  Key Identifier (8),\n  HPKE KEM ID (16),\n  HPKE Public Key (Npk * 8),\n  HPKE Symmetric Algorithms Length (16),\n  HPKE Symmetric Algorithms (32..262140),\n}</pre></code>\n            <p>Clients need this public key to create their request, and there are lots of ways to do this. Servers could fix a public key and then bake it into their application, but this would require a software update to rotate the key. Alternatively, clients could discover the public key some other way. Many discovery mechanisms exist and vary based on your threat model – see <a href=\"https://datatracker.ietf.org/doc/html/draft-wood-key-consistency\">this document</a> for more details. To start, a simple approach is to have clients fetch the public key directly from the server over some API. Below is a snippet of the API that our <a href=\"https://github.com/cloudflare/app-relay-gateway-go/blob/main/gateway.go#L116-L134\">open source OHTTP server provides</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">func (s *GatewayResource) configHandler(w http.ResponseWriter, r *http.Request) {\n\tconfig, err := s.Gateway.Config(s.keyID)\n\tif err != nil {\n\t\thttp.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tw.Write(config.Marshal())\n}</pre></code>\n            <p>Once public key generation and distribution is solved, the server then needs to handle encapsulated requests from clients. For each request, the server needs to decrypt the request, translate the plaintext to a corresponding HTTP request that can be resolved, and then encrypt the resulting response back to the client.</p><p>Open source OHTTP libraries typically offer functions for <a href=\"https://github.com/chris-wood/ohttp-go/blob/main/ohttp.go#L455\">request decryption</a> and <a href=\"https://github.com/chris-wood/ohttp-go/blob/main/ohttp.go#L502-L541\">response encryption</a>, whereas plaintext translation from <a href=\"https://datatracker.ietf.org/doc/html/rfc9292\">binary HTTP</a> to an HTTP request is handled separately. For example, our open source server delegates this translation to a different library that is specific to how Go HTTP requests are represented in memory. In particular, the function to translate from a plaintext request to a <a href=\"https://pkg.go.dev/net/http#Request\">Go HTTP request</a> is done with a function that has the following signature:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">func UnmarshalBinaryRequest(data []byte) (*http.Request, error) {\n\t...\n}</pre></code>\n            <p>Conversely, translating a <a href=\"https://pkg.go.dev/net/http#Response\">Go HTTP response</a> to a plaintext binary HTTP response message is done with a function that has the following signature:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">type BinaryResponse http.Response\n\nfunc (r *BinaryResponse) Marshal() ([]byte, error) {\n\t...\n}</pre></code>\n            <p>While there exist several open source libraries that one can use to implement OHTTP server support, we’ve packaged all of it up in our open source server implementation <a href=\"https://github.com/cloudflare/app-relay-gateway-go\">available here</a>. It includes instructions for building, testing, and deploying to make it easy to get started.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"client-integration\">Client integration</h3>\n      <a href=\"#client-integration\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Naturally, the client-side behavior of OHTTP mirrors that of the server. In particular, the client must:</p><ol><li><p>Discover or obtain the server public key; and</p></li><li><p>Encode and encrypt HTTP requests, send them to Privacy Gateway, and decrypt and decode the HTTP responses.</p></li></ol><p>Discovery of the server public key depends on the server’s chosen deployment model. For example, if the public key is available over an API, clients can simply fetch it directly:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ curl https://server.example/ohttp-configs &gt; config.bin</pre></code>\n            <p><a href=\"https://github.com/chris-wood/ohttp-go/blob/main/bhttp.go#L66\">Encoding</a>, <a href=\"https://github.com/chris-wood/ohttp-go/blob/main/ohttp.go#L321\">encrypting</a>, <a href=\"https://github.com/chris-wood/ohttp-go/blob/main/ohttp.go#L373\">decrypting</a>, and decoding are again best handled by OHTTP libraries when available. With these functions available, building client support is rather straightforward. A trivial example Go client using the library functions linked above is as follows:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">configEnc := ... // encoded public key\nconfig, err := ohttp.UnmarshalPublicConfig(configEnc)\nif err != nil {\n\treturn err\n}\n\nrequest, err := http.NewRequest(http.MethodGet, &quot;https://test.example/index.html&quot;, nil)\nif err != nil {\n\treturn err\n}\n\nbinaryRequest := ohttp.BinaryRequest(*request)\nencodedRequest, err := binaryRequest.Marshal()\nif err != nil {\n\treturn err\n}\n\nohttpClient := ohttp.NewDefaultClient(config)\nencapsulatedReq, reqContext, err := ohttpClient.EncapsulateRequest(encodedRequest)\n\nrelayRequest, err := http.NewRequest(http.MethodPost, &quot;https://relay.example&quot;, bytes.NewReader(encapsulatedReq.Marshal()))\nif err != nil {\n\treturn err\n}\nrelayRequest.Header.Set(&quot;Content-Type&quot;, &quot;message/ohttp-req&quot;)\n\nclient := http.Client{}\nrelayResponse, err := client.Do(relayRequest)\nif err != nil {\n\treturn err\n}\nbodyBytes, err := ioutil.ReadAll(relayResponse.Body)\nif err != nil {\n\treturn err\n}\nencapsulatedResp, err := ohttp.UnmarshalEncapsulatedResponse(bodyBytes)\nif err != nil {\n\treturn err\n}\n\nreceivedResp, err := reqContext.DecapsulateResponse(encapsulatedResp)\nif err != nil {\n\treturn err\n}\n\nresponse, err := ohttp.UnmarshalBinaryResponse(receivedResp)\nif err != nil {\n\treturn err\n}\n\nfmt.Println(response)</pre></code>\n            <p>A standalone client like this isn’t likely very useful to you if you have an existing application. To help integration into your existing application, we created a <a href=\"https://github.com/cloudflare/app-relay-client-library\">sample OHTTP client library</a> that’s compatible with iOS and macOS applications. Additionally, if there’s language or platform support you would like to see to help ease integration on either or the client or server side, please let us know!</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"interested\">Interested?</h2>\n      <a href=\"#interested\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Privacy Gateway is currently in early access – available to select privacy-oriented companies and partners. If you’re interested, <a href=\"https://www.cloudflare.com/lp/privacy-edge/\">please get in touch</a>.</p>",
		"id": "4KXLduwaLrRcnGTcApXBpH",
		"localeList": {
			"name": "Privacy Gateway: a privacy preserving proxy built on Internet standards Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "Translated for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "Translated for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Privacy Gateway enables privacy-forward applications to use Cloudflare as a trusted Relay, limiting which identifying information, including IP addresses, is visible to their infrastructure.",
		"metadata": {
			"title": "Privacy Gateway: a privacy preserving proxy built on Internet standards",
			"description": "Privacy Gateway enables privacy-forward applications to use Cloudflare as a trusted Relay, limiting which identifying information, including IP addresses, is visible to their infrastructure.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ugUL19gfJ1nNsB8s75sWO/c7f2662a41688a66ee0370257b4cd2c1/building-privacy-into-internet-standards-and-how-to-make-your-app-more-private-today-edvs11.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2022-10-27T14:01:00.000+01:00",
		"slug": "building-privacy-into-internet-standards-and-how-to-make-your-app-more-private-today",
		"tags": [
			{
				"id": "3BWeMuiOShelE7QM48sW9j",
				"name": "Privacy",
				"slug": "privacy"
			},
			{
				"id": "7ihMshJdu4QleFdxzaQA87",
				"name": "Protocols",
				"slug": "protocols"
			},
			{
				"id": "iiynSxxhE6dlxRhbsXqc4",
				"name": "Standards",
				"slug": "standards"
			}
		],
		"title": "Privacy Gateway: a privacy preserving proxy built on Internet standards",
		"updated_at": "2024-10-09T23:20:55.761Z",
		"url": "https://blog.cloudflare.com/building-privacy-into-internet-standards-and-how-to-make-your-app-more-private-today"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}