{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Some time ago we discovered that certain very slow downloads were getting abruptly terminated and began investigating whether that was a client (i.e. web browser) or server (i.e. us) problem.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6cMFwGMw9rUQ9gASHO8lzx/628c204e32c9d3762f0f2035cda53e5f/the-curious-case-of-slow-downloads.jpg",
		"featured": false,
		"html": "<p>Some time ago we discovered that certain very slow downloads were getting abruptly terminated and began investigating whether that was a client (i.e. web browser) or server (i.e. us) problem.</p><p>Some users were unable to download a binary file a few megabytes in length. The story was simple—the download connection was abruptly terminated even though the file was in the process of being downloaded. After a brief investigation we confirmed the problem: somewhere in our stack there was a bug.</p><p>Describing the problem was simple, reproducing the problem was easy with a single <code>curl</code> command, but fixing it took surprising amount of effort.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6JwG0LvBjz8MECWtw2lI7l/429381559a543fbe8478fe7af4e4c2e6/6784957048_4661ea7dfc_z.jpg\" alt=\"\" class=\"kg-image\" width=\"640\" height=\"424\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://creativecommons.org/licenses/by/2.0/\">CC BY 2.0</a> <a href=\"https://www.flickr.com/photos/jonicdao/6784957048/\">image</a> by <a href=\"https://www.flickr.com/photos/jonicdao\">jojo nicdao</a></p><p>In this article I&#39;ll describe the symptoms we saw, how we reproduced it and how we fixed it. Hopefully, by sharing our experiences we will save others from the tedious debugging we went through.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"failing-downloads\">Failing downloads</h3>\n      <a href=\"#failing-downloads\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Two things caught our attention in the bug report. First, only users on mobile phones were experiencing the problem. Second, the asset causing issues—a binary file—was pretty large, at around 30MB.</p><p>After a fruitful session with <code>tcpdump</code> one of our engineers was able to prepare a test case that reproduced the problem. As so often happens, once you know what you are looking for reproducing a problem is easy. In this case setting up a large file on a test domain and using the <code>--limit-rate</code> option to <code>curl</code> was enough:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ curl -v http://example.com/large.bin --limit-rate 10k &gt; /dev/null\n* Closing connection #0\ncurl: (56) Recv failure: Connection reset by peer</pre></code>\n            <p>Poking with <code>tcpdump</code> showed there was RST packet coming from our server exactly 60 seconds after the connection was established:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ tcpdump -tttttni eth0 port 80\n00:00:00 IP 192.168.1.10.50112 &gt; 1.2.3.4.80: Flags [S], seq 3193165162, win 43690, options [mss 65495,sackOK,TS val 143660119 ecr 0,nop,wscale 7], length 0\n...\n00:01:00 IP 1.2.3.4.80 &gt; 192.168.1.10.50112: Flags [R.], seq 1579198, ack 88, win 342, options [nop,nop,TS val 143675137 ecr 143675135], length 0\n</pre></code>\n            <p>Clearly our server was doing something wrong. The RST packet coming from CloudFlare server is just bad. The client behaves, sends ACK packets politely, consumes the data at its own pace, and then we just abruptly cut the conversation.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"not-our-problem\">Not our problem</h3>\n      <a href=\"#not-our-problem\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We are a heavy users of NGINX. In order to isolate the problem we set up a basic off-the-shelf NGINX server. The issue was easily <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2016-03-slow-downloads/nginx.conf\">reproducible locally</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ curl --limit-rate 10k  localhost:8080/large.bin &gt; /dev/null\n* Closing connection #0\ncurl: (56) Recv failure: Connection reset by peer</pre></code>\n            <p>This proved the problem was not specific to our setup—it was a broader NGINX issue!</p><p>After some further poking we found two culprits. First, we were using the <a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#reset_timedout_connection\"><code>reset_timedout_connection</code></a> setting. This causes NGINX to close connections abruptly. When NGINX wants to time out a connection it sets <code>SO_LINGER</code> without a timeout on a socket, followed by a <code>close()</code>. This triggers the RST packet, instead of a usual graceful TCP finalization. Here&#39;s an <code>strace</code> log from NGINX:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">04:20:22 setsockopt(5, SOL_SOCKET, SO_LINGER, {onoff=1, linger=0}, 8) = 0\n04:20:22 close(5) = 0</pre></code>\n            <p>We could just have disabled the <code>reset_timedout_connection</code> setting, but that wouldn&#39;t have solved the underlying problem. Why was NGINX closing the connection in the first place?</p><p>After further investigation we looked at the <a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#send_timeout\"><code>send_timeout</code></a> configuration option. The default value is 60 seconds, exactly the timeout we were seeing.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">http {\n     send_timeout 60s;\n     ...</pre></code>\n            <p>The <code>send_timeout</code> option is used by NGINX to ensure that all connections will eventually drain. It controls the time allowed between successive <code>send</code>/<code>sendfile</code> calls on each connection. Generally speaking it&#39;s not fine for a single connection to use precious server resources for too long. If the download is going on too long or is plain stuck, it&#39;s okay for the HTTP server to be upset.</p><p>But there was more to it than that.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"not-an-nginx-problem-either\">Not an NGINX problem either</h3>\n      <a href=\"#not-an-nginx-problem-either\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Armed with <code>strace</code> we investigated what NGINX actually did:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">04:54:05 accept4(4, ...) = 5\n04:54:05 sendfile(5, 9, [0], 51773484) = 5325752\n04:55:05 close(5) = 0</pre></code>\n            <p>In the config we ordered NGINX to use <code>sendfile</code> to transmit the data. The call to <code>sendfile</code> succeeds and pushes 5MB of data to the send buffer. This value is interesting—it&#39;s about the amount of space we have in our default write buffer setting:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sysctl net.ipv4.tcp_wmem\nnet.ipv4.tcp_wmem = 4096 5242880 33554432</pre></code>\n            <p>A minute after the first long <code>sendfile</code> the socket is closed. Let&#39;s see what happens when we increase the <code>send_timeout</code> value to some big value (like 600 seconds):</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">08:21:37 accept4(4, ...) = 5\n08:21:37 sendfile(5, 9, [0], 51773484) = 6024754\n08:24:21 sendfile(5, 9, [6024754], 45748730) = 1768041\n08:27:09 sendfile(5, 9, [7792795], 43980689) = 1768041\n08:30:07 sendfile(5, 9, [9560836], 42212648) = 1768041\n...</pre></code>\n            <p>After the first large push of data, <code>sendfile</code> is called more times. Between each successive call it transfers about 1.7 MB. Between these syscalls, about every 180 seconds, the socket was constantly being drained by the slow <code>curl</code>, so why didn&#39;t NGINX refill it constantly?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-asymmetry\">The asymmetry</h3>\n      <a href=\"#the-asymmetry\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>A motto of Unix design is &quot;everything is a file&quot;. I prefer to think about this as: &quot;in Unix everything can be readable and writeable when given to <code>poll</code>&quot;. But what exactly does &quot;being readable&quot; mean? Let&#39;s discuss the behavior of network sockets on Linux.</p><p>The semantics of reading from a socket are simple:</p><ul><li><p>Calling <code>read()</code> will return the data available on the socket, until it&#39;s empty.</p></li><li><p><code>poll</code> reports the socket as readable when any data is available on it.</p></li></ul><p>One might think this is symmetrical and similar conditions hold for writing to a socket, like this:</p><ul><li><p>Calling <code>write()</code> will copy data to the write buffer, up until &quot;send buffer&quot; memory is exhausted.</p></li><li><p><code>poll</code> reports the socket is writeable if there is any space available in the send buffer.</p></li></ul><p>Surprisingly, the last point is <i>not</i> true.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"different-code-paths\">Different code paths</h3>\n      <a href=\"#different-code-paths\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>It&#39;s very important to realize that in the Linux Kernel, there are two separate code paths: one for sending data and another one for checking if a socket is writeable.</p><p>In order for <a href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp.c?v=4.5#L1167\"><code>send()</code></a> to succeed two conditions must be met:</p><ul><li><p>There must be <a href=\"http://lxr.free-electrons.com/source/include/net/sock.h?v=4.5#L1070\">some space available in the send buffer</a>.</p></li><li><p>The amount of enqueued, not sent, data <a href=\"http://lxr.free-electrons.com/source/include/net/tcp.h?v=4.5#L1691\">must be lower than the LOWAT setting</a>. We will ignore the <a href=\"https://lwn.net/Articles/560082/\">LOWAT setting</a> in this blog post.</p></li></ul><p>On the other hand, the conditions for a socket to be reported as <a href=\"http://lxr.free-electrons.com/source/net/ipv4/tcp.c?v=4.5#L519\">&quot;writeable&quot; by <code>poll</code></a> are slightly narrower:</p><ul><li><p>There must be some space available in the send buffer.</p></li><li><p>The amount of enqueued, not sent, data must be lower than the LOWAT setting.</p></li><li><p>The amount of <a href=\"http://lxr.free-electrons.com/source/include/net/sock.h?v4.5#L1079\">free buffer space</a> in the send buffer must be greater than <a href=\"http://lxr.free-electrons.com/source/include/net/sock.h?v.4.5#L785\">half of the used send buffer space</a>.</p></li></ul><p>The last condition is critical. This means that after you fill the socket send buffer to 100%, the socket will become writeable again only when it&#39;s drained below 66% of send buffer size.</p><p>Going back to our NGINX trace, the second <code>sendfile</code> we saw:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">08:24:21 sendfile(5, 9, [6024754], 45748730) = 1768041</pre></code>\n            <p>The call succeeded in sending 1.7 MiB of data. This is close to 33% of 5 MiB, our default <code>wmem</code> send buffer size.</p><p>I presume this threshold was implemented in Linux in order to avoid refilling the buffers too often. It is undesirable to wake up the sending program after each byte of the data was acknowledged by the client.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-solution\">The solution</h3>\n      <a href=\"#the-solution\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With full understanding of the problem we can decisively say when it happens:</p><ol><li><p>The socket send buffer is filled to at least 66%.</p></li><li><p>The customer download speed is poor and it fails to drain the buffer to below 66% in 60 seconds.</p></li><li><p>When that happens, the send buffer is not refilled in time, it&#39;s not reported as writeable, and the connection gets reset with a timeout.</p></li></ol><p>There are a couple of ways to fix the problem.</p><p>One option is to increase the <code>send_timeout</code> to, say, 280 seconds. This would ensure that given the default send buffer size, consumers faster than 50Kbps will never time out.</p><p>Another choice is to reduce the <code>tcp_wmem</code> send buffers sizes.</p><p>The final option is to patch NGINX to react differently on timeout. Instead of closing the connection, we could inspect the amount of data remaining in the send buffer. We can do that with <code>ioctl(TIOCOUTQ)</code>. With this information we know exactly how quickly the connection is being drained. If it&#39;s above some configurable threshold, we could decide to grant the connection some more time.</p><p>My colleague Chris Branch prepared <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2016-03-slow-downloads/nginx_send_minimum_rate.patch\">a Linux specific patch to NGINX</a>. It implements a <code>send_minimum_rate</code> option, which is used to specify the minimum permitted client throughput.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"summary\">Summary</h3>\n      <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The Linux networking stack is very complex. While it usually works really well, sometimes it gives us a surprise. Even very experienced programmers don&#39;t fully understand all the corner cases. During debugging we learned that setting timeouts in the &quot;write&quot; path of the code requires special attention. You can&#39;t just treat the &quot;write&quot; timeouts in the same way as &quot;read&quot; timeouts.</p><p>It was a surprise to me that the semantics of a socket being &quot;writeable&quot; are not symmetrical to the &quot;readable&quot; state.</p><p>In past <a href=\"/the-story-of-one-latency-spike/\">we found that raising receive buffers</a> can have unexpected consequences. Now we know tweaking <code>wmem</code> values can affect something totally different—NGINX send timeouts.</p><p>Tuning a CDN to work well for all the users takes a lot of work. This write up is a result of hard work done by four engineers (special thanks to Chris Branch!). If this sounds interesting, <a href=\"https://www.cloudflare.com/join-our-team/\">consider applying</a>!</p>",
		"id": "4lY3sdl7ekTDPIOI779NvN",
		"localeList": {
			"name": "The curious case of slow downloads Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2016-04-11T13:23:02.000+01:00",
		"slug": "the-curious-case-of-slow-downloads",
		"tags": [
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "3FBpuRfF7HUFga2Z5jgAFf",
				"name": "NGINX",
				"slug": "nginx"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			}
		],
		"title": "The curious case of slow downloads",
		"updated_at": "2025-10-24T10:50:24.210Z",
		"url": "https://blog.cloudflare.com/the-curious-case-of-slow-downloads"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}