{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "3",
	"locale": "en-us",
	"localesAvailable": [
		"ja-jp"
	],
	"post": {
		"authors": [
			{
				"name": "Yagiz Nizipli",
				"slug": "yagiz-nizipli",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/Nt978ELmW8HwrYwJDdwUz/c463d2ccaa54ed75b9c2e3f0fa0a7385/Yagiz_Nizipli.jpg",
				"publiclyIndex": true
			},
			{
				"name": "James M Snell",
				"slug": "jasnell",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5dR6CJtYedvLrkAZ6rxv9I/0db3d5a763a8b0a350ac04ac6410da6b/jasnell.jpg",
				"location": "California",
				"website": "https://bsky.app/profile/jasnell.me",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "We've implemented the node:http client and server APIs in Cloudflare Workers, allowing developers to migrate existing Node.js applications with minimal code changes.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6P6ZgL9jCOVpCb7HTit5fK/44032d6e590cd214de637caad0275fac/image1.png",
		"featured": false,
		"html": "<p>We’re making it easier to run your Node.js applications on <a href=\"https://www.cloudflare.com/developer-platform/products/workers/\"><u>Cloudflare Workers </u></a>by adding support for the <code>node:http</code> client and server APIs. This significant addition brings familiar Node.js HTTP interfaces to the edge, enabling you to deploy existing Express.js, Koa, and other Node.js applications globally with zero cold starts, automatic scaling, and significantly lower latency for your users — all without rewriting your codebase. Whether you&#39;re looking to migrate legacy applications to a modern serverless platform or build new ones using the APIs you already know, you can now leverage Workers&#39; global network while maintaining your existing development patterns and frameworks.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"the-challenge-node-js-style-http-in-a-serverless-environment\">The Challenge: Node.js-style HTTP in a Serverless Environment</h2>\n      <a href=\"#the-challenge-node-js-style-http-in-a-serverless-environment\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare Workers operate in a unique <a href=\"https://www.cloudflare.com/learning/serverless/what-is-serverless/\"><u>serverless</u></a> environment where direct tcp connection isn&#39;t available. Instead, all networking operations are fully managed by specialized services outside the Workers runtime itself — systems like our <a href=\"https://blog.cloudflare.com/introducing-oxy/\"><u>Open Egress Router (OER)</u></a> and <a href=\"https://github.com/cloudflare/pingora\"><u>Pingora</u></a> that handle connection pooling, keeping connections warm, managing egress IPs, and all the complex networking details. This means as a developer, you don&#39;t need to worry about TLS negotiation, connection management, or network optimization — it&#39;s all handled for you automatically.</p><p>This fully-managed approach is actually why we can&#39;t support certain Node.js APIs — these networking decisions are handled at the system level for performance and security. While this makes Workers different from traditional Node.js environments, it also makes them better for serverless computing — you get enterprise-grade networking without the complexity.</p><p>This fundamental difference required us to rethink how HTTP APIs work at the edge while maintaining compatibility with existing Node.js code patterns.</p><p>Our Solution: we&#39;ve implemented the core `node:http` APIs by building on top of the web-standard technologies that Workers already excel at. Here&#39;s how it works:</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"http-client-apis\">HTTP Client APIs</h3>\n      <a href=\"#http-client-apis\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The <code>node:http</code> client implementation includes the essential APIs you&#39;re familiar with:</p><ul><li><p><code>http.get()</code> - For simple GET requests</p></li><li><p><code>http.request()</code> - For full control over HTTP requests</p></li></ul><p>Our implementations of these APIs are built on top of the standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"><code><u>fetch()</u></code></a> API that Workers use natively, providing excellent performance while maintaining Node.js compatibility.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import http from &#039;node:http&#039;;\n\nexport default {\n  async fetch(request) {\n    // Use familiar Node.js HTTP client APIs\n    const { promise, resolve, reject } = Promise.withResolvers();\n\n    const req = http.get(&#039;https://api.example.com/data&#039;, (res) =&gt; {\n      let data = &#039;&#039;;\n      res.on(&#039;data&#039;, chunk =&gt; data += chunk);\n      res.on(&#039;end&#039;, () =&gt; {\n        resolve(new Response(data, {\n          headers: { &#039;Content-Type&#039;: &#039;application/json&#039; }\n        }));\n      });\n    });\n\n    req.on(&#039;error&#039;, reject);\n\n    return promise;\n  }\n};</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"whats-supported\">What&#39;s Supported</h3>\n      <a href=\"#whats-supported\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <ul><li><p>Standard HTTP methods (GET, POST, PUT, DELETE, etc.)</p></li><li><p>Request and response headers</p></li><li><p>Request and response bodies</p></li><li><p>Streaming responses</p></li><li><p>Basic authentication</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"current-limitations\">Current Limitations</h3>\n      <a href=\"#current-limitations\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <ul><li><p>The <a href=\"https://nodejs.org/api/http.html#class-httpagent\"><code><u>Agent</u></code></a> API is provided but operates as a no-op.</p></li><li><p><a href=\"https://nodejs.org/docs/v22.19.0/api/http.html#responseaddtrailersheaders\"><u>Trailers</u></a>, <a href=\"https://nodejs.org/docs/v22.19.0/api/http.html#responsewriteearlyhintshints-callback\"><u>early hints</u></a>, and <a href=\"https://nodejs.org/docs/v22.19.0/api/http.html#event-continue\"><u>1xx responses</u></a> are not supported.</p></li><li><p>TLS-specific options are not supported (Workers handle TLS automatically).</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"http-server-apis\">HTTP Server APIs</h2>\n      <a href=\"#http-server-apis\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The server-side implementation is where things get particularly interesting. Since Workers can&#39;t create traditional TCP servers listening on specific ports, we&#39;ve created a bridge system that connects Node.js-style servers to the Workers request handling model.</p><p>When you create an HTTP server and call <code>listen(port)</code>, instead of opening a TCP socket, the server is registered in an internal table within your Worker. This internal table acts as a bridge between http.createServer executions and the incoming fetch requests using the port number as the identifier. \n\nYou then use one of two methods to bridge incoming Worker requests to your Node.js-style server.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"manual-integration-with-handleasnoderequest\">Manual Integration with <code>handleAsNodeRequest</code></h3>\n      <a href=\"#manual-integration-with-handleasnoderequest\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This approach gives you the flexibility to integrate Node.js HTTP servers with other Worker features, and allows you to have multiple handlers in your default <a href=\"https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/rpc/\"><u>entrypoint</u></a> such as <code>fetch</code>, <code>scheduled</code>, <code>queue</code>, etc.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { handleAsNodeRequest } from &#039;cloudflare:node&#039;;\nimport { createServer } from &#039;node:http&#039;;\n\n// Create a traditional Node.js HTTP server\nconst server = createServer((req, res) =&gt; {\n  res.writeHead(200, { &#039;Content-Type&#039;: &#039;text/plain&#039; });\n  res.end(&#039;Hello from Node.js HTTP server!&#039;);\n});\n\n// Register the server (doesn&#039;t actually bind to port 8080)\nserver.listen(8080);\n\n// Bridge from Workers fetch handler to Node.js server\nexport default {\n  async fetch(request) {\n    // You can add custom logic here before forwarding\n    if (request.url.includes(&#039;/admin&#039;)) {\n      return new Response(&#039;Admin access&#039;, { status: 403 });\n    }\n\n    // Forward to the Node.js server\n    return handleAsNodeRequest(8080, request);\n  },\n  async queue(batch, env, ctx) {\n    for (const msg of batch.messages) {\n      msg.retry();\n    }\n  },\n  async scheduled(controller, env, ctx) {\n    ctx.waitUntil(doSomeTaskOnSchedule(controller));\n  },\n};</pre></code>\n            <p>This approach is perfect when you need to:</p><ul><li><p>Integrate with other Workers features like <a href=\"https://www.cloudflare.com/developer-platform/products/workers-kv/\"><u>KV</u></a>, <a href=\"https://www.cloudflare.com/developer-platform/products/durable-objects/\"><u>Durable Objects</u></a>, or <a href=\"https://www.cloudflare.com/developer-platform/products/r2/\"><u>R2</u></a></p></li><li><p>Handle some routes differently while delegating others to the Node.js server</p></li><li><p>Apply custom middleware or request processing</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"automatic-integration-with-httpserverhandler\">Automatic Integration with <code>httpServerHandler</code></h3>\n      <a href=\"#automatic-integration-with-httpserverhandler\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>For use cases where you want to integrate a Node.js HTTP server without any additional features or complexity, you can use the `httpServerHandler` function. This function automatically handles the integration for you. This solution is ideal for applications that don’t need Workers-specific features.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { httpServerHandler } from &#039;cloudflare:node&#039;;\nimport { createServer } from &#039;node:http&#039;;\n\n// Create your Node.js HTTP server\nconst server = createServer((req, res) =&gt; {\n  if (req.url === &#039;/&#039;) {\n    res.writeHead(200, { &#039;Content-Type&#039;: &#039;text/html&#039; });\n    res.end(&#039;&lt;h1&gt;Welcome to my Node.js app on Workers!&lt;/h1&gt;&#039;);\n  } else if (req.url === &#039;/api/status&#039;) {\n    res.writeHead(200, { &#039;Content-Type&#039;: &#039;application/json&#039; });\n    res.end(JSON.stringify({ status: &#039;ok&#039;, timestamp: Date.now() }));\n  } else {\n    res.writeHead(404, { &#039;Content-Type&#039;: &#039;text/plain&#039; });\n    res.end(&#039;Not Found&#039;);\n  }\n});\n\nserver.listen(8080);\n\n// Export the server as a Workers handler\nexport default httpServerHandler({ port: 8080 });\n// Or you can simply pass the http.Server instance directly:\n// export default httpServerHandler(server);</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h2 id=\"and-framework-compatibility\"><a href=\"https://expressjs.com/\"><u>Express.js</u></a>, <a href=\"https://koajs.com/\"><u>Koa.js</u></a> and Framework Compatibility</h2>\n      <a href=\"#and-framework-compatibility\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>These HTTP APIs open the door to running popular Node.js frameworks like Express.js on Workers. If any of the middlewares for these frameworks don’t work as expected, please <a href=\"https://github.com/cloudflare/workerd/issues\"><u>open an issue</u></a> to Cloudflare Workers repository.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { httpServerHandler } from &#039;cloudflare:node&#039;;\nimport express from &#039;express&#039;;\n\nconst app = express();\n\napp.get(&#039;/&#039;, (req, res) =&gt; {\n  res.json({ message: &#039;Express.js running on Cloudflare Workers!&#039; });\n});\n\napp.get(&#039;/api/users/:id&#039;, (req, res) =&gt; {\n  res.json({\n    id: req.params.id,\n    name: &#039;User &#039; + req.params.id\n  });\n});\n\napp.listen(3000);\nexport default httpServerHandler({ port: 3000 });\n// Or you can simply pass the http.Server instance directly:\n// export default httpServerHandler(app.listen(3000));</pre></code>\n            <p>In addition to <a href=\"https://expressjs.com\"><u>Express.js</u></a>, <a href=\"https://koajs.com/\"><u>Koa.js</u></a> is also supported:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import Koa from &#039;koa&#039;;\nimport { httpServerHandler } from &#039;cloudflare:node&#039;;\n\nconst app = new Koa()\n\napp.use(async ctx =&gt; {\n  ctx.body = &#039;Hello World&#039;;\n});\n\napp.listen(8080);\n\nexport default httpServerHandler({ port: 8080 });</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h2 id=\"getting-started-with-serverless-applications\">Getting started with serverless <a href=\"http://node.js\"><u>Node.js</u></a> applications</h2>\n      <a href=\"#getting-started-with-serverless-applications\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The <code>node:http </code>and <code>node:https</code> APIs are available in Workers with Node.js compatibility enabled using the <a href=\"https://developers.cloudflare.com/workers/configuration/compatibility-dates/#nodejs-compatibility-flag\"><code><u>nodejs_compat</u></code></a> compatibility flag with a compatibility date later than 08-15-2025.</p><p>The addition of <code>node:http</code> support brings us closer to our goal of making Cloudflare Workers the best platform for running JavaScript at the edge, whether you&#39;re building new applications or migrating existing ones.</p><a href=\"https://deploy.workers.cloudflare.com/?url=<https://github.com/cloudflare/templates/tree/main/nodejs-http-server-template\"><img src=\"https://deploy.workers.cloudflare.com/button\" alt=\"Deploy to Cloudflare\"/></a>\n<p></p><p>Ready to try it out? <a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/\"><u>Enable Node.js compatibility</u></a> in your Worker and start exploring the possibilities of familiar<a href=\"https://developers.cloudflare.com/workers/runtime-apis/nodejs/http/\"><u> HTTP APIs at the edge</u></a>.</p>",
		"id": "k5sD9WGL8BsJPuqsJj6Fn",
		"localeList": {
			"name": "LOC: Bringing Node.js HTTP servers to Cloudflare Workers",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "English for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "We've implemented the node:http client and server APIs in Cloudflare Workers, allowing developers to migrate existing Node.js applications with minimal code changes. This post explains how we built a bridge between the Workers serverless environment and Node.js's traditional HTTP model, complete with examples for running frameworks like Express.js at the edge.",
		"metadata": {
			"title": "Bringing Node.js HTTP servers to Cloudflare Workers",
			"description": "We've implemented the node:http client and server APIs in Cloudflare Workers, allowing developers to migrate existing Node.js applications with minimal code changes. This post explains how we built a bridge between the Workers serverless environment and Node.js's traditional HTTP model, complete with examples for running frameworks like Express.js at the edge.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1slf6xENM411vUzooeRZFY/9624c4a00df9888d4df9756f6d98aa3d/Bringing_Node.js_HTTP_servers_to_Cloudflare_Workers-OG.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2025-09-08T14:00+01:00",
		"slug": "bringing-node-js-http-servers-to-cloudflare-workers",
		"tags": [
			{
				"id": "3XzVULQKajbCuWudT6JD0p",
				"name": "Node.js",
				"slug": "node-js"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "1IVpRmO1Bg0J9pDI7FUeEB",
				"name": "Servers",
				"slug": "servers"
			}
		],
		"title": "Bringing Node.js HTTP servers to Cloudflare Workers",
		"updated_at": "2025-09-16T06:49:37.874Z",
		"url": "https://blog.cloudflare.com/bringing-node-js-http-servers-to-cloudflare-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}