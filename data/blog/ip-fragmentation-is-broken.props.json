{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "9",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "As opposed to the public telephone network, the internet has a Packet Switched design. But just how big can these packets be?",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4MSNlDVCEGcZt827pPmqor/0f2f3aa764239d71b714dd656158b607/ip-fragmentation-is-broken.jpg",
		"featured": false,
		"html": "<p>As opposed to the <a href=\"https://en.wikipedia.org/wiki/Public_switched_telephone_network\">public telephone network</a>, the internet has a <a href=\"https://en.wikipedia.org/wiki/Packet_switching\">Packet Switched</a> design. But just how big can these packets be?</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/73Q2p7jy3NbOeARKhzz5Zm/f460ab3c98a3eebf5270e9cef093132f/8093997590_02d7ec3713_z.jpg\" alt=\"\" class=\"kg-image\" width=\"640\" height=\"480\" loading=\"lazy\"/>\n            \n            </figure><p> CC BY 2.0 <a href=\"https://www.flickr.com/photos/ajmexico/8093997590\">image</a> by <a href=\"https://www.flickr.com/photos/ajmexico/\">ajmexico</a>, <a href=\"https://blog.apnic.net/2016/05/19/fragmenting-ipv6/\">inspired by</a></p><p>This is an old question and the IPv4 RFCs answer it pretty clearly. The idea was to split the problem into two separate concerns:</p><ul><li><p>What is the maximum packet size that can be handled by operating systems on both ends?</p></li><li><p>What is the maximum permitted datagram size that can be safely pushed through the physical connections between the hosts?</p></li></ul><p>When a packet is too big for a physical link, an intermediate router might chop it into multiple smaller datagrams in order to make it fit. This process is called &quot;forward&quot; IP fragmentation and the smaller datagrams are called IP fragments<a href=\"#fn1\">[1]</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5yOVFEXv5xc8DvPBehp1Zn/acec50ceab6a07ff6d31a50df3ab5287/fragments.jpg\" alt=\"\" class=\"kg-image\" width=\"830\" height=\"578\" loading=\"lazy\"/>\n            \n            </figure><p>Image by <a href=\"https://blog.apnic.net/2016/01/28/evaluating-ipv4-and-ipv6-packet-frangmentation/\">Geoff Huston</a>, reproduced with permission</p><p>The IPv4 specification defines the minimal requirements. From <a href=\"https://tools.ietf.org/html/rfc791\">the RFC791</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">Every internet destination must be able to receive a datagram\nof 576 octets either in one piece or in fragments to\nbe reassembled. [...]\n\nEvery internet module must be able to forward a datagram of 68\noctets without further fragmentation. [...]</pre></code>\n            <p>The first value - permitted reassembled packet size - is typically not problematic. IPv4 defines the minimum as 576 bytes, but popular operating systems can cope with very big packets, typically up to 65KiB.</p><p>The second one is more troublesome. All physical connections have inherent datagram size limits, depending on the specific medium they use. For example Frame Relay can send datagrams between 46 and 4,470 bytes. ATM uses fixed 53 bytes, classical Ethernet can do between 64 and 1500 bytes.</p><p>The spec defines the minimal requirement - each physical link must be able to transmit datagrams of at least 68 bytes. For IPv6 that minimal value has been bumped up to 1,280 bytes (see <a href=\"https://tools.ietf.org/html/rfc2460#section-5\">RFC2460</a>).</p><p>On the other hand, the maximum datagram size that can be transmitted without fragmentation is not defined by any specification and varies by link type. This value is called the MTU (<a href=\"https://en.wikipedia.org/wiki/Maximum_transmission_unit\">Maximum Transmission Unit</a>)<a href=\"#fn2\">[2]</a>.</p><p>The MTU defines a maximum datagram size on a local physical link. The internet is created from non-homogeneous networks, and on the path between two hosts there might be links with shorter MTU values. The maximum packet size that can be transmitted without fragmentation between two remote hosts is called <a href=\"https://en.wikipedia.org/wiki/Path_MTU_Discovery\">a Path MTU</a>, and can potentially be different for every connection.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"avoid-fragmentation\">Avoid fragmentation</h3>\n            <a href=\"#avoid-fragmentation\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>One might think that it&#39;s fine to build applications that transmit very big packets and rely on routers to perform the IP fragmentation. This is not a good idea. The problems with this approach were first discussed by <a href=\"http://www.hpl.hp.com/techreports/Compaq-DEC/WRL-87-3.pdf\">Kent and Mogul</a> in 1987. Here are a couple of highlights:</p><ul><li><p>To successfully reassemble a packet, all fragments must be delivered. No fragment can become corrupt or get lost in-flight. There simply is no way to notify the other party about missing fragments!</p></li><li><p>The last fragment will almost never have the optimal size. For large transfers this means a significant part of the traffic will be composed of suboptimal short datagrams - a waste of precious router resources.</p></li><li><p>Before the re-assembly a host must hold partial, fragment datagrams in memory. This opens an opportunity for memory exhaustion attacks.</p></li><li><p>Subsequent fragments lack the higher-layer header. TCP or UDP header is only present in the first fragment. This makes it impossible for firewalls to filter fragment datagrams based on criteria like source or destination ports.</p></li></ul><p>A more elaborate description of IP fragmentation problems can be found in these articles by Geoff Huston:</p><ul><li><p><a href=\"https://blog.apnic.net/2016/01/28/evaluating-ipv4-and-ipv6-packet-frangmentation/\">Evaluating IPv4 and IPv6 packet fragmentation</a></p></li><li><p><a href=\"https://blog.apnic.net/2016/05/19/fragmenting-ipv6/\">Fragmenting IPv6</a></p></li></ul>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"dont-fragment-icmp-packet-too-big\">Don&#39;t fragment - ICMP Packet too big</h3>\n            <a href=\"#dont-fragment-icmp-packet-too-big\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5fsgW6ELxQUUQUY7fkrloE/7325c15f203b2058b95da50dac776113/df.jpg\" alt=\"\" class=\"kg-image\" width=\"487\" height=\"297\" loading=\"lazy\"/>\n            \n            </figure><p>Image by <a href=\"https://blog.apnic.net/2016/01/28/evaluating-ipv4-and-ipv6-packet-frangmentation/\">Geoff Huston</a>, reproduced with permission</p><p>A solution to these problems was included in the IPv4 protocol. A sender can set the DF (Don&#39;t Fragment) flag in the IP header, asking intermediate routers never to perform fragmentation of a packet. Instead a router with a link having a smaller MTU will send an ICMP message &quot;backward&quot; and inform the sender to reduce the MTU for this connection.</p><p>The TCP protocol always sets the DF flag. The network stack looks carefully for incoming &quot;Packet too big&quot;<a href=\"#fn3\">[3]</a> ICMP messages and keeps track of the &quot;path MTU&quot; characteristic for every connection<a href=\"#fn4\">[4]</a>. This technique is called &quot;path MTU discovery&quot;, and it is mostly commonly used for TCP, although it can also be applied to other IP-based protocols. Being able to deliver the ICMP &quot;Packet too big&quot; messages is critical in keeping the TCP stack working optimally.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"how-the-internet-actually-works\">How the internet actually works</h3>\n            <a href=\"#how-the-internet-actually-works\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In a perfect world, internet connected devices would cooperate and correctly handle fragment datagrams and the associated ICMP packets. In reality though, IP fragments and ICMP packets are very often filtered out.</p><p>This is because the modern internet is much more complex than anticipated 36 years ago. Today, basically nobody is plugged directly into the public internet.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1pgqc0JOIId0GpmtbKoTc7/dbf0e2a316b29cbbdee57a678c1cc495/thecloud2.png\" alt=\"\" class=\"kg-image\" width=\"757\" height=\"300\" loading=\"lazy\"/>\n            \n            </figure><p>Customer devices connect through home routers which do NAT (<a href=\"https://en.wikipedia.org/wiki/Network_address_translation\">Network Address Translation</a>) and usually enforce firewall rules. Increasingly often there is more than one NAT installation on the packet path (e.g. <a href=\"https://en.wikipedia.org/wiki/Carrier-grade_NAT\">carrier-grade NAT</a>). Then, the packets hit the ISP infrastructure where there are ISP &quot;middle boxes&quot;. They perform all manner of weird things on the traffic: enforce plan caps, throttle connections, perform logging, <a href=\"https://www.cloudflare.com/learning/security/global-dns-hijacking-threat/\">hijack DNS requests</a>, implement government-mandated web site bans, force transparent caching or arguably &quot;optimize&quot; the traffic in some other magical way. The middle boxes are used especially by mobile telcos.</p><p>Similarly, there are often multiple layers between a server and the public internet. Service providers sometimes use <a href=\"https://en.wikipedia.org/wiki/Anycast#Internet_Protocol_Version_4\">Anycast BGP routing</a>. That is: they handle the same IP ranges from multiple physical locations around the world. Within a datacenter on the other hand it&#39;s increasingly popular to use ECMP <a href=\"https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing\">Equal Cost Multi Path</a> for load balancing.</p><p>Each of these layers between a client and server can cause a Path MTU problem. Allow me to illustrate this with four scenarios.</p><h4>1. Client -&gt; Server DF+ / ICMP</h4>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/Cz9EAKTmEqN1aqJzKXJSF/2ee1ffefb8509d5c8acc92ac5ed4944c/client-dfp.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"149\" loading=\"lazy\"/>\n            \n            </figure><p>In the first scenario, a client uploads some data to the server using TCP so the DF flag is set on all of the packets. If the client fails to predict an appropriate MTU, an intermediate router will drop the big packets and send an ICMP “Packet too big” notification back to the client. These ICMP packets might get dropped by misconfigured customer NAT devices or ISP middle boxes.</p><p>According to the <a href=\"https://www.nlnetlabs.nl/downloads/publications/pmtu-black-holes-msc-thesis.pdf\">paper by Maikel de Boer and Jeffrey Bosma</a> from 2012 around 5% of IPv4 and 1% of IPv6 hosts block inbound ICMP packets.</p><p>My experience confirms this. ICMP messages are indeed often dropped for perceived security advantages, but this is relatively easy to fix. A bigger issue is with certain mobile ISPs with weird middle boxes. These often completely ignore ICMP and perform very aggressive connection rewriting. For example Orange Polska not only ignores inbound &quot;Packet too big&quot; ICMP messages, but also rewrites the connection state and <a href=\"http://lartc.org/howto/lartc.cookbook.mtu-mss.html\">clamps the MSS</a> to a non-negotiable 1344 bytes.</p><h4>2. Client -&gt; Server DF- / fragmentation</h4>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4cc7LrXd6JM9lt0KWGe0m1/0a045a4d544e9f584f7a78e5a8da827b/client-dfm.png\" alt=\"\" class=\"kg-image\" width=\"581\" height=\"137\" loading=\"lazy\"/>\n            \n            </figure><p>In next scenario, a client uploads some data with a protocol other than TCP, which has the DF flag cleared. For example, this might be a user playing a game using UDP, or having a voice call. The big outbound packets might get fragmented at some point in the path.</p><p>We can emulate this by launching <code>ping</code> with a large payload size:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ ping -s 2048 facebook.com</pre></code>\n            <p>This particular <code>ping</code> will fail with payloads bigger than 1472 bytes. Any larger size will get fragmented and won’t get delivered properly. There are multiple reasons why servers might mishandle fragments, but one of a popular problems is the use of ECMP load balancing. Due to the ECMP hashing, the first datagram containing a protocol header is likely to be load-balanced to a different server than the rest of the fragments, preventing the reassembly.</p><p>For a more detailed discussion of this issue, see:</p><ul><li><p>Our <a href=\"/path-mtu-discovery-in-practice/\">previous write up on ECMP</a>.</p></li><li><p>How Google attempts to solve ECMP fragmentation issues with <a href=\"https://research.google.com/pubs/archive/44824.pdf\">Maglev L4 Load balancer</a>.</p></li></ul><p>Furthermore, server and router misconfiguration is a significant issue. According to <a href=\"https://tools.ietf.org/html/rfc7872\">RFC7852</a> between 30% and 55% of servers drop IPv6 datagrams containing fragmentation header.</p><h4>3. Server -&gt; Client DF+ / ICMP</h4>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/UtBkyENFMejLCiBYfwpNI/be2227af40a62f1b8764106d4eecaf64/server-dfp.png\" alt=\"\" class=\"kg-image\" width=\"590\" height=\"139\" loading=\"lazy\"/>\n            \n            </figure><p>The next scenario is about a client downloading some data over TCP. When the server fails to predict the correct MTU, it should receive an ICMP “Packet too big” message. Easy, right?</p><p>Sadly, it&#39;s not, again due to ECMP routing. The ICMP message will most likely get delivered to the wrong server - the 5-tuple hash of ICMP packet will not match the 5-tuple hash of the problematic connection. We <a href=\"/path-mtu-discovery-in-practice/\">wrote about this in the past</a>, and developed a simple userspace daemon to solve it. It works by broadcasting the inbound ICMP “Packet too big” notification to all the ECMP servers, hoping that the one with the problematic connection will see it.</p><p>Additionally due to Anycast routing, the ICMP might be delivered to the wrong datacenter altogether! Internet routing is often asymmetric and the best path from an intermediate router might direct the ICMP packets to the wrong place.</p><p>Missing ICMP “Packet too big” notifications can result in connections stalling and timing out. This is often called a <a href=\"https://en.wikipedia.org/wiki/Path_MTU_Discovery#Problems_with_PMTUD\">PMTU blackhole</a>. To aid this pessimistic case Linux implements a workaround - MTU Probing <a href=\"http://www.ietf.org/rfc/rfc4821.txt\">RFC4821</a>. MTU Probing tries to automatically identify packets dropped due to the wrong MTU, and uses heuristics to tune it. This feature is controlled via a sysctl:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ echo 1 &gt; /proc/sys/net/ipv4/tcp_mtu_probing</pre></code>\n            <p>But MTU probing is not without its own issues. First, it tends to miscategorize congestion-related packet loss as MTU issues. Long running connections tend to end up with a reduced MTU. Secondly, Linux does not implement MTU Probing for IPv6.</p><h4>4. Server -&gt; Client DF- / fragmentation</h4>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5FLqYyctRkLrYYTyDGXcbP/2b79de43fe7add8866faf603b872f975/server-dfm.png\" alt=\"\" class=\"kg-image\" width=\"604\" height=\"126\" loading=\"lazy\"/>\n            \n            </figure><p>Finally, there is a situation where the server sends big packets using a non-TCP protocol with the DF bit clear. In this scenario, the big packets will get fragmented on the path to the client. This situation is best illustrated with big DNS responses. Here are two DNS requests that will generate large responses and be delivered to the client as multiple IP fragments:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ dig +notcp +dnssec DNSKEY org @199.19.56.1\n$ dig +notcp +dnssec DNSKEY org @2001:500:f::1</pre></code>\n            <p>These requests might fail due to already mentioned the misconfigured <a href=\"https://en.wikipedia.org/wiki/Customer-premises_equipment\">home router</a>, broken NAT, broken ISP installations, or too restrictive firewall settings.</p><p>According to <a href=\"https://www.nlnetlabs.nl/downloads/publications/pmtu-black-holes-msc-thesis.pdf\">Boer and Bosma</a> around 6% of IPv4 and 10% of IPv6 hosts block inbound fragment datagrams.</p><p>Here are some links with more information about the specific fragmentation issues affecting <a href=\"https://www.cloudflare.com/learning/dns/what-is-dns/\">DNS</a>:</p><ul><li><p><a href=\"https://www.dns-oarc.net/oarc/services/replysizetest\">DNS-OARC Reply Size Test</a></p></li><li><p><a href=\"http://www.potaroo.net/ispcol/2017-08/xtn-hdrs.html\">IPv6, Large UDP Packets and the DNS</a></p></li></ul><h4>Yet the internet still works!</h4><p>With all these things going wrong, how does the internet still manage to work?</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6cXkQdo8Tuq03pgrmUGLoZ/6c496c142b61f7708631f8cc0973c3bf/nic.jpg\" alt=\"\" class=\"kg-image\" width=\"1280\" height=\"949\" loading=\"lazy\"/>\n            \n            </figure><p>CC BY-SA 3.0, <a href=\"https://commons.wikimedia.org/w/index.php?curid=122201\">source: Wikipedia</a></p><p>This mainly due to the success of <a href=\"https://en.wikipedia.org/wiki/Ethernet_frame\">Ethernet</a>. The great majority of the links in the public internet are Ethernet (or derived from it) and support the MTU of 1500 bytes.</p><p>If you blindly assume the MTU of 1500<a href=\"#fn5\">[5]</a>, you will be surprised how often it will work just fine. The internet keeps on working mostly because we are all using an MTU of 1500 and rarely need to do IP fragmentation and send ICMP messages.</p><p>This stops working on an unusual setup with links having a non-standard MTU. VPNs and other network tunnel software must be careful to ensure that the fragments and ICMP messages are working fine.</p><p>This is especially visible in the IPv6 world, where many users connect through tunnels. Having a healthy passage of ICMP in both ways is very important, especially since fragmentation in IPv6 basically doesn&#39;t work (we cited two sources claiming between 10% and 50% of IPv6 hosts block IPv6 Fragment header).</p><p>Since the Path MTU issues in IPv6 are so common, many IPv6 servers clamp down Path MTU to the protocol mandated minimum of 1280 bytes. This approach trades a bit of performance for best reliability.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"online-icmp-blackhole-checker\">Online ICMP blackhole checker</h3>\n            <a href=\"#online-icmp-blackhole-checker\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6C5lYgpMbYOFtDd96gWWra/f3650ccf76ba161d577d29e6e40ea4c5/Screen-Shot-2017-08-16-at-2.11.05-AM-1.png\" alt=\"\" class=\"kg-image\" width=\"727\" height=\"354\" loading=\"lazy\"/>\n            \n            </figure><p>To help explore and debug these issues, we built an online checker. You can find two versions of the test:</p><ul><li><p>IPv4 version: <a href=\"http://icmpcheck.popcount.org\">http://icmpcheck.popcount.org</a></p></li><li><p>IPv6 version: <a href=\"http://icmpcheckv6.popcount.org\">http://icmpcheckv6.popcount.org</a></p></li></ul><p>These sites launch two tests:</p><ul><li><p>The first test will deliver ICMP messages to your computer, with the intention of reducing the Path MTU to a laughingly small value.</p></li><li><p>The second test will send fragment datagrams back to you.</p></li></ul><p>Receiving a &quot;pass&quot; in both these tests should give you a reasonable assurance that the internet on your side of the cable is behaving well.</p><p>It&#39;s also easy to run the tests from command line, in case you want to run it on the server:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">perl -e &quot;print &#039;packettoolongyaithuji6reeNab4XahChaeRah1diej4&#039; x 180&quot; &gt; payload.bin\ncurl -v -s http://icmpcheck.popcount.org/icmp --data @payload.bin\ncurl -v -s http://icmpcheckv6.popcount.org/icmp --data @payload.bin</pre></code>\n            <p>This should reduce the path MTU to our server to 905 bytes. You can to verify this by looking into the routing cache table. On Linux you do this with:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">ip route get `dig +short icmpcheck.popcount.org`</pre></code>\n            <p>It&#39;s possible to clear the routing cache on Linux:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">ip route flush cache to `dig +short icmpcheck.popcount.org`</pre></code>\n            <p>The second test verifies if fragments are properly delivered to the client:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">curl -v -s http://icmpcheck.popcount.org/frag -o /dev/null\ncurl -v -s http://icmpcheckv6.popcount.org/frag -o /dev/null</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"summary\">Summary</h3>\n            <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In this blog post we described the problems with detecting Path MTU values in the internet. ICMP and fragment datagrams are often blocked on both sides of the connections. Clients can encounter misconfigured firewalls, NAT devices or use ISPs which aggressively intercept connections. Clients also often use VPN&#39;s or IPv6 tunnels which, misconfigured, can cause path MTU issues.</p><p>Servers on the other hand increasingly often rely on Anycast or ECMP. Both of these things, as well as router and firewall misconfiguration are often a cause for ICMP and fragment datagrams being dropped.</p><p>Finally, we hope the online test is useful and can give you more insight into the inner workings of your networks. The test has useful examples of tcpdump syntax, useful to gain more insight. Happy network debugging!</p><p><i>Is fixing fragmentation issues for 10% of the internet exciting? We are hiring system engineers of all stripes, Golang programmers, C wranglers, and interns in multiple locations! </i><a href=\"https://www.cloudflare.com/careers\"><i>Join us</i></a><i> in San Francisco, London, Austin, Champaign and Warsaw.</i></p><hr/><hr/><ol><li><p>In IPv6 the &quot;forward&quot; fragmentation works slightly differently than in IPv4. The intermediate routers are prohibited from fragmenting the packets, but the source can still do it. This is often confusing - a host might be asked to fragment a packet that it transmitted in the past. This makes little sense for stateless protocols like DNS. <a href=\"#fnref1\">↩︎</a></p></li><li><p>On a side note, there also exists a &quot;minimum transmission unit&quot;! In commonly used Ethernet framing, each transmitted datagram must have at least 64 bytes on Layer 2. This translates to 22 bytes on UDP and 10 bytes on TCP layer. Multiple implementations used to leak uninitialized memory on shorter packets! <a href=\"#fnref2\">↩︎</a></p></li><li><p>Strictly speaking in IPv4 the ICMP packet is named &quot;Destination Unreachable, Fragmentation Needed and Don&#39;t Fragment was Set&quot;. But I find the IPv6 ICMP error description &quot;Packet too big&quot; much clearer. <a href=\"#fnref3\">↩︎</a></p></li><li><p>As a hint, TCP stack also include a maximum allowed &quot;MSS&quot; value in SYN packets (MSS is basically an MTU value reduced by size of IP and TCP headers). This allows the hosts to know what is the MTU on <i>their</i> links. Notice: this doesn&#39;t say what is the MTU on the dozens internet links between the two hosts! <a href=\"#fnref4\">↩︎</a></p></li><li><p>Let&#39;s err on the safe side. A better MTU is 1492, to accommodate for DSL and PPPoE connections. <a href=\"#fnref5\">↩︎</a></p></li></ol>",
		"id": "46VhwoWUtsUhF1ekyKZhYo",
		"localeList": {
			"name": "Broken packets: IP fragmentation is flawed Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2017-08-18T18:40:55.000+01:00",
		"slug": "ip-fragmentation-is-broken",
		"tags": [
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			},
			{
				"id": "5NpgoTJYJjhgjSLaY7Gt3p",
				"name": "TCP",
				"slug": "tcp"
			},
			{
				"id": "5GwDZZTEDK1ZYAHNV31ygs",
				"name": "DNSSEC",
				"slug": "dnssec"
			},
			{
				"id": "5fZHv2k9HnJ7phOPmYexHw",
				"name": "DNS",
				"slug": "dns"
			}
		],
		"title": "Broken packets: IP fragmentation is flawed",
		"updated_at": "2024-10-10T00:33:54.790Z",
		"url": "https://blog.cloudflare.com/ip-fragmentation-is-broken"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}