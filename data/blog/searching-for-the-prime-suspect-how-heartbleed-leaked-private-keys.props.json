{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5vGNsXzZrtSLn2X30pnpUY/6f350e7dd36058a6422f9199b452bb02/john-graham-cumming.jpg",
				"location": "Lisbon, Portugal",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Within a few hours of CloudFlare launching its Heartbleed Challenge the truth was out. Not only did Heartbleed leak private session information (such as cookies and other data that SSL should have been protecting), but the crown jewels of an HTTPS web server were also vulnerable.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4lPKgNDjRS2f7pTWXkQIIh/aea6f3e6f315b08869ec7a8b42001d44/searching-for-the-prime-suspect-how-heartbleed-leaked-private-keys.jpg",
		"featured": false,
		"html": "<p>Within a few hours of CloudFlare launching its <a href=\"/answering-the-critical-question-can-you-get-private-ssl-keys-using-heartbleed\">Heartbleed Challenge</a> the truth was out. Not only did Heartbleed leak private session information (such as cookies and other data that SSL should have been protecting), but the crown jewels of an HTTPS web server were also vulnerable: the private SSL keys were accessible through Heartbleed messages.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3n71WKRKu8a2cIoaEWTCPJ/37bba296da398ddee502753e8a9d3b91/Prime-Suspect_BBC_cast-e1315077167915.jpg\" alt=\"Prime Suspect\" class=\"kg-image\" width=\"1024\" height=\"530\" loading=\"lazy\"/>\n            \n            </figure><p>When we launched the challenge we were unsure if private keys could be accessed, but had started the process of revoking and recreating all the SSL private keys that we manage. When the challenge was defeated in a matter of hours it became obvious that it was fairly easy to find the prime numbers that are at the heart of an RSA private key.</p><p>Most of the people who obtained the private SSL key of the challenge server did so by searching the results returned in Heartbleed messages for prime numbers. Testing for prime numbers itself is pretty simple (although slow): find a number and see if it has any divisors. Since the length of the prime numbers (in bits) was known it was just a matter of finding all blocks of 1,024 bits and seeing if they were actually a prime.</p><p>Finding one prime is enough to break the private SSL key.</p><p>The question we wanted to answer was: &quot;Why was it apparently so easy to find prime numbers in Heartbleed results?&quot; To get to the answer I instrumented a vulnerable version of OpenSSL (1.0.1f) and began the search for the primes and where they end up in memory. Strangely, it seemed that OpenSSL was set up to cleanse memory of primes (and other sensitive values) when they were no longer being used. So, what was going on?</p><p>But first a detour into the RSA algorithm and how it is implemented efficiently.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"rsa-and-the-montgomery-reduction\">RSA and the Montgomery Reduction</h3>\n            <a href=\"#rsa-and-the-montgomery-reduction\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The full details of the RSA cryptographic scheme can be read <a href=\"http://en.wikipedia.org/wiki/RSA_(cryptosystem)\">here</a>, but, the short version is that two large prime numbers (almost always called p and q) are chosen and kept secret. The product of those two numbers is referred to as the modulus, typically called N (N = p x q).</p><p>It&#39;s safe to make N public (it is part of what&#39;s called the public key) because it is believed (by mathematicians and computer scientists) that working out p and q from N is difficult (i.e. it is believed that factoring N is hard as long as p and q are very large).</p><p>So, when a brower connects to a site that&#39;s using SSL it obtains the public key from the site and the site keeps p and q secret. But the site needs p and q to encrypt data and so they are typically (but not always) held in memory of the server handling the web site.</p><p>In the Heartbleed attack is was possible to find one of p or q in the Heartbleed packets that were returned containing blocks of memory from the vulnerable server. Since N is public, once you have either of p or q the other can easily be worked out by dividing N by the prime you&#39;ve found.</p><p>Note, that in one Heartbleed attack a researcher used <a href=\"http://en.wikipedia.org/wiki/Coppersmith's_Attack\">Coppersmith&#39;s Attack</a>. That attack is a complex mathematical attack which means that it&#39;s possible to split N into p and q if you find just part of a prime number. Read the details of that <a href=\"http://www.lightbluetouchpaper.org/2014/04/25/heartbleed-and-rsa-private-keys/\">here</a>.</p><p>In practice, the mathematics used in RSA is rather slow and various schemes have been invented to speed it up. One, which is used by OpenSSL, is known as the <a href=\"http://en.wikipedia.org/wiki/Montgomery_reduction\">Montgomery Reduction</a>.</p><p>Deep inside RSA the fundamental operation that has to be performed is a multiplication modulo N. If you are not familiar with the term &quot;modulo N&quot;, it simply means &quot;divide by N and take the remainder&quot;. For example, here&#39;s 13 x 29 modulo 11 (which will be 13 x 29 divided by 11 and take the remainder):</p><p>13 x 29 modulo 11\n= 377 modulo 11\n= 3 (377/11 = 34 remainder 3)</p><p>This is a very expensive operation for a computer to perform (and in RSA it is performed repeatedly) because it involves multiplication and division (if you remember long division from school you&#39;ll remember how laborious it is: computers find it similarly difficult when compared to addition or subtraction).</p><p>In 1985, mathematician Peter Montgomery showed that it was possible to perform &#39;multiplication modulo N&#39; <a href=\"http://dx.doi.org/10.1090/S0025-5718-1985-0777282-X\">very quickly</a> as follows. At each step the following is performed:</p><ol><li><p>A digit from the left number is multiplied by the right number and added to a temporary variable (usually called an accumulator);</p></li><li><p>The accumulator is divided by 10 and the decimals are discarded;</p></li><li><p>If there are digits remaining in the left number then add to the accumulator the number r where r x 11 plus whatever is currently in the accumulator would be divisible by 10.</p></li><li><p>Move on to the next digit if there is one</p></li></ol><p>For example, 13 x 29 mod 11 can be calculated like this:</p><p>Accumulator</p><p>0\n87           Added 3 x 29\n8            Divided by 10\n10           Added 2 because 2 x 11 + 8 = 30 (divisible by 10)\n39           Added 1 x 29\n3            Divided by 10</p><p>The answer, 3, is in the accumulator. What&#39;s important here is that only &#39;easy&#39; calculations were performed: small multiplications by a single digit and division by 10. In the computer implementation all of this is done in binary with division by 2 instead of 10. Division by 2 is very, very easy to implement on a computer.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"under-the-hood-of-openssl\">Under the hood of OpenSSL</h3>\n            <a href=\"#under-the-hood-of-openssl\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>To understand how primes are used inside OpenSSL I instrumented the code to output information about all the memory allocated by OpenSSL and to highlight blocks of memory used for prime numbers. I then processed this information using a small program to produce a picture of memory.</p><p>Here&#39;s the state of the memory used by OpenSSL when running inside NGINX 1.5.13 just after it has started up. Green blocks are memory in use, black areas are unused and the two red bars are the two primes number p and q that form part of the RSA key.</p><p>Each row of the picture is 1,024 bytes. The picture shows a total of about 280KB of memory in use. The primes are being stored in a single location (delving into the source of OpenSSL this is the location of the primes when loaded in the function <code>ssl_set_pkey</code> in <a href=\"https://github.com/openssl/openssl/blob/master/ssl/ssl_rsa.c#L190\">ssl_rsa.c</a>).</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2VEiEETMlSBS0q12JWFt3R/c6c3d968ffaae448d00ae7dc0f369e68/startup.png\" alt=\"Starting\" class=\"kg-image\" width=\"2048\" height=\"560\" loading=\"lazy\"/>\n            \n            </figure><p>In contrast, something interesting has happen when NGINX/OpenSSL processes its first request. A second copy of the primes has appeared. OpenSSL is now using more memory and two long red lines (two complete primes) are in memory along with some fragments of prime numbers that have been partially overwritten (those are vulnerable to Coppersmith&#39;s Attack).</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5S7P8HmimvnpSsHUlImMzN/fe5285e8bed3a9be1845fe8f3a427ed1/first.png\" alt=\"One Request\" class=\"kg-image\" width=\"2048\" height=\"1204\" loading=\"lazy\"/>\n            \n            </figure><p>Delving into the code once more it becomes apparent that the two new primes are copies of p and q made for the Montgomery reduction code in <a href=\"https://github.com/openssl/openssl/blob/master/crypto/bn/bn_mont.c\">bn_mont.c</a>. The fragments of primes are left over from where p and q were used in calculations.</p><p>After ten identical requests the memory layout has changed a little more. The fragments of primes have been overwritten, but the Montgomery reduction copies are still there. And some new fragments have appeared.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4LoRhqkEerZKwaEzchIM8E/67b24a99a82bbcdac71dd32d622bcc13/ten.png\" alt=\"Ten Requests\" class=\"kg-image\" width=\"2048\" height=\"1226\" loading=\"lazy\"/>\n            \n            </figure><p>After running a more realistic simulated load through the web server the memory has grown and most of the prime fragments have been overwritten leaving the original primes and the Montgomery reduction primes in memory.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5kiHxM20Td8UonaVHwuPh/ea644194c164c6c22f22f792e6d7e57e/load.png\" alt=\"Load\" class=\"kg-image\" width=\"2048\" height=\"3542\" loading=\"lazy\"/>\n            \n            </figure><p>To get a sense of how OpenSSL copies the primes around, here&#39;s a slightly different visualization. It shows all the memory that stored primes in red (whether or not it was later overwritten). As you can see OpenSSL is making copies of the primes all over its memory space.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6bAcd8A5rn32nna7vi2oOt/9992cce4d2d7f7fd70c2891ade0eebe3/load-overwrite.png\" alt=\"Load overwrite\" class=\"kg-image\" width=\"2048\" height=\"3702\" loading=\"lazy\"/>\n            \n            </figure><p>And therein lies the heart of Heartbleed: there are two copies of the primes that never move (the original location where they are loaded and the location of the Montgomery reduction copy) and lots of temporary copies of the primes all over OpenSSL&#39;s memory.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"openssl-patches\">OpenSSL patches</h3>\n            <a href=\"#openssl-patches\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>It&#39;s possible to clean up OpenSSL&#39;s memory so that copies of primes are not left in memory by applying the following patch:</p><p>diff -ur openssl-1.0.1g/crypto/bn/bn_lib.c openssl-1.0.1g-sanitise/crypto/bn/bn_lib.c\n--- openssl-1.0.1g/crypto/bn/bn_lib.c   2014-03-17 09:14:20.000000000 -0700\n+++ openssl-1.0.1g-sanitise/crypto/bn/bn_lib.c  2014-04-19 07:57:53.489932751 -0700\n@@ -431,7 +431,13 @@\n{\nBN_ULONG *a = bn_expand_internal(b, words);\nif(!a) return NULL;</p><ul><li>\n            <pre class=\"language-bash\"><code class=\"language-bash\">  if(b-&gt;d) OPENSSL\\_free(b-&gt;d);</pre></code>\n            </li></ul><ul><li></li><li>\n            <pre class=\"language-bash\"><code class=\"language-bash\">   if (b-&gt;d != NULL)</pre></code>\n            </li><li>\n            <pre class=\"language-bash\"><code class=\"language-bash\">      {</pre></code>\n            </li><li>\n            <pre class=\"language-bash\"><code class=\"language-bash\">      OPENSSL\\_cleanse(b-&gt;d,b-&gt;dmax\\*sizeof(b-&gt;d\\[0\\]));</pre></code>\n            </li><li>\n            <pre class=\"language-bash\"><code class=\"language-bash\">      OPENSSL\\_free(b-&gt;d);</pre></code>\n            </li><li>\n            <pre class=\"language-bash\"><code class=\"language-bash\">      }</pre></code>\n            </li><li><p>b-&gt;d=a;\nb-&gt;dmax=words;\n}</p></li></ul><p>This patch fixes a problem where the <code>bn_expand2</code> function in <a href=\"https://github.com/openssl/openssl/blob/master/crypto/bn/bn_lib.c#L430\">bn_lib.c</a> freed memory potentially containing a prime without erasing it first. The patch adds a call to the OPENSSL_cleanse function that safely erases the number from memory before freeing it. The patch ensures the memory is cleaned up. It was sent to the OpenSSL team on April 19 and independently discovered by <a href=\"http://www.lightbluetouchpaper.org/2014/04/25/heartbleed-and-rsa-private-keys/\">Rubin Xu</a>.</p><p>This particular function is the cause of primes left in freed memory. Whenever OpenSSL needed to resize a number stored in one of its special <a href=\"https://github.com/openssl/openssl/blob/master/crypto/bn/bn.h#L300\">BIGNUM</a> structures it would free the now too small BIGNUM without erasing the memory.</p><p>That alone is not enough to prevent Heartbleed from getting the primes as there are other copies in memory. In testing, I found that the Montgomery reduction primes were particuarly easy to extract using Heartbleed messages. To prevent them from being created its possible to disable caching of the Montgomery parameters by removing the <code>RSA_FLAG_CACHE_PRIVATE</code> in <a href=\"https://github.com/openssl/openssl/blob/master/crypto/engine/eng_rsax.c#L130\">eng_rsax.c</a> (a similar flag exists in <a href=\"https://github.com/openssl/openssl/blob/master/crypto/rsa/rsa_eay.c#L972\">rsa_eay.c</a>.</p><p>The Montgomery code also doesn&#39;t clean up memory that it frees. The following patch corrects that problem.</p><p>diff -ur openssl-1.0.1g/crypto/bn/bn_mont.c openssl-1.0.1g-sanitise/crypto/bn/bn_mont.c\n--- openssl-1.0.1g/crypto/bn/bn_mont.c  2014-03-17 09:14:20.000000000 -0700+++ openssl-1.0.1g-sanitise/crypto/bn/bn_mont.c 2014-04-24 17:57:31.445316346 -0700\n@@ -345,9 +345,9 @@\nif(mont == NULL)\nreturn;</p><ul><li><p>BN_free(&amp;(mont-&gt;RR));</p></li><li><p>BN_free(&amp;(mont-&gt;N));</p></li><li><p>BN_free(&amp;(mont-&gt;Ni));</p></li></ul><ul><li><p>BN_clear_free(&amp;(mont-&gt;RR));</p></li><li><p>BN_clear_free(&amp;(mont-&gt;N));</p></li><li><p>BN_clear_free(&amp;(mont-&gt;Ni));\nif (mont-&gt;flags &amp; BN_FLG_MALLOCED)\nOPENSSL_free(mont);\n}</p></li></ul><p>Finally, there&#39;s always the possibility that the original location the primes were in might get exposed in a Heartbleed message. To protect against that it would be necessary to change the way OpenSSL memory is allocated so that memory allocated for sensitive data (like private keys) is kept far away from the memory buffers used for messages. A <a href=\"http://marc.info/?l=openssl-dev&m=139800505608917&w=2\">patch for this</a> has been submitted to OpenSSL.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"conclusion\">Conclusion</h3>\n            <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>A more radical solution is to not store the private keys inside OpenSSL at all. If the private key is not stored in the same process as OpenSSL it will not be accessible via a fault like Heartbleed.</p><p>CloudFlare is already testing that configuration. More on that in another blog post.</p><p>PS I am very grateful for <a href=\"http://matthewarcus.wordpress.com/about/\">Matthew Arcus</a> for corresponding with me about this and checking some of my assertions. It was Matthew who first pointed out that the Montgomery Reduction was another source of leaked primes.</p>",
		"id": "3ULcr0wvNmc7BydQA3uukI",
		"localeList": {
			"name": "Searching for The Prime Suspect: How Heartbleed Leaked Private Keys Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2014-04-27T23:00:00.000+01:00",
		"slug": "searching-for-the-prime-suspect-how-heartbleed-leaked-private-keys",
		"tags": [
			{
				"id": "56vA0Z6hqev6QaJBQmO2J8",
				"name": "TLS",
				"slug": "tls"
			},
			{
				"id": "5US4l4wdDysuDpZ4ktL3yP",
				"name": "HTTPS",
				"slug": "https"
			},
			{
				"id": "2fnCQE8RAlAe4IVUpITe58",
				"name": "OpenSSL",
				"slug": "openssl"
			},
			{
				"id": "2pFyOCtANFB5qS6nbtQbVp",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "Searching for The Prime Suspect: How Heartbleed Leaked Private Keys",
		"updated_at": "2024-10-10T00:40:01.226Z",
		"url": "https://blog.cloudflare.com/searching-for-the-prime-suspect-how-heartbleed-leaked-private-keys"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}