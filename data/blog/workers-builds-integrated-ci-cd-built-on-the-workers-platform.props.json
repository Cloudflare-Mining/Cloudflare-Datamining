{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "8",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Serena Shah-Simpson",
				"slug": "serena",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2cLxQm0wbdpyGirexVcdpr/2f6ae5b415dc4515cfffc2a4090bb9d3/serena.PNG",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Jacob Hands",
				"slug": "jacob-hands",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1u48WVfES8uNb77aB2z9bk/9bfef685adbdef1298e57959119d5931/jacob-hands.jpeg",
				"location": null,
				"website": null,
				"twitter": "@jachands",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Natalie Rogers",
				"slug": "natalie",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7yLLjP9Y2l0cJdBrPMfrre/73f6d2b7a9c41cdf2f3dc9a5016d3a8d/natalie.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Workers Builds, an integrated CI/CD pipeline for the Workers platform, recently launched in open beta. We walk through how we built this product on Cloudflare’s Developer Platform.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/le4lYyHpoBKwuVJbiH4eW/793952ca6fa5a152d029526991db31f4/BLOG-2594_1.png",
		"featured": false,
		"html": "<p>During 2024’s Birthday Week, we <a href=\"https://blog.cloudflare.com/builder-day-2024-announcements/#continuous-integration-and-delivery\"><u>launched Workers Builds</u></a> in open beta — an integrated Continuous Integration and Delivery (CI/CD) workflow you can use to build and deploy everything from full-stack applications built with the most popular frameworks to simple static websites onto the Workers platform. With Workers Builds, you can connect a GitHub or GitLab repository to a Worker, and Cloudflare will automatically build and deploy your changes each time you push a commit.</p><p>Workers Builds is intended to bridge the gap between the developer experiences for Workers and Pages, the latter of which <a href=\"https://blog.cloudflare.com/cloudflare-pages/\"><u>launched with an integrated CI/CD system in 2020</u></a>. As we continue to <a href=\"https://blog.cloudflare.com/pages-and-workers-are-converging-into-one-experience/\"><u>merge the experiences of Pages and Workers</u></a>, we wanted to bring one of the best features of Pages to Workers: the ability to tie deployments to existing development workflows in GitHub and GitLab with minimal developer overhead. </p><p>In this post, we’re going to share how we built the Workers Builds system on Cloudflare’s Developer Platform, using <a href=\"https://developers.cloudflare.com/workers/\"><u>Workers</u></a>, <a href=\"https://developers.cloudflare.com/durable-objects\"><u>Durable Objects</u></a>, <a href=\"https://developers.cloudflare.com/hyperdrive\"><u>Hyperdrive</u></a>, <a href=\"https://developers.cloudflare.com/logs/log-explorer/\"><u>Workers Logs</u></a>, and <a href=\"https://developers.cloudflare.com/workers/configuration/smart-placement\"><u>Smart Placement</u></a>.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"the-design-problem\">The design problem</h2>\n            <a href=\"#the-design-problem\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>The core problem for Workers Builds is how to pick up a commit from GitHub or GitLab and start a containerized job that can clone the repo, build the project, and deploy a Worker. </p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6n6UCIKAM4uAtWzsRBiS16/1c0b655b415afe375b6b153ada570357/BLOG-2594_2.png\" alt=\"BLOG-2594 2\" class=\"kg-image\" width=\"1956\" height=\"360\" loading=\"lazy\"/>\n          </figure><p>Pages solves a similar problem, and we were initially inclined to expand our existing architecture and tech stack, which includes a centralized configuration plane built on Go in Kubernetes. We also considered the ways in which the Workers ecosystem has evolved in the four years since Pages launched — we have since launched so many more tools built for use cases just like this! </p><p>The distributed nature of Workers offers some advantages over a centralized stack — we can spend less time configuring Kubernetes because Workers automatically handles failover and scaling. Ultimately, we decided to keep using what required no additional work to re-use from Pages (namely, the system for connecting GitHub/GitLab accounts to Cloudflare, and ingesting push events from them), and for the rest build out a new architecture on the Workers platform, with reliability and minimal latency in mind.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"the-workers-builds-system\">The Workers Builds system</h2>\n            <a href=\"#the-workers-builds-system\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>We didn’t need to make any changes to the system that handles connections from GitHub/GitLab to Cloudflare and ingesting push events from them. That left us with two systems to build: the configuration plane for users to connect a Worker to a repo, and a build management system to run and monitor builds.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"client-worker\">Client Worker </h3>\n            <a href=\"#client-worker\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We can begin with our configuration plane, which consists of a simple Client Worker that implements a RESTful API (using <a href=\"https://hono.dev/docs/getting-started/cloudflare-workers\"><u>Hono</u></a>) and connects to a PostgreSQL database. It’s in this database that we store build configurations for our users, and through this Worker that users can view and manage their builds. </p><p>We use a <a href=\"https://developers.cloudflare.com/hyperdrive/\"><u>Hyperdrive binding</u></a> to connect to our database <a href=\"https://developers.cloudflare.com/hyperdrive/configuration/connect-to-private-database\"><u>securely over Cloudflare Access</u></a> (which also manages connection pooling and query caching).</p><p>We considered a more distributed data model (like <a href=\"https://developers.cloudflare.com/d1/\"><u>D1</u></a>, sharded by account), but ultimately decided that keeping our database in a datacenter more easily fit our use-case. The Workers Builds data model is relational — Workers belong to Cloudflare Accounts, and Builds belong to Workers — and build metadata must be consistent in order to properly manage build queues. We chose to keep our failover-ready database in a centralized datacenter and take advantage of two other Workers products, Smart Placement and Hyperdrive, in order to keep the benefits of a distributed control plane. </p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/33eYqRr5LXKbAvfP8RR7X7/b82858c39b9755c6e056577c9449b00f/BLOG-2594_3.png\" alt=\"BLOG-2594 3\" class=\"kg-image\" width=\"1706\" height=\"560\" loading=\"lazy\"/>\n          </figure><p>Everything that you see in the Cloudflare Dashboard related to Workers Builds is served by this Worker. </p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"build-management-worker\">Build Management Worker</h3>\n            <a href=\"#build-management-worker\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The more challenging problem we faced was how to run and manage user builds effectively. We wanted to support the same experience that we had achieved with Pages, which led to these key requirements:</p><ol><li><p>Builds should be initiated with minimal latency.</p></li><li><p>The status of a build should be tracked and displayed through its entire lifecycle, starting when a user pushes a commit.</p></li><li><p>Customer build logs should be stored in a secure, private, and long-lived way.</p></li></ol><p>To solve these problems, we leaned heavily into the technology of <a href=\"https://developers.cloudflare.com/durable-objects/\"><u>Durable Objects</u></a> (DO). </p><p>We created a Build Management Worker with two DO classes: A Scheduler class to manage the scheduling of builds, and a class called BuildBuddy to manage individual builds. We chose to design our system this way for an efficient and scalable system. Since each build is assigned its own build manager DO, its operation won’t ever block other builds or the scheduler, meaning we can start up builds with minimal latency. Below, we dive into each of these Durable Objects classes.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6RUDJI7IYIlzcX4qjF9EYY/7e959b7a4489a41d275d74d634389f31/BLOG-2594_4.png\" alt=\"BLOG-2594 4\" class=\"kg-image\" width=\"1999\" height=\"1109\" loading=\"lazy\"/>\n          </figure><h4>Scheduler DO</h4><p>The Scheduler DO class is relatively simple. Using <a href=\"https://developers.cloudflare.com/durable-objects/api/alarms/\"><u>Durable Objects Alarms</u></a>, it is triggered every second to pull up a list of user build configurations that are ready to be started. For each of those builds, the Scheduler creates an instance of our other DO Class, the Build Buddy. </p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { DurableObject } from &#039;cloudflare:workers&#039;\n\n\nexport class BuildScheduler extends DurableObject {\n   state: DurableObjectState\n   env: Bindings\n\n\n   constructor(ctx: DurableObjectState, env: Bindings) {\n       super(ctx, env)\n   }\n   \n   // The DO alarm handler will be called every second to fetch builds\n   async alarm(): Promise&lt;void&gt; {\n// set alarm to run again in 1 second\n       await this.updateAlarm()\n\n\n       const builds = await this.getBuildsToSchedule()\n       await this.scheduleBuilds(builds)\n   }\n\n\n   async scheduleBuilds(builds: Builds[]): Promise&lt;void&gt; {\n       // Don&#039;t schedule builds, if no builds to schedule\n       if (builds.length === 0) return\n\n\n       const queue = new PQueue({ concurrency: 6 })\n       // Begin running builds\n       builds.forEach((build) =&gt;\n           queue.add(async () =&gt; {\n       \t  // The BuildBuddy is another DO described more in the next section! \n               const bb = getBuildBuddy(this.env, build.build_id)\n               await bb.startBuild(build)\n           })\n       )\n\n\n       await queue.onIdle()\n   }\n\n\n   async getBuildsToSchedule(): Promise&lt;Builds[]&gt; {\n       // returns list of builds to schedule\n   }\n\n\n   async updateAlarm(): Promise&lt;void&gt; {\n// We want to ensure we aren&#039;t running multiple alarms at once, so we only set the next alarm if there isn’t already one set. \n       const existingAlarm = await this.ctx.storage.getAlarm()\n       if (existingAlarm === null) {\n           this.ctx.storage.setAlarm(Date.now() + 1000)\n       }\n   }\n}\n</pre></code>\n            <h4>Build Buddy DO</h4><p>The Build Buddy DO class is what we use to manage each individual build from the time it begins initializing to when it is stopped. Every build has a buddy for life!</p><p>Upon creation of a Build Buddy DO instance, the Scheduler immediately calls <code>startBuild()</code> on the instance. The <code>startBuild()</code> method is responsible for fetching all metadata and secrets needed to run a build, and then kicking off a build on Cloudflare’s container platform (<a href=\"https://blog.cloudflare.com/container-platform-preview/\"><u>not public yet, but coming soon</u></a>!). </p><p>As the containerized build runs, it reports back to the Build Buddy, sending status updates and logs for the Build Buddy to deal with. </p><h5>Build status</h5><p>As a build progresses, it reports its own status back to Build Buddy, sending updates when it has finished initializing, has completed successfully, or been terminated by the user. The Build Buddy is responsible for handling this incoming information from the containerized build, writing status updates to the database (via a Hyperdrive binding) so that users can see the status of their build in the Cloudflare dashboard.</p><h5>Build logs</h5><p>A running build generates output logs that are important to store and surface to the user. The containerized build flushes these logs to the Build Buddy every second, which, in turn, stores those logs in <a href=\"https://developers.cloudflare.com/durable-objects/api/storage-api/\"><u>DO storage</u></a>. </p><p>The decision to use Durable Object storage here makes it easy to multicast logs to multiple clients efficiently, and allows us to use the same API for both streaming logs and viewing historical logs. </p><p>// build-management-app.ts</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// We created a Hono app to for use by our Client Worker API\nconst app = new Hono&lt;HonoContext&gt;()\n   .post(\n       &#039;/api/builds/:build_uuid/status&#039;,\n       async (c) =&gt; {\n           const buildStatus = await c.req.json()\n\n\n           // fetch build metadata\n           const build = ...\n\n\n           const bb = getBuildBuddy(c.env, build.build_id)\n           return await bb.handleStatusUpdate(build, statusUpdate)\n       }\n   )\n   .post(\n       &#039;/api/builds/:build_uuid/logs&#039;,\n       async (c) =&gt; {\n           const logs = await c.req.json()\n     // fetch build metadata\n           const build = ...\n\n\n           const bb = getBuildBuddy(c.env, build.build_id)\n           return await bb.addLogLines(logs.lines)\n       }\n   )\n\n\nexport default {\n   fetch: app.fetch\n}\n</pre></code>\n            <p>// build-buddy.ts</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { DurableObject } from &#039;cloudflare:workers&#039;\n\n\nexport class BuildBuddy extends DurableObject {\n   compute: WorkersBuildsCompute\n\n\n   constructor(ctx: DurableObjectState, env: Bindings) {\n       super(ctx, env)\n       this.compute = new ComputeClient({\n           // ...\n       })\n   }\n\n\n   // The Scheduler DO calls startBuild upon creating a BuildBuddy instance\n   startBuild(build: Build): void {\n       this.startBuildAsync(build)         \n   }\n\n\n   async startBuildAsync(build: Build): Promise&lt;void&gt; {\n       // fetch all necessary metadata build, including\n\t// environment variables, secrets, build tokens, repo credentials, \n// build image URI, etc\n\t// ...\n\n\n\t// start a containerized build\n       const computeBuild = await this.compute.createBuild({\n           // ...\n       })\n   }\n\n\n   // The Build Management worker calls handleStatusUpdate when it receives an update\n   // from the containerized build\n   async handleStatusUpdate(\n       build: Build,\n       buildStatusUpdatePayload: Payload\n   ): Promise&lt;void&gt; {\n// Write status updates to the database\n   }\n\n\n   // The Build Management worker calls addLogLines when it receives flushed logs\n   // from the containerized build\n   async addLogLines(logs: LogLines): Promise&lt;void&gt; {\n       // Generate nextLogsKey to store logs under      \n       this.ctx.storage.put(nextLogsKey, logs)\n   }\n\n\n   // The Client Worker can call methods on a Build Buddy via RPC, using a service binding to the Build Management Worker.\n   // The getLogs method retrieves logs for the user, and the cancelBuild method forwards a request from the user to terminate a build. \n   async getLogs(cursor: string){\n       const decodedCursor = cursor !== undefined ? decodeLogsCursor(cursor) : undefined\n       return await this.getLogs(decodedCursor)\n   }\n\n\n   async cancelBuild(compute_id: string, build_id: string): void{\n      await this.terminateBuild(build_id, compute_id)\n   }\n\n\n   async terminateBuild(build_id: number, compute_id: string): Promise&lt;void&gt; {\n       await this.compute.stopBuild(compute_id)\n   }\n}\n\n\n   export function getBuildBuddy(\n   env: Pick&lt;Bindings, &#039;BUILD_BUDDY&#039;&gt;,\n   build_id: number\n): DurableObjectStub&lt;BuildBuddy&gt; {\n   const id = env.BUILD_BUDDY.idFromName(build_id.toString())\n   return env.BUILD_BUDDY.get(id)\n}\n</pre></code>\n            <h5>Alarms</h5><p>We utilize <a href=\"https://developers.cloudflare.com/durable-objects/api/alarms/\"><u>alarms</u></a> in the Build Buddy to check that a build has a healthy startup and to terminate any builds that run longer than 20 minutes. </p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"how-else-have-we-leveraged-the-developer-platform\">How else have we leveraged the Developer Platform?</h2>\n            <a href=\"#how-else-have-we-leveraged-the-developer-platform\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Now that we&#39;ve gone over the core behavior of the Workers Builds control plane, we&#39;d like to detail a few other features of the Workers platform that we use to improve performance, monitor system health, and troubleshoot customer issues.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"smart-placement-and-location-hints\">Smart Placement and location hints</h3>\n            <a href=\"#smart-placement-and-location-hints\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>While our control plane is distributed in the sense that it can be run across multiple datacenters, to reduce latency costs, we want most requests to be served from locations close to our primary database in the western US.</p><p>While a build is running, Build Buddy, a Durable Object, is continuously writing status updates to our database. For the Client and the Build Management API Workers, we enabled <a href=\"https://developers.cloudflare.com/workers/configuration/smart-placement/\"><u>Smart Placement</u></a> with <a href=\"https://developers.cloudflare.com/durable-objects/reference/data-location/#provide-a-location-hint\"><u>location hints</u></a> to ensure requests run close to the database.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4hhFLpYizLZ6cyu4h80YL8/40af67320a6bf44f375d6055b2997a99/BLOG-2594_5.png\" alt=\"BLOG-2594 5\" class=\"kg-image\" width=\"987\" height=\"542\" loading=\"lazy\"/>\n          </figure><p>This graph shows the reduction in round trip time (RTT) observed for our Worker with Smart Placement turned on. </p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"workers-logs\">Workers Logs</h3>\n            <a href=\"#workers-logs\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We needed a logging tool that allows us to aggregate and search across persistent operational logs from our Workers to assist with identifying and troubleshooting issues. We worked with the Workers Observability team to become early adopters of <a href=\"https://developers.cloudflare.com/workers/observability/logs/workers-logs\"><u>Workers Logs</u></a>.</p><p>Workers Logs worked out of the box, giving us fast and easy to use logs directly within the Cloudflare dashboard. To improve our ability to search logs, we created a <a href=\"https://www.npmjs.com/package/workers-tagged-logger\"><u>tagging library</u></a> that allows us to easily add metadata like the git tag of the deployed worker that the log comes from, allowing us to filter logs by release.</p><p>See a shortened example below for how we handle and log errors on the Client Worker. </p><p>// client-worker-app.ts</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// The Client Worker is a RESTful API built with Hono\nconst app = new Hono&lt;HonoContext&gt;()\n   // This is from the workers-tagged-logger library - first we register the logger\n   .use(useWorkersLogger(&#039;client-worker-app&#039;))\n   // If any error happens during execution, this middleware will ensure we log the error\n   .onError(useOnError)\n   // routes\n   .get(\n       &#039;/apiv4/builds&#039;,\n       async (c) =&gt; {\n           const { ids } = c.req.query()\n           return await getBuildsByIds(c, ids)\n       }\n   )\n\n\nfunction useOnError(e: Error, c: Context&lt;HonoContext&gt;): Response {\n   // Set the project identifier n the error\n   logger.setTags({ release: c.env.GIT_TAG })\n \n   // Write a log at level &#039;error&#039;. Can also log &#039;info&#039;, &#039;log&#039;, &#039;warn&#039;, and &#039;debug&#039;\n   logger.error(e)\n   return c.json(internal_error.toJSON(), internal_error.statusCode)\n}\n</pre></code>\n            <p>This setup can lead to the following sample log message from our Workers Log dashboard. You can see the release tag is set on the log.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6gfd725NCFNrhlDt3gK515/90138c159285e91535a986266918be13/BLOG-2594_6.png\" alt=\"BLOG-2594 6\" class=\"kg-image\" width=\"600\" height=\"490\" loading=\"lazy\"/>\n          </figure><p>We can get a better sense of the impact of the error by adding filters to the Workers Logs view, as shown below. We are able to filter on any of the fields since we’re <a href=\"https://developers.cloudflare.com/workers/observability/logs/workers-logs#logging-structured-json-objects\"><u>logging with structured JSON</u></a>.  </p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6XqXINluVzzyHd4O17JsnZ/0ac714792a4d21623b4a875291ae0ad0/BLOG-2594_7.png\" alt=\"BLOG-2594 7\" class=\"kg-image\" width=\"472\" height=\"238\" loading=\"lazy\"/>\n          </figure>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"r2\">R2</h3>\n            <a href=\"#r2\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Coming soon to Workers Builds is build caching, used to store artifacts of a build for subsequent builds to reuse, such as package dependencies and build outputs. Build caching can speed up customer builds by avoiding the need to redownload dependencies from NPM or to rebuild projects from scratch. The cache itself will be backed by <a href=\"https://developers.cloudflare.com/r2/\"><u>R2</u></a> storage. </p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"testing\">Testing</h3>\n            <a href=\"#testing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We were able to build up a great testing story using <a href=\"https://blog.cloudflare.com/workers-vitest-integration/\"><u>Vitest and workerd</u></a> — unit tests, cross-worker integration tests, the works. In the example below, we make use of the <code>runInDurableObject</code> stub from <code>cloudflare:test</code> to test instance methods on the Scheduler DO directly.</p><p>// scheduler.spec.ts</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { env, runInDurableObject } from &#039;cloudflare:test&#039;\nimport { expect, test } from &#039;vitest&#039;\nimport { BuildScheduler } from &#039;./scheduler&#039;\n\n\ntest(&#039;getBuildsToSchedule() runs a queued build&#039;, async () =&gt; {\n   // Our test harness creates a single build for our scheduler to pick up\n   const { build } = await harness.createBuild()\n\n\n   // We create a scheduler DO instance\n   const id = env.BUILD_SCHEDULER.idFromName(crypto.randomUUID())\n   const stub = env.BUILD_SCHEDULER.get(id)\n   await runInDurableObject(stub, async (instance: BuildScheduler) =&gt; {\n       expect(instance).toBeInstanceOf(BuildScheduler)\n\n\n// We check that the scheduler picks up 1 build\n       const builds = await instance.getBuildsToSchedule()\n       expect(builds.length).toBe(1)\n\t\n// We start the build, which should mark it as running\n       await instance.scheduleBuilds(builds)\n   })\n\n\n   // Check that there are no more builds to schedule\n   const queuedBuilds = ...\n   expect(queuedBuilds.length).toBe(0)\n})\n</pre></code>\n            <p>We use <code>SELF.fetch()</code> from <code>cloudflare:test</code> to run integration tests on our Client Worker, as shown below. This integration test covers our Hono endpoint and database queries made by the Client Worker in retrieving the metadata of a build.</p><p>// builds_api.test.ts</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { env, SELF } from &#039;cloudflare:test&#039;\n   \nit(&#039;correctly selects a single build&#039;, async () =&gt; {\n   // Our test harness creates a randomized build to test with\n   const { build } = await harness.createBuild()\n\n\n   // We send a request to the Client Worker itself to fetch the build metadata\n   const getBuild = await SELF.fetch(\n       `https://example.com/builds/${build1.build_uuid}`,\n       {\n           method: &#039;GET&#039;,\n           headers: new Headers({\n               Authorization: `Bearer JWT`,\n               &#039;content-type&#039;: &#039;application/json&#039;,\n           }),\n       }\n   )\n\n\n   // We expect to receive a 200 response from our request and for the \n   // build metadata returned to match that of the random build that we created\n   expect(getBuild.status).toBe(200)\n   const getBuildV4Resp = await getBuild.json()\n   const buildResp = getBuildV4Resp.result\n   expect(buildResp).toBeTruthy()\n   expect(buildResp).toEqual(build)\n})\n</pre></code>\n            <p>These tests run on the same runtime that Workers run on in production, meaning we have greater confidence that any code changes will behave as expected when they go live. </p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"analytics\">Analytics</h3>\n            <a href=\"#analytics\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We use the technology underlying the <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/\"><u>Workers Analytics Engine</u></a> to collect all of the metrics for our system. We set up <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/grafana/\"><u>Grafana</u></a> dashboards to display these metrics. </p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"javascript-native-rpc\">JavaScript-native RPC</h3>\n            <a href=\"#javascript-native-rpc\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p><a href=\"https://blog.cloudflare.com/javascript-native-rpc/\"><u>JavaScript-native RPC</u></a> was added to Workers in April of 2024, and it’s pretty magical. In the scheduler code example above, we call <code>startBuild()</code> on the BuildBuddy DO from the Scheduler DO. Without RPC, we would need to stand up routes on the BuildBuddy <code>fetch()</code> handler for the Scheduler to trigger with a fetch request. With RPC, there is almost no boilerplate — all we need to do is call a method on a class. </p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const bb = getBuildBuddy(this.env, build.build_id)\n\n\n// Starting a build without RPC 😢\nawait bb.fetch(&#039;http://do/api/start_build&#039;, {\n    method: &#039;POST&#039;,\n    body: JSON.stringify(build),\n})\n\n\n// Starting a build with RPC 😸\nawait bb.startBuild(build)\n</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h2 id=\"conclusion\">Conclusion</h2>\n            <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>By using Workers and Durable Objects, we were able to build a complex and distributed system that is easy to understand and is easily scalable. </p><p>It’s been a blast for our team to build on top of the very platform that we work on, something that would have been much harder to achieve on Workers just a few years ago. We believe in being Customer Zero for our own products — to identify pain points firsthand and to continuously improve the developer experience by applying them to our own use cases. It was fulfilling to have our needs as developers met by other teams and then see those tools quickly become available to the rest of the world — we were collaborators and internal testers for Workers Logs and private network support for Hyperdrive (both released on Birthday Week), and the soon to be released container platform.</p><p>Opportunities to build complex applications on the Developer Platform have increased in recent years as the platform has matured and expanded product offerings for more use cases. We hope that Workers Builds will be yet another tool in the Workers toolbox that enables developers to spend less time thinking about configuration and more time writing code. </p><p>Want to try it out? Check out the <a href=\"https://developers.cloudflare.com/workers/ci-cd/builds/\"><u>docs</u></a> to learn more about how to deploy your first project with Workers Builds.</p>",
		"id": "6uKjGQLUKCb33wGIcOQE1Y",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Workers Builds, an integrated CI/CD pipeline for the Workers platform, recently launched in open beta. We walk through how we built this product on Cloudflare’s Developer Platform.",
		"metadata": {
			"title": "Workers Builds: integrated CI/CD built on the Workers platform",
			"description": "Workers Builds, an integrated CI/CD pipeline for the Workers platform, recently launched in open beta. We walk through how we built this product on Cloudflare’s Developer Platform.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2chCtOBT6VDwfihl8rpHmt/1539f97126503921530ff0fd61d343aa/Workers_Builds-_integrated_CI_CD_built_on_the_Workers_platform-OG.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2024-10-31T13:00+00:00",
		"slug": "workers-builds-integrated-ci-cd-built-on-the-workers-platform",
		"tags": [
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			}
		],
		"title": "Workers Builds: integrated CI/CD built on the Workers platform",
		"updated_at": "2024-12-12T00:01:49.103Z",
		"url": "https://blog.cloudflare.com/workers-builds-integrated-ci-cd-built-on-the-workers-platform"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}