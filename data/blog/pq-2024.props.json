{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "33",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Bas Westerbaan",
				"slug": "bas",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4KeBG8XO1ADZHuEV9v5Hwz/6c90a96cfb1373b208bffc35f3fd71f4/bas.png",
				"location": "The Netherlands",
				"website": "https://bas.westerbaan.name",
				"twitter": "@bwesterb",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Nearly 2% of all TLS 1.3 connections established with Cloudflare are secured with post-quantum cryptography. What once was the topic of futuristic tech demos will soon be the new security baseline.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/73aDIFrL12FnYXLVinWSGh/09948d40cc180a84f0c1e658940b9aa4/pq-2024.png",
		"featured": false,
		"html": "<p></p><p>Today, nearly <b>two percent</b> of all TLS 1.3 connections established with Cloudflare are secured with <a href=\"https://www.cloudflare.com/learning/ssl/quantum/what-is-post-quantum-cryptography/\"><b>post-quantum cryptography</b></a><b>.</b> We expect to see double-digit adoption by the end of 2024. Apple <a href=\"https://security.apple.com/blog/imessage-pq3/\">announced</a> in February 2024 that it will secure iMessage with post-quantum cryptography before the end of the year, and <a href=\"https://signal.org/\">Signal</a> chats are <a href=\"https://signal.org/blog/pqxdh/\">already secured</a>. What once was the topic of futuristic tech demos will soon be the new security baseline for the Internet.</p><p>A lot has been happening in the field over the last few years, from mundane name changes (ML-KEM is the new name for Kyber), to new proposed algorithms in the <a href=\"https://csrc.nist.gov/projects/pqc-dig-sig\">signatures onramp</a>, to the catastrophic <a href=\"https://eprint.iacr.org/2022/975.pdf\">attack on SIKE</a>. Plenty that has been written merely three years ago now feels quite out of date. Thus, it is high time for an update: in this blog post we’ll take measure of where we are now in early 2024, what to expect for the coming years, and what you can do today.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/rJBlfZsFpgggNh7HoiSC7/9016d555b9e30dfe492db6cba85d31b3/graph.png\" alt=\"Fraction of TLS 1.3 connections established with Cloudflare that are secured with post-quantum cryptography.\" class=\"kg-image\" width=\"1600\" height=\"1200\" loading=\"lazy\"/>\n            \n            </figure><p>Fraction of TLS 1.3 connections established with Cloudflare that are secured with post-quantum cryptography.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"the-quantum-threat\">The quantum threat</h2>\n      <a href=\"#the-quantum-threat\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>First things first: why are we migrating our cryptography? It’s because of <b>quantum computers</b>. <a href=\"https://www.cloudflare.com/learning/ssl/quantum/what-is-quantum-computing/\">These marvelous devices</a>, instead of restricting themselves to zeroes and ones, compute using more of what nature actually affords us: quantum superposition, interference, and entanglement. This allows quantum computers to excel at certain very specific computations, notably simulating nature itself, which will be very helpful in developing new materials.</p><p>Quantum computers are not going to replace regular computers, though: they’re actually much worse than regular computers at most tasks. Think of them as graphic cards — specialized devices for specific computations.</p><p>Unfortunately, quantum computers also <a href=\"/the-quantum-menace\">excel</a> at breaking key cryptography that’s in common use today. Thus, we will have to move to <b>post-quantum cryptography</b>: cryptography designed to be resistant against quantum attack. We’ll discuss the exact impact on the different types of cryptography later on. For now quantum computers are rather anemic: they’re simply not good enough today to crack any real-world cryptographic keys.</p><p>That doesn’t mean we shouldn’t worry yet: encrypted traffic can be <a href=\"https://en.wikipedia.org/wiki/Harvest_now,_decrypt_later\">harvested today</a>, and decrypted with a quantum computer in the future.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"quantum-numerology\">Quantum numerology</h3>\n      <a href=\"#quantum-numerology\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>When will they be good enough? Like clockwork, every year there are news stories of new quantum computers with record-breaking number of qubits. This focus on counting qubits is quite misleading. To start, quantum computers are analogue machines, and there is always some noise interfering with the computation.</p><p>There are big differences between the different types of technology used to build quantum computers: silicon-based quantum computers seem to scale well, are quick to execute instructions, but have very noisy qubits. This does not mean they’re useless: with <a href=\"https://en.wikipedia.org/wiki/Quantum_error_correction\">quantum error correcting codes</a> one can effectively turn tens of millions of noisy silicon qubits into a few thousand high-fidelity ones, which could be enough to <a href=\"https://quantum-journal.org/papers/q-2021-04-15-433/\">break RSA</a>. Trapped-ion quantum computers, on the other hand, have much less noise, but have been harder to scale. Only a few hundred-thousand trapped-ion qubits could potentially draw the curtain on RSA.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2O3l7xYEj4myLC4C9NLuDC/4e49bc0d454bc5ffb8d3a4a5e4aa3300/Screenshot-2024-03-05-at-11.53.49.png\" alt=\"State-of-art in quantum computing measured by qubit count and noise in 2021, 2022, and 2023. Once the shaded gray area hits the left-most red line, we’re in trouble. Red line is expected to move to the left. Compiled by Samuel Jaques of the University of Waterloo.\" class=\"kg-image\" width=\"1222\" height=\"332\" loading=\"lazy\"/>\n            \n            </figure><p>State-of-art in quantum computing measured by qubit count and noise in <a href=\"https://sam-jaques.appspot.com/quantum_landscape\">2021</a>, <a href=\"https://sam-jaques.appspot.com/quantum_landscape_2022\">2022</a>, and <a href=\"https://sam-jaques.appspot.com/quantum_landscape_2023\">2023</a>. Once the shaded gray area hits the left-most red line, we’re in trouble. Red line is expected to move to the left. Compiled by <a href=\"https://sam-jaques.appspot.com/\">Samuel Jaques</a> of the University of Waterloo.</p><p>We’re only scratching the surface with the number of qubits and noise. For instance, a quirk of many quantum computers is that only adjacent qubits can interact — something that most estimates do not take into account. On the other hand, for a specific quantum computer, a tailored algorithm can perform much better than a generic one. We can only guess what a future quantum computer will look like, and today’s estimates are most likely off by at least an order of magnitude.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"when-will-quantum-computers-break-real-world-cryptography\">When will quantum computers break real-world cryptography?</h3>\n      <a href=\"#when-will-quantum-computers-break-real-world-cryptography\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So, when do we expect the demise of RSA-2048 which is in common use today? In a 2022 <a href=\"https://globalriskinstitute.org/publication/2022-quantum-threat-timeline-report/\">survey</a>, over half the interviewed experts thought it’d be more probable than not that by 2037 such a <i>cryptographically relevant</i> quantum computer would’ve been built.</p><p>We can also look at the US government’s timeline for the migration to post-quantum cryptography. The National Security Agency (NSA) aims to finish its migration before <a href=\"https://media.defense.gov/2022/Sep/07/2003071834/-1/-1/0/CSA_CNSA_2.0_ALGORITHMS_.PDF\">2033</a>, and will start to prefer post-quantum ready vendors for many products in 2025. The US government has a similarly ambitious timeline for the country as a whole: the aim is to be done <a href=\"https://www.whitehouse.gov/briefing-room/statements-releases/2022/05/04/national-security-memorandum-on-promoting-united-states-leadership-in-quantum-computing-while-mitigating-risks-to-vulnerable-cryptographic-systems/\">by 2035</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/50GUlzarTvWmpbkxZtourY/add63399c2f3804a98dc184f0fd8e9db/image7.png\" alt=\"NSA timeline for migrating third-party software to post-quantum cryptography.\" class=\"kg-image\" width=\"1999\" height=\"1118\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://media.defense.gov/2022/Sep/07/2003071834/-1/-1/0/CSA_CNSA_2.0_ALGORITHMS_.PDF\">NSA timeline</a> for migrating third-party software to post-quantum cryptography.</p><p>More anecdotally, at industry conferences on the post-quantum migration, I see particularly high participation of the automotive branch. Not that surprising, considering that the median age of a car on the road is 14 years, a lot of money is on the line, and not all cryptography used in cars can be upgraded easily once on the road.</p><p>So when will it arrive? Whether it’s 2034 or 2050, it will be <b>too soon</b>. The immense success of cryptography means it’s all around us now, from dishwasher, to pacemaker, to satellite. Most upgrades will be easy, and fit naturally in the product’s lifecycle, but there will be a long tail of difficult and costly upgrades.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"two-migrations\">Two migrations</h3>\n      <a href=\"#two-migrations\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To help prioritize, it is important to understand that there is a big difference in the difficulty, impact, and urgency of the post-quantum migration for the different kinds of cryptography required to create secure connections. In fact, for most organizations there will be two post-quantum migrations: <b>key agreement</b> and <b>signatures / certificates</b>.</p><p><b>Already post-quantum secure: symmetric cryptography</b></p><p>Let’s explain this for the case of creating a secure connection when visiting a website in a browser. The workhorse is a <b>symmetric cipher</b> such as AES-GCM. It’s what you would think of when thinking of cryptography: both parties, in this case the browser and server, have a shared key, and they encrypt / decrypt their messages with the same key. Unless you have that key, you can’t read anything, or modify anything.</p><p>The good news is that symmetric ciphers, such as <a href=\"/go-crypto-bridging-the-performance-gap/\">AES-GCM</a>, are already post-quantum secure. There is a common misconception that <a href=\"https://en.wikipedia.org/wiki/Grover%27s_algorithm\">Grover’s quantum algorithm</a> requires us to double the length of symmetric keys. On closer inspection of the algorithm, it’s clear that it is <a href=\"/nist-post-quantum-surprise#grover-s-algorithm\">not practical</a>. The way <a href=\"https://www.nist.gov/\">NIST</a>, the US National Institute for Standards and Technology (who have been spearheading the standardization of post-quantum cryptography) defines their post-quantum security levels is very telling. They define a specific security level by saying the scheme should be as hard to crack using either a classical or quantum computer as an existing symmetric cipher as follows:</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n.tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-baqh{text-align:center;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Level</span></th>\n    <th class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Definition,</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> as least as hard to break as … </span></th>\n    <th class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Example</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">To recover the key of </span><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">AES-128</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> by exhaustive search</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM-512, SLH-DSA-128s</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">2</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">To find a collision in </span><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SHA256</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> by exhaustive search</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-DSA-44</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">3</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">To recover the key of </span><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">AES-192</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> by exhaustive search</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM-768</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">4</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">To find a collision in </span><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SHA384</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> by exhaustive search</span></td>\n    <td class=\"tg-0lax\"></td>\n  </tr>\n  <tr>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">5</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">To recover the key of </span><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">AES-256</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> by exhaustive search</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM-1024, SLH-DSA-256s</span></td>\n  </tr>\n</tbody>\n</table><!--kg-card-end: html--><p>NIST PQC security levels, higher is harder to break (“more secure”). The examples ML-DSA, SLH-DSA and ML-KEM are covered below.</p><p>There are good intentions behind suggesting doubling the key lengths of symmetric cryptography. In many use cases, the extra cost is not that high, and it mitigates any theoretical risk completely. Scaling symmetric cryptography is cheap: double the bits is typically far less than half the cost. So on the surface, it is simple advice.</p><p>But if we insist on AES-256, it seems only logical to insist on NIST PQC level 5 for the public key cryptography as well. The problem is that public key cryptography does not scale very well. Depending on the scheme, going from level 1 to level 5 typically more than doubles data usage and CPU cost. As we’ll see, deploying post-quantum signatures at level 1 is already painful, and deploying them at level 5 is problematic.</p><p>A second reason is that upgrading symmetric cryptography isn’t always easy. If it requires replacing hardware, it can be costly indeed. An organization that cannot migrate all its cryptography in time simply can’t afford to waste its time doubling symmetric key lengths.</p><p><b>First migration: key agreement</b></p><p>Symmetric ciphers are not enough on their own: how do I know which key to use when visiting a website for the first time? The browser can’t just send a random key, as everyone listening in would see that key as well. You’d think it’s impossible, but there is some clever math to solve this, so that the browser and server can agree on a shared key. Such a scheme is called a <b>key agreement</b> mechanism, and is performed in the TLS <a href=\"https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/\">handshake</a>. Today almost all traffic is secured with <a href=\"https://en.wikipedia.org/wiki/Curve25519\">X25519</a>, a Diffie–Hellman-style key agreement, but its security is completely broken by <a href=\"https://en.wikipedia.org/wiki/Shor%27s_algorithm\">Shor’s algorithm</a> on a quantum computer. Thus, any communication secured today with Diffie–Hellman, when stored, can be decrypted in the future by a quantum computer.</p><p>This makes it <b>urgent</b> to upgrade key agreement today. As we will see, luckily, post-quantum key agreement is relatively straight-forward to deploy.</p><p><b>Second migration: signatures / certificates</b></p><p>The key agreement allows secure agreement on a key, but there is a big gap: we do not know <i>with whom</i> we agreed on the key. If we only do key agreement, an attacker in the middle can do separate key agreements with the browser and server, and re-encrypt any exchanged messages. To prevent this we need one final ingredient: authentication.</p><p>This is achieved using <b>signatures</b>. When visiting a website, say <a href=\"https://cloudflare.com\">cloudflare.com</a>, the web server presents a <b>certificate</b> signed by a <a href=\"https://en.wikipedia.org/wiki/Certificate_authority\">certification authority</a> (CA) that vouches that the public key in that certificate is controlled by <a href=\"https://cloudflare.com\">cloudflare.com</a>. In turn, the web server signs the handshake and shared key using the private key corresponding to the public key in the certificate. This allows the client to be sure that they’ve done a key agreement with <a href=\"https://cloudflare.com\">cloudflare.com</a>.</p><p>RSA and <a href=\"https://www.cloudflare.com/learning/dns/dnssec/ecdsa-and-dnssec/\">ECDSA</a> are commonly used traditional signature schemes. Again, Shor’s algorithm makes short work of them, allowing a quantum attacker to forge any signature. That means that a <a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\">MitM</a> (man-in-the-middle) can break into any connection that uses a signature scheme that is not post-quantum secure. This is of course an active attack: if the attacker isn’t in the middle as the handshake happens, the connection is not affected.</p><p>This makes upgrading signature schemes for TLS on the face of it less urgent, as we only need to have everyone migrated by the time the cryptographically-relevant quantum computer arrives. Unfortunately, we will see that migration to post-quantum signatures is much <b>more difficult</b>, and will require more time.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"timeline\">Timeline</h2>\n      <a href=\"#timeline\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Before we dive into the technical challenges of migrating the Internet to post-quantum cryptography, let’s have a look at how we got here, and what to expect in the coming years. Let’s start with how post-quantum cryptography came to be.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"origin-of-post-quantum-cryptography\">Origin of post-quantum cryptography</h3>\n      <a href=\"#origin-of-post-quantum-cryptography\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Physicists Feynman and Manin independently proposed quantum computers <a href=\"https://plato.stanford.edu/entries/qt-quantcomp/\">around 1980</a>. It took another 14 years before Shor published <a href=\"https://ieeexplore.ieee.org/abstract/document/365700\">his algorithm</a> attacking public key cryptography. Most post-quantum cryptography predates Shor’s famous algorithm.</p><p>There are various branches of post-quantum cryptography, of which the most prominent are lattice-based, hash-based, multivariate, code-based, and isogeny-based. Except for isogeny-based cryptography, none of these were initially conceived as post-quantum cryptography. In fact, early code-based and hash-based schemes are contemporaries of RSA, being proposed in the 1970s, and comfortably predate the publication of Shor’s algorithm in 1994. Also, the first multivariate scheme from 1988 is comfortably older than Shor’s algorithm. It is a nice coincidence that the most successful branch, lattice-based cryptography, is Shor’s closest contemporary, being proposed <a href=\"https://dl.acm.org/doi/pdf/10.1145/237814.237838\">in 1996</a>. For comparison, elliptic curve cryptography, which is widely used today, was first proposed in 1985.</p><p>In the years after the publication of Shor’s algorithm, cryptographers took measure of the existing cryptography: what’s clearly broken, and what could be post-quantum secure? In 2006, the first annual <a href=\"https://postquantum.cr.yp.to/\">International Workshop on Post-Quantum Cryptography</a> took place. From that conference, an introductory text <a href=\"https://www.researchgate.net/profile/Nicolas-Sendrier-2/publication/226115302_Code-Based_Cryptography/links/540d62d50cf2df04e7549388/Code-Based-Cryptography.pdf\">was prepared</a>, which holds up rather well as an introduction to the field. A notable caveat is the <a href=\"https://eprint.iacr.org/2022/214.pdf\">demise</a> of the <a href=\"https://www.pqcrainbow.org/\">Rainbow</a> signature scheme. In that same year, the elliptic-curve key-agreement X25519 <a href=\"https://cr.yp.to/ecdh/curve25519-20060209.pdf\">was proposed</a>, which now secures the vast majority of all Internet connections.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"nist-pqc-competition\">NIST PQC competition</h3>\n      <a href=\"#nist-pqc-competition\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Ten years later, in 2016, <a href=\"https://nist.gov\">NIST</a>, the US National Institute of Standards and Technology, <a href=\"https://csrc.nist.gov/CSRC/media/Projects/Post-Quantum-Cryptography/documents/call-for-proposals-final-dec-2016.pdf\">launched a public competition</a> to standardize post-quantum cryptography. They’re using a similar open format as was used to standardize <a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">AES</a> in 2001, and <a href=\"https://en.wikipedia.org/wiki/NIST_hash_function_competition\">SHA3</a> in 2012. Anyone can participate by submitting schemes and evaluating the proposals. Cryptographers from all over the world submitted algorithms. To focus attention, the list of submissions were whittled down over three rounds. From the original 82, based on public feedback, eight made it into the final round. From those eight, in 2022, NIST chose to <a href=\"/nist-post-quantum-surprise\">pick four to standardize first</a>: one <b>KEM</b> (for key agreement) and three signature schemes.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n.tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Old name</span></th>\n    <th class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">New name</span></th>\n    <th class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Branch</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Kyber</span></td>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> (FIPS 203)<br>Module-lattice based Key-Encapsulation Mechanism Standard</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Lattice-based</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Dilithium</span></td>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-DSA </span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">(FIPS 204)<br></span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Module-lattice based Digital Signature Standard</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Lattice-based</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SPHINCS</span><sup>+</sup></td>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SLH-DSA</span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\"> (FIPS 205)<br></span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Stateless Hash-Based Digital Signature Standard</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Hash-based</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Falcon</span></td>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">FN-DSA<br></span><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">FFT over NTRU lattices Digital Signature Standard</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Lattice-based</span></td>\n  </tr>\n</tbody>\n</table><!--kg-card-end: html--><p>First four selected post-quantum algorithms from NIST competition.</p><p>ML-KEM is the only post-quantum key agreement close to standardization now, and despite some occasional difficulty with its larger key sizes, in many cases it allows for a drop-in upgrade.</p><p>The situation is rather different with the signatures: it’s quite telling that NIST chose to standardize three already. And there are even more signatures set to be standardized in the future. The reason is that none of the proposed signatures are close to ideal. In short, they all have much larger keys and signatures than we’re used to. From a security standpoint SLH-DSA is the most conservative choice, but also the worst performer. For public key and signature sizes, FN-DSA is the best of the worst, but is difficult to implement safely because of floating-point arithmetic. This leaves ML-DSA as the default pick. More in depth comparisons are included below.</p><p><b>Name changes</b></p><p>Undoubtedly Kyber is the most familiar name, as it’s a preliminary version of Kyber that has already been deployed by <a href=\"https://blog.chromium.org/2023/08/protecting-chrome-traffic-with-hybrid.html\">Chrome</a> and <a href=\"/post-quantum-for-all\">Cloudflare</a> among others to counter store-now/decrypt-later. We will have to adjust, though. Just like Rijndael is most well-known as AES, and Keccak is SHA3 to most, ML-KEM is set to become the catchy new moniker for Kyber going forward.</p><p><b>Final standards</b></p><p>Although we know NIST will standardize these four, we’re not quite there yet. In August 2023, NIST released <a href=\"https://csrc.nist.gov/News/2023/three-draft-fips-for-post-quantum-cryptography\">three draft standards</a> for the first three with minor changes, and solicited public feedback. FN-DSA is delayed for now, as it’s more difficult to standardize and deploy securely.</p><p>For timely adopters, it’s important to be aware that based on the feedback on the first three drafts, there might be a few small tweaks before the final standards are released. These changes will be minor, but the final versions could well be incompatible on the wire with the current draft standards. These changes are mostly immaterial, only requiring a small update, and do not meaningfully affect the brunt of work required for the migration, including organizational engagement, inventory, and testing. Before shipping, there can be good reasons to wait for the final standards: support for preliminary versions is not widespread, and it might be costly to support both the draft and final standards. Still, many organizations have not started work on the post-quantum migration at all, citing the lack of standards — a situation that has been called <a href=\"https://www.youtube.com/watch?v=RbwwxZSBjyo&t=1468s\">crypto procrastination</a>.</p><p>So, when can we expect the final standards? There is no set timeline, but we expect the first three standards to be out around <b>mid-2024</b>.</p><p><b>Predicting protocol and software support</b></p><p>Having NIST’s final standards is not enough. The next step is to standardize the way the new algorithms are used in higher level protocols. In many cases, such as key agreement in TLS, this is as simple as assigning an identifier to the new algorithms. In other cases, such as <a href=\"https://www.cloudflare.com/dns/dnssec/how-dnssec-works/\">DNSSEC</a>, it requires a bit more thought. Many working groups at the <a href=\"https://www.ietf.org/\">IETF</a> have been preparing for years for the arrival of NIST’s final standards, and I expect that many protocol integrations will be available before the end of 2024. For the moment, let’s focus on <a href=\"https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/\">TLS</a>.</p><p>The next step is software support. Not all ecosystems can move at the same speed, but we have seen a lot of preparation already. We expect several major open ecosystems to have post-quantum cryptography and TLS support available early 2025, if not earlier.</p><p>Again, for TLS there is a big difference again between key agreement and signatures. For key agreement, the server and client can add and enable support for post-quantum key agreement independently. Once enabled on both sides, TLS negotiation will use post-quantum key agreement. We go into detail on <a href=\"/post-quantum-for-all\">TLS negotiation</a> in this blog post. If your product just uses TLS, your store-now/decrypt-now problem could be solved by a simple software update of the TLS library.</p><p>Post-quantum TLS certificates are more of a hassle. Unless you control both ends, you’ll need to install two certificates: one post-quantum certificate for the new clients, and a traditional one for the old clients. If you aren’t using automated issuance of certificates yet, this might be a good reason to <a href=\"https://letsencrypt.org/docs/client-options/\">check that out</a>. TLS allows the client to signal which signature schemes it supports so that the server can choose to serve a post-quantum certificate only to those clients that support it. Unfortunately, although almost all TLS libraries support setting up multiple certificates, not all servers expose that configuration. If they do, it will still require a configuration change in most cases. (Although undoubtedly <a href=\"https://caddyserver.com/\">caddy</a> will do it for you.)</p><p>Talking about post-quantum certificates: it will take some time before Certification Authorities (CAs) can issue them. Their <a href=\"https://csrc.nist.gov/glossary/term/hardware_security_module_hsm\">HSMs</a> will first need (hardware) support, which then will need to be audited. Also, the <a href=\"https://cabforum.org/\">CA/Browser forum</a> needs to approve the use of the new algorithms. Of these, the audits are likely to be the bottleneck, as there will be a lot of submissions after the publication of the NIST standards. It’s unlikely we will see a post-quantum certificate issued by a CA before 2026.</p><p>This means that it is not unlikely that come 2026, we are in an interesting in-between time, where almost all Internet traffic is protected by post-quantum key agreement, but not a single public post-quantum certificate is used.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"more-post-quantum-standards\">More post-quantum standards</h3>\n      <a href=\"#more-post-quantum-standards\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>NIST is not quite done standardizing post-quantum cryptography. There are two more post-quantum competitions running: <b>round 4</b> and the <b>signatures onramp</b>.</p><p><b>Round 4</b></p><p>From the post-quantum competition, NIST is still considering standardizing one or more of the code-based key agreements <a href=\"https://bikesuite.org/\">BIKE</a>, <a href=\"https://pqc-hqc.org/\">HQC</a>, <a href=\"https://classic.mceliece.org/\">Classic McEliece</a> in a fourth round. The performance of BIKE and HQC, both in key sizes and computational efficiency, is much worse than ML-KEM. NIST is considering standardizing one as a <b>backup KEM</b>, in case there is a cryptanalytic breakthrough against lattice-based cryptography, such as ML-KEM.</p><p>Classic McEliece does not compete with ML-KEM directly as a general purpose KEM. Instead, it’s a specialist: Classic McEliece public keys are very large (268kB), but it has (for a post-quantum KEM) very small ciphertexts (128 bytes). This makes Classic McEliece very attractive for use cases where the public key can be distributed in advance, such as to secure a software update mechanism.</p><p><b>Signatures onramp</b></p><p>In late 2022, after announcing the first four picks, NIST also called a new competition, dubbed the <i>signatures onramp</i>, to find <a href=\"https://csrc.nist.gov/projects/pqc-dig-sig\">additional signature schemes</a>. The competition has two goals. The first is hedging against cryptanalytic breakthroughs against lattice-based cryptography. NIST would like to standardize a signature that performs better than SLH-DSA, but is not based on lattices. Secondly, they’re looking for a signature scheme that might do well in use cases where the current roster doesn’t do well: we will discuss those at length later on in this post.</p><p>In July 2023, NIST posted the <a href=\"https://csrc.nist.gov/news/2023/additional-pqc-digital-signature-candidates\">40 submissions</a> they received for a first round of public review. The cryptographic community got to work, and as is quite normal for a first round, at the time of writing (February 2024) have managed to break 10 submissions completely, and weaken a couple of others drastically. Thom Wiggers maintains a useful <a href=\"https://pqshield.github.io/nist-sigs-zoo/\">website comparing the submissions</a>.</p><p>There are some very promising submissions. We will touch briefly upon them later on. It is worth mentioning that just like the main post-quantum competition, the selection process will take many years. It is unlikely that any of these onramp signature schemes will be standardized before 2027 — if they’re not broken in the first place.</p><p>Before we dive into the nitty-gritty of migrating the Internet to post-quantum cryptography, it’s instructive to look back at some past migrations.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"looking-back-migrating-to-tls-1-3\">Looking back: migrating to TLS 1.3</h2>\n      <a href=\"#looking-back-migrating-to-tls-1-3\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>One of the big recent migrations on the Internet was <a href=\"https://www.cloudflare.com/learning/ssl/why-use-tls-1.3/\">the switch from TLS 1.2 to TLS 1.3</a>. Work on the new protocol started around 2014. The goal was ambitious: to start anew, cut a lot of cruft, and have a performant clean transport protocol of the future. After a few years of hard work, the protocol was ready for field tests. In good spirits, in September 2016, we announced <a href=\"/introducing-tls-1-3\">that we support TLS 1.3</a>.</p><p>The followup blog in December 2017 had a rather different tone: “<a href=\"/why-tls-1-3-isnt-in-browsers-yet\">Why TLS 1.3 isn’t in browsers yet</a>”.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/15iyL3KO6ap7JYKFyNcyeP/9ea326e694601026cebcbbe889485683/image3-7.png\" alt=\"Adoption of TLS 1.3 in December 2017: less than 0.06%.\" class=\"kg-image\" width=\"1498\" height=\"1072\" loading=\"lazy\"/>\n            \n            </figure><p>Adoption of TLS 1.3 in December 2017: less than 0.06%.</p><p>It turned out that <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-tls-tls13-11\">revision 11</a> of TLS 1.3 was completely undeployable in practice, breaking a few percent of all users. The reason? <a href=\"https://en.wikipedia.org/wiki/Protocol_ossification\">Protocol ossification</a>. TLS was designed with flexibility in mind: the client sends a list of TLS versions it supports, so that the connection can be smoothly upgraded to the newest crypto. That’s the theory, but if you never move the joint, it rusts: for one, it turned out that a lot of server software and middleware simply crashed on just seeing an unknown version. Others would ignore the version number completely, and try to parse the messages as if it was TLS 1.2 anyway. In practice, the version negotiation turned out to be completely broken. So how was this fixed?</p><p>In <a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-tls-tls13-22\">revision 22</a> of the TLS 1.3 draft, changes were made to make TLS 1.3 look like TLS 1.2 on the wire: in particular TLS 1.3 advertises itself as TLS 1.2 with the normal version negotiation. Also, a lot of unnecessary fields are included in the TLS 1.3 ClientHello just to appease any broken middleboxes that might be peeking in.  A server that doesn’t understand TLS 1.3 wouldn’t even see that an attempt was made to negotiate TLS 1.3. Using a sneaky new extension, a second version negotiation mechanism was added. For the details, check out the December 2017 blog post linked above.</p><p>Today TLS 1.3 is a huge success, and is used by more than 93% of the connections.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6hsRBAdJf6bdmg1w0i9JXh/3d7fb9047b740eb5697b746c74143a28/image4-8.png\" alt=\"TLS 1.3 adoption in February 2024. QUIC uses TLS 1.3 under the hood.\" class=\"kg-image\" width=\"906\" height=\"624\" loading=\"lazy\"/>\n            \n            </figure><p>TLS 1.3 adoption in February 2024. QUIC uses TLS 1.3 under the hood.</p><p>To help prevent ossification in the future, new protocols such as TLS 1.3 and QUIC use <a href=\"https://datatracker.ietf.org/doc/rfc8701/\">GREASE</a>, where clients send unknown identifiers on purpose, including cryptographic algorithm identifiers, to help catch similar bugs, and keep the flexibility.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"migrating-the-internet-to-post-quantum-key-agreement\">Migrating the Internet to post-quantum key agreement</h2>\n      <a href=\"#migrating-the-internet-to-post-quantum-key-agreement\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Now that we understand what we’re dealing with on a high level, let’s dive into upgrading key agreement on the Internet. First, let’s have a closer look at NIST’s first and so far only post-quantum key agreement: ML-KEM.</p><p>ML-KEM was submitted under the name <a href=\"https://pq-crystals.org/kyber/index.shtml\">CRYTALS-Kyber</a>. Even though it will be a US standard, its designers work in industry and academia across France, Switzerland, the Netherlands, Belgium, Germany, Canada, and the United States. Let’s have a look at its performance.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"ml-kem-versus-x25519\">ML-KEM versus X25519</h3>\n      <a href=\"#ml-kem-versus-x25519\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Today the vast majority of clients use the traditional key agreement X25519. Let’s compare that to ML-KEM.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n.tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-baqh{text-align:center;vertical-align:top}\n.tg .tg-buh4{background-color:#f9f9f9;text-align:left;vertical-align:top}\n.tg .tg-0vih{background-color:#f9f9f9;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-lqy6{text-align:right;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n.tg .tg-dzk6{background-color:#f9f9f9;text-align:center;vertical-align:top}\n.tg .tg-797t{background-color:#f9f9f9;font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-p5oz{background-color:#f9f9f9;text-align:right;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-baqh\" colspan=\"2\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Keyshares size(in bytes)</span></th>\n    <th class=\"tg-baqh\" colspan=\"2\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Ops/sec (higher is better)</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Algorithm</span></td>\n    <td class=\"tg-dzk6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">PQ</span></td>\n    <td class=\"tg-0vih\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Client</span></td>\n    <td class=\"tg-0vih\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Server</span></td>\n    <td class=\"tg-0vih\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Client</span></td>\n    <td class=\"tg-0vih\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Server</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM-512</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">800</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">768</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">45,000</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">70,000</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-797t\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM-768</span></td>\n    <td class=\"tg-dzk6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1,184</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1,088</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">29,000</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">45,000</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-1wig\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-KEM-1024</span></td>\n    <td class=\"tg-baqh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1,568</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1,568</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">20,000</span></td>\n    <td class=\"tg-lqy6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">30,000</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-797t\"><span style=\"font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">X25519</span></td>\n    <td class=\"tg-dzk6\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">❌</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">32</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">32</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">19,000</span></td>\n    <td class=\"tg-p5oz\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">19,000</span></td>\n  </tr>\n</tbody>\n</table><!--kg-card-end: html--><p>Size and CPU compared between X25519 and ML-KEM. Performance varies considerably by hardware platform and implementation constraints, and should be taken as a rough indication only.</p><p>ML-KEM-512, -768 and -1024 aim to be as resistant to (quantum) attack as AES-128, -192 and -256 respectively. Even at the AES-128 level, ML-KEM is much bigger than X25519, requiring 1,568 bytes over the wire, whereas X25519 requires a mere 64 bytes.</p><p>On the other hand, even ML-KEM-1024 is typically significantly faster than X25519, although this can vary quite a bit depending on your platform.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"ml-kem-768-and-x25519\">ML-KEM-768 and X25519</h3>\n      <a href=\"#ml-kem-768-and-x25519\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>At Cloudflare, we are not taking advantage of that speed boost just yet. Like many other early adopters, we like to play it safe and deploy a <b>hybrid</b> key-agreement <a href=\"https://datatracker.ietf.org/doc/draft-tls-westerbaan-xyber768d00/\">combining</a> X25519 and (a preliminary version of) ML-KEM-768. This combination might surprise you for two reasons.</p><ol><li><p>Why combine X25519 (“128 bits of security”) with ML-KEM-768 (“192 bits of security”)?</p></li><li><p>Why bother with the non post-quantum X25519?</p></li></ol><p>The apparent security level mismatch is a hedge against improvements in cryptanalysis in lattice-based cryptography. There is a lot of trust in the (non post-quantum) security of X25519: matching AES-128 is more than enough. Although we are comfortable in the security of ML-KEM-512 today, over the coming decades cryptanalysis could improve. Thus, we’d like to keep a margin for now.</p><p>The inclusion of X25519 has two reasons. First, there is always a remote chance that a breakthrough renders all variants of ML-KEM insecure. In that case, X25519 still provides non post-quantum security, and our post-quantum migration didn’t make things worse.</p><p>More important is that we do not only worry about attacks on the algorithm, but also on the implementation. A noteworthy example where we dodged a bullet is that of <a href=\"https://kyberslash.cr.yp.to/\">KyberSlash</a>, a timing attack that affected many implementations of Kyber (an earlier version of ML-KEM), including <a href=\"https://github.com/cloudflare/circl/security/advisories/GHSA-9763-4f94-gfch\">our own</a>. Luckily KyberSlash does not affect Kyber as it is used in TLS. A similar implementation mistake that would actually affect TLS, is likely to require an active attacker. In that case, the likely aim of the attacker wouldn’t be to decrypt data decades down the line, but steal a cookie or other token, or inject a payload. Including X25519 prevents such an attack.</p><p>So how well do ML-KEM-768 and X25519 together perform in practice?</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"performance-and-protocol-ossification\">Performance and protocol ossification</h2>\n      <a href=\"#performance-and-protocol-ossification\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n    <div class=\"flex anchor relative\">\n      <h3 id=\"browser-experiments\">Browser experiments</h3>\n      <a href=\"#browser-experiments\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Being well aware of potential compatibility and performance issues, Google started <a href=\"https://security.googleblog.com/2016/07/experimenting-with-post-quantum.html\">a first experiment</a> with post-quantum cryptography back in 2016, the same year NIST started their competition. This was followed up by a second larger joint experiment by <a href=\"/towards-post-quantum-cryptography-in-tls/\">Cloudflare</a> and <a href=\"https://www.imperialviolet.org/2018/12/12/cecpq2.html\">Google</a> in 2018. We tested two different hybrid post-quantum key agreements: CECPQ2, which is a combination of the lattice-based NTRU-HRSS and X25519, and CECPQ2b, a combination of the isogeny-based SIKE and again X25519. NTRU-HRSS is very similar to ML-KEM in size, but is computationally somewhat more taxing on the client-side. SIKE on the other hand, has very small keys, is computationally very expensive, and was <a href=\"https://eprint.iacr.org/2022/975.pdf\">completely broken</a> in 2022. With respect to TLS handshake times, X25519+NTRU-HRSS performed very well, being hard to distinguish by eye from the control connections.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5WPFvf7wEyiXYx1xYTBCAj/c207f16128331f55043551c6738b9dd4/image5-2.png\" alt=\"Handshake times compared between X25519 (blue), X25519+SIKE (green) and X25519+NTRU-HRSS (orange). \" class=\"kg-image\" width=\"2000\" height=\"1063\" loading=\"lazy\"/>\n            \n            </figure><p>Handshake times compared between X25519 (blue), X25519+SIKE (green) and X25519+NTRU-HRSS (orange). </p><p>Unfortunately, a small but significant fraction of clients experienced broken connections with NTRU-HRSS. The reason: the size of the NTRU-HRSS keyshares. In the past, when creating a TLS connection, the first message sent by the client, the so-called <i>ClientHello</i>, almost always fit within a single network packet. The TLS specification allows for a larger <i>ClientHello</i>, however no one really made use of that. Thus, protocol ossification strikes again as there are some middleboxes, load-balancers, and other software that tacitly assume the <i>ClientHello</i> always fits in a single packet.</p><p>Over the subsequent years, Chrome kept running their PQ experiment at a very low rate, and did a great job reaching out to vendors whose products were incompatible. If it were not for these compatibility issues, we would’ve likely seen Chrome ramp up post-quantum key agreement five years earlier.</p><p>Today the situation looks better. At the time of writing, Chrome has enabled post-quantum key-agreement for 10% of all users. That accounts for about 1.8% of all our TLS 1.3 connections, as shown in the figure below. That’s a lot, but we’re not out of the woods yet. There could well be performance and compatibility issues that prevent a further rollout.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1fnypmfnBMi2AR0lvSq4Zb/3e5660bfb014452e84a3d3e26f1f733b/graph--1-.png\" alt=\"Fraction of TLS 1.3 connections established with Cloudflare that are secured with post-quantum cryptography. At the moment, it’s more than 99% from Chrome. \" class=\"kg-image\" width=\"1600\" height=\"1200\" loading=\"lazy\"/>\n            \n            </figure><p>Fraction of TLS 1.3 connections established with Cloudflare that are secured with post-quantum cryptography. At the moment, it’s more than 99% from Chrome. </p><p>Nonetheless, we feel it’s more probable than not that we will see Chrome enable post-quantum key agreement for more users this year.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"other-browsers\">Other browsers</h3>\n      <a href=\"#other-browsers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In January 2024, Firefox landed the code to support post-quantum key agreement in <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\">nightly</a>, and it’s likely it will land in Firefox proper later in 2024. For Chrome-derived browsers, such as Edge and Brave, it’s easy to piggyback on the work of Chrome, and we could well see them follow suit when Chrome turns on post-quantum key-agreement by default.</p><p>However, browser to server connections aren’t the only connections important to the Internet.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"testing-connections-to-customer-origins\">Testing connections to customer origins</h3>\n      <a href=\"#testing-connections-to-customer-origins\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In <a href=\"/post-quantum-to-origins\">September 2023,</a> we added support for our customers to enable post-quantum key agreement on connections from Cloudflare to their origins. That’s connection (3) in the following diagram. This can be done in two ways: the fast way, and the slow but safer way. In both cases, if the origin does not support it, we fall back to traditional key-agreement. We explain the details of these in the blog post on <a href=\"/post-quantum-to-origins\">post-quantum cryptography</a>, but in short, in the fast way we send the post-quantum keyshare immediately, and in the slow but safe way we let the origin ask for post-quantum using a <i>HelloRetryRequest</i> message. Chrome, by the way, is deploying post-quantum key agreement the fast way.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/THODVUtVIIyGgACaPDZa5/7ca19e62617a241d44dda67ec6200a58/image11.png\" alt=\"Typical connection flow when a visitor requests an uncached page.\" class=\"kg-image\" width=\"1600\" height=\"417\" loading=\"lazy\"/>\n            \n            </figure><p>Typical connection flow when a visitor requests an uncached page.</p><p>At the same time, we started regularly testing our customer origins to see if they would support us offering post-quantum key agreement. We found all origins supported the safe but slow method. The fast method didn’t fare as well, as we found that 0.34% of connections would break. That’s higher than the failure rates seen by browsers.</p><p>Unsurprisingly, many failures seem to be caused by the large ClientHello. Interestingly, the majority are caused by servers not correctly implementing <i>HelloRetryRequest</i>. To investigate the cause, we have reached out to customers to ascertain the cause. We’re very grateful to those that have responded, and we’re currently working through the data.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"outlook\">Outlook</h3>\n      <a href=\"#outlook\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As we’ve seen, post-quantum key agreement, despite protocol ossification, is relatively straightforward to deploy. We’re also on a great trajectory, as we might well see double-digit client support for post-quantum key agreement later this year.</p><p>Let’s turn to the second, more difficult migration.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"migrating-the-internet-to-post-quantum-signatures\">Migrating the Internet to post-quantum signatures</h2>\n      <a href=\"#migrating-the-internet-to-post-quantum-signatures\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Now, we’ll turn our attention to upgrading the signatures used on the Internet.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-zoo-of-post-quantum-signatures\">The zoo of post-quantum signatures</h3>\n      <a href=\"#the-zoo-of-post-quantum-signatures\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let’s start by sizing up the post-quantum signatures we have available today at the AES-128 security level: ML-DSA-44, FN-DSA-512, and the two variants of SLH-DSA. As a comparison, we also include the venerable Ed25519 and RSA-2048 in wide use today, as well as a sample of five promising signature schemes from the signatures onramp.</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0;}\n.tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;\n  font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-9ojm{background-color:#0F0;text-align:left;vertical-align:top}\n.tg .tg-buh4{background-color:#f9f9f9;text-align:left;vertical-align:top}\n.tg .tg-cvqw{background-color:#F00;color:#FFF;text-align:left;vertical-align:top}\n.tg .tg-meh1{background-color:#F00;color:#FFF;text-align:left;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n.tg .tg-i5t7{background-color:#0F0;text-align:left;vertical-align:top}\n.tg .tg-9qkh{background-color:#FF0;text-align:left;vertical-align:top}\n.tg .tg-ez01{background-color:#F90;color:#FFF;text-align:left;vertical-align:top}\n.tg .tg-hw7o{background-color:#FF0;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-0lax\" colspan=\"2\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Sizes (bytes)</span></th>\n    <th class=\"tg-0lax\" colspan=\"2\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">CPU time (lower is better)</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-buh4\"></td>\n    <td class=\"tg-buh4\"></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">PQ</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Public key</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Signature</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Signing</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Verification</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\" rowspan=\"2\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Standardized</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Ed25519</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">❌</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">32</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">64</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1 (baseline)</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1 (baseline)</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">RSA-2048</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">❌</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">256</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">256</span></td>\n    <td class=\"tg-9qkh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">70</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">0.3</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\" rowspan=\"4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">NIST drafts</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">ML-DSA-44</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-ez01\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">1,312</span></td>\n    <td class=\"tg-ez01\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">2,420</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">4.8</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">0.5</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">FN-DSA-512</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-9qkh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">897</span></td>\n    <td class=\"tg-9qkh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">666</span></td>\n    <td class=\"tg-9qkh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">8 ⚠️</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">0.5</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SLH-DSA-128s</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">32</span></td>\n    <td class=\"tg-cvqw\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">7,856</span></td>\n    <td class=\"tg-cvqw\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">8,000</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">2.8</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SLH-DSA-128f</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">32</span></td>\n    <td class=\"tg-meh1\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">17,088</span></td>\n    <td class=\"tg-meh1\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">550</span></td>\n    <td class=\"tg-9qkh\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">7</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\" rowspan=\"5\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">Sample from signatures onramp</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">MAYO</span><sub>one</sub></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-hw7o\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1,168</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">321</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">4.7</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">0.3</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">MAYO</span><sub>two</sub></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-meh1\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">5,488</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">180</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">5</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">0.2</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">SQISign I</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">64</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">177</span></td>\n    <td class=\"tg-cvqw\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">60,000</span></td>\n    <td class=\"tg-cvqw\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">500</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">UOV Is-pkc</span></td>\n    <td class=\"tg-buh4\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-meh1\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#FFF;background-color:transparent\">66,576</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">96</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">2.5</span></td>\n    <td class=\"tg-i5t7\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">2</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">HAWK512</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">✅</span></td>\n    <td class=\"tg-hw7o\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1,024</span></td>\n    <td class=\"tg-hw7o\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">555</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">2</span></td>\n    <td class=\"tg-9ojm\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">1</span></td>\n  </tr>\n</tbody>\n</table><!--kg-card-end: html--><p>Comparison of various signature schemes at the security level of AES-128. CPU times vary significantly by platform and implementation constraints and should be taken as a rough indication only. ⚠️FN-DSA signing time when using fast but dangerous floating-point arithmetic — see warning below.</p><p>It is immediately clear that none of the post-quantum signature schemes comes even close to being a drop-in replacement for Ed25519 (which is comparable to ECDSA P-256) as most of the signatures are simply much bigger. The exceptions are SQISign, MAYO, and UOV from the onramp, but they’re far from ideal. MAYO and UOV have large public keys, and SQISign requires an immense amount of computation.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"when-to-use-slh-dsa\">When to use SLH-DSA</h3>\n      <a href=\"#when-to-use-slh-dsa\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>As mentioned before, today we only have drafts for SLH-DSA and ML-DSA. In every relevant performance metric, ML-DSA beats SLH-DSA handily. (Even the small public keys of SLH-DSA are not any advantage. If you include the ML-DSA public key with its signature, it’s still smaller than an SLH-DSA signature, and in that case you can use the short hash of the ML-DSA public key as a short public key.)</p><p>The advantage of SLH-DSA is that there is a lot of trust in its security. To forge an SLH-DSA signature you need to break the underlying hash function quite badly. It is not enough to break the collision resistance of the hash, as has been done with SHA-1 and MD5. In fact, as of February 2024, an SHA-1 based SLH-DSA would still be considered secure. Of course, SLH-DSA does not use SHA-1, and instead uses SHA2 and SHA3, against which not a single practical attack is known.</p><p>If you can shoulder the cost, SLH-DSA has the best security guarantee, which might be crucial when dealing with long-lasting signatures, or deployments where upgrades are impossible.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"be-careful-with-fn-dsa\">Be careful with FN-DSA</h3>\n      <a href=\"#be-careful-with-fn-dsa\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Looking ahead a bit: the best of the worst seems to be FN-DSA-512. FN-DSA-512’s signatures and public key together are <i>only</i> 1,563 bytes, with somewhat reasonable signing time. FN-DSA has an <b>achilles heel</b> though — for acceptable signing performance, it requires fast floating-point arithmetic. Without it, signing is about 20 times slower. But speed is not enough, as the floating-point arithmetic has to run in constant time — without it, the FN-DSA private key can be recovered by timing signature creation. Writing safe FN-DSA implementations has turned out to be quite challenging, which makes FN-DSA dangerous when signatures are generated on the fly, such as in a TLS handshake. It is good to stress that this only affects signing. FN-DSA verification does not require floating-point arithmetic (and during verification there wouldn’t be a private key to leak anyway.)</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"there-are-many-signatures-on-the-web\">There are many signatures on the web</h2>\n      <a href=\"#there-are-many-signatures-on-the-web\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The biggest pain-point of migrating the Internet to post-quantum signatures, is that there are a lot of signatures even in a single connection. When you visit this very website for the first time, we send <b>six signatures and two public keys</b>.</p><p>The majority of these are for the <b>certificate chain</b>: the CA signs the intermediate certificate, which signs the leaf certificate, which in turn signs the TLS transcript to prove the authenticity of the server. If you’re keeping count: we’re still three signatures short.</p><p>Two of these are for <b>SCTs</b> required for <a href=\"https://certificate.transparency.dev/howctworks/\">certificate transparency</a>. Certificate transparency is a key, but lesser known, part of the <a href=\"https://smallstep.com/blog/everything-pki/#web-pki-vs-internal-pki\">Web PKI</a>, the ecosystem that secures browser connections. Its goal is to publicly log every certificate issued, so that misissuances can be detected after the fact. It works by having independent parties run <i>CT logs</i>. Before issuing a certificate, a CA must first submit it to at least two different CT logs. An SCT is a signature of a CT log that acts as a proof, a <i>receipt</i>, that the certificate has been logged.</p><p>The final signature is an <a href=\"/high-reliability-ocsp-stapling\">OCSP staple</a>, which proves that the leaf certificate hasn’t been revoked in the last few days.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"tailoring-signature-schemes\">Tailoring signature schemes</h3>\n      <a href=\"#tailoring-signature-schemes\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There are two aspects of how a signature can be used that are worthwhile to highlight: whether the <b>public key is included</b> with the signature, and whether the signature is <b>online</b> or <b>offline</b>.</p><p>For the SCTs and the signature of the root on the intermediate, the public key is not transmitted during the handshake. Thus, for those, a signature scheme with smaller signatures but larger public keys, such as MAYO or UOV, would be particularly well-suited. For the other signatures, the public key is included, and it’s more important to minimize the sizes of the combined public key and signature.</p><p>The handshake signature is the only signature that is created online — all the other signatures are created ahead of time.  The handshake signature is created and verified only once, whereas the other signatures are typically verified many times by different clients. This means that for the handshake signature, it’s advantageous to balance signing and verification time which are both in the <i>hot path</i>, whereas for the other signatures having better verification time at the cost of slower signing is worthwhile. This is one of the advantages RSA still enjoys over elliptic curve signatures today.</p><p>Putting together different signature schemes is a fun puzzle, but it also comes with some drawbacks. Using multiple different schemes increases the attack surface because an algorithmic or implementation vulnerability in one compromises the whole. Also, the whole ecosystem needs to implement and optimize multiple algorithms, which is a significant burden.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"putting-it-together\">Putting it together</h2>\n      <a href=\"#putting-it-together\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So, what are some reasonable combinations to try?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"with-nists-current-picks\">With NIST’s current picks</h3>\n      <a href=\"#with-nists-current-picks\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With the draft standards available today, we do not have a lot of options.</p><p>If we simply switch to ML-DSA-44 for all signatures, we’re adding 17kB of data that needs to be transmitted from the server to the client during the TLS handshake. Is that a lot? Probably. We will address that later on.</p><p>If we wait a bit and replace all but the handshake signature with FN-DSA-512, we’re looking at adding only 8kB. That’s much better, but I have to repeat that it’s difficult to implement FN-DSA-512 signing safely without timing side channels, and there is a good chance we’ll shoot ourselves in the foot if we’re not careful.</p><p>Another way to shoot ourselves in the foot <i>today</i> is with stateful hash-based signatures.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"stateful-hash-based-signatures\">Stateful hash-based signatures</h3>\n      <a href=\"#stateful-hash-based-signatures\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Apart from symmetric cryptography, there are already post-quantum signature schemes standardized today: LMS / HRSS and XMSS(MT). Just like SLH-DSA, these are hash-based signature schemes, and thus, algorithmically they’re very conservative.</p><p>But they come with a major drawback: you need to <i>remember the state</i>. What is this state? When generating a keypair, you prepare a fixed number of one-time-use slots, and you need to remember which one you’ve used. If you use the same prepared slot <a href=\"https://eprint.iacr.org/2016/1042\">twice</a>, then anyone can create a forgery with those two. Managing this state is not impossible, but quite tricky. What if the server was restored from a backup? The state can be distributed over multiple servers, but that changes the usual signature flow quite a bit, and it’s unclear whether regulators will allow this approach, as the state is typically considered part of the private key.</p><p>So, how do they perform? It’s hard to give a definite answer. These hash-based signature schemes have a lot of knobs to turn and can be fine-tuned to their use case. You can see for yourself, and play around with the parameters on this <a href=\"https://westerbaan.name/~bas/hashcalc/\">website</a>. With standardized variants (with security parameter n=24) for the offline signatures, we can beat ML-DSA-44 in data on the wire, but can’t outperform FN-DSA-512. With security parameter n=16, which has not been standardized, stateful hash-based signatures are competitive with FN-DSA-512, and can even beat it on size. However, n=16 comes with yet another footgun: it allows the signer to create a single signature that validates two different messages — there is no <i>non-repudiation</i>.</p><p>All in all, FN-DSA-512 and stateful hash-based signatures tempt us with a similar and clear performance benefit over ML-DSA-44, but are difficult to use safely.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"signatures-on-the-horizon\">Signatures on the horizon</h3>\n      <a href=\"#signatures-on-the-horizon\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There are some very promising new signature schemes submitted to the NIST onramp.</p><p><a href=\"https://link.springer.com/chapter/10.1007/3-540-48910-X_15\">UOV (unbalanced oil and vinegar)</a> is an old multivariate scheme with a large public key (66.5kB), but small signatures (96 bytes). If we combine UOV for the root and SCTs with ML-DSA-44 for the others, we’re looking at only 10kB — close to FN-DSA-512.</p><p>Over the decades, there have been many attempts to add some structure to UOV public keys, to get a better balance between public key and signature size. Many of these so-called <i>structured multivariate</i> schemes, which includes Rainbow and GeMMS, unfortunately have been broken.</p><p><a href=\"https://pqmayo.org/\">MAYO</a> is the latest proposal for a structured multivariate scheme, designed by the cryptographer that broke <a href=\"https://eprint.iacr.org/2022/214.pdf\">Rainbow</a>. As a structured multivariate scheme, its security requires careful scrutiny, but its utility (given it is not broken) is very appealing.</p><p>MAYO allows for a fine-grained tradeoff between signature and public key size. For the submission, to keep things simple, the authors proposed two concrete variants: MAYO<sub>one </sub>with balanced signature (321 bytes) and public key (1.1kB) sizes, and MAYO<sub>two</sub> that has signatures of 180 bytes, while keeping the public key manageable at 5.4kB. Verification times are excellent, while signing times are somewhat slower than ECDSA, but far better than RSA. Combining both variants in the obvious way, we’re only looking at 3.3kB.</p><p>Purely looking at sizes, SQISign I is the clear winner, even beating RSA-2048. Unfortunately, the computation required for signing, and crucially verification, are way too high. For niche applications, SQISign might be useful, but for general adoption verification times need to improve significantly, even if that requires a larger signature.</p><p>Finally, I would like to mention HAWK512. HAWK is a lattice-based scheme similar to FN-DSA-512, but does not require floating-point arithmetic. This makes HAWK an appealing alternative to FN-DSA. NIST has repeatedly stated that the main purpose of the onramp is to standardize a signature scheme that is not based on lattices — a description HAWK does not fit. We might see <a href=\"https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/bjVkrZmI9VM/m/Tj9goDJCAAAJ\">some innovations</a> of HAWK be included in the final version of FN-DSA, but it is unclear whether that will solve all of FN-DSA implementation concerns.</p><p>There are more promising submissions in the onramp, but those discussed are a fairly representative sample of those interesting to TLS. For instance, <a href=\"https://snova.pqclab.org/\">SNOVA</a> is similar to MAYO, and <a href=\"https://www.tuovsig.org/\">TUOV</a> is similar to UOV. Explore the submissions for yourself on Thom’s <a href=\"https://github.com/PQShield/nist-sigs-zoo\">webpage</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"do-we-really-care-about-the-extra-bytes\">Do we really care about the extra bytes?</h2>\n      <a href=\"#do-we-really-care-about-the-extra-bytes\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>It will take 17kB extra to swap in ML-DSA-44. That’s a lot compared to the typical handshake today, but it’s not a lot compared to the JavaScript and images served on many web pages. The key point is that the change we must make here affects every single TLS connection, whether it’s used for a bloated website, or a time-critical API call. Also, it’s not just about waiting a bit longer. If you have spotty cellular reception, that extra data can make the difference between being able to load a page, and having the connection time out. (As an aside, talking about bloat: many apps perform a <a href=\"https://thomwiggers.nl/publication/tls-on-android/tls-on-android.pdf\">surprisingly high number of TLS handshakes</a>.)</p><p>Just like with key agreement, performance isn’t our only concern: we also want the connection to succeed in the first place. Back in 2021, <a href=\"/sizing-up-post-quantum-signatures/\">we ran an experiment</a> artificially enlarging the certificate chain to simulate larger post-quantum certificates. We give a short summary of the key result below, but for the details, check out the full <a href=\"/sizing-up-post-quantum-signatures/\">blog post</a>.</p><p>Initially, we wanted to run the experiment on a small sample of regular traffic, in order to get unbiased data. Unfortunately, we found that large certificate chains broke some connections. Thus, to avoid breaking customer connections, we set up the experiment to use background connections launched from our challenge pages. For each participant, we launched two background connections: one with a larger certificate chain (live) and one with a normal chain(control). The graph on the right shows the number of control connections that are missing a corresponding live connection. There are jumps around 10kB and 30kB, suggesting that there are clients or middleboxes  that break when certificate chains grow by more than 10kB or 30kB.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2sU1gCujSAuhaRfScGhoS1/18569ea438ffb0c029f8bcd2b1a53650/image9.png\" alt=\"Missing requests when artificially inflating certificate chain size to simulate post-quantum certificates.\" class=\"kg-image\" width=\"1999\" height=\"1000\" loading=\"lazy\"/>\n            \n            </figure><p>Missing requests when artificially inflating certificate chain size to simulate post-quantum certificates.</p><p>This does not mean that the ML-DSA-44-only route is necessarily unviable. Just like with key agreement, browsers can slowly turn on support for post-quantum certificates. As we hit issues with middleboxes, we can work with vendors to fix what is broken. It is crucial here that servers are configured to be able to serve either a small traditional chain, or a larger post-quantum chain.</p><p>These issues <i>are</i> problematic for a <a href=\"https://eprint.iacr.org/2018/063.pdf\">single-certificate migration</a> strategy. In this approach, the server installs a single traditional certificate that contains a separate post-quantum certificate in a so-called non-critical extension. A client that does not support post-quantum certificates will ignore the extension. In this approach, installing the single certificate will immediately break all clients with compatibility issues, making it a non-starter.</p><p>What about performance? We saw the following impact on TLS handshake time.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/66AlqTNxx8h6oKMZSBqqsD/53e71fcf675af6818fc63eb7ab40a339/image13.png\" alt=\"Performance when artificially inflating certificate chain size to simulate post-quantum certificates.\" class=\"kg-image\" width=\"1999\" height=\"1000\" loading=\"lazy\"/>\n            \n            </figure><p>Performance when artificially inflating certificate chain size to simulate post-quantum certificates.</p><p>The jump at around 40kB is caused by an extra round-trip due to a full congestion window. In the 2021 blog post <a href=\"/sizing-up-post-quantum-signatures/#intermezzo-tcp-s-congestion-window\">we go into detail</a> on what that is all about. There is an important caveat: at Cloudflare, because we’re close to the client, we use a larger congestion window. With a typical congestion window, the jump would move to around 10kB. Also, the jump would be larger as typical round-trip times are higher.</p><p>Thus, when adding 9KB, we&#39;re looking at a slowdown of about 15%. Crossing the 10kB boundary, we are likely to incur an extra roundtrip, which could well lead to a slowdown of more than 60%. That completely negates the much touted performance benefit that TLS 1.3 has over TLS 1.2, and it’s too high to be enabled by default.</p><p>Is 9kB too much? Enabling post-quantum key agreement wasn’t free either, but enabling post-quantum key agreement was cheaper and actually gets us a tangible security benefit today. However, this thinking is dangerous. If we wait too long before enabling post-quantum certificates by default, we might find ourselves out of time when the quantum computer arrives.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"way-forward\">Way forward</h2>\n      <a href=\"#way-forward\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Over the coming years, we’ll be working with browsers to test the viability and performance impact of post-quantum authentication in TLS. We expect to add support for post-quantum certificates as soon as they arrive (probably around 2026), but not enable them by default.</p><p>At the same time, we’re exploring various ideas to reduce the number of signatures.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"reducing-number-of-signatures\">Reducing number of signatures</h2>\n      <a href=\"#reducing-number-of-signatures\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Over the last few years, there have been several proposals to reduce the number of signatures used.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"leaving-out-intermediate-certificates\">Leaving out intermediate certificates</h3>\n      <a href=\"#leaving-out-intermediate-certificates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>CAs report the intermediate certificates they use in the <a href=\"https://www.ccadb.org/cas/intermediates\">CCADB</a>. Most browsers ship with the list of intermediates (of CAs they trust). Using that list, a browser is able to establish a connection with a server that forgot to install the intermediate. If a server can leave out the intermediate, then why bother with it?</p><p>There are three competing proposals to leave out the intermediate certificate. The original 2019 proposal is by Martin Thomson, who <a href=\"https://datatracker.ietf.org/doc/html/draft-kampanakis-tls-scas-latest\">suggests simply</a> having the browser send a single bit to indicate that it has an up-to-date list of all intermediates. In that case, the server will leave out the intermediates. This will work well in the majority of cases, but could lead to some hard-to-debug issues in corner cases. For one, not all intermediates are listed in the CCADB, and these missing intermediates aren’t even from custom CAs. Another reason is that the browser could be mistaken about whether it’s up-to-date. A more esoteric issue is that the browser could reconstruct a different chain of certificates than the server had in mind.</p><p>To address these issues, in 2023, Dennis Jackson put forward a more <a href=\"https://datatracker.ietf.org/doc/draft-jackson-tls-cert-abridge/\">robust proposal</a>. In this proposal, every year a fixed list of intermediates is compiled from the CCADB. Instead of a single flag, the browser will send the named lists of intermediates it has. The server will not simply leave out matching intermediates, but rather replace them by the sequence number at which they appear in the list. He also did a survey of the most popular websites, and found that just by leaving out the intermediates today, we can save <a href=\"https://www.ietf.org/archive/id/draft-jackson-tls-cert-abridge-00.html#name-preliminary-evaluation\">more than 2kB</a> compared to certificate compression for half of them. That’s with today’s certificates: yes, X509 certificates are somewhat bloated.</p><p>Finally, there is the more general <a href=\"https://datatracker.ietf.org/doc/draft-davidben-tls-trust-expr/\">TLS trust expressions</a> proposal that allows a browser to signal more in a more fine-grained manner which CAs and intermediates it trusts.</p><p>It’s likely some form of intermediate suppression will be adopted in the coming years. This will push the cost of a ML-DSA-44-only deployment down to less than 13kB.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"kemtls\">KEMTLS</h3>\n      <a href=\"#kemtls\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Another approach is to change TLS more rigorously by replacing the signature algorithm in the leaf certificate by a KEM. This is called <a href=\"/kemtls-post-quantum-tls-without-signatures\">KEMTLS</a> (or <a href=\"https://datatracker.ietf.org/doc/draft-celi-wiggers-tls-authkem/\">AuthKEM</a> at the IETF). The server proves it controls the leaf certificate, by being able to decrypt a challenge sent by the client. This is not an outlandishly new idea, as older versions of TLS would encrypt a shared key to an RSA certificate.</p><p>KEMTLS does add quite a bit of complexity to TLS 1.3, which was purposely designed to simplify TLS 1.2. Adding complexity adds security concerns, but we <a href=\"/post-quantum-formal-analysis\">soften that</a> by extending TLS 1.3 machine-checked security proof to KEMTLS. Nonetheless, adopting KEMTLS will be a significant engineering effort, and its gains should be worthwhile.</p><p>If we replace an ML-DSA-44 handshake signature of 2,420 bytes by KEMTLS using ML-KEM-512, we save 852 bytes in the total bytes transmitted by client and server. Looking just at the server, we save 1,620 bytes. If that’s 1.6kB saved on 17kB, it’s not very impressive. Also, KEMTLS is of little benefit if small post-quantum signatures such as MAYO<sub>one</sub> are available for the handshake.</p><p>KEMTLS shines in the case that 1.6kB savings pushes the server within the congestion window, such as when UOV is used for all but the handshake and leaf signature. Another advantage of KEMTLS, especially for embedded devices, is that it could reduce the number of algorithms that need to be implemented: you need a KEM for the key agreement anyway, and that could replace the signature scheme you would’ve only used for the handshake signature.</p><p>At the moment, deploying KEMTLS isn’t the lowest hanging fruit, but it could well come into its own, depending on which signature schemes are standardized, and which other protocol changes are made.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"merkle-tree-certificates\">Merkle tree certificates</h3>\n      <a href=\"#merkle-tree-certificates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>An even more ambitious and involved proposal is <a href=\"https://datatracker.ietf.org/doc/draft-davidben-tls-merkle-tree-certs/\">Merkle tree certificates</a> (MTC). In this proposal, all signatures except the handshake signature are replaced by a short &lt;800 byte Merkle tree certificate. This sounds too good to be true, and there is indeed a catch. MTC doesn’t work in all situations, and for those you will need to fall back to old-fashioned X509 certificates and certificate transparency. So, what’s assumed?</p><ul><li><p>No direct certificate issuance. You can’t get a Merkle tree certificate immediately: you will have to ask for one, and then wait for at least a day before you can use it.</p></li><li><p>Clients (in MTC parlance <i>relying parties</i>) can only check a Merkle tree certificate if they stay up to date with a <i>transparency service</i>. Browsers have an update-mechanism that can be used for this, but a browser that hasn’t been used in a while might be stale.</p></li></ul><p>MTC should be seen as an optimisation for the vast majority of cases.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"summary\">Summary</h3>\n      <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So, how does it actually work? I’ll try to give a short summary — for a longer introduction check out <a href=\"https://youtu.be/u_sFyz4F7dc?si=inG4bgBwKLzrBuvY&t=2566\">David Benjamin’s IETF presentation</a>, or get your hands dirty by <a href=\"https://github.com/bwesterb/mtc\">setting up your own MTC CA</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pAmfsKWArXUPEZtgXezao/f40906c5f85ec7a141920b3d49fba0af/image1-9.png\" alt=\"An overview of a Merkle Tree certificate deployment\" class=\"kg-image\" width=\"1156\" height=\"740\" loading=\"lazy\"/>\n            \n            </figure><p>An overview of a Merkle Tree certificate deployment</p><p>In MTC, CAs issues <i>assertions</i> in a batch in a fixed rhythm. Say once every hour. An example of an assertion is “you can trust P-256 public key ab....23 when connecting to example.com”. Basically an assertion is a certificate without the signature. If a subscriber wants to get a certificate, it sends the assertion to the CA, which vets it, and then queues it for issuance.</p><p>On this <i>batch</i> of assertions, the CA computes a <a href=\"https://en.wikipedia.org/wiki/Merkle_tree\">Merkle tree</a>. We have an <a href=\"/introducing-certificate-transparency-and-nimbus#buildingaverifiablegloballyconsistentlog\">explainer of Merkle trees</a> in our blog post introducing certificate transparency. The short of it is that you can summarize a batch into a single hash by creating a tree hashing pairwise. The root is the summary. The nice thing about Merkle trees is that you can prove that something was in the batch to someone who only has the root, by revealing just a few hashes up the tree, which is called the <i>Merkle tree certificate</i>.</p><p>Each assertion is valid for a fixed number of batches — say 336 batches for a validity of two weeks. This is called the <i>validity window</i>. When issuing a batch, the CA not only publishes the assertions, but also a signature on the roots of all batches that are currently valid, called the <i>signed validity window</i>.</p><p>After the MTC CA has issued the new batch, the <i>subscriber</i> that asked for the certificate to be issued can pull the Merkle tree certificate from the CA. The subscriber can then install it, next to its X509 certificate, but will have to wait a bit before it’s useful.</p><p>Every hour, the <i>transparency services</i>, including those run by browser vendors, pull the new assertions and signed validity window from the CAs they trust. They check whether everything is consistent, including whether the new signed validity window matches with the old one. When satisfied, they republish the batches and signed validity window themselves.</p><p>Every hour, browsers download the latest roots from their trusted <i>transparency service</i>. Now, when connecting to a server, the client will essentially advertise which CAs it trusts, and the sequence number of the latest batch for which it has the roots. The server can then send either a new MTC, an older MTC (if the client is a bit stale), or fall back to a X509 certificate.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"outlook\">Outlook</h2>\n      <a href=\"#outlook\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The path for migrating the Internet to post-quantum authentication is much less clear than with key agreement. In the short term, we expect early adoption of post-quantum authentication across the Internet around 2026, but few will turn it on by default. Unless we can get performance much closer to today’s authentication, we expect the vast majority to keep post-quantum authentication disabled, unless motivated by regulation.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"not-just-tls-authentication-and-key-agreement\">Not just TLS, authentication, and key agreement</h3>\n      <a href=\"#not-just-tls-authentication-and-key-agreement\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Despite its length, in this blog post, we have only really touched upon migrating TLS. And even TLS we did not cover completely, as we have not discussed <a href=\"/announcing-encrypted-client-hello\">Encrypted ClientHello</a> (we didn’t forget about it). Although important, TLS is not the only protocol key to the security of the Internet. We want to briefly mention a few other challenges, but cannot go into detail. One particular challenge is DNSSEC, which is responsible for securing the resolution of domain names.</p><p>Although key agreement and signatures are the most widely used cryptographic primitives, over the last few years we have seen the adoption of more esoteric cryptography to serve more advanced use cases, such as unlinkable tokens with <a href=\"/privacy-pass-standard\">Privacy Pass</a> / <a href=\"/eliminating-captchas-on-iphones-and-macs-using-new-standard\">PAT</a>, anonymous credentials, and <a href=\"/inside-geo-key-manager-v2\">attribute based encryption</a> to name a few. For most of these advanced cryptographic schemes, there is no known practical post-quantum alternative yet.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"what-you-can-do-today\">What you can do today</h2>\n      <a href=\"#what-you-can-do-today\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To finish, let’s review what you can do today. For most organizations the brunt of the work is in the preparation. Where is cryptography used in the first place? What software libraries / what hardware? What are the timelines of your vendors? Do you need to hire expertise? What’s at risk, and how should it be prioritized? Even before you can answer all those, create engagement within the organization. All this work can be started before NIST finishes their standards or software starts shipping with post-quantum cryptography.</p><p>You can also start testing right now since the performance characteristics of the final standards will not be meaningfully different from the preliminary ones available today. If it works with the preliminary ones today in your test environment, the final standards will most likely work just fine in production. We’ve collected a list of software and forks that already support preliminary post-quantum key agreement <a href=\"https://pq.cloudflareresearch.com/\">here</a>.</p><p>Also on <a href=\"https://pq.cloudflareresearch.com/\">that page</a>, we collected instructions on how to turn on post-quantum key agreement in your browser today. (For Chrome it’s <code>enable-tls13-kyber</code> in <code>chrome://flags</code>.)</p><p>If you’re a Cloudflare customer, you can check out how to <a href=\"/post-quantum-to-origins/\">enable post-quantum key agreement to your origin</a>, and <a href=\"/post-quantum-cryptography-ga\">our products</a> that are secured against store-now/decrypt-later today.</p><p>Good luck with your migration, and if you hit any issues, do reach out: <a href=\"mailto:ask-research@cloudflare.com\">ask-research@cloudflare.com</a></p>",
		"id": "2Qs8QVZDDBbXeE8CoXklQr",
		"localeList": {
			"name": "The state of the post-quantum Internet Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Today, nearly two percent of all TLS 1.3 connections established with Cloudflare are secured with post-quantum cryptography. What once was the topic of futuristic tech demos will soon be the new security baseline for the Internet. In this blog post we’ll take measure of where we are now in early 2024, what to expect for the coming years, and what you can do today.",
		"metadata": {
			"title": "The state of the post-quantum Internet",
			"description": "Today, nearly two percent of all TLS 1.3 connections established with Cloudflare are secured with post-quantum cryptography. What once was the topic of futuristic tech demos will soon be the new security baseline for the Internet. In this blog post we’ll take measure of where we are now in early 2024, what to expect for the coming years, and what you can do today.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3wVmltW9q00H7oXwbyt6zk/272fa9eabf057ffb2b4c49d8800a96ad/pq-2024-GxkaZL.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2024-03-05T14:00:24.000+00:00",
		"slug": "pq-2024",
		"tags": [
			{
				"id": "3DmitkNK6euuD5BlhuvOLW",
				"name": "Security Week",
				"slug": "security-week"
			},
			{
				"id": "6bIo7ayy56Fzdrtf9z2EWy",
				"name": "Post-Quantum",
				"slug": "post-quantum"
			},
			{
				"id": "1x7tpPmKIUCt19EDgM1Tsl",
				"name": "Research",
				"slug": "research"
			}
		],
		"title": "The state of the post-quantum Internet",
		"updated_at": "2025-10-24T10:17:52.556Z",
		"url": "https://blog.cloudflare.com/pq-2024"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}