{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "7",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Filippo Valsorda",
				"slug": "filippo",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/46wTy3eKIkbnXRmuf2gsIt/3b2b4a5afc370ab87b3a189c0424f75c/filippo.jpg",
				"location": null,
				"website": null,
				"twitter": "@filosottile",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "The CloudFlare London office hosts weekly internal Tech Talks (with free lunch picked by the speaker). My recent one was an explanation of the latest version of TLS, 1.3, how it works and why it's faster and safer.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7hw1XcalmYZYKeGDqf4FQ9/756804637f525cd8085dd866e902dda1/tls-1-3-overview-and-q-and-a.png",
		"featured": false,
		"html": "<p>The CloudFlare London office hosts weekly internal Tech Talks (with free lunch picked by the speaker). My recent one was an explanation of the latest version of <a href=\"https://www.cloudflare.com/ssl/\">TLS, 1.3</a>, how it works and why it&#39;s faster and safer.</p><p>You can <a href=\"https://vimeo.com/177333631\">watch the complete talk</a> below or just read my summarized transcript.</p><p><i>Update: you might want to watch my more recent and extended </i><a href=\"/tls-1-3-explained-by-the-cloudflare-crypto-team-at-33c3/\"><i>33c3 talk</i></a><i> instead.</i></p><p><b>The Q&amp;A session is open!</b> Send us your questions about TLS 1.3 at <a href=\"mailto:tls13@cloudflare.com\">tls13@cloudflare.com</a> or leave them in the Disqus comments below and I&#39;ll answer them in an upcoming blog post.</p><p>.post-content iframe { margin: 0; }</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"summarized-transcript\">Summarized transcript</h4>\n      <a href=\"#summarized-transcript\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7Bq6YFjnvg3SB2kKRjfNsr/4be9ff4c51df8eb9b9dbd9eb6f499f13/TLS-1.3.003.png\" alt=\"TLS 1.2 ECDHE\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>To understand why TLS 1.3 is awesome, we need to take a step back and look at how TLS 1.2 works. In particular we will look at modern TLS 1.2, the kind that a recent browser would use when connecting to the CloudFlare edge.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/8ohjI9yrzu2eEm0U6iOu9/654853ffc8128cef9c4f17ac6dfb28cb/TLS-1.3.004.png\" alt=\"TLS 1.2 ECDHE exchange\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>The client starts by sending a message called the <code>ClientHello</code> that essentially says &quot;hey, I want to speak TLS 1.2, with one of these cipher suites&quot;.</p><p>The server receives that and answers with a <code>ServerHello</code> that says &quot;sure, let&#39;s speak TLS 1.2, and I pick <i>this</i> cipher suite&quot;.</p><p>Along with that the server sends its <i>key share</i>. The specifics of this key share change based on what cipher suite was selected. When using ECDHE, key shares are mixed with the <a href=\"/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/\">Elliptic Curve Diffie Hellman</a> algorithm.</p><p>The important part to understand is that for the client and server to agree on a cryptographic key, they need to receive each other&#39;s portion, or share.</p><p>Finally, the server sends the website certificate (signed by the CA) and a signature on portions of <code>ClientHello</code> and <code>ServerHello</code>, including the key share, so that the client knows that those are authentic.</p><p>The client receives all that, and <i>then</i> generates its own key share, mixes it with the server key share, and thus generates the encryption keys for the session.</p><p>Finally, the client sends the server its key share, enables encryption and sends a <code>Finished</code> message (which is a hash of a transcript of what happened so far). The server does the same: it mixes the key shares to get the key and sends its own <code>Finished</code> message.</p><p>At that point we are done, and we can finally send useful data encrypted on the connection.</p><p>Notice that this takes two round-trips between the client and the server before the HTTP request can be transferred. And <a href=\"https://www.cloudflare.com/learning/cdn/glossary/round-trip-time-rtt/\">round-trips on the Internet</a> can be slow.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3d2jAu0W5lMg2PQm8zrdtz/221af7783bc17706e2d3a2587ecf1312/TLS-1.3.006.png\" alt=\"TLS 1.3\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>Enter TLS 1.3. While TLS 1.0, 1.1 and 1.2 are not that different, 1.3 is a big jump.</p><p>Most importantly, establishing a TLS 1.3 connection takes <b>one less round-trip</b>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1hr3R0qLxh2XIklK8lNJdh/8b4cbbea91b113ba182294c1bef64695/TLS-1.3.007.png\" alt=\"TLS 1.3 handshake\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>In TLS 1.3 a client starts by sending not only the <code>ClientHello</code> and the list of supported ciphers, but it also makes a guess as to which key agreement algorithm the server will choose, and <b>sends a key share for that</b>.</p><p>(<i>Note: the video calls the key agreement algorithm &quot;cipher suite&quot;. In the meantime the specification has been changed to disjoin supported cipher suites like AES-GCM-SHA256 and supported key agreements like ECDHE P-256.</i>)</p><p>And that saves us a round trip, because as soon as the server selects the cipher suite and key agreement algorithm, it&#39;s ready to generate the key, as it already has the client key share. So it can switch to encrypted packets one whole round-trip in advance.</p><p>So the server sends the <code>ServerHello</code>, its key share, the certificate (now encrypted, since it has a key!), and already the <code>Finished</code> message.</p><p>The client receives all that, generates the keys using the key share, checks the certificate and <code>Finished</code>, and it&#39;s immediately ready to send the HTTP request, after only one round-trip. Which can be hundreds of milliseconds.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5Uvkj3F2TDTPupYTuJOCdE/03d16a27196bb78a5cafebecf12e9b34/TLS-1.3.009.png\" alt=\"TLS 1.2 resumption\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>One existing way to speed up TLS connections is called resumption. It&#39;s what happens when the client has connected to that server before, and uses what they remember from the last time to cut short the handshake.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7Kb8uoWeYCfHtOsR4jKTig/4e5ea4f6cdd0fd2498db35e1c51ecdac/TLS-1.3.010.png\" alt=\"TLS 1.2 resumption schema\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>How this worked in TLS 1.2 is that servers would send the client either a <a href=\"/tls-session-resumption-full-speed-and-secure/\">Session ID or a Session Ticket</a>. The former is just a reference number that the server can trace back to a session, while the latter is an encrypted serialized session which allows the server not to keep state.</p><p>The next time the client would connect, it would send the Session ID or Ticket in the <code>ClientHello</code>, and the server would go like &quot;hey, I know you, we have agreed on a key already&quot;, skip the whole key shares dance, and jump straight to <code>Finished</code>, saving a round-trip.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3T989Gfy9u4y0b5WlC2YyJ/926f71e94f528ae25d275bad8399e0fd/TLS-1.3.011.png\" alt=\"1.3 0-rtt resumption\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>So, we have a way to do 1-RTT connections in 1.2 if the client has connected before, which is very common. Then what does 1.3 gain us? When resumption is available, <b>1.3 allows us to do 0-RTT connections</b>, again saving one round trip and ending up with no round trip at all.</p><p>If you have connected to a 1.3 server before you can immediately start sending encrypted data, like an HTTP request, without any round-trip at all, making TLS essentially <b>zero overhead</b>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4x3MsWrJJB60co3tWBTcfD/cc3976fa1688d6bcb39f4fdae04c06ae/TLS-1.3.012.png\" alt=\"1.3 0-rtt resumption schema\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>When a 1.3 client connects to a 1.3 server they agree on a resumption key (or PSK, pre-shared key), and the server gives the client a Session Ticket that will help it remember it. The Ticket can be an encrypted copy of the PSK—to avoid state—or a reference number.</p><p>The next time the client connects, it sends the Session Ticket in the <code>ClientHello</code> and then immediately, without waiting for any round trip, sends the HTTP request encrypted with the PSK. The server figures out the PSK from the Session Ticket and uses that to decrypt the 0-RTT data.</p><p>The client also sends a key share, so that client and server can switch to a new fresh key for the actual HTTP response and the rest of the connection.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3bxXx5kuJvmtOYmxa1JNcy/1cdbfb3ee46d508d6eabcafd44e043b7/TLS-1.3.013.png\" alt=\"0-RTT caveats\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>0-RTT comes with a couple of caveats.</p><p>Since the PSK is not agreed upon with a fresh round of Diffie Hellman, it does not provide Forward Secrecy against a compromise of the Session Ticket key. That is, if in a year an attacker somehow obtains the Session Ticket key, it can decrypt the Session Ticket, obtain the PSK and decrypt the 0-RTT data the client sent (but not the rest of the connection).</p><p>This is why it&#39;s important to rotate often and not persist Session Ticket keys (CloudFlare rotates these keys hourly).</p><p>TLS 1.2 has never provided any Forward Secrecy against a compromise of the Session Ticket key at all, so even with 0-RTT 1.3 is an improvement upon 1.2.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/79qHz08hcnfJAk8ogogTfH/1822898b0fc6f0262a2b9c7ae9df0eba/TLS-1.3.014.png\" alt=\"0-RTT replay\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>More problematic are replay attacks.</p><p>Since with Session Tickets servers are stateless, they have no way to know if a packet of 0-RTT data was already sent before.</p><p>Imagine that the 0-RTT data a client sent is not an HTTP GET (&quot;hey, send me this page&quot;) but instead an HTTP POST executing a transaction like &quot;hey, send Filippo 50$&quot;. If I&#39;m in the middle I can intercept that <code>ClientHello</code>+0-RTT packet, and then re-send it to the server 100 times. No need to know any key. I now have 5000$.</p><p>Every time the server will see a Session Ticket, unwrap it to find the PSK, use the PSK to decrypt the 0-RTT data and find the HTTP POST inside, with no way to know something is fishy.</p><p>The solution is that servers must not execute operations that are not <i>idempotent</i> received in 0-RTT data. Instead in those cases they should force the client to perform a full 1-RTT handshake. That protects from replay since each <code>ClientHello</code> and <code>ServerHello</code> come with a Random value and connections have sequence numbers, so there&#39;s no way to replay recorded traffic verbatim.</p><p>Thankfully, most times the first request a client sends is not a state-changing transaction, but something idempotent like a GET.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2oeeDc9HROItV41GXxqggs/12f35c007af3f031ab681968ff807dad/TLS-1.3.016.png\" alt=\"removed\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4u8bypRISwPgvFeXhAZfuU/bbcdaf44a4b89aa05390b5e85a4a1a5a/TLS-1.3.017.png\" alt=\"simplified\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/45Ejce1oMIH6MiWRDtalo3/537497589b0bf99b28ec8b8488c8279e/TLS-1.3.018.png\" alt=\"added\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>TLS 1.3 is not only good for cutting a round-trip. It&#39;s also better, more robust crypto all around.</p><p>Most importantly, many things were removed. 1.3 marked a shift in the design approach: it used to be the case that the TLS committee would accept any proposal that made sense, and implementations like OpenSSL would add support for it. Think for example Heartbeats, the rarely used feature that cause <a href=\"/the-results-of-the-cloudflare-challenge/\">Heartbleed</a>.</p><p>In 1.3, everything was scrutinized for being really necessary and secure, and scrapped otherwise. A lot of things are gone:</p><ul><li><p>the old <a href=\"/keyless-ssl-the-nitty-gritty-technical-details/\">static RSA handshake without Diffie Hellman</a>, which doesn&#39;t offer Forward Secrecy</p></li><li><p>the <a href=\"/padding-oracles-and-the-decline-of-cbc-mode-ciphersuites/\">CBC MAC-then-Encrypt modes</a>, which were responsible for Vaudenay, Lucky13, POODLE, <a href=\"/yet-another-padding-oracle-in-openssl-cbc-ciphersuites/\">LuckyMinus20</a>... replaced by <a href=\"/go-crypto-bridging-the-performance-gap/\">AEADs</a></p></li><li><p>weak primitives like <a href=\"/killing-rc4-the-long-goodbye/\">RC4</a>, SHA1, MD5</p></li><li><p>compression</p></li><li><p>renegotiation</p></li><li><p>custom FFDHE groups</p></li><li><p>RSA PKCS#1v1.5</p></li><li><p>explicit nonces</p></li></ul><p>We&#39;ll go over these in more detail in future blog posts.</p><p>Some of these were not necessarily broken by design, but they were dangerous, hard to implement correctly and easy to get wrong. The new excellent trend of TLS 1.3 and cryptography in general is to make mistakes less likely at the design stage, since humans are not perfect.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/56pPwUsCFfumH2fYMeL8FN/35aa6d17ae21394702ce0122e6bdfb5c/TLS-1.3.019.png\" alt=\"anti-downgrade\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>A new version of a protocol obviously can&#39;t dictate how older implementations behave and 1.3 can&#39;t improve the security of 1.2 systems. So how do you make sure that if tomorrow TLS 1.2 is completely broken, a client and server that both support 1.2 and 1.3 can&#39;t be tricked into using 1.2 by a proxy?</p><p>A MitM could change the <code>ClientHello</code> to say &quot;I want to talk at most TLS 1.2&quot;, and then use whichever attack it discovered to make the 1.2 connection succeed even if it tampered with a piece of the handshake.</p><p>1.3 has a clever solution to this: if a 1.3 server has to use 1.2 because it looks like the client doesn&#39;t support 1.3, it will &quot;hide a message&quot; in the Server Random value. A real 1.2 will completely ignore it, but a client that supports 1.3 would know to look for it, and would discover that it&#39;s being tricked into downgrading to 1.2.</p><p>The Server Random is signed with the certificate in 1.2, so it&#39;s impossible to fake even if pieces of 1.2 are broken. This is very important because it will allow us to keep supporting 1.2 in the future even if it&#39;s found to be weaker, unlike we had to do with <a href=\"/sslv3-support-disabled-by-default-due-to-vulnerability/\">SSLv3 and POODLE</a>. With 1.3 we will know for sure that clients that can do any better are not being put at risk, allowing us to make sure <a href=\"/ensuring-that-the-web-is-for-everyone/\">the Internet is for Everyone</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2Q7LYbjQBvS2WP0PUvkmdk/6fb34646631b248c2d3750b4b2c198c5/TLS-1.3.020.png\" alt=\"solid\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>So this is TLS 1.3. Meant to be a solid, safe, robust, simple, essential foundation for Internet encryption for the years to come. And it&#39;s faster, so that no one will have performance reasons not to implement it.</p><p>TLS 1.3 is still a draft and it might change before being finalized, but at CloudFlare we are actively developing a 1.3 stack compatible with current experimental browsers, so <a href=\"/introducing-tls-1-3/\">everyone can get it today</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3xQPlSJ4uBQaS60OpFogxD/7967fae7cd0f8766658a02c0534b95c5/TLS-1.3.023.png\" alt=\"github\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>The TLS 1.3 spec is <a href=\"https://github.com/tlswg/tls13-spec\">on GitHub</a>, so anyone can contribute. Just while making the slides for this presentation I noticed I was having a hard time understanding a system because a diagram was missing some details, so I submitted a PR to fix it. How easy is that!?</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3Ecgvi8YtzFKhcoQjoPLzU/cb6a281fbd8246c453bc145ca36a7b56/TLS-1.3.026.png\" alt=\"questions\" class=\"kg-image\" width=\"1920\" height=\"1080\" loading=\"lazy\"/>\n            \n            </figure><p>Like any talk, at the end there&#39;s the Q&amp;A. Send your questions to <a href=\"mailto:tls13@cloudflare.com\">tls13@cloudflare.com</a> or leave them in the Disqus comments below and I&#39;ll answer them in an upcoming blog post!</p>",
		"id": "6CKPHn0MEFqMdmC3vvaDvo",
		"localeList": {
			"name": "An overview of TLS 1.3 and Q&A Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2016-09-23T17:01:18.000+01:00",
		"slug": "tls-1-3-overview-and-q-and-a",
		"tags": [
			{
				"id": "56vA0Z6hqev6QaJBQmO2J8",
				"name": "TLS",
				"slug": "tls"
			},
			{
				"id": "14zCAfc7F9ROKtNbSxs2Pe",
				"name": "TLS 1.3",
				"slug": "tls-1-3"
			},
			{
				"id": "7qrmHspTZnIVIRl7tmvg6k",
				"name": "Events",
				"slug": "events"
			},
			{
				"id": "6lgNzCRGbenSRRASZk18Zr",
				"name": "United Kingdom",
				"slug": "united-kingdom"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "1QsJUMpv0QBSLiVZLLQJ3V",
				"name": "Cryptography",
				"slug": "cryptography"
			}
		],
		"title": "An overview of TLS 1.3 and Q&A",
		"updated_at": "2024-10-10T00:41:35.699Z",
		"url": "https://blog.cloudflare.com/tls-1-3-overview-and-q-and-a"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}