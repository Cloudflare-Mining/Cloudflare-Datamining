{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Guest Author",
				"slug": "guest-author",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/YJzTr2p8aLvtEX5J7CysP/dd56b510670ea7bd78c3b19cc5b3bcd7/guest-author.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "A step-by-step guide for how to run production Minikube deployments using the Cloudflare Ingress Controller.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7lIbr7ys1slKmEegs1MUET/6062af04b716df41a8b014a1419adb06/minikube_plus_cloudflare.png",
		"featured": false,
		"html": "<p><sub><i>The following is a guest blog post by </i></sub><a href=\"https://www.linkedin.com/in/nathanfranzen/\"><sub><i>Nathan Franzen</i></sub></a><sub><i>, Software Engineer at </i></sub><a href=\"https://stackpoint.io/\"><sub><i>StackPointCloud</i></sub></a><sub><i>. StackPointCloud is the creator of Stackpoint.io, the leading multi-cloud management platform for cloud native workloads. They are the developers of the </i></sub><a href=\"https://github.com/cloudflare/cloudflare-warp-ingress\"><sub><i>Cloudflare Ingress Controller</i></sub></a><sub><i> for Kubernetes.</i></sub></p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"deploying-applications-on-minikube-with-argo-tunnels\">Deploying Applications on Minikube with Argo Tunnels</h3>\n      <a href=\"#deploying-applications-on-minikube-with-argo-tunnels\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7lIbr7ys1slKmEegs1MUET/6062af04b716df41a8b014a1419adb06/minikube_plus_cloudflare.png\" alt=\"minikube plus cloudflare\" class=\"kg-image\" width=\"1600\" height=\"976\" loading=\"lazy\"/>\n          </figure><blockquote><p>This article assumes basic knowledge of Kubernetes. If you&#39;re not familiar with Kubernetes, visit <a href=\"https://kubernetes.io/docs/tutorials/kubernetes-basics/\">https://kubernetes.io/docs/tutorials/kubernetes-basics/</a> to learn the basics.</p></blockquote><p>Minikube is a tool which allows you to run a Kubernetes cluster locally. It’s not only a great way to experiment with Kubernetes, but also a great way to try out deploying services using a reverse tunnel.</p><p>At Cloudflare, we&#39;ve created a product called <a href=\"https://www.cloudflare.com/products/argo-tunnel/\">Argo Tunnel</a> which allows you to host services through a tunnel using Cloudflare as your edge. Tunnels provide a way to expose your services to the internet by creating a connection to Cloudflare&#39;s edge and routing your traffic over it. Since your service is creating its own outbound connection to the edge, you don’t have to open ports, configure a firewall, or even have a public IP address for your service. All traffic flows through Cloudflare, blocking attacks and intrusion attempts before they ever make it to you, completely securing your origin.</p><p>Deploying your service to more locations around the world is as simple as spinning up more containers. Anything which uses the Ingress Controller will receive your traffic, wherever the container is running in the world or on the Internet. Tunnels make it simpler to have robust security even while deploying across multiple regions or cloud providers.</p><p>Usually Minikube applications need to be ported over to a production Kubernetes setup to be deployed, but with Argo Tunnel, you can easily deploy a locally-running yet publicly-available Minikube instance making it a great way to try out both Kubernetes and Argo Tunnel. In this example, we’ll create a simple microservice that returns data when given a key, deploy it into Minikube, and start up the Argo Tunnel machinery to get it exposed to the Internet.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"getting-started-with-an-application-api\">Getting Started with an Application API</h3>\n      <a href=\"#getting-started-with-an-application-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We&#39;ll start by by creating a web service in Python using <a href=\"http://flask.pocoo.org/\">Flask</a>. We&#39;ll write a simple application to represent a small piece of an API in just a few lines of code. The complete application, secret_token.py is simply:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">from flask import Flask, jsonify, abort  \n  \napp = Flask(__name__)\n\n@app.route(&#039;/api/v1/token/&lt;key&gt;&#039;, methods=[&#039;GET&#039;])  \ndef token(key):  \n\ttest_data = {  \n\t\t&quot;e8990ab9be26&quot;: &quot;3OX9+p39QLIvE6+x/w=&quot;,  \n\t\t&quot;b01323031589&quot;: &quot;wBvlo9G7Wqxsb2P9YS=&quot;,  \n\t}  \n\tsecret = test_data.get(key)  \n\tif secret is None:  \n\t\tabort(404)  \n\treturn jsonify({&quot;key&quot;: key, &quot;token&quot;: secret})</pre></code>\n            <p></p><p>This tiny service will simply respond to a GET request with some secret data, given a key.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-docker\">Using Docker</h3>\n      <a href=\"#using-docker\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We’ll take the next step toward deployment and package our application into a portable Docker image with a Dockerfile:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">FROM  python:alpine3.7  \nRUN  pip install flask gunicorn\nCOPY  secret_token.py .\nCMD  gunicorn -b 0.0.0.0:8000 secret_token:app</pre></code>\n            <p></p><p>This will allow us to define a Docker image, the blueprint for the containers Minikube will build.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"deploying-into-minikube\">Deploying into Minikube</h4>\n      <a href=\"#deploying-into-minikube\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <blockquote><p>If you don&#39;t have Minikube installed, install it here: <a href=\"https://kubernetes.io/docs/tasks/tools/install-minikube/\">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p></blockquote><p>Usually, we would build the Docker image with our Docker daemon and push it to a repository where the cluster can access it. With Minikube, however, that’s a round-trip we don’t need. We can share the Minikube Docker daemon with the Docker build process and avoid pushing to a cloud repository:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ eval $(minikube docker-env)  \n$ docker build -t myrepo/secret_token .</pre></code>\n            <p></p><p>The image is now present on the Minikube VM where Kubernetes is running.</p><p>In a production Kubernetes system, we might spend a good deal of time going over the details of the deployment and service manifests, but kubectl run provides a simple way to get the basic app up and running. We add the image-pull-policy flag to make sure that Kubernetes doesn’t first try to pull the image remotely from Docker Hub.</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ kubectl run token --image myrepo/secret_token --expose --port 8000 --image-pull-policy=IfNotPresent --replicas=3</pre></code>\n            <p></p><p>We now have a Kubernetes deployment running with our 3 replicas of containers built from our image, and a service associated with it that exposes port <code>8000</code>. Save the two manifests locally into files:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">kubectl get deployment token --export -o yaml &gt; deployment.yaml  \nkubectl get svc token --export -o yaml &gt; service.yaml</pre></code>\n            <p></p><p>We’ll be able to edit these files to make changes to our cluster configuration.</p><p>For local testing, let&#39;s change that service so that it exposes a NodePort -- this will proxy the service to a port on the Minikube VM. Replace the spec in the service.yaml file with:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">spec:  \n\tports:  \n\t-\tnodePort:  32080  \n\t\tport:  8000  \n\t\tprotocol:  TCP  \n\t\ttargetPort:  8000  \n\tselector:  \n\t\trun:  token  \n\tsessionAffinity:  None  \n\ttype:  NodePort</pre></code>\n            <p></p><p>And apply the change to our cluster:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ kubectl apply -f service.yaml</pre></code>\n            <p></p><p>Now, we can test locally with <code>curl</code>, reaching the service via the NodePort on the Minikube VM:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ minikube start\n$ export MINIKUBE_IP=$(minikube ip)\n$ curl http://$MINIKUBE_IP:32080/api/v1/token/b01323031589</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-cloudflares-argo-tunnel\">Using Cloudflare’s Argo Tunnel</h3>\n      <a href=\"#using-cloudflares-argo-tunnel\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The NodePort setup is fine for testing the application locally, but if we want to share this service with others or better simulate how it will work in the real world, we need to expose it to the internet. In most cases, this means running in a cloud environment and dealing with load balancer configuration or setting up an NGINX ingress controller and dealing with network rules and routing. The Cloudflare Argo Tunnel Ingress Controller allows us to route almost anything to a Cloudflare domain, including services running inside of Minikube.</p><p>In the Kubernetes cluster, an <code>ingress</code> is an object that describes how we want our service exposed on the internet and an <code>ingress-controller</code> is the process that actually exposes it. To install the Cloudflare Ingress Controller, you’ll need to have a Cloudflare domain and an Argo Tunnel certificate, configured with the <code>cloudflared</code> application.</p><p><code>kubectl run</code> was fine for quickly installing the test application, but for more complex installations, <a href=\"https://helm.sh/\">helm</a> is a great tool, and is used to package the Cloudflare agent. Once you have the helm client installed, a simple <code>helm init</code> will configure Minikube to work with it. The chart for the ingress controller is found at the <a href=\"https://github.com/StackPointCloud/trusted-charts/tree/master/stable/cloudflare-warp-ingress&sa=D&ust=1529959945974000\">trusted-charts public repository</a> and can be installed directly from there.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"cloudflared-configuration\">Cloudflared Configuration</h4>\n      <a href=\"#cloudflared-configuration\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><code>Cloudflared</code> is the end of the tunnel that runs on your machine and proxies traffic to and from your origin server through the tunnel. If you don&#39;t have it installed already, the <code>cloudflared</code> application complete quickstart instructions can be found at <a href=\"https://www.google.com/url?q=https://developers.cloudflare.com/argo-tunnel/quickstart/quickstart/&sa=D&ust=1529959945975000\">https://developers.cloudflare.com/argo-tunnel/quickstart/quickstart/</a></p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"installing-the-controller-with-helm\">Installing the Controller with Helm</h4>\n      <a href=\"#installing-the-controller-with-helm\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Now we will run some commands that define the repository that holds our chart and override a few default values:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ minikube start\n$ export MINIKUBE_IP=$(minikube ip)\n$ curl http://$MINIKUBE_IP:32080/api/v1/token/b01323031589</pre></code>\n            <p>This installation configures two cloudflare-warp-ingress controller replicas so that any service we expose will get two separate tunnels to the Cloudflare edge, paired together in a single pool.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"exposing-our-application-with-an-ingress\">Exposing Our Application with an Ingress</h4>\n      <a href=\"#exposing-our-application-with-an-ingress\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We&#39;ll need to write an ingress definition. Create a file called <code>warp-controller.yaml</code>:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">apiVersion:  extensions/v1beta1  \nkind:  Ingress  \nmetadata:  \n\tannotations:  \n\t\tkubernetes.io/ingress.class:  argo-tunnel  \n\tname:  token  \n\tnamespace:  default  \nspec:  \n\trules:  \n\t-\thost:  token.anthopleura.net  \n\thttp:  \n\tpaths:  \n\t-\tbackend:  \n\t\t\tserviceName:  token  \n\t\t\tservicePort:  8000</pre></code>\n            <p>And apply the definition:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ kubectl apply -f service.yaml</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"examining-the-deployment\">Examining the deployment</h4>\n      <a href=\"#examining-the-deployment\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ kubectl get pod</pre></code>\n            <p>Should print:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">NAME\t\t\t\t\t\t\t\t\tREADY \tSTATUS\tRESTARTS \tAGE\n\ncloudflare-argo-ingress-6b886994b-52fsl 1/1 \tRunning \t   0 \t34s\n\ntoken-766cd8dd4c-bmksw \t\t\t\t\t1/1 \tRunning \t   0 \t 2m\n\ntoken-766cd8dd4c-l8gkw \t\t\t\t\t1/1 \tRunning \t   0 \t 2m\n\ntoken-766cd8dd4c-p2phg \t\t\t\t\t1/1 \tRunning \t   0 \t 2m</pre></code>\n            <p>The output shows the three <code>token</code> pods and the <code>cloudflare-warp-ingress</code> pod. Examine the logs from the argo pod to see the activity of the ingress controller:</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">$ kubectl logs cloudflare-argo-ingress-6b886994b-52fsl</pre></code>\n            <p>The controller watches the cluster for creation of ingresses, services and pods.</p><p>The endpoint is live at <a href=\"https://token.anthopleura.net/api/v1/token/e8990ab9be26\">https://token.anthopleura.net/api/v1/token/e8990ab9be26</a> returning</p>\n            <pre class=\"language-undefined\"><code class=\"language-undefined\">{  \n\t&quot;key&quot;: &quot;e8990ab9be26&quot;,  \n\t&quot;token&quot;: &quot;3OX9+p39QLIvE6+x/YK4DxWWCFi/D+c7g99c14oNB8g=&quot;  \n}</pre></code>\n            <p>Now this small piece of an api is available publicly on the internet for testing. Obviously you don’t want to serve public traffic into a minikube instance, but it’s certainly handy for sharing preliminary work across development teams.</p><p>The Cloudflare <a href=\"https://blog.cloudflare.com/minikube-cloudflare/%5Bhttps://dash.cloudflare.com/%5D(https://dash.cloudflare.com/&sa=D&ust=1529959945990000)\">dashboard</a> under the analytics tab will show some general statistics about the requests to your zone.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"routing-and-relationships\">Routing and relationships</h3>\n      <a href=\"#routing-and-relationships\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>A quick sketch of the routing in the Kubernetes cluster and from the Cloudflare network:</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ZiftW67CC2PZM3UfQ25kn/f23446ae0782e79e316e667164505d0b/Screenshot_2024-08-06_at_5.33.57_PM.png\" alt=\"\" class=\"kg-image\" width=\"667\" height=\"423\" loading=\"lazy\"/>\n          </figure><p>The warp controller pods provide a way for Argo Tunnels to connect the pods containing your application to the internet through Cloudflare&#39;s edge.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"going-farther-with-cloudflare-load-balancers\">Going farther with Cloudflare Load Balancers</h3>\n      <a href=\"#going-farther-with-cloudflare-load-balancers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This demo exposes a service through a single Argo Tunnel. If your Cloudflare account is enabled with load balancing, you can route traffic through a load balancer and pool of tunnels instead, by adding the annotation<code>argo.cloudflare.com/lb-pool=token</code> to the ingress. For details of load balancer routing and weighting please refer to the Cloudflare <a href=\"https://developers.cloudflare.com/\">docs</a>.</p><p>If you do use load balancing, then it is possible to run multiple instances of the ingress controller. When installing from the helm chart, set the value <code>replicaCount</code> to two or more and get multiple instances of the controller in the minikube cluster. The configuration will be useful for high availability in a single cluster. Load balancing can also be used to spread traffic across multiple clusters with different argo ingress controllers connecting to the same load balancing pool.</p><p>With two ingress controllers, the <a href=\"https://www.cloudflare.com/a/traffic/stackpoint.io&sa=D&ust=1529959945991000\">Cloudflare UI</a> will show a pool named token.anthopleura.net with two origins with tunnel ids as origin addresses:</p>",
		"id": "5dKfmN3YfXAbTEsYyLgdJG",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-07-08T06:00-07:00",
		"slug": "minikube-cloudflare",
		"tags": [
			{
				"id": "3Qpksw30KF5bmGKLdvbsm1",
				"name": "Kubernetes",
				"slug": "kubernetes"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "z8ZZrDbXCT44IU6BaHLWl",
				"name": "Load Balancing",
				"slug": "loadbalancing"
			},
			{
				"id": "5x72ei67SoD11VQ0uqFtpF",
				"name": "API",
				"slug": "api"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "2kFnzwwExTv3DVtV0CTReO",
				"name": "Cloudflare Tunnel",
				"slug": "cloudflare-tunnel"
			}
		],
		"title": "How To Minikube + Cloudflare",
		"updated_at": "2025-10-24T09:37:02.638Z",
		"url": "https://blog.cloudflare.com/minikube-cloudflare"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}