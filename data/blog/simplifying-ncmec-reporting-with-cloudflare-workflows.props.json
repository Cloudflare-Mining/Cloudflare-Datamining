{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Mahmoud Salem",
				"slug": "mahmoud-salem",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/01JR14QKwy7goE7a4iyMIL/fdc79981150c8743b91e7f1ec6afbceb/Mahmoud_Salem.jpg"
			},
			{
				"name": "Rachael Truong",
				"slug": "rachael-truong",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/qzwTKN43tcA5I7uV1Q9oV/7f2f780757812b9fd8c66113a09d1f46/_tmp_mini_magick20230518-2-vw2zdi.jpg"
			}
		],
		"excerpt": "We transitioned to Cloudflare Workflows to manage complex, multi-step processes more efficiently. This shift replaced our National Center for Missing & Exploited Children (NCMEC) reporting system.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/25jgOrdNnPobPfSeYtu2dY/659b91eed092abfec7b3ea7ad6d72fc7/image1.png",
		"featured": false,
		"html": "<p>Cloudflare plays a significant role in supporting the Internet’s infrastructure. <a href=\"https://w3techs.com/technologies/history_overview/proxy/all/q\"><u>As a reverse proxy by approximately 20% of all websites</u></a>, we sit directly in the request path between users and the origin, helping to improve performance, security, and reliability at scale. Beyond that, our global network powers services like <a href=\"https://www.cloudflare.com/en-gb/application-services/products/cdn/\"><u>delivery</u></a>, <a href=\"https://workers.cloudflare.com/\"><u>Workers</u></a>, and <a href=\"https://www.cloudflare.com/en-gb/developer-platform/products/r2/\"><u>R2</u></a> — making Cloudflare not just a passive intermediary, but an active platform for delivering and hosting content across the Internet.</p><p>Since Cloudflare’s launch in 2010, we have collaborated with the National Center for Missing and Exploited Children (<a href=\"https://www.missingkids.org/home\"><u>NCMEC</u></a>), a US-based clearinghouse for reporting child sexual abuse material (CSAM), and are committed to doing what we can to support identification and removal of CSAM content.</p><p>Members of the public, <a href=\"https://blog.cloudflare.com/cloudflares-response-to-csam-online/\"><u>customers, and trusted organizations can submit reports</u></a> of abuse observed on Cloudflare’s network. A minority of these reports relate to CSAM, which are triaged with the highest priority by Cloudflare’s Trust &amp; Safety team. We will also forward details of the report, along with relevant files (where applicable) and supplemental information to NCMEC.</p><p>The process to generate and submit reports to NCMEC involves multiple steps, dependencies, and error handling, which quickly became complex under our original queue-based architecture. In this blog post, we discuss how Cloudflare <a href=\"https://developers.cloudflare.com/workflows/\"><u>Workflows</u></a> helped streamline this process and simplify the code behind it.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"life-before-cloudflare-workflows\">Life before Cloudflare Workflows</h2>\n            <a href=\"#life-before-cloudflare-workflows\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>When we designed our latest NCMEC reporting system in early 2024, <a href=\"https://blog.cloudflare.com/building-workflows-durable-execution-on-workers/\"><u>Cloudflare Workflows</u></a> did not exist yet. We used the Workers platform <a href=\"https://developers.cloudflare.com/queues/\"><b><u>Queues</u></b></a> as a solution for managing asynchronous tasks, and structured our system around them.</p><p>Our goal was to ensure reliability, fault tolerance, and automatic retries. However, without an orchestrator, we had to manually handle state, retries, and inter-queue messaging. While Queues worked, we needed something more explicit to help debug and observe the more complex asynchronous workflows we were building on top of the messaging system that Queues gave us.</p><p>In our queue-based architecture each report would go through multiple steps:</p><ol><li><p><b>Validate input</b>: Ensure the report has all necessary details.</p></li><li><p><b>Initiate report</b>: Call the NCMEC API to create a report.</p></li><li><p><b>Fetch impounded files (if applicable)</b>: Retrieve files stored in R2.</p></li><li><p><b>Upload files</b>: Send files to NCMEC via API.</p></li><li><p><b>Finalize report</b>: Mark the report as completed.</p></li></ol>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7n99a6YkThlegGitE2i7iv/a53e70ac11e21025d436c27dce7aaf3a/image2.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1000\" loading=\"lazy\"/>\n          </figure><p><sup><i>A diagram of our queue-based architecture </i></sup></p><p>Each of these steps was handled by a separate queue, and if an error occurred, the system would retry the message several times before marking the report as failed. But errors weren’t always straightforward — for instance, if an external API call consistently failed due to bad input or returned an unexpected response shape, retries wouldn’t help. In those cases, the report could get stuck in an intermediate state, and we’d often have to manually dig through logs across different queues to figure out what went wrong.</p><p>Even more frustrating, when handling failed reports, we relied on a &quot;Reaper&quot; — a cron job that ran every hour to resubmit failed reports. Since a report could fail at any step, the Reaper had to deduce which queue failed and send a message to begin reprocessing. This meant:</p><ul><li><p><b>Debugging was a nightmare</b>: Tracing the journey of a single report meant jumping between logs for multiple queues.</p></li><li><p><b>Retries were unreliable</b>: Some queues had retry logic, while others relied on the Reaper, leading to inconsistencies.</p></li><li><p><b>State management was painful</b>: We had no clear way to track whether a report was halfway through the pipeline or completely lost, except by looking through the logs.</p></li><li><p><b>Operational overhead was high</b>: Developers frequently had to manually inspect failed reports and resubmit them.</p></li></ul><p>Queues gave us a solid foundation for moving messages around, but it wasn’t meant to handle orchestration. What we’d really done was build a bunch of loosely connected steps on top of a message bus and hoped it would all hold together. It worked, for the most part, but it was clunky, hard to reason about, and easy to break. Just understanding how a single report moved through the system meant tracing messages across multiple queues and digging through logs.</p><p>We knew we needed something better: a way to define workflows explicitly, with clear visibility into where things were and what had failed. But back then, we didn’t have a good way to do that without bringing in heavyweight tools or writing a bunch of glue code ourselves. When Cloudflare Workflows came along, it felt like the missing piece, finally giving us a simple, reliable way to orchestrate everything without duct tape.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"the-solution-cloudflare-workflows\">The solution: Cloudflare Workflows</h2>\n            <a href=\"#the-solution-cloudflare-workflows\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Once <a href=\"https://developers.cloudflare.com/workflows/\"><u>Cloudflare Workflows</u></a> was <a href=\"https://blog.cloudflare.com/building-workflows-durable-execution-on-workers/\"><u>announced</u></a>, we saw an immediate opportunity to replace our queue-based architecture with a more structured, observable, and retryable system. Instead of relying on a web of multiple queues passing messages to each other, we now have a single workflow that orchestrates the entire process from start to finish. Critically, if any step failed, the Workflow could pick back up from where it left off, without having to repeat earlier processing steps, re-parsing files, or duplicating uploads.</p><p>With Cloudflare Workflows, each report follows a clear sequence of steps:</p><ol><li><p><b>Creating the report</b>: The system validates the incoming report and initiates it with NCMEC.</p></li><li><p><b>Checking for impounded files</b>: If there are impounded files associated with the report, the workflow proceeds to file collection.</p></li><li><p><b>Gathering files</b>: The system retrieves impounded files stored in R2 and prepares them for upload.</p></li><li><p><b>Uploading files to NCMEC</b>: Each file is uploaded to NCMEC using their API, ensuring all relevant evidence is submitted.</p></li><li><p><b>Adding file metadata</b>: Metadata about the uploaded files (hashes, timestamps, etc.) is attached to the report.</p></li><li><p><b>Finalizing the report</b>: Once all files are processed, the report is finalized and marked as complete.</p></li></ol><p>Here’s a simplified version of the orchestrator:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { WorkflowEntrypoint, WorkflowEvent, WorkflowStep } from &#039;cloudflare:workers&#039;;\n\n\nexport class ReportWorkflow extends WorkflowEntrypoint&lt;Env, ReportType&gt; {\n  async run(event: WorkflowEvent&lt;ReportType&gt;, step: WorkflowStep) {\n    const reportToCreate: ReportType = event.payload;\n    let reportId: number | undefined;\n\n\n    try {\n      await step.do(&#039;Create Report&#039;, async () =&gt; {\n        const createdReport = await createReportStep(reportToCreate, this.env);\n        reportId = createdReport?.id;\n      });\n\n\n      if (reportToCreate.hasImpoundedFiles) {\n        await step.do(&#039;Gather Files&#039;, async () =&gt; {\n          if (!reportId) throw new Error(&#039;Report ID is undefined.&#039;);\n          await gatherFilesStep(reportId, this.env);\n        });\n\n\n        await step.do(&#039;Upload Files&#039;, async () =&gt; {\n          if (!reportId) throw new Error(&#039;Report ID is undefined.&#039;);\n          await uploadFilesStep(reportId, this.env);\n        });\n\n\n        await step.do(&#039;Add File Metadata&#039;, async () =&gt; {\n          if (!reportId) throw new Error(&#039;Report ID is undefined.&#039;);\n          await addFilesInfoStep(reportId, this.env);\n        });\n      }\n\n\n      await step.do(&#039;Finalize Report&#039;, async () =&gt; {\n        if (!reportId) throw new Error(&#039;Report ID is undefined.&#039;);\n        await finalizeReportStep(reportId, this.env);\n      });\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n}</pre></code>\n            <p>Not only can tasks be broken into discrete steps, but the Workflows dashboard gives us real-time visibility into each report processed and the status of each step in the workflow!</p><p>This allows us to easily see active and completed workflows, identify which steps failed and where, and retry failed steps or terminate workflows. These features revolutionize how we troubleshoot issues, providing us with a tool to deep dive into any issues that arise and retry steps with a click of a button.</p><p>Below are two dashboard screenshots, one of our running workflows and the second of an inspection of the success and failures of each step in the workflow. Some workflows look slower or “stuck” — that’s because failed steps are retried with exponential backoff. This helps smooth over transient issues like flaky APIs without manual intervention.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2DjVg3WMp8e5QGy19TuHMj/69e611c9267598c44e5a2b120f0f59ac/image4.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1201\" loading=\"lazy\"/>\n          </figure><p><sup><i>Cloudflare Workflows Dashboard for our NCMEC Workflow</i></sup></p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5ElqnGMtnJQumNhuWZI3nb/6866cc9aa2b27856a8730a9faebc1747/image3.png\" alt=\"\" class=\"kg-image\" width=\"1508\" height=\"990\" loading=\"lazy\"/>\n          </figure><p><sup><i>Cloudflare Workflows Dashboard containing a breakout of the NCMEC Workflow Steps</i></sup></p><p>Cloudflare Workflows transformed how we handle NCMEC incident reports. What was once a complex, queue-based architecture is now a structured, retryable, and observable process. Debugging is easier, error handling is more robust, and monitoring is seamless. </p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"deploy-your-own-workflows\">Deploy your own Workflows</h3>\n            <a href=\"#deploy-your-own-workflows\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>If you’re also building larger, multi-step applications, or have an existing Workers application that has started to approach what we ended up with for our incident reporting process, then you can typically wrap that code within a Workflow with minimal changes. <a href=\"https://developers.cloudflare.com/workflows/examples/backup-d1/\"><u>Workflows can read from R2, write to KV, query D1</u></a> and call other APIs just like any other Worker, but are designed to help orchestrate asynchronous, long-running tasks.</p><p>To get started with Workflows, you can head to the <a href=\"https://developers.cloudflare.com/workflows/\"><u>Workflows developer documentation</u></a> and/or pull down the starter project and dive into the code immediately:</p>\n            <pre class=\"language-Rust\"><code class=\"language-Rust\">$ npm create cloudflare@latest workflows-starter -- \n--template=&quot;cloudflare/workflows-starter&quot;\n</pre></code>\n            <p><i>Learn more about </i><a href=\"https://developers.cloudflare.com/workers/workflows\"><i><u>Cloudflare Workflows</u></i></a><i>, and about using </i><a href=\"https://developers.cloudflare.com/cache/reference/csam-scanning/\"><i><u>the Cloudflare CSAM Scanning Tool</u></i></a><i>.</i></p>",
		"id": "32j7ZR5lpPUtSjC9lwtY0t",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "We transitioned to Cloudflare Workflows to manage complex, multi-step processes more efficiently. This shift replaced our queues-based architecture in our National Center for Missing & Exploited Children (NCMEC) reporting system with a structured, retryable workflow that’s easier to debug and maintain.",
		"metadata": {
			"title": "How we simplified NCMEC reporting with Cloudflare Workflows",
			"description": "We transitioned to Cloudflare Workflows to manage complex, multi-step processes more efficiently. This shift replaced our queues-based architecture in our National Center for Missing & Exploited Children (NCMEC) reporting system with a structured, retryable workflow that’s easier to debug and maintain.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/b6SrliBdGE3nWRJLsCXE0/f5e65d3737d3f328718e648087dd8ab6/OG_Share_2024__46_.png"
		},
		"primary_author": {},
		"published_at": "2025-04-11T14:00+00:00",
		"slug": "simplifying-ncmec-reporting-with-cloudflare-workflows",
		"tags": [
			{
				"id": "2xCnBweKwOI3VXdYsGVbMe",
				"name": "Developer Week",
				"slug": "developer-week"
			},
			{
				"id": "1KBFlaTf50eub8uvJ1pAt1",
				"name": "Workflows",
				"slug": "workflows"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "7HSE9ZogUmF8G2SfKmVqtA",
				"name": "CSAM Reporting",
				"slug": "csam-reporting"
			},
			{
				"id": "5b88GzjVlN3VhAcIsSpJTp",
				"name": "Automation",
				"slug": "automation"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "How we simplified NCMEC reporting with Cloudflare Workflows",
		"updated_at": "2025-04-11T13:00:03.664Z",
		"url": "https://blog.cloudflare.com/simplifying-ncmec-reporting-with-cloudflare-workflows"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}