{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "8",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Filippo Valsorda",
				"slug": "filippo",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/46wTy3eKIkbnXRmuf2gsIt/3b2b4a5afc370ab87b3a189c0424f75c/filippo.jpg",
				"location": null,
				"website": null,
				"twitter": "@filosottile",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Yesterday a new vulnerability has been announced in OpenSSL/LibreSSL. A padding oracle in CBC mode decryption, to be precise. Just like Lucky13. Actually, it’s in the code that fixes Lucky13.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7nUf0sdRuBcvc3KlZjC1G7/37129ec57be84829f3e57c5b7db9ce9f/yet-another-padding-oracle-in-openssl-cbc-ciphersuites.jpg",
		"featured": false,
		"html": "<p>Yesterday a new vulnerability <a href=\"https://www.openssl.org/news/secadv/20160503.txt\">has been announced</a> in OpenSSL/LibreSSL. A <i>padding oracle in CBC mode decryption</i>, to be precise. Just like <a href=\"https://en.wikipedia.org/wiki/Lucky_Thirteen_attack\">Lucky13</a>. Actually, it’s in the code that fixes Lucky13.</p><p>It was found by <a href=\"http://web-in-security.blogspot.co.uk/2016/05/curious-padding-oracle-in-openssl-cve.html\">Juraj Somorovsky</a> using a tool he developed called <a href=\"https://github.com/RUB-NDS/TLS-Attacker\">TLS-Attacker</a>. Like in the “old days”, it has no name except CVE-2016-2107. (I call it LuckyNegative20[^1])</p><p>It’s a wonderful example of a padding oracle in constant time code, so we’ll dive deep into it. But first, two quick background paragraphs. If you already know all about Lucky13 and how it&#39;s mitigated in OpenSSL <a href=\"#offby20\">jump to &quot;Off by 20&quot;</a> for the hot and new.</p><p>If, before reading, you want to check that your server is safe, you can do it <a href=\"https://filippo.io/CVE-2016-2107/\">with this one-click online test</a>.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"tls-cbc-and-mac-then-encrypt\">TLS, CBC, and Mac-then-Encrypt</h3>\n            <a href=\"#tls-cbc-and-mac-then-encrypt\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Very long story short, the CBC cipher suites in TLS have a design flaw: they first compute the HMAC of the plaintext, then encrypt <code>plaintext || HMAC || padding || padding length</code> using CBC mode. The receiving end is then left with the uncomfortable task of decrypting the message and checking HMAC and padding <i>without revealing the padding length in any way</i>. If they do, we call that a <b>padding oracle</b>, and a MitM can use it to learn the value of the last byte of any block, and by iteration often the entire message.</p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=https://moxie.org/2011/12/13/the-cryptographic-doom-principle.html>\n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/44IkC1Y8GbkE4EY00AfCBO/2bf4bf76ebbc1f91d4e060b66d7e4c7d/S22C-6e16050319300-1.jpg\" alt=\"S22C-6e16050319300-1\" class=\"kg-image\" width=\"2000\" height=\"576\" loading=\"lazy\"/>\n            </a>\n            </figure><p>In other words, the CBC mode cipher suites are doomed by <a href=\"https://moxie.org/2011/12/13/the-cryptographic-doom-principle.html\">The Cryptographic Doom Principle</a>. Sadly though, they are the only “safe” cipher suites to use with TLS prior to version 1.2, and they account for <b>26% of connections to the CloudFlare edge</b>, so attacks against them like this one are still very relevant.</p><p>My colleague Nick Sullivan explained CBC padding oracles and their history in much more detail <a href=\"https://blog.cloudflare.com/padding-oracles-and-the-decline-of-cbc-mode-ciphersuites/\">on this very blog</a>. If you didn’t understand my coarse summary, please take the time to read his post as it’s needed to understand what goes wrong next.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"constant-time-programming-crash-course\">Constant time programming crash course</h3>\n            <a href=\"#constant-time-programming-crash-course\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>The “solution” for the problem of leaking information about the <i>padding length</i> value is to write the entire HMAC and padding check code to run in perfectly constant time. What I once heard Daniel J. Bernstein call “binding your hands behind your back and seeing what you can do with just your nose”. As you might imagine it’s not easy.</p><p>The idea is that you can’t use <code>if</code>s. So instead you store the results of your checks by doing bitwise <code>AND</code>s with a result variable which you set to 1 before you begin, and at which you only look at the end of the entire operation. If any of the checks returned 0, then the result will be 0, otherwise it will be 1. This way the attacker only learns “everything including padding and HMAC is good” or “nope”.</p><p>Not only that, but loop iterations can only depend on public data: if for example the message is 32 bytes long then the padding can be at most 32-1-20=11 bytes, so you have to check 20 (HMAC-SHA1) + 11 bytes. To ignore the bytes you don’t actually have to check, you use a <b>mask</b>: a value generated with constant time operations that will be <code>0xff</code> when the bytes are supposed to match and <code>0x00</code> when they are not. By <code>AND</code>ing the mask to the bitwise difference you get a value which is 0 when the values either match, or are not supposed to match.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1nbnTmVholEmauPKBYPl35/c36b1fa43df1459a31146c16ad3be0cc/S22C-6e16050319300.jpg\" alt=\"S22C-6e16050319300\" class=\"kg-image\" width=\"2000\" height=\"664\" loading=\"lazy\"/>\n            \n            </figure><p>This technique is crucial to this vulnerability, as it’s exactly its constant time, no-complaints nature that made the mistake possible.</p><p>The <a href=\"https://github.com/openssl/openssl/blob/cba792a1e941788cba7dc700a2ef59420e7f2522/crypto/evp/e_aes_cbc_hmac_sha1.c#L739-L763\">OpenSSL checking code</a> was written after the discovery of <a href=\"http://www.isg.rhul.ac.uk/tls/TLStiming.pdf\">Lucky13</a>, and Adam Langley wrote <a href=\"https://www.imperialviolet.org/2013/02/04/luckythirteen.html\">a long blog post</a> explaining how the generic version works. I glossed over many details here, in particular the incredible pain that is generating the HMAC of a variable-length message in constant time (which is where Lucky13 and <a href=\"https://eprint.iacr.org/2015/1129.pdf\">Lucky Microseconds</a> happened), so go read his incredible write-up to learn more.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"off-by-20\">Off by 20</h3>\n            <a href=\"#off-by-20\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Like any respectable vulnerability analysis, let’s start with <a href=\"https://github.com/openssl/openssl/commit/70428eada9bc4cf31424d723d1f992baffeb0dfb\">the patch</a>. We’ll focus on the SHA1 part for simplicity, but the SHA256 one is exactly the same.</p><p>The patch for <i>LuckyMinus20</i> is one line in the OpenSSL function that performs AES-CBC decryption and checks HMAC and padding. All it is doing is flagging the check as failed if the padding length value is higher than the maximum it could possibly be.</p>\n            <pre class=\"language-patch\"><code class=\"language-patch\">              pad = plaintext[len - 1];\n              maxpad = len - (SHA_DIGEST_LENGTH + 1);\n              maxpad |= (255 - maxpad) &gt;&gt; (sizeof(maxpad) * 8 - 8);\n              maxpad &amp;= 255;\n  \n +            ret &amp;= constant_time_ge(maxpad, pad);\n +</pre></code>\n            <p>This patch points straight at how to trigger the vulnerability, since it can’t have any side effect: it’s constant time code after all! It means that if we do what the patch is there to detect—send a padding length byte higher than <code>maxpad</code>—we can sometimes pass the HMAC/padding check (!!), and use that fact as an oracle.</p><p><code>maxpad</code> is easily calculated: length of the plaintext, minus one byte of payload length, minus 20 bytes of HMAC-SHA1 (<code>SHA_DIGEST_LENGTH</code>), capped at 255. It’s a public value since it only depends on the <i>encrypted</i> data length. It’s also involved in deciding how many times to loop the HMAC/padding check, as we don’t want to go out of the bounds of the message buffer or waste time checking message bytes that couldn’t possibly be padding/HMAC.</p><p>So, how could <code>pad &gt; maxpad</code> allow us pass the HMAC check fraudulently?</p><p>Let’s go back to our masks, this time thinking what happens if we send:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">pad = maxpad + 1 = (len - 20 - 1) + 1 = (32 - 20 - 1) + 1 = 12</pre></code>\n            \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4W0sqfy51XUKtMKyALPyKz/17d959f7ca4aaf9be1a460f3edbbd910/S22C-6e16050319300-2.jpg\" alt=\"S22C-6e16050319300-2\" class=\"kg-image\" width=\"2000\" height=\"426\" loading=\"lazy\"/>\n            \n            </figure><p>Uh oh. What happened there!? One byte of the HMAC checking mask fell out of the range we are actually checking! Nothing crashes because this is constant time code and it must tolerate these cases without any external hint. So, what if we push a little further…</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6Dnjxv3GwsnYb0Mlmd90mi/7e4acf897a76a897eef7fe38e33a662c/S22C-6e16050319300-3.jpg\" alt=\"S22C-6e16050319300-3\" class=\"kg-image\" width=\"2000\" height=\"411\" loading=\"lazy\"/>\n            \n            </figure><p>There. The HMAC mask is now 0 for all checking loop iterations, so we don’t have to worry about having a valid signature at all anymore, and we’ll pass the MAC/padding check unconditionally if all bytes in the message are valid padding bytes—that is, equal to the padding length byte.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4BpDOnIA9ejgpYAYSnK56r/79b181746f24dce28a72d156fc520780/S22C-6e16050319300-4.jpg\" alt=\"S22C-6e16050319300-4\" class=\"kg-image\" width=\"2000\" height=\"476\" loading=\"lazy\"/>\n            \n            </figure><p>I like to box and label these kinds of “cryptanalytic functions” and call them capabilities. Here’s our capability:</p><p><b>We can discover if a message is made entirely of bytes with value n, where n &gt;= maxpad + 20</b> by sending it to the server and observing an error different from BAD_MAC. This can only work with messages shorter than 256-20=236 bytes, as pad can be at most 255, being a 8-bit value.</p><p>NOTE: As <a href=\"http://web-in-security.blogspot.co.uk/2016/05/curious-padding-oracle-in-openssl-cve.html\">Juraj clarifies</a>, there is no need to do delicate timing statistics like in Lucky 13, because if the tampered message is sent at the time the Finished message should be sent, the server response (BAD_MAC or not) will be unencrypted.</p><p>We can use this capability as an oracle.</p><p>In other words, the entire trick is making the computed payload length &quot;negative&quot; by at least <code>DIGEST_LENGTH</code> so that the computed position of the HMAC mask is fully &quot;outside&quot; the message and the MAC ends up not being checked at all.</p><p>By the way, the fact that the affected function is called <code>aesni_cbc_hmac_sha1_cipher</code> explains why only servers with <a href=\"https://en.wikipedia.org/wiki/AES_instruction_set\">AES-NI instructions</a> are vulnerable.</p><p><i>You can find a standalone, simplified version of the vulnerable function </i><a href=\"https://gist.github.com/FiloSottile/064cae24c11e792a46af881dfd826f76\"><i>here</i></a><i>, if you want to play with the debugger yourself.</i></p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"from-there-to-decryption\">From there to decryption</h3>\n            <a href=\"#from-there-to-decryption\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Ok, we have a “capability”. But how do we go from there to decryption? The “classic” way involves focusing on one byte that we don’t know, preceded by bytes we control (in this case, a string of <code>31</code>). We then guess the unknown byte by XOR’ing the corresponding ciphertext byte in the previous block with a value <code>n</code>. We do this for many <code>n</code>. When the server replies “check passed”, we know that the mystery byte is <code>31 XOR n</code>.</p><p>Remember that this is CBC mode, so we can cut out any consecutive sequence of blocks and present it as its own ciphertext, and values XOR’d to a given ciphertext byte end up XOR’d to the corresponding plaintext byte in the next block. The diagram below should make this clearer.</p><p>In this scenario, we inject JavaScript in a plain-HTTP page the user has loaded in a different tab and send as many AJAX requests as we want to our target domain. Usually we use the <code>GET</code> path as the known controlled bytes and the headers as the decryption target.</p><p>However, this approach doesn’t work in this case because we need <i>two</i> blocks of consecutive equal plaintext bytes, and if we touch the ciphertext in block <code>x</code> to help decrypt block <code>x + 1</code>, we mangle the plaintext of block <code>x</code> irreparably.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1oMUox1ZJxyFNdezDD7N4v/124e57480a63374e9bd064608a0fd298/S22C-6e16050401360-1-1.jpg\" alt=\"S22C-6e16050401360-1-1\" class=\"kg-image\" width=\"2000\" height=\"808\" loading=\"lazy\"/>\n            \n            </figure><p>I’d like you to pause for a minute to realize that this is at all possible only because we:</p><ol><li><p>Allow unauthenticated (plain-HTTP) websites—and so any MitM—to run code on our machines.</p></li><li><p>Allow JavaScript to send requests to third-party origins (i.e. other websites) which carry our private cookies. Incidentally, this is also what enables CSRF.</p></li></ol><p>Back to our oracle, we can make it work the other way around: we align an unknown byte at the beginning of two blocks made of <code>31</code> (which we can send as POST body) and we XOR our <code>n</code> values with the first byte in the IV. Again, when the MAC check passes, we know that the target byte is <code>31 XOR n</code>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2tda3NbvCPrDOYBmz6fWbm/8b5091edfc56ab0cf9bc23495b6eba3e/S22C-6e16050401360-2.jpg\" alt=\"S22C-6e16050401360-2\" class=\"kg-image\" width=\"2000\" height=\"650\" loading=\"lazy\"/>\n            \n            </figure><p>We iterate this process, moving all bytes one position to the right (for example by making the POST path one character longer), and XOR’ing the first byte of the IV with our <code>n</code> guesses, and the second byte with the number we now know will turn it into a <code>31</code>.</p><p>And so on and so forth. This gets us to decrypt any 16 bytes that consistently appear just before a sequence of at least 31 attacker-controlled bytes and after a string of attacker-controlled length (for alignment).</p><p>It might be possible to extend the decryption to all blocks preceding the two controlled ones by carefully pausing the client request and using the early feedback, but I&#39;m not sure it works. (Chances of me being wrong on full decryption capabilities are high, considering that an <a href=\"https://twitter.com/RichSalz/status/727527231686344705\">OpenSSL team member said they are not aware of such a technique</a>.) UPDATE: we chatted a bit with Juraj, and no, it doesn&#39;t work.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"but-no-further\">But no further</h3>\n            <a href=\"#but-no-further\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>One might think that since this boils down to a MAC check bypass, we might use it to inject unauthenticated messages into the connection. However, since we rely on making <code>pad</code> higher than <code>maxpad + DIGEST_LENGTH</code>, we can&#39;t avoid making the payload length (<code>totlen - 1 - DIGEST_LENGTH - pad</code>) negative.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">pad &gt; maxpad + DIGEST_LENGTH = (totlen - DIGEST_LENGTH - 1) + DIGEST_LENGTH = totlen - 1 &gt; totlen - 1 - DIGEST_LENGTH\n0 &gt; totlen - 1 - DIGEST_LENGTH - pad = payload_len</pre></code>\n            <p>Since <code>length</code> is stored as an unsigned integer, when it goes negative it wraps around to a very high number <a href=\"https://github.com/openssl/openssl/blob/9f2ccf1d718ab66c778a623f9aed3cddf17503a2/ssl/s3_pkt.c#L550-L554\">and triggers the &quot;payload too long&quot; error</a>, which terminates the connection. Too bad... Good. I meant good :-)</p><p>This means, by the way, that successful attempts to exploit or test this vulnerability show up in OpenSSL logs as</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">SSL routines:SSL3_GET_RECORD:data length too long:s3_pkt.c:</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"testing-for-the-vulnerability\">Testing for the vulnerability</h3>\n            <a href=\"#testing-for-the-vulnerability\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Detecting a vulnerable server is as easy as sending an encrypted message which decrypts to <code>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</code>, and checking if the TLS alert is <code>DATA_LENGTH_TOO_LONG</code> (vulnerable) or <code>BAD_RECORD_MAC</code> (not vulnerable).</p><p>It works because <code>A</code> is 65, which is more than 32 - 1.</p><p>There’s a simple implementation at <a href=\"https://github.com/FiloSottile/CVE-2016-2107\">https://github.com/FiloSottile/CVE-2016-2107</a> and an online version at <a href=\"https://filippo.io/CVE-2016-2107/\">https://filippo.io/CVE-2016-2107/</a></p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"conclusion\">Conclusion</h3>\n            <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>To sum up the impact: when the connection uses AES-CBC (for example because the server or the client don’t support TLS 1.2 yet) and the server’s processor supports AES-NI, a skilled MitM attacker can recover at least 16 bytes of anything it can get the client to send repeatedly just before attacker-controlled data (like HTTP Cookies, using JavaScript cross-origin requests).</p><p>A more skilled attacker than me might also be able to decrypt more than 16 bytes, but no one has shown that it’s possible yet.</p><p>All CloudFlare websites are protected from this vulnerability. Connections from the CloudFlare edge to origins use TLS 1.2 and AES-GCM if the server supports it, so are safe in that case. Customers supporting only AES-CBC should upgrade as soon as possible.</p><p>In closing, the cryptographic development community has shown that writing secure constant-time MtE decryption code is extremely difficult to do. We can keep patching this code, but the safer thing to do is to move to cryptographic primitives like <a href=\"/go-crypto-bridging-the-performance-gap/\">AEAD</a> that are designed not to require constant time acrobatics. Eventually, TLS 1.2 adoption will be high enough to give CBC the <a href=\"/killing-rc4-the-long-goodbye/\">RC4</a> <a href=\"/end-of-the-road-for-rc4/\">treatment</a>. But we are not there yet.</p><p><i>Are you crazy enough that analyzing a padding oracle in a complex crypto protocol sounds </i><b><i>exciting</i></b><i> to you? </i><a href=\"https://www.cloudflare.com/join-our-team/\"><i>We are hiring in London, San Francisco, Austin and Singapore</i></a><i>, including cryptography roles.</i></p><p>Thanks to Anna Bernardi who helped with the analysis and the painful process of reading OpenSSL code. Thanks (in no particular order) to Nick Sullivan, Ryan Hodson, Evan Johnson, Joshua A. Kroll, John Graham-Cumming and Alessandro Ghedini for their help with this write-up.</p><hr/>\n            <pre class=\"language-bash\"><code class=\"language-bash\">[^1]: Although JGC insists it should be called FreezerBurn because -20, geddit?.</pre></code>\n            ",
		"id": "1TPtOeFIyWKh61mmkpakWc",
		"localeList": {
			"name": "Yet Another Padding Oracle in OpenSSL CBC Ciphersuites Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2016-05-04T13:20:42.000+01:00",
		"slug": "yet-another-padding-oracle-in-openssl-cbc-ciphersuites",
		"tags": [
			{
				"id": "56vA0Z6hqev6QaJBQmO2J8",
				"name": "TLS",
				"slug": "tls"
			},
			{
				"id": "2pFyOCtANFB5qS6nbtQbVp",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities"
			},
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			},
			{
				"id": "1HblPaFreDjetoJDJPjTAi",
				"name": "SSL",
				"slug": "ssl"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "Yet Another Padding Oracle in OpenSSL CBC Ciphersuites",
		"updated_at": "2024-10-10T00:34:34.172Z",
		"url": "https://blog.cloudflare.com/yet-another-padding-oracle-in-openssl-cbc-ciphersuites"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}