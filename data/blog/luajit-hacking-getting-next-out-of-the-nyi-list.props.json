{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Javier Guerra",
				"slug": "javier-guerra",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/30QtD1605gyYD3sDcOObFf/bcbb6ddd2edc720772ab4c0ba60be220/javier-guerra.jpeg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "At Cloudflare we’re heavy users of LuaJIT and in the past have sponsored many improvements to its performance.\n\n",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6lsPZB2aeMhpiwz5S4zHmi/25aebe148ed2c2151857ec7dd3345ac7/luajit-hacking-getting-next-out-of-the-nyi-list.jpg",
		"featured": false,
		"html": "<p>At Cloudflare we’re heavy users of LuaJIT and in the past have sponsored many improvements to its performance.</p><p>LuaJIT is a powerful piece of software, maybe the highest performing JIT in the industry. But it’s not always easy to get the most out of it, and sometimes a small change in one part of your code can negatively impact other, already optimized, parts.</p><p>One of the first pieces of advice anyone receives when writing Lua code to run quickly using LuaJIT is “avoid the NYIs”: the language or library features that can’t be compiled because they’re NYI (not yet implemented). And that means they run in the interpreter.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1iZfOn4qOz1IUbak9b2uFF/d13073febe4074591ddb70d51fdfc301/6822250770_d6f8399cf2_z.jpg\" alt=\"\" class=\"kg-image\" width=\"434\" height=\"640\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA 2.0</a> <a href=\"https://www.flickr.com/photos/zengei/6822250770/in/photolist-boRPth-7xeiAm-e6H8w5-dSoqGF-FiYGj-okoVwy-e1ugbE-dXhvop-8fQNCX-974Bts-ekbDjn-p9HV9L-971y78-bdb8Hi-e2Us2u-8fU4pm-9ZFfXg-g469T-7Ft9Jc-9YWa6m-95HYN2-95J19D-5JeU76-95M3qb-PFZRj-9uYpbM-6bJrpt-D2DfZK-Ccqoxs-Jqvvxd-kSQzNX-JyLzNN-dEnx4T-dezBQR-e2NN7a-6aP8op-971xFi-974BBJ-qR8GWh-5De3Sy-974CTy-gyUry-dezAkY-7qHBJ2-eHJH4W-9v2qQs-dCQMt7-nBkbJ7-eZ8yc-e3u6kJ\">image</a> by <a href=\"https://www.flickr.com/photos/zengei/\">Dwayne Bent</a></p><p>Another very attractive feature of LuaJIT is the FFI library, which allows Lua code to directly interface with C code and memory structures. The JIT compiler weaves these memory operations in line with the generated machine language, making it much more efficient than using the traditional Lua C API.</p><p>Unfortunately, if for any reason the Lua code using the FFI library has to run under the interpreter, it takes a very heavy performance hit. As it happens, under the interpreter the FFI is usually much slower than the Lua C API or the basic operations. For many people, this means either avoiding the FFI or committing to a permanent vigilance to maintain the code from falling back to the interpreter.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"optimizing-luajit-code\">Optimizing LuaJIT Code</h3>\n      <a href=\"#optimizing-luajit-code\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Before optimizing any code, it’s important to identify which parts are actually important. It’s useless to discuss what’s the fastest way to add a few numbers before sending some data, if the send operation will take a million times longer than that addition. Likewise, there’s no benefit avoiding NYI features in code like initialization routines that might run only a few times, as it’s unlikely that the JIT would even try to optimize them, so they would always run in the interpreter. Which, by the way, is also very fast; even faster than the first version of LuaJIT itself.</p><p>But optimizing the core parts of a Lua program, like any deep inner loops, can yield huge improvements in the overall performance. In similar situations, experienced developers using other languages are used to inspecting the assembly language generated by the compiler, to see if there’s some change to the source code that can make the result better.</p><p>The command line LuaJIT executable provides a bytecode list when running with the <code>-jbc</code> option, a statistical profiler, activated with the <code>-jp</code> option, a trace list with <code>-jv</code>, and finally a detailed dump of all the JIT operations with <code>-jdump</code>.</p><p>The last two provide lots of information very useful for understanding what actually happens with the Lua code while executing, but it can be a lot of work to read the huge lists generated by <code>-jdump</code>. Also, some messages are hard to understand without a fairly complete understanding of how the tracing compiler in LuaJIT actually works.</p><p>One very nice feature is that all these JIT options are implemented in Lua. To accomplish this the JIT provides ‘hooks’ that can execute a Lua function at important moments with the relevant information. Sometimes the best way to understand what some <code>-jdump</code> output actually means is to read the code that generated that specific part of the output.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3ofHRCoePgNqk4t0T1HlqM/b682959718d54d07c604c0e084111dd2/6353190489_1363ec7f16_z.jpg\" alt=\"\" class=\"kg-image\" width=\"480\" height=\"640\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://creativecommons.org/licenses/by/2.0/\">CC BY 2.0</a> <a href=\"https://www.flickr.com/photos/kevandotorg/6353190489/in/photolist-aFpLc4-6Rorty-gvhKC9-8UEeqU-aBoHof-9qr8bs-9qo6Ai-9qrafb-FhYA4L-CH4r5G-8HZcMK-pX32R-6SJMc6-pX39e-oXee8D-aBoHBJ-cLgitL-cLgeKY-3THPb-hzKrGL-cLggDJ-6Rh35p-dqkQyJ-7Ey5Pz-6RkwNh-6RgYDe-7C7F9S-6RgxKH-6RkLFN-i4HqqU-6Rktx9-6RkXKQ-6RgRqD-6RkmBs-6RgML2-6RkE4j-6Rg5nT-6RjKkq-6RfDK2-6RfRRc-6RfYfK-6RfUT8-6RjN4d-hzMBtc-hzNnyN-hzJiM8-hzJVpv-hzLE56-hzKU4c-9mQrRy\">image</a> by <a href=\"https://www.flickr.com/photos/kevandotorg/\">Kevan</a></p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"introducing-loom\">Introducing Loom</h3>\n      <a href=\"#introducing-loom\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>After several rounds there, and being frustrated by the limitations of the sequentially-generated dump, I decided to write a different version of <code>-jdump</code>, one that gathered more information to process and add cross-references to help see how things are related before displaying. The result is <a href=\"https://github.com/cloudflare/loom\">loom</a>, which shows roughly the same information as <code>-jdump</code>, but with more resolved references and formatted in HTML with tables, columns, links and colors. It has helped me a lot to understand my own code and the workings of LuaJIT itself.</p><p>For example, let&#39;s consider the following code in a file called <code>twoloops.lua</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">for i=1,1000 do\n    for j=1,1000 do\n    end\nend</pre></code>\n            <p>With the <code>-jv</code> option:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ luajit -jv twoloops.lua\n[TRACE   1 twoloops.lua:2 loop]\n[TRACE   2 (1/3) twoloops.lua:1 -&gt; 1]</pre></code>\n            <p>This tells us that there were two traces, the first one contains a loop, and the second one spawns from exit #3 of the other (the “(1/3)” part) and it’s endpoint returns to the start of trace #1.</p><p>Ok, let’s get more detail with <code>-jdump</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ luajit -jdump twoloops.lua\n---- TRACE 1 start twoloops.lua:2\n0009  FORL     4 =&gt; 0009\n---- TRACE 1 IR\n0001    int SLOAD  #5    CI\n0002  + int ADD    0001  +1  \n0003 &gt;  int LE     0002  +1000\n0004 ------ LOOP ------------\n0005  + int ADD    0002  +1  \n0006 &gt;  int LE     0005  +1000\n0007    int PHI    0002  0005\n---- TRACE 1 mcode 47\n0bcbffd1  mov dword [0x40db1410], 0x1\n0bcbffdc  cvttsd2si ebp, [rdx+0x20]\n0bcbffe1  add ebp, +0x01\n0bcbffe4  cmp ebp, 0x3e8\n0bcbffea  jg 0x0bcb0014\t-&gt;1\n-&gt;LOOP:\n0bcbfff0  add ebp, +0x01\n0bcbfff3  cmp ebp, 0x3e8\n0bcbfff9  jle 0x0bcbfff0\t-&gt;LOOP\n0bcbfffb  jmp 0x0bcb001c\t-&gt;3\n---- TRACE 1 stop -&gt; loop\n\n---- TRACE 2 start 1/3 twoloops.lua:1\n0010  FORL     0 =&gt; 0005\n0005  KSHORT   4   1\n0006  KSHORT   5 1000\n0007  KSHORT   6   1\n0008  JFORI    4 =&gt; 0010\n---- TRACE 2 IR\n0001    num SLOAD  #1    I\n0002    num ADD    0001  +1  \n0003 &gt;  num LE     0002  +1000\n---- TRACE 2 mcode 81\n0bcbff79  mov dword [0x40db1410], 0x2\n0bcbff84  movsd xmm6, [0x41704068]\n0bcbff8d  movsd xmm5, [0x41704078]\n0bcbff96  movsd xmm7, [rdx]\n0bcbff9a  addsd xmm7, xmm6\n0bcbff9e  ucomisd xmm5, xmm7\n0bcbffa2  jb 0x0bcb0014\t-&gt;1\n0bcbffa8  movsd [rdx+0x38], xmm6\n0bcbffad  movsd [rdx+0x30], xmm6\n0bcbffb2  movsd [rdx+0x28], xmm5\n0bcbffb7  movsd [rdx+0x20], xmm6\n0bcbffbc  movsd [rdx+0x18], xmm7\n0bcbffc1  movsd [rdx], xmm7\n0bcbffc5  jmp 0x0bcbffd1\n---- TRACE 2 stop -&gt; 1</pre></code>\n            <p>This tells us... well, a lot of things. If you look closely, you’ll see the same two traces, one is a loop, the second starts at <code>1/3</code> and returns to trace #1. Each one shows some bytecode instructions, an IR listing, and the final mcode. There are several options to turn on and off each listing, and more info like the registers allocated to some IR instructions, the “snapshot” structures that allow the interpreter to continue when a compiled trace exits, etc.</p><p>Now using loom:</p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=http://staging.blog.mrk.cfdata.org/content/images/2017/02/image00.png>\n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2gsTyF05jZO2nJd8HvEec8/9deaa76956425f382f1e68aba1e9b13e/image00.png\" alt=\"\" class=\"kg-image\" width=\"1913\" height=\"1534\" loading=\"lazy\"/>\n            </a>\n            </figure><p>There’s the source code, with the corresponding bytecodes, and the same two traces, with IR and mcode listings. The bytecode lines on the traces and on the top listings are linked, hovering on some arguments on the IR listing highlights the source and use of each value, the jumps between traces are correctly labeled (and colored), finally, clicking on the bytecode or IR column headers reveals more information: excerpts from the source code and snapshot formats, respectively.</p><p>Writing it was a great learning experience, I had to read the dump script’s Lua sources and went much deeper in the LuaJIT sources than ever before. And then, I was able to use loom not only to analyze and optimize Cloudflare’s Lua code, but also to watch the steps the compiler goes through to make it run fast, and also what happens when it’s not happy.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-code-is-the-code-is-the-code-is-the-code\">The code is the code is the code is the code</h3>\n      <a href=\"#the-code-is-the-code-is-the-code-is-the-code\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>LuaJIT handles up to four different representation of a program’s code:</p><p>First comes the source code, what the developer writes.</p><p>The parser analyzes the source code and produces the Bytecode, which is what the interpreter actually executes. It has the same flow of the source code, grouped in functions, with all the calls, iterators, operations, etc. Of course, there’s no nice formatting, comments, the local variable names are replaced by indices, and all constants (other than small numbers) are stored in a separate area.</p><p>When the interpreter finds that a given point of the bytecode has been repeated several times, it’s considered a “hot” part of the code, and interprets it once again but this time it records each bytecode it encounters, generating a “code trace” or just “a trace”. At the same time, it generates an “intermediate representation”, or IR, of the code as it’s executed. The IR doesn’t represent the whole of the function or code portion, just the actual options it actually takes.</p><p>A trace is finished when it hits a loop or a recursion, returns to a lower level than when started, hits a NYI operation, or simply becomes too long. At this point, it can be either compiled into machine language, or aborted if it has reached some code that can’t be correctly translated. If successful, the bytecode is patched with an entry to the machine code, or “mcode”. If aborted, the initial trace point is “penalized” or even “blocklisted” to avoid wasting time trying to compile it again.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"whats-next\">What’s <code>next()</code>?</h3>\n      <a href=\"#whats-next\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>One of the most visible characteristics of the Lua language is the heavy use of dictionary objects called <i>tables</i>. From the <a href=\"https://www.lua.org/manual/5.1/manual.html#2.2\">Lua manual</a>:</p><p><i>“Tables are the sole data structuring mechanism in Lua; they can be used to represent ordinary arrays, symbol tables, sets, records, graphs, trees, etc.”</i></p><p>To iterate over all the elements in a table, the idiomatic way is to use the standard library function <code>pairs()</code> like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">for k, v in pairs(t) do\n    -- use the key in ‘k’ and the value in ‘v’\nend</pre></code>\n            <p>In the standard Lua manual, <code>pairs()</code> is <a href=\"https://www.lua.org/manual/5.1/manual.html#pdf-pairs\">defined</a> as “Returns three values: the <code>next</code> function, the table <code>t</code>, and <code>nil</code>”, so the previous code is the same as:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">for k, v in next, t, nil do\n    -- use the key in ‘k’ and the value in ‘v’\nend</pre></code>\n            <p>But unfortunately, both the <code>next()</code> and <code>pairs()</code> functions are listed as “not compiled” in the feared <a href=\"http://wiki.luajit.org/NYI#libraries_base-library\">NYI list</a>. That means that any such code runs on the interpreter and is not compiled, unless the code inside is complex enough, and has other inner loops (loops that doesn’t use <code>next()</code> or <code>pairs()</code>, of course). Even in that case, the code would have to fall back to the interpreter at each loop end.</p><p>This sad news creates a tradeoff: for performance sensitive parts of the code, don’t use the most Lua-like code style. That motivates people to come up with several contortions to be able to use numerical iteration (which is compiled, and very efficient), like replacing any key with a number, storing all the keys in a numbered array, or store both keys and values at even/odd numeric indices.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"getting-next-out-of-the-nyi-list\">Getting <code>next()</code> out of the NYI list</h3>\n      <a href=\"#getting-next-out-of-the-nyi-list\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So, I finally have a non-NYI <code>next()</code> function! I&#39;d like to say &quot;a fully JITtable <code>next()</code> function&quot;, but it wouldn&#39;t be totally true; as it happens, there&#39;s no way to avoid some annoying trace exits on table iteration.</p><p>The purpose of the IR is to provide a representation of the execution path so it can be quickly optimized to generate the final mcode. For that, the IR traces are linear and type-specific; creating some interesting challenges for iteration on a generic container.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"traces-are-linear\">Traces are linear</h3>\n      <a href=\"#traces-are-linear\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Being linear means that each trace captures a single execution path, it can&#39;t contain conditional code or internal jumps. The only conditional branches are the &quot;guards&quot; that make sure that the code to be executed is the appropriate one. If a condition changes and it must now do something different, the trace must be exited. If it happens several times, it will spawn a side trace and the exit will be patched into a conditional branch. Very nice, but this still means that there can be at most one loop on each trace.</p><p>The implementation of <code>next()</code> has to internally skip over empty slots in the table to only return valid key/value pairs. If we try to express this in IR code, this would be the &quot;inner&quot; loop and the original loop would be an &quot;outer&quot; one, which doesn&#39;t have as much optimization opportunities. In particular, it can&#39;t hoist invariable code out of the loop.</p><p>The solution is to do that slot skipping in C. Not using the Lua C API, of course, but the inner IR CALL instruction that is compiled into a &quot;fast&quot; call, using CPU registers for arguments as much as possible.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-ir-is-in-type-specific-ssa-form\">The IR is in Type-specific SSA form</h3>\n      <a href=\"#the-ir-is-in-type-specific-ssa-form\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The SSA form (<a href=\"https://en.wikipedia.org/wiki/Static_single_assignment_form\">Static Single Assignment</a>) is key for many data flow analysis heuristics that allow quick optimizations like dead code removal, allocation sinking, type narrowing, strength reduction, etc. In LuaJIT&#39;s IR it means every instruction is usable as a value for subsequent instructions and has a declared type, fixed at the moment when the trace recorder emits this particular IR instruction. In addition, every instruction can be a type guard, if the arguments are not of the expected type the trace will be exited.</p><p>Lua is dynamically typed, every value is tagged with type information so the bytecode interpreter can apply the correct operations on it. This allows us to have variables and tables that can contain and pass around any kind of object without changing the source code. Of course, this requires the interpreter to be coded very &quot;defensively&quot;, to consider all valid ramifications of every instruction, limiting the possibility of optimizations. The IR traces, on the other hand, are optimized for a single variation of the code, and deal with only the value types that are actually observed while executing.</p><p>For example, this simple code creates a 1,000 element array and then copies to another table:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">local t,t2 = {},{}\nfor i=1,1000 do\n    t[i] = i\nend\nfor i,v in ipairs(t) do\n    t2[i]=v\nend</pre></code>\n            <p>resulting in this IR for the second loop, the one that does the copy:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">0023 ------------ LOOP ------------\n0024          num CONV   0017  num.int\n0025       &gt;  int ABC    0005  0017\n0026          p32 AREF   0007  0017\n0027          num ASTORE 0026  0022\n0028 rbp    + int ADD    0017  +1\n0029       &gt;  int ABC    0018  0028\n0030          p32 AREF   0020  0028\n0031 xmm7  &gt;+ num ALOAD  0030\n0032 xmm7     num PHI    0022  0031\n0033 rbp      int PHI    0017  0028\n0034 rbx      nil RENAME 0017  #3\n0035 xmm6     nil RENAME 0022  #2</pre></code>\n            <p>Here we see the <code>ALOAD</code> in instruction <code>0031</code> assures that the value loaded from the table is in effect a number. If it happens to be any other value, the guard fails and the trace is exited.</p><p>But if we do an array of strings instead of numbers?</p><p>a small change:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">local t,t2 = {},{}\nfor i=1,1000 do\n    t[i] = &#039;s&#039;..i\nend\nfor i,v in ipairs(t) do\n    t2[i]=v\nend</pre></code>\n            <p>gives us this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">0024 ------------ LOOP ------------\n0025          num CONV   0018  num.int\n0026       &gt;  int ABC    0005  0018\n0027          p32 AREF   0007  0018\n0028          str ASTORE 0027  0023\n0029 rbp    + int ADD    0018  +1\n0030       &gt;  int ABC    0019  0029\n0031          p32 AREF   0021  0029\n0032 rbx   &gt;+ str ALOAD  0031\n0033 rbx      str PHI    0023  0032\n0034 rbp      int PHI    0018  0029\n0035 r15      nil RENAME 0018  #3\n0036 r14      nil RENAME 0023  #2</pre></code>\n            <p>It&#39;s the same code, but the type that <code>ALOAD</code> is guarding is now a string (and it now uses a different register, I guess a vector register isn&#39;t appropriate for a string pointer).</p><p>And if the table has a values of a mix of types?</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">local t,t2={},{}\nfor i=1,1000,2 do\n    t[i], t[i+1] = i, &#039;s&#039;..i\nend\nfor i,v in ipairs(t)\n    do t2[i]=v\nend\n\n0031 ------------ LOOP ------------\n0032          num CONV   0027  num.int\n0033       &gt;  int ABC    0005  0027\n0034          p32 AREF   0007  0027\n0035          str ASTORE 0034  0030\n0036 r15      int ADD    0027  +1\n0037       &gt;  int ABC    0019  0036\n0038          p32 AREF   0021  0036\n0039 xmm7  &gt;  num ALOAD  0038\n0040       &gt;  int ABC    0005  0036\n0041          p32 AREF   0007  0036\n0042          num ASTORE 0041  0039\n0043 rbp    + int ADD    0027  +2\n0044       &gt;  int ABC    0019  0043\n0045          p32 AREF   0021  0043\n0046 rbx   &gt;+ str ALOAD  0045\n0047 rbx      str PHI    0030  0046\n0048 rbp      int PHI    0027  0043</pre></code>\n            <p>Now there are two <code>ALOAD</code>s, (and two <code>ASTORE</code>s), one for &#39;num&#39; and one for &#39;str&#39;. In other words, the JIT unrolled the loop and found that that made the types constant. <code>=8-O</code></p><p>Of course, this would happen only on very simple and regular patterns. In general, it&#39;s wiser to avoid unpredictable type mixing; but polymorphic code will be optimized for each type that it&#39;s actually used with.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"back-to-next\">Back to <code>next()</code></h3>\n      <a href=\"#back-to-next\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>First let&#39;s see the current implementation of <code>next()</code> as used by the interpreter:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">lj_tab.c\n/* Advance to the next step in a table traversal. */\nint lj_tab_next(lua_State *L, GCtab *t, TValue *key)\n{\n  uint32_t i = keyindex(L, t, key);  /* Find predecessor key index. */\n  for (i++; i &lt; t-&gt;asize; i++)  /* First traverse the array keys. */\n    if (!tvisnil(arrayslot(t, i))) {\n      setintV(key, i);\n      copyTV(L, key+1, arrayslot(t, i));\n      return 1;\n    }\n  for (i -= t-&gt;asize; i &lt;= t-&gt;hmask; i++) {  /* Then traverse the hash keys. */\n    Node *n = &amp;noderef(t-&gt;node)[i];\n    if (!tvisnil(&amp;n-&gt;val)) {\n      copyTV(L, key, &amp;n-&gt;key);\n      copyTV(L, key+1, &amp;n-&gt;val);\n      return 1;\n    }\n  }\n  return 0;  /* End of traversal. */\n}</pre></code>\n            <p>It takes the input key as a <code>TValue</code> pointer and calls <code>keyindex()</code>. This helper function searches for the key in the table and returns an index; if the key is an integer in the range of the array part, the index is the key itself. If not, it performs a hash query and returns the index of the Node, offset by the array size, if successful, or signals an error if not found (it&#39;s an error to give a nonexistent key to <code>next()</code>).</p><p>Back at <code>lj_tab_next()</code>, the index is first incremented, and if it&#39;s still within the array, it&#39;s iterated over any hole until a non-<code><b>nil</b></code> value is found. If it wasn&#39;t in the array (or there’s no next value there), it performs a similar &quot;skip the **<code>nil</code>**s&quot; on the Node table.</p><p>The new <code>lj_record_next()</code> function in <code>lj_record.c</code>, like some other record functions there, first checks not only the input parameters, but also the return values to generate the most appropriate code for this specific iteration, assuming that it will likely be optimal for subsequent iterations. Of course, any such assumption must be backed by the appropriate guard.</p><p>For <code>next()</code>, we choose between two different forms, if the return key is in the array part, then it uses <code>lj_tab_nexta()</code>, which takes the input key as an integer and returns the next key, also as an integer, in the <code>rax</code> register. We don&#39;t do the equivalent to the <code>keyindex()</code> function, just check (with a guard) that the key is within the bounds of the array:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">lj_tab.c\n/* Get the next array index */\nMSize LJ_FASTCALL lj_tab_nexta(GCtab *t, MSize k)\n{\n  for (k++; k &lt; t-&gt;asize; k++)\n    if (!tvisnil(arrayslot(t, k)))\n      break;\n  return k;\n}</pre></code>\n            <p>The IR code looks like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">0014 r13      int FLOAD  0011  tab.asize\n0015 rsi   &gt;  int CONV   0012  int.num\n0017 rax    + int CALLL  lj_tab_nexta  (0011 0015)\n0018       &gt;  int ABC    0014  0017\n0019 r12      p32 FLOAD  0011  tab.array\n0020          p32 AREF   0019  0017\n0021 [8]   &gt;+ num ALOAD  0020</pre></code>\n            <p>Clearly, the <code>CALL</code> itself (at <code>0017</code>) is typed as &#39;<code>int</code>&#39;, as natural for an array key; and the <code>ALOAD</code> (<code>0021</code>) is &#39;<code>num</code>&#39;, because that&#39;s what the first few values happened to be.</p><p>When we finish with the array part, the bounds check (instruction <code>ABC</code> on <code>0018</code>) would fail and soon new IR would be generated. This time we use the <code>lj_tab_nexth()</code> function.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">lj_tab.c\nLJ_FUNCA const Node *LJ_FASTCALL lj_tab_nexth(lua_State *L, GCtab *t, const Node *n)\n{\n  const Node *nodeend = noderef(t-&gt;node)+t-&gt;hmask;\n  for (n++; n &lt;= nodeend; n++) {\n    if (!tvisnil(&amp;n-&gt;val)) {\n      return n;\n    }\n  }\n  return &amp;G(L)-&gt;nilnode;\n}</pre></code>\n            <p>But before doing the &quot;skip the **<code>nil</code>**s&quot;, we need to do a hash query to find the initial <code>Node</code> entry. Fortunately, the <code>HREF</code> IR instruction does that: This is the IR:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">0014 rdx      p32 HREF   0011  0012\n0016 r12      p32 CALLL  lj_tab_nexth  (0011 0014)\n0017 rax   &gt;+ str HKLOAD 0016\n0018 [8]   &gt;+ num HLOAD  0016</pre></code>\n            <p>There&#39;s a funny thing here: <code>HREF</code> is supposed to return a reference to a value in the hash table, and the last argument in <code>lj_tab_nexth()</code> is a <code>Node</code> pointer. Let&#39;s see the <code>Node</code> definition:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">lj_obj.h\n/* Hash node. */\ntypedef struct Node {\n  TValue val;       /* Value object. Must be first field. */\n  TValue key;       /* Key object. */\n  MRef next;        /* Hash chain. */\n#if !LJ_GC64\n  MRef freetop;     /* Top of free elements (stored in t-&gt;node[0]). */\n#endif\n} Node;</pre></code>\n            <p>Ok... the value is the first field, and it says right there &quot;Must be first field&quot;. Looks like it&#39;s not the first place with some hand-wavy pointer casts.</p><p>The return value of <code>lj_tab_next()</code> is a <code>Node</code> pointer, which can likewise be implicitly cast by <code>HLOAD</code> to get the value. To get the key, I added the <code>HKLOAD</code> instruction. Both are guarding for the expected types of the value and key, respectively.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"lets-take-it-for-a-spin\">Let&#39;s take it for a spin</h3>\n      <a href=\"#lets-take-it-for-a-spin\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So, how does it perform? These tests do a thousand loops over a 10,000 element table, first using <code>next()</code> and then <code>pairs()</code>, with a simple addition in the inner loop. To get <code>pairs()</code> compiled, I just disabled the <code>ISNEXT</code>/<code>ITERN</code> optimization, so it actually uses <code>next()</code>. In the third test the variable in the addition is initialized to <code>0ULL</code> instead of just <code>0</code>, triggering the use of FFI.</p><p>First test is with all 10,000 elements on sequential integers, making the table a valid sequence, so <code>ipairs()</code> (which is already compiled) can be used just as well:</p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=http://staging.blog.mrk.cfdata.org/content/images/2017/02/image02.png>\n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4m2lJk0jSnK7D5qd81PEgz/15ad27baf4c66609632dd903b5829f05/image02.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"371\" loading=\"lazy\"/>\n            </a>\n            </figure><p>So, compiled <code>next()</code> is quite a lot faster, but the <code>pairs()</code> optimization in the interpreter is very fast. On the other hand, the smallest smell of FFI completely trashes interpreter performance, while making compiled code slightly tighter. Finally, <code>ipairs()</code> is faster, but a big part of it is because it stops on the first <code><b>nil</b></code>, while <code>next()</code> has to skip over every <code><b>nil</b></code> at the end of the array, which by default can be up to twice as big as the sequence itself.</p><p>Now with 5,000 (sequential) integer keys and 5,000 string keys. Of course, we can&#39;t use <code>ipairs()</code> here:</p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=http://staging.blog.mrk.cfdata.org/content/images/2017/02/image01.png>\n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2c4yKNAwBjIqqQDz8Em4Hr/56cb0a4af36b3f68df25b36367d8e30a/image01.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"371\" loading=\"lazy\"/>\n            </a>\n            </figure><p>Roughly the same pattern: the compiled <code>next()</code> performance is very much the same on the three forms (used directly, under <code>pairs()</code> and with FFI code), while the interpreter benefits from the <code>pairs()</code> optimization and almost dies with FFI. In this case, the interpreted <code>pairs()</code> actually surpasses the compiled <code>next()</code> performance, hinting that separately optimizing <code>pairs()</code> is still desirable.</p><p>A big factor in the interpreter <code>pairs()</code> is that it doesn&#39;t use <code>next()</code>; instead it directly drives the loop with a hidden variable to iterate in the <code>Node</code> table without having to perform a hash lookup on every step.</p><p>Repeating that in a compiled <code>pairs()</code> would be equally beneficial; but has to be done carefully to maintain compatibility with the interpreter. On any trace exit the interpreter would kick in and must be able to seamlessly continue iterating. For that, the rest of the system has to be aware of that hidden variable.</p><p>The best part of this is that we have lots of very challenging, yet deeply rewarding, work ahead of us! Come <a href=\"https://www.cloudflare.com/join-our-team/\">work for us</a> on making LuaJIT faster and more.</p>",
		"id": "5B1mXoduq5qwML56xx48yv",
		"localeList": {
			"name": "LuaJIT Hacking: Getting next() out of the NYI list Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2017-02-21T13:40:23.000+00:00",
		"slug": "luajit-hacking-getting-next-out-of-the-nyi-list",
		"tags": [
			{
				"id": "7oLqpn3vNWao1PXv53X42G",
				"name": "LUA",
				"slug": "lua"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			}
		],
		"title": "LuaJIT Hacking: Getting next() out of the NYI list",
		"updated_at": "2025-10-24T10:01:37.546Z",
		"url": "https://blog.cloudflare.com/luajit-hacking-getting-next-out-of-the-nyi-list"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}