{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Steven Pack",
				"slug": "stevenpack",
				"bio": "Partner Engineering Director",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5KBJRA6GGkWLzkmUgwTrMs/82479e6c25be69362e444cdcad205625/stevenpack.png",
				"location": "San Francisco Bay Area, California",
				"website": null,
				"twitter": "@steven_pack",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Cloudflare Workers allows you to quickly deploy Javascript code to our 150+ data centers around the world and execute very close to your end-user. The edit/compile/debug story is already pretty amazing using the Workers IDE with integrated Chrome Dev Tools. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6FXneXWxAlSjkmdEfZwK8V/2c2463ed0721ef17fc7105cbe8cbf026/bootstrapping-a-typescript-worker.png",
		"featured": false,
		"html": "<p>Cloudflare <a href=\"https://developers.cloudflare.com/workers/about/\">Workers</a> allows you to quickly deploy Javascript code to our 150+ data centers around the world and execute very close to your end-user. The edit/compile/debug story is already pretty amazing using the <a href=\"https://dash.cloudflare.com/workers\">Workers IDE</a> with integrated Chrome Dev Tools. However, for those hankering for some <a href=\"https://www.typescriptlang.org/\">Typescript</a> and an IDE with static analysis, autocomplete and that jazz, follow along to see one way to set up a Typescript project with <a href=\"https://www.jetbrains.com/webstorm/\">Webstorm</a> and npm run upload your code straight to the edge.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"pre-requisites\">Pre Requisites</h3>\n            <a href=\"#pre-requisites\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>My environment looks like this:</p><ul><li><p>macOS High Sierra</p></li><li><p>node v8.11.3</p></li><li><p>npm v5.6.0</p></li><li><p>Webstorm v2018.1.3</p></li></ul><p>You&#39;ll also need a <a href=\"https://support.cloudflare.com/hc/en-us/articles/201720164\">Cloudflare domain</a> and to <a href=\"https://www.cloudflare.com/a/workers\">activate Workers</a> on it.</p><p>I&#39;ll be using cryptoserviceworker.com</p><p>I&#39;ll also use Yeoman to build our initial scaffolding. Install it with <code>npm install yo -g</code></p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"getting-started\">Getting Started</h2>\n            <a href=\"#getting-started\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Let&#39;s start with a minimal node app with a &quot;hello world&quot; class and a test.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">mkdir cryptoserviceworker &amp;&amp; cd cryptoserviceworker\nnpm install generator-node-typescript -g\nyo node-typescript</pre></code>\n            <p>That generator creates the following directory structure:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">drwxr-xr-x   16 steve  staff     512 Jun 18 20:40 .\ndrwxr-xr-x   10 steve  staff     320 Jun 18 20:35 ..\n-rw-r--r--    1 steve  staff     197 Jun 18 20:40 .editorconfig\n-rw-r--r--    1 steve  staff      96 Jun 18 20:40 .gitignore\n-rw-r--r--    1 steve  staff     147 Jun 18 20:40 .npmignore\n-rw-r--r--    1 steve  staff     267 Jun 18 20:40 .travis.yml\ndrwxr-xr-x    5 steve  staff     160 Jun 18 20:40 .vscode\n-rw-r--r--    1 steve  staff    1066 Jun 18 20:40 LICENSE\n-rw-r--r--    1 steve  staff    2071 Jun 18 20:40 README.md\ndrwxr-xr-x    4 steve  staff     128 Jun 18 20:40 __tests__\ndrwxr-xr-x  479 steve  staff   15328 Jun 18 20:40 node_modules\n-rw-r--r--    1 steve  staff  244624 Jun 18 20:40 package-lock.json\n-rw-r--r--    1 steve  staff    1506 Jun 18 20:40 package.json\ndrwxr-xr-x    4 steve  staff     128 Jun 18 20:40 src\n-rw-r--r--    1 steve  staff     454 Jun 18 20:40 tsconfig.json\n-rw-r--r--    1 steve  staff      73 Jun 18 20:40 tslint.json</pre></code>\n            <p>It includes default settings, a task runner, an initial Typescript config and more. We won&#39;t use all of it, but it&#39;s a good starting point.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"first-test\">First Test</h2>\n            <a href=\"#first-test\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>If we take a look at the contents of <code>src/greeter.ts</code>, we&#39;ll see it&#39;s a very Typescript implementation of hello world.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cat greeter.ts \nexport class Greeter {\n  private greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  public greet(): string {\n    return `Bonjour, ${this.greeting}!`;\n  }\n}</pre></code>\n            <p>Because Yeoman has set up our test infrastructure, we should be able exercise the code using the greeter test in <code>__tests__/greeter-spec.ts</code></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">import { Greeter } from &#039;../src/greeter&#039;;\n\ntest(&#039;Should greet with message&#039;, () =&gt; {\n  const greeter = new Greeter(&#039;friend&#039;);\n  expect(greeter.greet()).toBe(&#039;Bonjour, friend!&#039;);\n});</pre></code>\n            <p>This generator uses jest. It&#39;s installed locally, but let&#39;s install it globally for convenience and run it!</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm install jest -g\njest\n PASS  __tests__/greeter-spec.ts\n PASS  __tests__/index-spec.ts\n\nTest Suites: 2 passed, 2 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        1.867s\nRan all test suites.\n</pre></code>\n            <p>OK, so we have a testable Typescript template. Let&#39;s fire up Webstorm and write some code!</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"hello-world-with-workers\">Hello, World with Workers</h3>\n            <a href=\"#hello-world-with-workers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>A hello world implementation in Typescript might look something like this:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3iZzB5lable4vXw45e7HjV/7b56613bef3fa2565b776631cae4deda/typescript-hello-world.png\" alt=\"Hello world first attempt\" class=\"kg-image\" width=\"383\" height=\"139\" loading=\"lazy\"/>\n            \n            </figure><p>Webstorm doesn&#39;t like it as you can see from the red error highlights. Even though Request and Response are part of the Service Worker API and will be available to us in the V8 runtime, Typescript doesn&#39;t know about them yet. <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> provides an implementation for node, so let’s install that.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm install node-fetch\nnpm install @types/node-fetch</pre></code>\n            <p>That made Webstorm happier. It’s been able to locate the type definitions.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/79lrvSbwWcbZMWH2Q93vJk/bf5dd88ad97663d1be28c11f214916bb/typescript-hello-world2.png\" alt=\"Hello world with type defs\" class=\"kg-image\" width=\"444\" height=\"149\" loading=\"lazy\"/>\n            \n            </figure><p>Now let&#39;s write a test. Create a new file <b>tests</b>/worker-spec.ts:</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">import { Request } from &quot;node-fetch&quot;;\nimport { Worker } from &quot;../src/worker&quot;;\n\ntest(&#039;Should say hello&#039;, () =&gt; {\n\n  const worker = new Worker();\n  const request = new Request(&quot;https://cryptoserviceworker.com/&quot;);\n  const response = worker.handle(request);\n  expect(response.status).toEqual(200);\n  expect(response.body).toEqual(&quot;Hello, world!&quot;);\n});</pre></code>\n            <p>And delete the other files and tests so we&#39;re just working worker.ts and worker-spect.ts</p><p>Run <code>jest</code></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"> PASS  __tests__/worker-spec.ts\n PASS  __tests__/worker-spec.js\n\nTest Suites: 2 passed, 2 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        1.213s, estimated 2s</pre></code>\n            <p>OK, so our test passed, but notice it ran both the Typescript and the Javascript? Let&#39;s restrict to just Typescript. Go into package.json, locate jest and change</p><p><code>&quot;testRegex&quot;: &quot;(/__tests__/.*|\\\\.(test|spec))\\\\.(ts|js)$&quot;,</code> to<code>&quot;testRegex&quot;: &quot;(/__tests__/.*)\\\\-spec.ts$&quot;</code></p><p>Run it again:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">jest\n PASS  __tests__/worker-spec.ts\n  ✓ Should say hello (8ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.123s, estimated 2s\nRan all test suites.\n</pre></code>\n            <p>Better. OK, ship it!</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"from-local-typescript-to-worker-compatible-javascript\">From Local Typescript to Worker Compatible Javascript.</h3>\n            <a href=\"#from-local-typescript-to-worker-compatible-javascript\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Let&#39;s take a look at <code>src/worker.js</code> to see how our Typescript transpiled.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\nObject.defineProperty(exports, &quot;__esModule&quot;, { value: true });\nconst node_fetch_1 = require(&quot;node-fetch&quot;);\nclass Worker {\n    handle(request) {\n        return new node_fetch_1.Response(&#039;Hello, world!&#039;);\n    }\n}\nexports.Worker = Worker;</pre></code>\n            <p>Actually, let&#39;s try it in the Cloudflare Workers IDE and try it for real. Go to your <a href=\"https://dash.cloudflare.com\">dashboard</a>, click the Workers icon and then &quot;Launch Editor&quot;</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6H2ZEwr9QfXdCxE7Ai7kOs/a5d2edbd452afcc5898a3adcb2ba211f/workers-dashboard.png\" alt=\"Workers Dashboard\" class=\"kg-image\" width=\"988\" height=\"557\" loading=\"lazy\"/>\n            \n            </figure><p>First things first, check the canonical Hello World implementation works.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1YHeN0MBVI3oGNznabkxvl/53eb88bb32ed71bb81fdd47d5a973f83/hello-world-ide.png\" alt=\"Hello world in IDE\" class=\"kg-image\" width=\"1033\" height=\"210\" loading=\"lazy\"/>\n            \n            </figure><p>Awesome, now let&#39;s replace it with our &quot;transpiled from Typescript&quot; version:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7lIHef0I92E8ZoIlza2hdT/6dfb9fb0677b08341719b38552795cfc/fail1.png\" alt=\"Fail 1\" class=\"kg-image\" width=\"452\" height=\"370\" loading=\"lazy\"/>\n            \n            </figure><p>Fail. OK, so the out of the box &quot;transpiled from typescript&quot; is not going to work. Let&#39;s make the changes necessary to get it run manually, then incorporate that into the build process.</p><p><b>Error #1: Uncaught ReferenceError: exports is not defined at line 2</b>That&#39;s easy enough, let&#39;s add <code>var exports = {}</code>. Update Preview.</p><p><b>Error #2: Uncaught ReferenceError: require is not defined at line 4</b></p><p>True, we&#39;re running in V8 on the Cloudflare Edge and the only code is what we uploaded. There are no &quot;node_modules&quot; to include. Plus, that line was only for dev anyway. Remove it. Update Preview.</p><p><b>Error #3: No event handlers were registered. This script does nothing.</b></p><p>Right, we need to invoke the code. Let&#39;s add a snippet to the top of the file to actually invoke our worker.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&#039;fetch&#039;, event =&gt; {\n  let worker = new exports.Worker();\n  event.respondWith(worker.handle(event.request));\n})</pre></code>\n            <p><b>Error #4: Uncaught ReferenceError: </b><code><b>node_fetch_1</b></code><b> is not defined</b></p><p>Right, we removed that because <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request\">Response</a> is a native object when it runs in the context of a worker. So remove the <code>node_fetch_1</code> prefix.</p><p><b>Error #5: exports.__esModule = true does nothing</b></p><p>So let&#39;s remove that.</p><p>Success!!</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6HVd2qR7Uhmbrfnd1doTZN/6461c7eb9afbd15ca4e27e02ccbb8cd3/hello-world-success.png\" alt=\"Success\" class=\"kg-image\" width=\"752\" height=\"381\" loading=\"lazy\"/>\n            \n            </figure><p>OK, so with some massaging, we got a Worker transpiled from Typescript to execute. We:</p><ul><li><p>Added a line to create an exports object</p></li><li><p>Removed the dev dependency on &quot;node_fetch&quot;</p></li><li><p>Removed the exports.__esModule = true line</p></li></ul><p>Let&#39;s add that to our build process so we can have &quot;Worker-ready&quot; Javascript every time we make a change to our Typescript.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"grunt\">Grunt</h3>\n            <a href=\"#grunt\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>I&#39;m going to use Grunt to automate that. Here&#39;s my new <code>worker.ts</code></p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">// --BEGIN PREAMBLE--\n/// //Invoke worker\n/// var exports = {};\n/// addEventListener(&#039;fetch&#039;, event =&gt; {\n///   event.respondWith(fetchAndApply(event.request))\n/// });\n///\n/// async function fetchAndApply(request) {\n///   let worker = new exports.Worker();\n///   return worker.handle(request);\n/// }\n// --END PREAMBLE--\n\n// --BEGIN COMMENT--\n// mock the methods and objects that will be available in the browser\nimport { Request, Response } from &#039;node-fetch&#039;;\n// --END COMMENT--\nexport class Worker {\n  public handle(request: Request) {\n    return new Response(&quot;Hello, world!&quot;)\n  }\n}</pre></code>\n            <p>I want to uncomment the preamble to invoke our script, comment out the dev dependencies and remove the __esmodule line. Let&#39;s install Grunt, a text-replace module and create a <code>Gruntfile.js</code></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm install grunt-cli -g\nnpm install grunt --save-dev\nnpm install grunt-replace --save-dev\ntouch Gruntfile.js</pre></code>\n            <p>My <code>Gruntfile.js</code> looks like this</p>\n            <pre class=\"language-json\"><code class=\"language-json\">module.exports = function (grunt) {\n\n  grunt.loadNpmTasks(&#039;grunt-replace&#039;);\n  grunt.initConfig({\n    replace: {\n      comments: {\n        options: {\n          patterns: [\n            {\n              /* Comment imports for node during dev */\n              match: /--BEGIN COMMENT--[\\s\\S]*?--END COMMENT--/g,\n              replacement: &#039;Dev environment code block removed by build&#039;\n            },\n            {\n              /* Uncomment preamble for production to process the request */\n              match: /\\/\\/\\//mg,\n              replacement: &#039;&#039;\n            }\n          ]\n        },\n        files: [\n          { expand: true, flatten: true, src: [&#039;src/worker.ts&#039;], dest: &#039;build/&#039; }\n        ]\n      },\n      exports: {\n        //remove the exports line that typescript includes without an option to\n        //suppress, but is not in the v8 env that workers run in.\n        options: {\n          patterns: [\n            {\n              match: /exports.__esModule = true;/g,\n              replacement: &quot;// exports line commented by build&quot;\n            }\n          ]\n        },\n        files: [\n          { expand: true, flatten: true, src: [&#039;build/worker.js&#039;], dest: &#039;build/&#039; }\n        ]\n      }\n    }\n  });\n\n  grunt.registerTask(&#039;prepare-typescript&#039;, &#039;replace:comments&#039;);\n  grunt.registerTask(&#039;fix-export&#039;, &#039;replace:exports&#039;);\n};\n</pre></code>\n            <p>There are two tasks. The first is the comment/uncomment step that we want before our Typescript is transpiled.</p><p>The second is to remove the <code>exports.__esmodule = true</code> line</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ grunt prepare-typescript\nRunning &quot;replace:comments&quot; (replace) task\n&gt;&gt; 11 replacements in 1 file.\n\nDone.</pre></code>\n            <p>If we open <code>build/worker.ts</code>, we see this:</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">// --BEGIN PREAMBLE--\n //Invoke worker\n var exports = {};\n addEventListener(&#039;fetch&#039;, event =&gt; {\n   event.respondWith(fetchAndApply(event.request))\n });\n\n async function fetchAndApply(request) {\n   let worker = new exports.Worker();\n   return worker.handle(request);\n }\n// --END PREAMBLE--\n\n// Dev environment code block removed by build\nexport class Worker {\n  public handle(request: Request) {\n    return new Response(&quot;Hello, world!&quot;)\n  }\n}</pre></code>\n            <p>Opening <code>build/worker.js</code> you&#39;ll see a whole lot of code generated for handling async functions. That&#39;s because we&#39;re using the <code>async</code> keyword in the preamble.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">&quot;use strict&quot;;\nvar __awaiter = (this &amp;&amp; this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[&quot;throw&quot;](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this &amp;&amp; this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] &amp; 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), &quot;throw&quot;: verb(1), &quot;return&quot;: verb(2) }, typeof Symbol === &quot;function&quot; &amp;&amp; (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(&quot;Generator is already executing.&quot;);\n        while (_) try {\n            if (f = 1, y &amp;&amp; (t = y[op[0] &amp; 2 ? &quot;return&quot; : op[0] ? &quot;throw&quot; : &quot;next&quot;]) &amp;&amp; !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length &gt; 0 &amp;&amp; t[t.length - 1]) &amp;&amp; (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 &amp;&amp; (!t || (op[1] &gt; t[0] &amp;&amp; op[1] &lt; t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 &amp;&amp; _.label &lt; t[1]) { _.label = t[1]; t = op; break; }\n                    if (t &amp;&amp; _.label &lt; t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] &amp; 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\n// --BEGIN PREAMBLE--\n//Invoke worker\nvar exports = {};\naddEventListener(&#039;fetch&#039;, function (event) {\n    event.respondWith(fetchAndApply(event.request));\n});\nfunction fetchAndApply(request) {\n    return __awaiter(this, void 0, void 0, function () {\n        var worker;\n        return __generator(this, function (_a) {\n            worker = new exports.Worker();\n            return [2 /*return*/, worker.handle(request)];\n        });\n    });\n}\n// --END PREAMBLE--\n// Dev environment code block removed by build\nvar Worker = /** @class */ (function () {\n    function Worker() {\n    }\n    Worker.prototype.handle = function (request) {\n        return new Response(&quot;Hello, world!&quot;);\n    };\n    return Worker;\n}());\nexports.Worker = Worker;</pre></code>\n            <p>Now let&#39;s remove that <code>exports.__esModule = true</code> line.</p><p><code>grunt fix-export</code></p><p>and now we&#39;ll see instead in the worker.js <code>// exports line commented by build</code>.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"put-it-together\">Put it together</h3>\n            <a href=\"#put-it-together\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>I just want to run <code>npm run build</code> and get Worker-friendly Javascript. Let&#39;s modify <code>package.json</code> to do just that. Change</p><p><code>&quot;build&quot;: &quot;tsc --pretty&quot;</code> to <code>&quot;build&quot;: &quot;grunt prepare-typescript &amp;&amp; tsc build/*.ts --pretty --skipLibCheck; grunt fix-export&quot;,</code></p><p>And run it.</p><p><code>npm run build</code> will result in</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">&quot;use strict&quot;;\nvar __awaiter = (this &amp;&amp; this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[&quot;throw&quot;](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this &amp;&amp; this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] &amp; 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), &quot;throw&quot;: verb(1), &quot;return&quot;: verb(2) }, typeof Symbol === &quot;function&quot; &amp;&amp; (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(&quot;Generator is already executing.&quot;);\n        while (_) try {\n            if (f = 1, y &amp;&amp; (t = y[op[0] &amp; 2 ? &quot;return&quot; : op[0] ? &quot;throw&quot; : &quot;next&quot;]) &amp;&amp; !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length &gt; 0 &amp;&amp; t[t.length - 1]) &amp;&amp; (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 &amp;&amp; (!t || (op[1] &gt; t[0] &amp;&amp; op[1] &lt; t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 &amp;&amp; _.label &lt; t[1]) { _.label = t[1]; t = op; break; }\n                    if (t &amp;&amp; _.label &lt; t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] &amp; 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n// exports line commented by build\n// --BEGIN PREAMBLE--\n//Invoke worker\nvar exports = {};\naddEventListener(&#039;fetch&#039;, function (event) {\n    event.respondWith(fetchAndApply(event.request));\n});\nfunction fetchAndApply(request) {\n    return __awaiter(this, void 0, void 0, function () {\n        var worker;\n        return __generator(this, function (_a) {\n            worker = new exports.Worker();\n            return [2 /*return*/, worker.handle(request)];\n        });\n    });\n}\n// --END PREAMBLE--\n// Dev environment code block removed by build\nvar Worker = /** @class */ (function () {\n    function Worker() {\n    }\n    Worker.prototype.handle = function (request) {\n        return new Response(&#039;Hello, world!&#039;);\n    };\n    return Worker;\n}());\nexports.Worker = Worker;</pre></code>\n            <p>Paste that into the Workers IDE... works first time.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"automated-upload\">Automated upload</h3>\n            <a href=\"#automated-upload\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>It&#39;s going to get old uploading from our IDE to the Web IDE every time we want to test a change and we&#39;re going to want to auto deploy from CI at some point. Thankfully there&#39;s <a href=\"https://developers.cloudflare.com/workers/api/\">Workers Configuration API</a>, which makes it very simple to upload a Worker automatically:</p><p><code>curl -X PUT &quot;https://api.cloudflare.com/client/v4/zones/:zone_id/workers/script&quot; -H &quot;X-Auth-Email:YOUR_CLOUDFLARE_EMAIL&quot; -H &quot;X-Auth-Key:ACCOUNT_AUTH_KEY&quot; -H &quot;Content-Type:application/javascript&quot; --data-binary &quot;@PATH_TO_YOUR_WORKER_SCRIPT&quot;</code></p><p>OK, so we need our zone ID, Cloudflare email, auth key and path to the binary. I&#39;m going to create Grunt task that uses the <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a> package to load config from a .env file or environment variables.</p><p>Create a <code>.env</code> file that looks like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">CF_WORKER_ZONE_ID=xxxxxxxxxxxxxxxxxxx\nCF_WORKER_EMAIL=steve@example.com\nCF_WORKER_AUTH_KEY=xxxxxxxxxxxxxxxxxx\nCF_WORKER_PATH=build/worker.js</pre></code>\n            <p>To locate your zone ID and auth key, go to the dashboard, select your zone and click the &quot;Overview&quot; icon.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/39GyjeFWomLYOQ1LUjNg5E/b1625fcce903fd56d053d034074f9d71/overview.png\" alt=\"Overview\" class=\"kg-image\" width=\"484\" height=\"219\" loading=\"lazy\"/>\n            \n            </figure><p>The zone ID is right there, then click &quot;Get API key&quot; and choose the &quot;Global API Key&quot; to get the Auth Key.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3o5LTjxiyp74BEDsmNLt4p/a91ea533cff106348d4fafb4845cdbdc/api-key.png\" alt=\"API key\" class=\"kg-image\" width=\"936\" height=\"191\" loading=\"lazy\"/>\n            \n            </figure><p>Fill out your .env with those values and then add the following to your Gruntfile which will:</p><ul><li><p>Read your config</p></li><li><p>Upload to Cloudflare</p></li><li><p>Parse any success or error messages.</p></li></ul>\n            <pre class=\"language-bash\"><code class=\"language-bash\">grunt.registerTask(&#039;upload-worker&#039;, &#039;Uploads workers to Cloudflare&#039;, function(path) {\n\n    require(&#039;dotenv&#039;).config();\n    const fs = require(&#039;fs&#039;);\n    const log = console;\n\n    const done = this.async();\n    const conf = readConfig();\n    path = path || grunt.option(&#039;path&#039;) || process.env.CF_WORKER_PATH;\n    if (!path) {\n      fail(&quot;path is required&quot;);\n    }\n    if (!fs.existsSync(path)) {\n      fail(`path not found ${path}`);\n    }\n\n    let script = fs.readFileSync(path);\n    log.info(&quot;Uploading...&quot;);\n    let url = `https://api.cloudflare.com/client/v4/zones/${conf.zoneId}/workers/script`;\n    let options = {\n      url: url,\n      method: &#039;PUT&#039;,\n      headers: {\n        &#039;Content-Type&#039;: &#039;application/javascript&#039;\n      },\n      body: script\n    };\n    invokeApi(options, conf, done);\n  });\n\n  function invokeApi(options, conf, done) {\n\n    // Add authentication to the request\n    options.headers = options.headers || {};\n    Object.assign(options.headers, {\n      &#039;X-Auth-Email&#039;: conf.email,\n      &#039;X-Auth-Key&#039;: conf.apiKey,\n    });\n\n    request(options, function(error, response) {\n      try {\n        if (error) {\n          log.error(error);\n          fail(`API failure ${response.statusCode} error: ${error}`);\n          done();\n          return;\n        }\n        let body = JSON.parse(response.body);\n        if (body) {\n          logResult(body);\n        }\n        done();\n      } catch (e) {\n        fail(`Unhandled error. ${e}`);\n        done();\n      }\n    });\n  }\n\n  function logResult(body) {\n    body.success ? log.error(&quot;Status: Success&quot;) : log.error(&quot;Status: Failed&quot;);\n    let errors = body.errors || [];\n    if (errors) {\n      log.info(` Errors: ${errors.length}`);\n      for (let e of errors) {\n        log.error(` Code: ${e.code} Message: ${e.message}`);\n      }\n    }\n    let messages = body.messages || [];\n    if (messages) {\n      log.info(` Messages ${messages.length}`);\n      for (let msg of messages) {\n        log.info(` ${msg}`);\n      }\n    }\n    let result = body.result;\n    log.info(&quot; Result&quot;);\n    log.info(` ${JSON.stringify(result, null, 2)}`);\n  }\n\n  function readConfig() {\n    let zoneId = grunt.option(&#039;zoneId&#039;) || process.env.CF_WORKER_ZONE_ID;\n    let email = grunt.option(&#039;email&#039;) || process.env.CF_WORKER_EMAIL;\n    let apiKey = grunt.option(&#039;apiKey&#039;) || process.env.CF_WORKER_AUTH_KEY;\n\n    log.debug(&quot;zoneID: &quot; + zoneId);\n    log.debug(&quot;email: &quot; + email);\n    log.debug(&quot;apiKey: &quot; + &quot;*&quot;.repeat(apiKey.length));\n\n    if (!zoneId || !email || !apiKey) {\n      fail(&quot;zone id, cloudflare email and api key are required&quot;);\n    }\n    return {\n      zoneId: zoneId,\n      email: email,\n      apiKey: apiKey\n    }\n  }\n\n  function fail(message) {\n    grunt.fail.fatal(message, TASK_FAILED);\n  }</pre></code>\n            <p>Finally, let&#39;s add a new task to <code>package.json</code> so we can just <code>npm run upload</code> any time we update our Worker.</p><p><code>&quot;upload&quot;: &quot;grunt upload-worker&quot;</code></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm run upload-worker\n\nRunning &quot;upload-worker&quot; task\nzoneID: **************\nemail: steve@example.com\napiKey: *************************************\nUploading...\nStatus: Success\n Errors: 0\n Messages 0\n Result\n {\n  &quot;script&quot;...\n }</pre></code>\n            <p>Voila! Script uploaded. OK, so if it&#39;s uploaded, we can call call it remotely:</p><p><code>$ curl https://cryptoserviceworker.com/hello</code></p><p>Hmmm... nothing. Ah, we haven&#39;t actually configured Workers to route any requests to our Worker. You can do this via the API, but since it&#39;s a one off, I&#39;ll do it in the web IDE.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7cOmAOF6ivdau7cpgr8VEF/6fd51e85e26d9d0e7309e599c677a78c/routes.png\" alt=\"Add routes\" class=\"kg-image\" width=\"776\" height=\"446\" loading=\"lazy\"/>\n            \n            </figure><p>And try again:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ curl https://cryptoserviceworker.com/hello\nHello, world!</pre></code>\n            <p>Success! OK, so to recap:</p><ul><li><p>We&#39;ve bootstrapped a Typescript project using NodeJS and Webstorm</p></li><li><p>Written a &quot;Hello, World&quot; worker in Typescript</p></li><li><p>Setup build tasks to modify the code for Workers</p></li><li><p>Automatically uploading to the Cloudflare edge with <code>npm run upload</code></p></li><li><p>...</p></li><li><p>Profit</p></li></ul><hr/><p><i>If you have a worker you&#39;d like to share, or want to check out workers from other Cloudflare users, visit the </i><a href=\"https://community.cloudflare.com/tags/recipe-exchange\"><i>“Recipe Exchange”</i></a><i> in the Workers section of the </i><a href=\"https://community.cloudflare.com/c/developers/workers\"><i>Cloudflare Community Forum</i></a><i>.</i></p>",
		"id": "1t6nsZnipssFhdwh63UZon",
		"localeList": {
			"name": "Bootstrapping a Typescript Worker Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-06-27T14:00:00.000+01:00",
		"slug": "bootstrapping-a-typescript-worker",
		"tags": [
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			}
		],
		"title": "Bootstrapping a Typescript Worker",
		"updated_at": "2024-10-10T00:33:19.273Z",
		"url": "https://blog.cloudflare.com/bootstrapping-a-typescript-worker"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}