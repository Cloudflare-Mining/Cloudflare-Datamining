{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"zh-tw"
	],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "In this blog post I'll share my journey deep into the Linux networking stack, trying to understand the memory and window management of the receiving side of a TCP connection",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/45eBWLkPaFFlbeBbPSSyuR/932091efb293f6e5e9b91f81e9ea1e85/when-the-window-is-not-fully-open-your-tcp-stack-is-doing-more-than-you-think.png",
		"featured": false,
		"html": "<p>Over the years I&#39;ve been lurking around the Linux kernel and have investigated the TCP code many times. But when recently we were working on <a href=\"/optimizing-tcp-for-high-throughput-and-low-latency/\">Optimizing TCP for high WAN throughput while preserving low latency</a>, I realized I have gaps in my knowledge about how Linux manages TCP receive buffers and windows. As I dug deeper I found the subject complex and certainly non-obvious.</p><p>In this blog post I&#39;ll share my journey deep into the Linux networking stack, trying to understand the memory and window management of the receiving side of a TCP connection. Specifically, looking for answers to seemingly trivial questions:</p><ul><li><p>How much data can be stored in the TCP receive buffer? (it&#39;s not what you think)</p></li><li><p>How fast can it be filled? (it&#39;s not what you think either!)</p></li></ul><p>Our exploration focuses on the receiving side of the TCP connection. We&#39;ll try to understand how to tune it for the best speed, without wasting precious memory.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-case-of-a-rapid-upload\">A case of a rapid upload</h3>\n      <a href=\"#a-case-of-a-rapid-upload\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To best illustrate the receive side buffer management we need pretty charts! But to grasp all the numbers, we need a bit of theory.</p><p>We&#39;ll draw charts from a receive side of a TCP flow, running a pretty straightforward scenario:</p><ul><li><p>The client opens a TCP connection.</p></li><li><p>The client does <code>send()</code>, and pushes as much data as possible.</p></li><li><p>The server doesn&#39;t <code>recv()</code> any data. We expect all the data to stay and wait in the receive queue.</p></li><li><p>We fix the SO_RCVBUF for better illustration.</p></li></ul><p>Simplified pseudocode might look like (<a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2022-07-rmem-a/window.py\">full code if you dare</a>):</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sd = socket.socket(AF_INET, SOCK_STREAM, 0)\nsd.bind((&#039;127.0.0.3&#039;, 1234))\nsd.listen(32)\n\ncd = socket.socket(AF_INET, SOCK_STREAM, 0)\ncd.setsockopt(SOL_SOCKET, SO_RCVBUF, 32*1024)\ncd.connect((&#039;127.0.0.3&#039;, 1234))\n\nssd, _ = sd.accept()\n\nwhile true:\n    cd.send(b&#039;a&#039;*128*1024)</pre></code>\n            <p>We&#39;re interested in basic questions:</p><ul><li><p>How much data can fit in the server’s receive buffer? It turns out it&#39;s not exactly the same as the default read buffer size on Linux; we&#39;ll get there.</p></li><li><p>Assuming infinite bandwidth, what is the minimal time  - measured in <a href=\"https://www.cloudflare.com/learning/cdn/glossary/round-trip-time-rtt/\">RTT</a> - for the client to fill the receive buffer?</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-bit-of-theory\">A bit of theory</h3>\n      <a href=\"#a-bit-of-theory\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let&#39;s start by establishing some common nomenclature. I&#39;ll follow the wording used by the <a href=\"https://man7.org/linux/man-pages/man8/ss.8.html\"><code>ss</code> Linux tool from the <code>iproute2</code> package</a>.</p><p>First, there is the buffer budget limit. <a href=\"https://man7.org/linux/man-pages/man8/ss.8.html\"><code>ss</code> manpage</a> calls it <b>skmem_rb</b>, in the kernel it&#39;s named <b>sk_rcvbuf</b>. This value is most often controlled by the Linux autotune mechanism using the <code>net.ipv4.tcp_rmem</code> setting:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sysctl net.ipv4.tcp_rmem\nnet.ipv4.tcp_rmem = 4096 131072 6291456</pre></code>\n            <p>Alternatively it can be manually set with <code>setsockopt(SO_RCVBUF)</code> on a socket. Note that the kernel doubles the value given to this setsockopt. For example SO_RCVBUF=16384 will result in skmem_rb=32768. The max value allowed to this setsockopt is limited to meager 208KiB by default:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sysctl net.core.rmem_max net.core.wmem_max\nnet.core.rmem_max = 212992\nnet.core.wmem_max = 212992</pre></code>\n            <p><a href=\"/optimizing-tcp-for-high-throughput-and-low-latency/\">The aforementioned blog post</a> discusses why manual buffer size management is problematic - relying on autotuning is generally preferable.</p><p>Here’s a diagram showing how <b>skmem_rb</b> budget is being divided:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3EEuOnbl8CKYCv4oWj5Ejw/4a0bf778f484bbddebfac4099d8e21f4/image2-17.png\" alt=\"\" class=\"kg-image\" width=\"1498\" height=\"585\" loading=\"lazy\"/>\n            \n            </figure><p>In any given moment, we can think of the budget as being divided into four parts:</p><ul><li><p><b>Recv-q</b>: part of the buffer budget occupied by actual application bytes awaiting <code>read()</code>.</p></li><li><p>Another part of is consumed by metadata handling - the cost of <b>struct sk_buff</b> and such.</p></li><li><p>Those two parts together are reported by <code>ss</code> as <b>skmem_r</b> - kernel name is <b>sk_rmem_alloc</b>.</p></li><li><p>What remains is &quot;free&quot;, that is: it&#39;s not actively used yet.</p></li><li><p>However, a portion of this &quot;free&quot; region is an advertised window - it may become occupied with application data soon.</p></li><li><p>The remainder will be used for future metadata handling, or might be divided into the advertised window further in the future.</p></li></ul><p>The upper limit for the window is configured by <code>tcp_adv_win_scale</code> setting. By default, the window is set to at most 50% of the &quot;free&quot; space. The value can be clamped further by the TCP_WINDOW_CLAMP option or an internal <code>rcv_ssthresh</code> variable.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-much-data-can-a-server-receive\">How much data can a server receive?</h3>\n      <a href=\"#how-much-data-can-a-server-receive\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our first question was &quot;How much data can a server receive?&quot;. A naive reader might think it&#39;s simple: if the server has a receive buffer set to say 64KiB, then the client will surely be able to deliver 64KiB of data!</p><p>But this is totally not how it works. To illustrate this, allow me to temporarily set sysctl <code>tcp_adv_win_scale=0</code>. This is not a default and, as we&#39;ll learn, it&#39;s the wrong thing to do. With this setting the server will indeed set 100% of the receive buffer as an advertised window.</p><p>Here&#39;s our setup:</p><ul><li><p>The client tries to send as fast as possible.</p></li><li><p>Since we are interested in the receiving side, we can cheat a bit and speed up the sender arbitrarily. The client has transmission congestion control disabled: we set initcwnd=10000 as the route option.</p></li><li><p>The server has a fixed <b>skmem_rb</b> set at 64KiB.</p></li><li><p>The server has <code><b>tcp_adv_win_scale=0</b></code>.</p></li></ul>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/44j6HUJ496dIXVMkltUe4O/1765b3f25ef767dfcb23d3c079f7e8cb/image6-10.png\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>There are so many things here! Let&#39;s try to digest it. First, the X axis is an ingress packet number (we saw about 65). The Y axis shows the buffer sizes as seen on the receive path for every packet.</p><ul><li><p>First, the purple line is a buffer size limit in bytes - <b>skmem_rb</b>. In our experiment we called <code>setsockopt(SO_RCVBUF)=32K</code> and skmem_rb is double that value. Notice, by calling SO_RCVBUF we disabled the Linux autotune mechanism.</p></li><li><p>Green <b>recv-q</b> line is how many application bytes are available in the receive socket. This grows linearly with each received packet.</p></li><li><p>Then there is the blue <b>skmem_r</b>, the used data + metadata cost in the receive socket. It grows just like <b>recv-q</b> but a bit faster, since it accounts for the cost of the metadata kernel needs to deal with.</p></li><li><p>The orange <b>rcv_win</b> is an advertised window. We start with 64KiB (100% of skmem_rb) and go down as the data arrives.</p></li><li><p>Finally, the dotted line shows <b>rcv_ssthresh</b>, which is not important yet, we&#39;ll get there.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"running-over-the-budget-is-bad\">Running over the budget is bad</h3>\n      <a href=\"#running-over-the-budget-is-bad\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>It&#39;s super important to notice that we finished with <b>skmem_r</b> higher than <b>skmem_rb</b>! This is rather unexpected, and undesired. The whole point of the <b>skmem_rb</b> memory budget is, well, not to exceed it. Here&#39;s how <code>ss</code> shows it:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ss -m\nNetid  State  Recv-Q  Send-Q  Local Address:Port  Peer Address:Port   \ntcp    ESTAB  62464   0       127.0.0.3:1234      127.0.0.2:1235\n     skmem:(r73984,rb65536,...)</pre></code>\n            <p>As you can see, skmem_rb is 65536 and skmem_r is 73984, which is 8448 bytes over! When this happens we have an even bigger issue on our hands. At around the 62nd packet we have an advertised window of 3072 bytes, but while packets are being sent, the receiver is unable to process them! This is easily verifiable by inspecting an nstat TcpExtTCPRcvQDrop counter:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ nstat -az TcpExtTCPRcvQDrop\nTcpExtTCPRcvQDrop    13    0.0</pre></code>\n            <p>In our run 13 packets were dropped. This variable counts a number of packets dropped due to either system-wide or per-socket memory pressure - we know we hit the latter. In our case, soon after the socket memory limit was crossed, new packets were prevented from being enqueued to the socket. This happened even though the TCP advertised window was still open.</p><p>This results in an interesting situation. The receiver&#39;s window is open which might indicate it has resources to handle the data. But that&#39;s not always the case, like in our example when it runs out of the memory budget.</p><p>The sender will think it hit a network congestion packet loss and will run the usual retry mechanisms including exponential backoff. This behavior can be looked at as desired or undesired, depending on how you look at it. On one hand no data will be lost, the sender can eventually deliver all the bytes reliably. On the other hand the exponential backoff logic might stall the sender for a long time, causing a noticeable delay.</p><p>The root of the problem is straightforward - Linux kernel <b>skmem_rb</b> sets a memory budget for both the <b>data</b> and <b>metadata</b> which reside on the socket. In a pessimistic case each packet might incur a cost of a <b>struct sk_buff</b> + <b>struct skb_shared_info</b>, which on my system is 576 bytes, above the actual payload size, plus memory waste due to network card buffer alignment:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7nJyE7p1rtHK9SvSTDnZoj/c02019aeed1e3b17f24b506b4eeaef36/image7-10.png\" alt=\"\" class=\"kg-image\" width=\"1442\" height=\"180\" loading=\"lazy\"/>\n            \n            </figure><p>We now understand that Linux can&#39;t just advertise 100% of the memory budget as an advertised window. Some budget must be reserved for metadata and such. The upper limit of window size is expressed as a fraction of the &quot;free&quot; socket budget. It is controlled by <code>tcp_adv_win_scale</code>, with the following values:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6ZfsgDbgLiLQ0HXUV5mVeK/31e596946e101fef2443896f9db8fcdb/image9-5.png\" alt=\"\" class=\"kg-image\" width=\"658\" height=\"302\" loading=\"lazy\"/>\n            \n            </figure><p>By default, Linux sets the advertised window at most at 50% of the remaining buffer space.</p><p>Even with 50% of space &quot;reserved&quot; for metadata, the kernel is very smart and tries hard to reduce the metadata memory footprint. It has two mechanisms for this:</p><ul><li><p><b>TCP Coalesce</b> - on the happy path, Linux is able to throw away <b>struct sk_buff</b>. It can do so, by just linking the data to the previously enqueued packet. You can think about it as if it was <a href=\"https://www.spinics.net/lists/netdev/msg755359.html\">extending the last packet on the socket</a>.</p></li><li><p><b>TCP Collapse</b> - when the memory budget is hit, Linux runs &quot;collapse&quot; code. Collapse rewrites and defragments the receive buffer from many small skb&#39;s into a few very long segments - therefore reducing the metadata cost.</p></li></ul><p>Here&#39;s an extension to our previous chart showing these mechanisms in action:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2KhHEeAUvJ6rinNLoRBwd1/36b733fddcbb885d8db5b076602ca168/image3-10.png\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p><b>TCP Coalesce</b> is a very effective measure and works behind the scenes at all times. In the bottom chart, the packets where the coalesce was engaged are shown with a pink line. You can see - the <b>skmem_r</b> bumps (blue line) are clearly correlated with a <b>lack</b> of coalesce (pink line)! The nstat TcpExtTCPRcvCoalesce counter might be helpful in debugging coalesce issues.</p><p>The <b>TCP Collapse</b> is a bigger gun. <a href=\"/optimizing-tcp-for-high-throughput-and-low-latency/\">Mike wrote about it extensively</a>, and <a href=\"/the-story-of-one-latency-spike/\">I wrote a blog post years ago, when the latency of TCP collapse hit us hard</a>. In the chart above, the collapse is shown as a red circle. We clearly see it being engaged after the socket memory budget is reached - from packet number 63. The nstat TcpExtTCPRcvCollapsed counter is relevant here. This value growing is a bad sign and might indicate bad latency spikes - especially when dealing with larger buffers. Normally collapse is supposed to be run very sporadically. A <a href=\"https://lore.kernel.org/lkml/20120510173135.615265392@linuxfoundation.org/\">prominent kernel developer describes</a> this pessimistic situation:</p><blockquote><p>This also means tcp advertises a too optimistic window for a given allocated rcvspace: When receiving frames, <code>sk_rmem_alloc</code> can hit <code>sk_rcvbuf</code> limit and we call <code>tcp_collapse()</code> too often, especially when application is slow to drain its receive queue [...] This is a major latency source.</p></blockquote><p>If the memory budget remains exhausted after the collapse, Linux will drop ingress packets. In our chart it&#39;s marked as a red &quot;X&quot;. The nstat TcpExtTCPRcvQDrop counter shows the count of dropped packets.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"rcv_ssthresh-predicts-the-metadata-cost\">rcv_ssthresh predicts the metadata cost</h3>\n      <a href=\"#rcv_ssthresh-predicts-the-metadata-cost\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Perhaps counter-intuitively, the memory cost of a packet can be much larger than the amount of actual application data contained in it. It depends on number of things:</p><ul><li><p><b>Network card</b>: some network cards always allocate a full page (4096, or even 16KiB) per packet, no matter how small or large the payload.</p></li><li><p><b>Payload size</b>: shorter packets, will have worse metadata to content ratio since <b>struct skb</b> will be comparably larger.</p></li><li><p>Whether XDP is being used.</p></li><li><p>L2 header size: things like ethernet, vlan tags, and tunneling can add up.</p></li><li><p>Cache line size: many kernel structs are cache line aligned. On systems with larger cache lines, they will use more memory (see P4 or S390X architectures).</p></li></ul><p>The first two factors are the most important. Here&#39;s a run when the sender was specially configured to make the metadata cost bad and the coalesce ineffective (the <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2022-07-rmem-a/window.py#L90\">details of the setup are messy</a>):</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6Oo38G0pRDoxfqkcIE7D9Y/c372a9cba2402cee11c14fc815875ea3/image1-10.png\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>You can see the kernel hitting TCP collapse multiple times, which is totally undesired. Each time a collapse kernel is likely to rewrite the full receive buffer. This whole kernel machinery, from reserving some space for metadata with tcp_adv_win_scale, via using coalesce to reduce the memory cost of each packet, up to the rcv_ssthresh limit, exists to avoid this very case of hitting collapse too often.</p><p>The kernel machinery most often works fine, and TCP collapse is rare in practice. However, we noticed that&#39;s not the case for certain types of traffic. One example is <a href=\"https://lore.kernel.org/lkml/CA+wXwBSGsBjovTqvoPQEe012yEF2eYbnC5_0W==EAvWH1zbOAg@mail.gmail.com/\">websocket traffic with loads of tiny packets</a> and a slow reader. One <a href=\"https://elixir.bootlin.com/linux/latest/source/net/ipv4/tcp_input.c#L452\">kernel comment talks about</a> such a case:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">* The scheme does not work when sender sends good segments opening\n* window and then starts to feed us spaghetti. But it should work\n* in common situations. Otherwise, we have to rely on queue collapsing.</pre></code>\n            <p>Notice that the <b>rcv_ssthresh</b> line dropped down on the TCP collapse. This variable is an internal limit to the advertised window. By dropping it the kernel effectively says: hold on, I mispredicted the packet cost, next time I&#39;m given an opportunity I&#39;m going to open a smaller window. Kernel will advertise a smaller window and be more careful - all of this dance is done to avoid the collapse.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"normal-run-continuously-updated-window\">Normal run - continuously updated window</h3>\n      <a href=\"#normal-run-continuously-updated-window\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Finally, here&#39;s a chart from a normal run of a connection. Here, we use the default <code>tcp_adv_win_wcale=1 (50%)</code>:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ZlSO1vQxnHim1D8dav4Aa/5ce538b22b546d194df83130d9f39bc9/image5-13.png\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>Early in the connection you can see <b>rcv_win</b> being continuously updated with each received packet. This makes sense: while the <b>rcv_ssthresh</b> and <b>tcp_adv_win_scale</b> restrict the advertised window to never exceed 32KiB, the window is sliding nicely as long as there is enough space. At packet 18 the receiver stops updating the window and waits a bit. At packet 32 the receiver decides there still is some space and updates the window again, and so on. At the end of the flow the socket has 56KiB of data. This 56KiB of data was received over a sliding window reaching at most 32KiB .</p><p>The saw blade pattern of rcv_win is enabled by delayed ACK (aka QUICKACK). You can see the &quot;<b>acked</b>&quot; bytes in red dashed line. Since the ACK&#39;s might be delayed, the receiver waits a bit before updating the window. If you want a smooth line, you can use <code>quickack 1</code> per-route parameter, but this is not recommended since it will result in many small ACK packets flying over the wire.</p><p>In normal connection we expect the majority of packets to be coalesced and the collapse/drop code paths never to be hit.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"large-receive-windows-rcv_ssthresh\">Large receive windows - rcv_ssthresh</h3>\n      <a href=\"#large-receive-windows-rcv_ssthresh\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>For large bandwidth transfers over big latency links - big BDP case - it&#39;s beneficial to have a very wide advertised window. However, Linux takes a while to fully open large receive windows:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6UL4j5NH62FE1350yWnTcP/e257d2160e41a3f71aa3b727debc44fc/image8-4.png\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>In this run, the <b>skmem_rb</b> is set to 2MiB. As opposed to previous runs, the buffer budget is large and the receive window doesn&#39;t start with 50% of the skmem_rb! Instead it starts from 64KiB and grows linearly. It takes a while for Linux to ramp up the receive window to full size - ~800KiB in this case. The window is clamped by <b>rcv_ssthresh</b>. This variable starts at 64KiB and then grows at a rate of two full-MSS packets per each packet which has a &quot;good&quot; ratio of total size (truesize) to payload size.</p><p><a href=\"https://lore.kernel.org/lkml/CANn89i+mhqGaM2tuhgEmEPbbNu_59GGMhBMha4jnnzFE=UBNYg@mail.gmail.com/\">Eric Dumazet writes</a> about this behavior:</p><blockquote><p>Stack is conservative about RWIN increase, it wants to receive packets to have an idea of the skb-&gt;len/skb-&gt;truesize ratio to convert a memory budget to  RWIN.Some drivers have to allocate 16K buffers (or even 32K buffers) just to hold one segment (of less than 1500 bytes of payload), while others are able to pack memory more efficiently.</p></blockquote><p>This behavior of slow window opening is fixed, and not configurable in vanilla kernel. <a href=\"https://lore.kernel.org/netdev/20220721151041.1215017-1-marek@cloudflare.com/#r\">We prepared a kernel patch that allows to start up with higher rcv_ssthresh</a> based on per-route option <code>initrwnd</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ip route change local 127.0.0.0/8 dev lo initrwnd 1000</pre></code>\n            <p>With the patch and the route change deployed, this is how the buffers look:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4YE7Oolhn4ZQ9ihNi11HEL/af8c492bc03243e12b54541e954a3061/image4-12.png\" alt=\"\" class=\"kg-image\" width=\"1000\" height=\"600\" loading=\"lazy\"/>\n            \n            </figure><p>The advertised window is limited to 64KiB during the TCP handshake, but with our kernel patch enabled it&#39;s quickly bumped up to 1MiB in the first ACK packet afterwards. In both runs it took ~1800 packets to fill the receive buffer, however it took different time. In the first run the sender could push only 64KiB onto the wire in the second RTT. In the second run it could immediately push full 1MiB of data.</p><p>This trick of aggressive window opening is not really necessary for most users. It&#39;s only helpful when:</p><ul><li><p>You have high-bandwidth TCP transfers over big-latency links.</p></li><li><p>The metadata + buffer alignment cost of your NIC is sensible and predictable.</p></li><li><p>Immediately after the flow starts your application is ready to send a lot of data.</p></li><li><p>The sender has configured large <code>initcwnd</code>.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"you-care-about-shaving-off-every-possible-rtt\">You care about shaving off every possible RTT.</h3>\n      <a href=\"#you-care-about-shaving-off-every-possible-rtt\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>On our systems we do have such flows, but arguably it might not be a common scenario. In the real world most of your TCP connections go to the nearest CDN point of presence, which is very close.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"getting-it-all-together\">Getting it all together</h3>\n      <a href=\"#getting-it-all-together\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In this blog post, we discussed a seemingly simple case of a TCP sender filling up the receive socket. We tried to address two questions: with our isolated setup, how much data can be sent, and how quickly?</p><p>With the default settings of net.ipv4.tcp_rmem, Linux initially sets a memory budget of 128KiB for the receive data and metadata. On my system, given full-sized packets, it&#39;s able to eventually accept around 113KiB of application data.</p><p>Then, we showed that the receive window is not fully opened immediately. Linux keeps the receive window small, as it tries to predict the metadata cost and avoid overshooting the memory budget, therefore hitting TCP collapse. By default, with the net.ipv4.tcp_adv_win_scale=1, the upper limit for the advertised window is 50% of &quot;free&quot; memory. rcv_ssthresh starts up with 64KiB and grows linearly up to that limit.</p><p>On my system it took five window updates - six RTTs in total - to fill the 128KiB receive buffer. In the first batch the sender sent ~64KiB of data (remember we hacked the <code>initcwnd</code> limit), and then the sender topped it up with smaller and smaller batches until the receive window fully closed.</p><p>I hope this blog post is helpful and explains well the relationship between the buffer size and advertised window on Linux. Also, it describes the often misunderstood rcv_ssthresh which limits the advertised window in order to manage the memory budget and predict the unpredictable cost of metadata.</p><p>In case you wonder, similar mechanisms are in play in QUIC. The QUIC/H3 libraries though are still pretty young and don&#39;t have so many complex and mysterious toggles.... yet.</p><p>As always, <a href=\"https://github.com/cloudflare/cloudflare-blog/tree/master/2022-07-rmem-a\">the code and instructions on how to reproduce the charts are available at our GitHub</a>.</p>",
		"id": "ROvfvY7ClXiGsjf1moUld",
		"localeList": {
			"name": "When the window is not fully open, your TCP stack is doing more than you think Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "Translated for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "In this blog post I'll share my journey deep into the Linux networking stack, trying to understand the memory and window management of the receiving side of a TCP connection.",
		"metadata": {
			"title": "When the window is not fully open, your TCP stack is doing more than you think",
			"description": "In this blog post I'll share my journey deep into the Linux networking stack, trying to understand the memory and window management of the receiving side of a TCP connection.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1Bovydg2YlIWmUQNeSdOpn/97c6f776ffc74025aa8ef9773f15665f/when-the-window-is-not-fully-open-your-tcp-stack-is-doing-more-than-you-think-T0Cop1.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2022-07-26T14:00:00.000+01:00",
		"slug": "when-the-window-is-not-fully-open-your-tcp-stack-is-doing-more-than-you-think",
		"tags": [
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "5NpgoTJYJjhgjSLaY7Gt3p",
				"name": "TCP",
				"slug": "tcp"
			}
		],
		"title": "When the window is not fully open, your TCP stack is doing more than you think",
		"updated_at": "2024-10-09T23:19:40.870Z",
		"url": "https://blog.cloudflare.com/when-the-window-is-not-fully-open-your-tcp-stack-is-doing-more-than-you-think"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}