{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Steven Pack",
				"slug": "stevenpack",
				"bio": "Partner Engineering Director",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5KBJRA6GGkWLzkmUgwTrMs/82479e6c25be69362e444cdcad205625/stevenpack.png",
				"location": "San Francisco Bay Area, California",
				"website": null,
				"twitter": "@steven_pack",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Serving content from a Rust web server running on a Raspberry Pi from your home to the world, with a Cloudflare Argo Tunnels.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/64D2oSodAjCSr4ZsFdqza7/ed56e59a206a6ba9ca6dc8b09aff39c2/cloudflare-argo-tunnel-with-rust-and-raspberry-pi.png",
		"featured": false,
		"html": "<p>Yesterday Cloudflare launched <a href=\"https://developers.cloudflare.com/argo-tunnel/\">Argo Tunnel</a>. In the words of the product team:</p><blockquote><p>Argo Tunnel exposes applications running on your local web server, on any network with an Internet connection, without adding DNS records or configuring a firewall or router. It just works.</p></blockquote><p>Once I grokked this, the first thing that came to mind was that I could actually use one of my Raspberry Pi&#39;s sitting around to serve a website, without:</p><ul><li><p>A flaky DDNS running on my router</p></li><li><p>Exposing my home network to the world</p></li><li><p>A cloud VM</p></li></ul><p>Ooooh... so exciting.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-rig\">The Rig</h3>\n      <a href=\"#the-rig\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>I&#39;ll assume you already have a Raspberry Pi with Raspbian on it.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/yhfAIyjzM1fchLSHmBBLg/f32e891d40339d5d66139573d9c0e17b/rig.JPG.jpeg\" alt=\"My rig\" class=\"kg-image\" width=\"1024\" height=\"768\" loading=\"lazy\"/>\n            \n            </figure><p>Plug the Pi into your router. It should now have an IP address. Look that up in your router’s admin UI:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6nD8bAb7meAZ3X44R4o8YJ/632c6a588761b86e7c7be9f9e87f8c0e/devices.png\" alt=\"Attached devices\" class=\"kg-image\" width=\"747\" height=\"518\" loading=\"lazy\"/>\n            \n            </figure><p>OK, that&#39;s promising. Let&#39;s connect to that IP using the default pi/raspberry credentials:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ssh 192.168.8.26 -l pi\npi@192.168.8.26&#039;s password: \n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Sun Mar 18 23:24:11 2018 from stevens-air-2.lan\npi@raspberrypi:~ $ </pre></code>\n            <p>We&#39;re in!</p><p><b>Pro tip: quick way to figure it out which type you have is</b></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">pi@raspberrypi:~ $ cat /proc/cpuinfo | grep &#039;Revision&#039; | awk &#039;{print $3}&#039; | sed &#039;s/^1000//&#039;\na22082</pre></code>\n            <p>Then look up the value in the <a href=\"https://elinux.org/RPi_HardwareHistory\">Raspbery Pi revision history</a>. I have Raspberry Pi 3 Model B</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"internet-connectivity\">Internet connectivity</h3>\n      <a href=\"#internet-connectivity\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>OK, so we have a Pi connected to our router. Let&#39;s make 100% sure it can connect to the Internet.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">pi@raspberrypi:~$ $ curl -I https://www.cloudflare.com\nHTTP/2 200\ndate: Tue, 20 Mar 2018 22:54:20 GMT\ncontent-type: text/html; charset=utf-8\nset-cookie: __cfduid=dfb9c369ae12fe6eace48ed9b51aedbb01521586460; expires=Wed, 20-Mar-19 22:54:20 GMT; path=/; domain=.cloudflare.com; HttpOnly\nx-powered-by: Express\ncache-control: no-cache\nx-xss-protection: 1; mode=block\nstrict-transport-security: max-age=15780000; includeSubDomains\nx-content-type-options: nosniff\nx-frame-options: SAMEORIGIN\nserved-in-seconds: 0.025\nset-cookie: __cflb=3128081942; path=/; expires=Wed, 21-Mar-18 21:54:20 GMT\nexpect-ct: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;\nserver: cloudflare\ncf-ray: 3febc2914beb7f06-SFO-DOG</pre></code>\n            <p>That first line HTTP/2 200 is the OK status code, which is enough to tell us we can connect out to the Internet. Normally this wouldn&#39;t be particularly exciting, as it&#39;s allowing connections <b>in</b> that causes problems. That&#39;s the promise of Argo Tunnels however, it says on the tin we don&#39;t need to poke any firewall holes or configure any DNS. Big claim, let&#39;s test it.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"install-the-agent\">Install the Agent</h3>\n      <a href=\"#install-the-agent\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Go to <a href=\"https://developers.cloudflare.com/argo-tunnel/downloads/\">https://developers.cloudflare.com/argo-tunnel/downloads/</a> to get the url for the ARM build for your Pi. At the time of writing it was <a href=\"https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz\">https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz</a></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz\nResolving bin.equinox.io (bin.equinox.io)... 54.243.137.45, 107.22.233.132, 50.19.252.69, ...\nConnecting to bin.equinox.io (bin.equinox.io)|54.243.137.45|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 5293773 (5.0M) [application/octet-stream]\nSaving to: ‘cloudflared-stable-linux-arm.tgz’\n...</pre></code>\n            <p>Untar it</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ mkdir argo-tunnel\n$ tar -xvzf cloudflared-stable-linux-arm.tgz -C ./argo-tunnel\ncloudflared\n$ cd argo-tunnel</pre></code>\n            <p>Check you can execute it.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./cloudflared --version\ncloudflared version 2018.3.0 (built 2018-03-02-1820 UTC)</pre></code>\n            <p>Looks OK. Now, we&#39;re hoping that the agent will magically connect from the Pi out to the nearest Cloudflare POP. We obviously want that to be secure. Furthermore, we&#39;re expecting that when a request comes inbound, it magically gets routed through Cloudflare&#39;s network and back to my Raspberry Pi.</p><p>Seems unlikely, but let’s have faith. Here is my mental model of what&#39;s happening:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2yhnPd0ciTQSUCgu03CHu7/b5360d9194e28944ed230e6cb5e19fc2/Argo-Tunnel-Diagram.png\" alt=\"My mental model of Argo Tunnel\" class=\"kg-image\" width=\"1563\" height=\"857\" loading=\"lazy\"/>\n            \n            </figure><p>So let&#39;s create that secure tunnel. I guess we need some sort of certificate or credentials...</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./cloudflared login</pre></code>\n            <p>You&#39;ll see output in the command window similar to this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">A browser window should have opened at the following URL:\n\nhttps://www.cloudflare.com/a/warp?callback=&lt;some token&gt;\n\nIf the browser failed to open, open it yourself and visit the URL above.</pre></code>\n            <p>Our headless Pi doesn&#39;t have a web browser, so let&#39;s copy the url from the console into the browser on our host dev machine.</p><p>This part assumes you already have a domain on Cloudflare If you don&#39;t go to the <a href=\"https://support.cloudflare.com/hc/en-us/articles/201720164\">setup guide</a> to get started.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4NdfPejq5R5wFIBaw6fjmx/04998230fa9a9fae7cef05e0f282cc43/authorize-choose-domain.png\" alt=\"authorize-choose-domain\" class=\"kg-image\" width=\"1550\" height=\"560\" loading=\"lazy\"/>\n            \n            </figure><p>We&#39;re being asked which domain we want this tunnel to sit behind. I&#39;ve chosen <b>pacman.wiki</b>. Click Authorize.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2e3js21yw4OkiapEadWalz/bbe4e38f7dcffae2b6f3a98395d5ba9b/authorize-confirm.png\" alt=\"authorize-confirm\" class=\"kg-image\" width=\"854\" height=\"237\" loading=\"lazy\"/>\n            \n            </figure>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/49TShvgc3EHdZ9O1a8s1Be/2a346df5abf86d07f15e2f8f271a2619/authorize-complete.png\" alt=\"authorize-complete\" class=\"kg-image\" width=\"848\" height=\"217\" loading=\"lazy\"/>\n            \n            </figure><p>You should now see this back on your pi:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">You have successfully logged in.\nIf you wish to copy your credentials to a server, they have been saved to:\n/home/pi/.cloudflared/cert.pem</pre></code>\n            <p>Aha! That answers how the tunnel gets secured. The agent has created a certificate and will use that to secure the connection back to Cloudflare. Now let&#39;s create the tunnel and serve some content!</p><p><code>$ cloudflared --hostname [hostname] --hello-world</code></p><p><b>hostname</b> is a fully-qualified domain name under the domain you chose to Authorize for Argo Tunnels earlier. I&#39;m going to use <b>tunnel.pacman.wiki</b></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./cloudflared --hostname tunnel.pacman.wiki --hello-world\nINFO[0002] Proxying tunnel requests to https://127.0.0.1:46727 \nINFO[0000] Starting Hello World server at 127.0.0.1:53030 \nINFO[0000] Starting metrics server                       addr=&quot;127.0.0.1:53031&quot;\nINFO[0005] Connected to LAX                             \nINFO[0010] Connected to SFO-DOG                         \nINFO[0012] Connected to LAX                             \nINFO[0012] Connected to SFO-DOG  </pre></code>\n            <p>Huh, interesting. So, we&#39;ve connected to my nearest POP(s). I&#39;m in the San Francisco Bay Area, so SJC and LAX seems reasonable. What now though? Surely that&#39;s not it? If I&#39;m reading this right, I can go to my browser, enter <a href=\"https://tunnel.pacman.wiki\">https://tunnel.pacman.wiki</a> and I&#39;ll get a hello world page... surely not.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4HzTsm0DkHPzZSQ527zAYb/1dec3343ed9ec63465c60fb28dbe60ed/success-1.png\" alt=\"Success!\" class=\"kg-image\" width=\"1160\" height=\"701\" loading=\"lazy\"/>\n            \n            </figure><p>And back on the Pi</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">INFO[0615] GET https://127.0.0.1:62627/ HTTP/1.1 CF-RAY=4067701b598e8184-LAX\nINFO[0615] 200 OK  CF-RAY=4067701b598e8184-LAX</pre></code>\n            <p>Mind. Blown. So what happened here exactly...</p><ol><li><p>The agent on the Pi created a secure tunnel (a persistent http2 connection) back to the nearest Cloudflare Argo Tunnels server</p></li><li><p>The tunnel was secured with the certificate generated by the agent.</p></li><li><p>A request for <a href=\"https://tunnel.pacman.wiki\">https://tunnel.pacman.wiki</a> went from my browser out through the Internet and was routed to the nearest Cloudflare <a href=\"https://www.cloudflare.com/learning/cdn/glossary/anycast-network/\">datacenter</a></p></li><li><p>Cloudflare received the request, saw the domain was Cloudflare managed and saw a tunnel set up to that hostname</p></li><li><p>The request got routed over that http2 connection back to my Pi</p></li></ol><p>I&#39;m serving traffic over the Internet, from my Pi, with no ports opened on my home router. That is so cool.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"more-than-hello-world\">More than hello world</h3>\n      <a href=\"#more-than-hello-world\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you&#39;re reading this, I&#39;ve won my battle with the Cloudflare blog editing team about long form vs short form content :p</p><p>Serving hello world is great, but I want to expose a real web server. If you&#39;re like me, if you can find any vaguely relevant reason to use Rust, then you use Rust. If you&#39;re also like me, you want to try one of these async web servers the cool kids talk about on <a href=\"https://www.reddit.com/r/rust/\">/r/rust</a> like <a href=\"https://gotham.rs/\">gotham</a>. Let&#39;s do it.</p><p>First, install rust using <a href=\"https://www.rustup.rs/\">rustup</a>.</p><p><code>$ curl https://sh.rustup.rs -sSf | sh</code></p><p>When prompted, just hit enter</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n...\n  stable installed - rustc 1.24.1 (d3ae9a9e0 2018-02-27)\n...</pre></code>\n            <p>OK, Rust is installed. Now clone Gotham and build the hello_world example:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ git clone https://github.com/gotham-rs/gotham\n$ cd gotham/examples/hello_world\n$ cargo build</pre></code>\n            <p><b>Pro tip:</b> if cargo is not found, run <code>source $HOME/.cargo/env</code>. It will be automatic in future sessions.</p><p>As cargo does its magic, you can think to yourself about how it&#39;s a great package manager, how there really are a lot of dependencies and how OSS really is standing on the shoulders of giants of giants of giants of giants—eventually you&#39;ll have the example built.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">...\nCompiling gotham_examples_hello_world v0.0.0 (file:///home/pi/argo-tunnel/gotham/examples/hello_world)\n    Finished dev [unoptimized + debuginfo] target(s) in 502.83 secs\n    \n$ cd ../../target/debug\n$ ./gotham_examples_hello_world \nListening for requests at http://127.0.0.1:7878</pre></code>\n            <p>We have a rust web server listening on a local port. Let&#39;s connect the tunnel to that.</p><p><code>./cloudflared --hostname gotham.pacman.wiki http://127.0.0.1:7878</code></p><p>Type <b>gotham.pacman.wiki</b> into your web browser and you&#39;ll see those glorious words, &quot;Hello, world&quot;.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"wait-this-post-was-meant-to-be-more-than-hello-world\">Wait, this post was meant to be <i>more</i> than hello world.</h2>\n      <a href=\"#wait-this-post-was-meant-to-be-more-than-hello-world\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>OK, challenge accepted. Rust being fancy and modern is OK with Unicode. Let&#39;s serve some of that.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cd examples/hello_world/src/\n$ nano src/main.rs </pre></code>\n            <p>Replace the hello world string:</p><p><code>Some((String::from(&quot;Hello World!&quot;).into_bytes(), mime::TEXT_PLAIN)),</code></p><p>with some Unicode and a content-type hint so the browser know how to render it:</p><p><code>Some((String::from(&quot;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&#39;Content-Type&#39; content=&#39;text/html; charset=UTF-8&#39;&gt;&lt;/head&gt;&lt;body&gt;&lt;marquee&gt;Pᗣᗧ•••MᗣN&lt;/marquee&gt;&lt;/body&gt;&lt;/html&gt;&quot;).into_bytes(), mime::TEXT_HTML)),</code></p><p>Build and run</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cargo build\n...\n./gotham_examples_hello_world \nListening for requests at http://127.0.0.1:7878</pre></code>\n            <p><code>$ ./cloudflared --hostname gotham.pacman.wiki http://127.0.0.1:7878</code></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2O0v47vQuYvFKKPsCY134y/22c094cfb746e462c6433e6db493794d/pacman-2.gif\" alt=\"pacman\" class=\"kg-image\" width=\"2316\" height=\"450\" loading=\"lazy\"/>\n            \n            </figure><p>And now we have some unicode served from our Pi at home over the Internet by a highly asynchronous web server written in a fast, safe, high-level language. Cool.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"are-we-done\">Are we done?</h3>\n      <a href=\"#are-we-done\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We should probably auto start both the agent and the web server on boot so they don&#39;t die when we end our ssh session.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo ./cloudflared service install\nINFO[0000] Failed to copy user configuration. Before running the service, \nensure that /etc/cloudflared contains two files, cert.pem and config.yml  \nerror=&quot;open cert.pem: no such file or directory&quot;</pre></code>\n            <p>Nice error! OK, the product team have helpfully documented what to put in that file <a href=\"https://developers.cloudflare.com/argo-tunnel/reference/config/\">here</a></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo cp ~/.cloudflared/cert.pem /etc/cloudflared\n$ sudo nano /etc/cloudflared/config.yml</pre></code>\n            \n            <pre class=\"language-bash\"><code class=\"language-bash\">#config.yml\nhostname: gotham.pacman.wiki\nurl: http://127.0.0.1:7878</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"autostart-for-the-agent\">Autostart for the Agent</h4>\n      <a href=\"#autostart-for-the-agent\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo ./cloudflared service install\nINFO[0000] Using Systemd                                \nERRO[0000] systemctl: Created symlink from /etc/systemd/system/multi-user.target.wants/cloudflared.service to /etc/systemd/system/cloudflared.service.\nINFO[0000] systemctl daemon-reload       </pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"autostart-for-the-web-server\">Autostart for the Web Server</h4>\n      <a href=\"#autostart-for-the-web-server\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Copy the web server executable somewhere outside the gotham source tree so you can play around with the source code. I copied mine to <code>/home/pi/argo-tunnel/server/bin/</code></p><p><code>nano /etc/rc.local</code></p><p>Add line: <code>/home/pi/argo-tunnel/server/bin/gotham_examples_hello_world &amp;</code> just before <code>exit 0</code></p><p><code>sudo reboot</code></p><p>On restart, ssh back in again and check both the agent and server are running.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo ps -aux | grep tunnel\nroot       501  0.1  0.2  37636  1976 ?        Sl   06:30   0:00 /home/pi/argo-tunnel/server/bin/gotham_examples_hello_world\nroot       977 15.7  1.4 801292 13972 ?        Ssl  06:30   0:01 /home/pi/argo-tunnel/cloudflared --config /etc/cloudflared/config.yml --origincert /etc/cloudflared/cert.pem --no-autoupdate</pre></code>\n            <p>Profit.</p>",
		"id": "1fVcP30JWQOAu5llzgN6Yk",
		"localeList": {
			"name": "Cloudflare Argo Tunnel with Rust+Raspberry Pi Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-04-06T15:00:00.000+01:00",
		"slug": "cloudflare-argo-tunnel-with-rust-and-raspberry-pi",
		"tags": [
			{
				"id": "w4e8pkoz9c8xNDVhy9eNe",
				"name": "Rust",
				"slug": "rust"
			},
			{
				"id": "2yFKl3hLxFwbTWa5uOYASE",
				"name": "Argo Smart Routing",
				"slug": "argo"
			},
			{
				"id": "7tbXuFSpUU8XJXir8gtQ9T",
				"name": "Raspberry Pi",
				"slug": "raspberry-pi"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "2kFnzwwExTv3DVtV0CTReO",
				"name": "Cloudflare Tunnel",
				"slug": "cloudflare-tunnel"
			}
		],
		"title": "Cloudflare Argo Tunnel with Rust+Raspberry Pi",
		"updated_at": "2025-10-24T10:01:38.691Z",
		"url": "https://blog.cloudflare.com/cloudflare-argo-tunnel-with-rust-and-raspberry-pi"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}