{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Ivan Babrou",
				"slug": "ivan",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2PiutF6RYsPG4R5cGpKJgf/0fde0b6e5edc08cda56ea09f5062f7be/ivan.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Here at Cloudflare we use Prometheus to collect operational metrics. We run it on hundreds of servers and ingest millions of metrics per second to get insight into our network and provide the best possible service to our customers.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/53XiYfVmW5RNhmEbI6v3mf/3eb751478a9994826ff4df4e25d27b96/introducing-ebpf_exporter.jpeg",
		"featured": false,
		"html": "<p><i>This is an adapted transcript of a talk I gave at Promcon 2018. You can find slides with additional information on our Prometheus deployment and presenter notes </i><a href=\"https://docs.google.com/presentation/d/1420m05QANTxrCPvwsLZSHWRTvqOsxCVRzJsVp9awoFg/edit?usp=sharing\"><i>here</i></a><i>. There&#39;s also a </i><a href=\"https://www.youtube.com/watch?v=VvJx0WTiGcA&feature=youtu.be&t=1h15m40s\"><i>video</i></a><i>.</i></p><p><i>Tip: you can click on the image to see the original large version.</i></p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/18mND4203diqo8PdjA7mRW/3da65a7279fc7f0d8a172a7b59f9d7c1/1-1.jpeg.jpeg\" alt=\"1-1\" class=\"kg-image\" width=\"2000\" height=\"1125\" loading=\"lazy\"/>\n            \n            </figure><p>Here at Cloudflare we use <a href=\"https://prometheus.io/\">Prometheus</a> to collect operational metrics. We run it on hundreds of servers and ingest millions of metrics per second to get insight into our network and provide the best possible service to our customers.</p><p>Prometheus metric format is popular enough, it&#39;s now being standardized as <a href=\"https://openmetrics.io/\">OpenMetrics</a> under Cloud Native Computing Foundation. It&#39;s exciting to see convergence in long fragmented metrics landscape.</p><p>In this blog post we&#39;ll talk about how we measure low level metrics and share a tool that can help you to get similar understanding of your systems.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3T3BNATGvX6eNAUsUKkIPZ/284180e45e5a01a38ab1f0ba3724180d/2.jpg\" alt=\"2\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>There are two main exporters one can use to get some insight into a Linux system performance.</p><p>The first one is <a href=\"https://github.com/prometheus/node_exporter\">node_exporter</a> that gives you information about basics like CPU usage breakdown by type, memory usage, disk IO stats, filesystem and network usage.</p><p>The second one is <a href=\"https://github.com/google/cadvisor\">cAdvisor</a>, that gives similar metrics, but drills down to a container level. Instead of seeing total CPU usage you can see which containers (and systemd units are also containers for <code>cAdvisor</code>) use how much of global resources.</p><p>This is the absolute minimum of what you should know about your systems. If you don’t have these two, you should start there.</p><p>Let’s look at the graphs you can get out of this.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3mGAxXcMQepPR40GK4F89O/a0eed601cd7899c5cd6ca16691676d30/3.jpg\" alt=\"3\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>I should mention that every screenshot in this post is from a real production machine doing something useful. We have different generations of hardware, so don’t try to draw any conclusions.</p><p>Here you can see the basics you get from <code>node_exporter</code> for CPU and memory. You can see the utilization and how much slack resources you have.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4MqpWuek8lQlFfLsT6pft9/f13a1444f393e1d3836539c3bbe49f05/4.jpg\" alt=\"4\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Some more metrics from <code>node_exporter</code>, this time for disk IO. There are similar panels for network as well.</p><p>At the basic level you can do some correlation to explain why CPU went up if you see higher network and disk activity.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7eZyn1IguxbhJje2vUCnnr/5b6b77671ffdeb8baba4ee9b196e32ca/5.jpg\" alt=\"5\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>With <code>cAdvisor</code> this gets more interesting, since you can now see how global resources like CPU are sliced between services. If CPU or memory usage grows, you can pinpoint exact service that is responsible and you can also see how it affects other services.</p><p>If global CPU numbers do not change much, you can still see shifts between services.</p><p>All of this information comes from the simplest counters and first derivatives (rates) on them.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6MQ3kdmLlcoNM7cmHewIAK/ce9f27bc965f08b46409d84a8b6e1eb8/6.jpg\" alt=\"6\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Counters are great, but they lack detail about individual events. Let’s take disk io for example. We get device io time from <code>node_exporter</code> and the derivative of that cannot go beyond one second per one second of real time, which means we can draw a bold red line at 1s and see what kind of utilization we get from our disks.</p><p>We get one number that characterizes out workload, but that’s simply not enough to understand it. Are we doing many fast IO operations? Are we doing few slow ones? What kind of mix of slow vs fast do we get? How are writes and reads different?</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3YIVj2gffdTs2JG1SSFX3R/719fd6f86f9b25305f19769add917873/7.jpg\" alt=\"7\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>These questions beg for a histogram. What we have is a counter above, but what we want is a histogram below.</p><p>Keep in mind that Prometheus histograms are cumulative and <code>le</code> label counts all events lower than or equal to the value of the label.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1t0yc5ybRD1PQG0tjchlIA/73b00b5fc13ab7892c32fcc4ad0e605d/8.jpg\" alt=\"8\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Okay, so imagine we have that histogram. To visualize the difference you get between the two types of metrics here are two screenshots of the same event, which is an SSD replacement in production. We replaced a disk and this is how it affected the line and the histogram. In the new Grafana 5 you can plot histograms as heatmaps and it gives you a lot more detail than just one line.</p><p>The next slide has a bigger screenshot, on this slide you should just see the shift in detail.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3Zz5RAoWPkT1BrcHHuW01k/447effb0dbd21c298b3c590997778a84/9.jpg\" alt=\"9\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Here you can see buckets color coded and each timeslot has its own distribution in a tooltip. It can definitely get easier to understand with bar highlights and double Y axis, but it’s a big step forward from just one line nonetheless.</p><p>In addition to nice visualizations, you can also plot number of events above Xms and have alerts and SLOs on that. For example, you can alert if your read latency for block devices exceeds 10ms.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/45nmrTPwGnckajjF5H0aul/3fb2dee2217f4c4b10a79bc6723db492/10.jpg\" alt=\"10\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>And if you were looking closely at these histograms, you may have noticed values on the Y axis are kind of high. Before the replacement you can see values in 0.5s to 1.0s bucket.</p><p>Tech specs for the left disk give you 50 microsecond read/write latency and on the right you get a slight decrease to 36 microseconds. That’s not what we see on the histogram at all. Sometimes you can spot this with fio in testing, but production workloads may have patterns that are difficult to replicate and have very different characteristics. Histograms show how it is.</p><p>Even a few slow requests can hurt overall numbers if you&#39;re not careful with IO. We&#39;ve blogged <a href=\"/how-we-scaled-nginx-and-saved-the-world-54-years-every-day/\">how this affected our cache latency and how we worked around this</a> recently.</p><p>By now you should be convinced that histograms are clearly superior for events where you care about timings of individual events.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/18YOVcmR0ijgFssnU0OkjL/5db42ab73a2fbced8042aa3fb5ab4caa/11.jpg\" alt=\"11\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>And if you wanted to switch all your storage latency measurements to histograms, I have tough news for you: Linux kernel only provides counters for <code>node_exporter</code>.</p><p>You can try to mess with <code>blktrace</code> for this, but it doesn’t seem practical or efficient.</p><p>Let’s switch gears a little and see how summary stats from counters can be deceiving.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3CUg2pMqu8tqkMyAKZ7gcz/faad533c3b378a1b83b23fae6dc48065/12.gif\" alt=\"12\" class=\"kg-image\" width=\"1422\" height=\"540\" loading=\"lazy\"/>\n            \n            </figure><p>This is a <a href=\"https://www.autodeskresearch.com/publications/samestats\">research from Autodesk</a>. The creature on the left is called Datasaurus. Then there are target figures in the middle and animations on the right.</p><p>The amazing part is that shapes on the right and all intermediate animation frames for them have the same values for mean and standard deviation for both X and Y axis.</p><p>From summary statistic’s point of view every box on the right is same, but if you plot individual events, a very different picture emerges.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6CH5ajyCIJd50LBZcm3rbi/b66fcdace86472d4e19dd7a182c6f82b/13.gif\" alt=\"13\" class=\"kg-image\" width=\"1200\" height=\"254\" loading=\"lazy\"/>\n            \n            </figure>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/ZHKVCNSAcWE98AHBHyWiq/2f510c3ac23236bcb170576feafa88a2/14.gif\" alt=\"14\" class=\"kg-image\" width=\"1143\" height=\"379\" loading=\"lazy\"/>\n            \n            </figure><p>These animations are from the same research, here you can clearly see how box plots (mean + stddev) are non-representative of the raw events.</p><p>Histograms, on the contrary, give an accurate picture.</p><p>We established that histograms are what you want, but you need individual events to make those histograms. What are the requirements for a system that would handle this task, assuming that we want to measure things like io operations in the Linux kernel?</p><ul><li><p>It has to be low overhead, otherwise we can’t run it in production</p></li><li><p>It has to be universal, so we are not locked into just io tracing</p></li><li><p>It has to be supported out of the box, third party kernel modules and patches are not very practical</p></li><li><p>And finally it has to be safe, we don’t want to crash large chunk of the internet we&#39;re responsible for to get some metrics, even if they are interesting</p></li></ul>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7LXeOhEUMR6KeP1lBkP0vy/1ef1af93f93773f486b1fca187f05165/16.jpg\" alt=\"16\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>And it turns out, there’s a solution called eBPF. It’s a low overhead sandboxed user-defined bytecode running in the kernel. It can never crash, hang or interfere with the kernel negatively. That sounds kind of vague, but here are <a href=\"http://www.brendangregg.com/ebpf.html\">two</a> <a href=\"https://cilium.readthedocs.io/en/v1.1/bpf/\">links</a> that dive into the details explaining how this works.</p><p>The main part is that it’s already included with the Linux kernel. It’s used in networking subsystem and things like seccomp rules, but as a general “run safe code in the kernel” it has many uses beyond that.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/IJuUL6fQtULz0BDkn8G9q/002a9dd408b3709441004a34682fa3ba/17.jpg\" alt=\"17\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>We said it’s a bytecode and this is how it looks. The good part is that you never have to write this by hand.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6fsvOUVCsMd6akmeoJXxQM/645d06bfd40b00a1e36f63f3f47e035d/18.jpg\" alt=\"18\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>To use eBPF you write small C programs that attach to kernel functions and run before or after them. Your C code is then compiled into bytecode, verified and loaded into kernel to run with JIT compiler for translation into native opcodes. The constraints on the code are enforced by verifier and you are guaranteed to not be able to write an infinite loop or allocate tons of memory.</p><p>To share data with eBPF programs, you can use maps. In terms of metric collection, maps are updated by eBPF programs in the kernel and only accessed by userspace during scraping.</p><p>It is critical for performance that the eBPF VM runs in the kernel and does not cross userspace boundary.</p><p>You can see the workflow on the image above.</p><p>Having to write C is not an eBPF constraint, you can produce bytecode in any way you want. There are other alternatives like lua and ply, and sysdig is adding a backed to run via eBPF too. Maybe someday people will be writing <i>safe javacript</i> that runs in the kernel.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2sHoct70uBGUaPjVewdhbe/6e6caadf654056ff64fb32f4d4d69248/19.jpg\" alt=\"19\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Just like GCC compiles C code into machine code, BCC compiles C code into eBPF opcodes. BCC is a rewriter plus LLVM compiler and you can use it as a library in your code. There are bindings for C, C++, Python and Go.</p><p>In this example we have a simple function that runs after <code>d_lookup</code> kernel function that is responsible for directory cache lookups. It doesn’t look complicated and the basics should be understandable for people familiar with C-like languages.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1HWxAcgNhOgNZOHMHpfUnE/2bbf6966e5cd15a5d75a22a187cd535d/20.jpg\" alt=\"20\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>In addition to a compiler, BCC includes some tools that can be used for debugging production systems with low overhead eBPF provides.</p><p>Let’s quickly go over a few of them.</p><p>The one above is <code>biolatency</code>, which shows you a histogram of disk io operations. That’s exactly what we started with and it’s already available, just as a script instead of an exporter for Prometheus.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2zNgKf8E4AYTGH037ukLtv/5e519a923f5b6dbb3d011cd8f3ed4420/21.jpg\" alt=\"21\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Here’s <code>execsnoop</code>, that allows you to see which commands are being launched in the system. This is often useful if you want to catch quickly terminating programs that do not hang around long enough to be observed in ps output.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2YYpWFjqFQ7VfdIz7QnD63/f4a8a5955b95ea121a2b644f57bcee1e/22.jpg\" alt=\"22\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>There’s also <code>ext4slower</code> that instead of showing slow IO operations, shows slow ext4 filesystem operations. One might think these two map fairly closely, but one filesystem operation does not necessarily map to one disk IO operation:</p><ul><li><p>Writes can go into writeback cache and not touch the disk until later</p></li><li><p>Reads can involve multiple IOs to the physical device</p></li><li><p>Reads can also be blocked behind async writes</p></li></ul><p>The more you know about disk io, the more you want to run stateless, really. Sadly, RAM prices are not going down.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1aeArzz4a7mCh4YCzdFyLe/f7fbc1fcd278cd33367a3b69287df44d/23.jpg\" alt=\"23\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Okay, now to the main idea of this post. We have all these primitives, now we should be able to tie them all together and get an <a href=\"https://github.com/cloudflare/ebpf_exporter\">ebpf_exporter</a> on our hands to get metrics in Prometheus where they belong. Many BCC tools already have kernel side ready, reviewed and battle tested, so the hardest part is covered.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/xt1nT5FC3EUK1vwQrd81d/6dcc656a8629685a5e38e8947c85f6e5/24.jpg\" alt=\"24\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Let’s look at a simple example to get counters for timers fired in the kernel. This example is from the <code>ebpf_exporter</code> repo, where you can find a few more complex ones.</p><p>On the BCC code side we define a hash and attach to a tracepoint. When the tracepoint fires, we increment our hash where the key is the address of a function that fired the tracepoint.</p><p>On the exporter side we say that we want to take the hash and transform 8 byte keys with <code>ksym</code> decoder. Kernel keeps a map of function addresses to their names in <code>/proc/kallsyms</code> and we just use that. We also define that we want to attach our function to <code>timer:timer_start</code> tracepoint.</p><p>This is objectively quite verbose and perhaps some things can be inferred instead of being explicit.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/26VdDuQstj0hI5fnTpGyJV/e76c62c263fa228444ff5f596d7c155d/25.jpg\" alt=\"25\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>This is an example graph we can get out of this exporter config.</p><p>Why can this be useful? You may remember our <a href=\"/tracing-system-cpu-on-debian-stretch/\">blog post about our tracing of a weird bug during OS upgrade from Debian Jessie to Stretch</a>.</p><p>TL;DR is that systemd bug broke TCP segmentation offload on vlan interface, which increased CPU load 5x and introduced lots of interesting side effects up to memory allocation stalls. You do not want to see that allocating one page takes 12 seconds, but that&#39;s exactly what we were seeing.</p><p>If we had timer metrics enabled, we would have seen the clear change in metrics sooner.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1etzKv3o5BpyvcStqvPthZ/b84a5cf27397dbb82bbb98f861b971e8/27.jpg\" alt=\"27\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Another bundled example can give you IPC or instruction per cycle metrics for each CPU. On this production system we can see a few interesting things:</p><ul><li><p>Not all cores are equal, with two cores being outliers (green on the top is zero, yellow on the bottom is one)</p></li><li><p>Something happened that dropped IPC of what looks like half of cores</p></li><li><p>There’s some variation in daily load cycles that affects IPC</p></li></ul>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6KvhwqZATxvQzEmG4gL92j/1d6870183040fb7e23b280d1875f6fac/28.jpg\" alt=\"28\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Why can this be useful? Check out <a href=\"http://www.brendangregg.com/blog/2017-05-09/cpu-utilization-is-wrong.html\">Brendan Gregg’s somewhat controversial blog post about CPU utilization</a>.</p><p>TL;DR is that CPU% does not include memory stalls that do not perform any useful compute work. IPC helps to understand that factor better.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5Qr8BgK8JBbfpt0LaEjFHt/ecaaca96e411f8c32f0cd9bba3ec0dde/29.jpg\" alt=\"29\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Another bundled example is LLC or L3 CPU cache hit rate. This is from the same machine as IPC metrics and you can see some major affecting not just IPC, but also the hit rate.</p><p>Why can this be useful? You can see how your CPU cache is doing and you can see how it may be affected by bigger L3 cache or more cores sharing the same cache.</p><p>LLC hit rate usually goes hand in hand with IPC patterns as well.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/QoFIgsgz0EfXBDqdQdK5E/7f5b29176f3271b693e9bf95f9f4d84a/31.jpg\" alt=\"31\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Now to the fun part. We started with IO latency histograms and they are bundled with <code>ebpf_exporter</code> examples.</p><p>This is also a histogram, but now for run queue latency. When a process is woken up in the kernel, it’s ready to run. If CPU is idle, it can run immediately and scheduling delay is zero. If CPU is busy doing some other work, the process is put on a run queue and the CPU picks it up when it’s available. That delay between being ready to run and actually running is the scheduling delay and it affects latency for interactive applications.</p><p>In <code>cAdvisor</code> you have a counter with this delay, here you have a histogram of actual values of that delay.</p><p>Understanding of how you can be delayed is important for understanding the causes of externally visible latency. Check out <a href=\"http://www.brendangregg.com/blog/2017-03-16/perf-sched.html\">another blog post by Brendan Gregg</a> to see how you can further trace and understand scheduling delays with Linux perf tool. It&#39;s quite surprising how high delay can be on even an even lighty loaded machine.</p><p>It also helps to have a metrics that you can observe if you change any scheduling sysctls in the kernel. The law is that you can never trust internet or even your own judgement to change any sysctls. If you can’t measure the effects, you are lying to yourself.</p><p>There’s also <a href=\"https://www.scylladb.com/2016/06/10/read-latency-and-scylla-jmx-process/\">another great post from Scylla people</a> about their finds. We were able to apply their sysctls and observe results, which was quite satisfying.</p><p>Things like pinning processes to CPUs also affects scheduling, so this metric is invaluable for such experiments.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6HUpT97jGZskdDVvit0v9/618108b4c883b925232342200d99d88d/33.jpg\" alt=\"33\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>The examples we gave are not the only ones possible. In addition to IPC and LLC metrics there are around 500 hardware metrics you can get on a typical server.</p><p>There are around 2000 tracepoints with stable ABI you can use on many kernel subsystems.</p><p>And you can always trace any non-inlined kernel function with kprobes and kretprobes, but nobody guarantees binary compatibility between releases for those. Some are stable, others not so much.</p><p>We don’t have support for user statically defined tracepoints or uprobes, which means you cannot trace userspace applications. This is something we can reconsider in the future, but in the meantime you can always add metrics to your apps by regular means.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5gux5cEXorn2uWkSHRVJNU/a85579d75fe935fb68b322d1d7984cf4/34.jpg\" alt=\"34\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>This image shows tools that BCC provides, you can see it covers many aspects.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5BfGSsDTA2kyslIA1E6Nef/9b6092913c922a6427e86848a07c2491/35.jpg\" alt=\"35\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>Nothing in this life is free and even low overhead still means some overhead. You should measure this in your own environment, but this is <a href=\"https://github.com/cloudflare/ebpf_exporter/tree/master/benchmark\">what we’ve seen</a>.</p><p>For a fast <code>getpid()</code> syscall you get around 34% overhead if you count them by PID. 34% sounds like a lot, but it’s the simplest syscall and 100ns overhead is a cost of one memory reference.</p><p>For a complex case where we mix command name to copy some memory and mix in some randomness, the number jumps to 330ns or 105% overhead. We can still do 1.55M ops/s instead of 3.16M ops/s per logical core. If you measure something that doesn’t happen as often on each core, you’re probably not going to notice it as much.</p><p>We&#39;ve seen run queue latency histogram to add 300ms of system time on a machine with 40 logical cores and 250K scheduling events per second.</p><p>Your mileage may vary.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2hrJTvorfU26Ee1sLmPByS/0b468fc0f031055d0871fae1f13e7e68/36.jpg\" alt=\"36\" class=\"kg-image\" width=\"2500\" height=\"1406\" loading=\"lazy\"/>\n            \n            </figure><p>So where should you run the exporter then? The answer is anywhere you feel comfortable.</p><p>If you run simple programs, it doesn’t hurt to run anywhere. If you are concerned about overhead, you can do it only on canary instances and hope for results to be representative. We do exactly that, but instead of canary instances we have a luxury of having a couple of canary datacenters with live customers. They get updates after our offices do, so it’s not as bad as it sounds.</p><p>For some upgrade events you may want to enable more extensive metrics. An example would be a major distro or kernel upgrade.</p><p>The last thing we wanted to mention is that <code>ebpf_exporter</code> is open source and we encourage you to try it and maybe contribute interesting examples that may be useful to others.</p><p>GitHub: <a href=\"https://github.com/cloudflare/ebpf_exporter\">https://github.com/cloudflare/ebpf_exporter</a></p><p>Reading materials on eBPF:</p><ul><li><p><a href=\"https://iovisor.github.io/bcc/\">https://iovisor.github.io/bcc/</a></p></li><li><p><a href=\"https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\">https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md</a></p></li><li><p><a href=\"http://www.brendangregg.com/ebpf.html\">http://www.brendangregg.com/ebpf.html</a></p></li><li><p><a href=\"http://docs.cilium.io/en/latest/bpf/\">http://docs.cilium.io/en/latest/bpf/</a></p></li></ul><p><i>While this post was in drafts, we added another example for </i><a href=\"https://github.com/cloudflare/ebpf_exporter/pull/35\"><i>tracing port exhaustion issues</i></a><i> and that took under 10 minutes to write.</i></p>",
		"id": "4qKVSXkNajj8QJP6vnQdnc",
		"localeList": {
			"name": "Introducing ebpf_exporter Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-08-24T16:11:53.000+01:00",
		"slug": "introducing-ebpf_exporter",
		"tags": [
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "44lQSGkjHLg5W8THkxpMnh",
				"name": "eBPF",
				"slug": "ebpf"
			},
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			}
		],
		"title": "Introducing ebpf_exporter",
		"updated_at": "2025-10-03T18:34:08.698Z",
		"url": "https://blog.cloudflare.com/introducing-ebpf_exporter"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}