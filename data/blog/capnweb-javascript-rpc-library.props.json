{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "12",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Kenton Varda",
				"slug": "kenton-varda",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1FFs4T2j1RyvxasKOkkdtP/e7bd05ce89c560a545853000a25da9bc/kenton-varda.jpg",
				"location": null,
				"website": null,
				"twitter": "@kentonvarda",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Steve Faulkner",
				"slug": "steve-faulkner",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5QLe2KDuN7J0YVnb2gf743/2b6327152ff0e693cf3d142bbbefcd44/1517689834276.jpg",
				"location": "Chicago, IL",
				"publiclyIndex": true
			}
		],
		"excerpt": "Cap'n Web is a new open source, JavaScript-native RPC protocol for use in browsers and web servers. It provides the expressive power of Cap'n Proto, but with no schemas and no boilerplate.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5i59EQLnkQYe3oZrCzCk1y/43c20e671782e6ec9f878f786535bd15/BLOG-2954_1.png",
		"featured": false,
		"html": "<p>Allow us to introduce <a href=\"https://github.com/cloudflare/capnweb\"><u>Cap&#39;n Web</u></a>, an RPC protocol and implementation in pure TypeScript.</p><p>Cap&#39;n Web is a spiritual sibling to <a href=\"https://capnproto.org/\"><u>Cap&#39;n Proto</u></a>, an RPC protocol I (Kenton) created a decade ago, but designed to play nice in the web stack. That means:</p><ul><li><p>Like Cap&#39;n Proto, it is an object-capability protocol. (&quot;Cap&#39;n&quot; is short for &quot;capabilities and&quot;.) We&#39;ll get into this more below, but it&#39;s incredibly powerful.</p></li><li><p>Unlike Cap&#39;n Proto, Cap&#39;n Web has <i>no schemas</i>. In fact, it has almost no boilerplate whatsoever. This means it works more like the <a href=\"https://blog.cloudflare.com/javascript-native-rpc/\"><u>JavaScript-native RPC system in Cloudflare Workers</u></a>.</p></li><li><p>That said, it integrates nicely with TypeScript.</p></li><li><p>Also unlike Cap&#39;n Proto, Cap&#39;n Web&#39;s underlying serialization is human-readable. In fact, it&#39;s just JSON, with a little pre-/post-processing.</p></li><li><p>It works over HTTP, WebSocket, and postMessage() out-of-the-box, with the ability to extend it to other transports easily.</p></li><li><p>It works in all major browsers, Cloudflare Workers, Node.js, and other modern JavaScript runtimes.</p></li><li><p>The whole thing compresses (minify+gzip) to under 10 kB with no dependencies.</p></li><li><p><a href=\"https://github.com/cloudflare/capnweb\"><u>It&#39;s open source</u></a> under the MIT license.</p></li></ul><p>Cap&#39;n Web is more expressive than almost every other RPC system, because it implements an <b>object-capability RPC model</b>. That means it:</p><ul><li><p>Supports bidirectional calling. The client can call the server, and the server can also call the client.</p></li><li><p>Supports passing functions by reference: If you pass a function over RPC, the recipient receives a &quot;stub&quot;. When they call the stub, they actually make an RPC back to you, invoking the function where it was created. This is how bidirectional calling happens: the client passes a callback to the server, and then the server can call it later.</p></li><li><p>Similarly, supports passing objects by reference: If a class extends the special marker type <code>RpcTarget</code>, then instances of that class are passed by reference, with method calls calling back to the location where the object was created.</p></li><li><p>Supports promise pipelining. When you start an RPC, you get back a promise. Instead of awaiting it, you can immediately use the promise in dependent RPCs, thus performing a chain of calls in a single network round trip.</p></li><li><p>Supports capability-based security patterns.</p></li></ul><p>In short, Cap&#39;n Web lets you design RPC interfaces the way you&#39;d design regular JavaScript APIs – while still acknowledging and compensating for network latency.</p><p>The best part is, Cap&#39;n Web is absolutely trivial to set up.</p><p>A client looks like this:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { newWebSocketRpcSession } from &quot;capnweb&quot;;\n\n// One-line setup.\nlet api = newWebSocketRpcSession(&quot;wss://example.com/api&quot;);\n\n// Call a method on the server!\nlet result = await api.hello(&quot;World&quot;);\n\nconsole.log(result);\n</pre></code>\n            <p>And here&#39;s a complete Cloudflare Worker implementing an RPC server:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { RpcTarget, newWorkersRpcResponse } from &quot;capnweb&quot;;\n\n// This is the server implementation.\nclass MyApiServer extends RpcTarget {\n  hello(name) {\n    return `Hello, ${name}!`\n  }\n}\n\n// Standard Workers HTTP handler.\nexport default {\n  fetch(request, env, ctx) {\n    // Parse URL for routing.\n    let url = new URL(request.url);\n\n    // Serve API at `/api`.\n    if (url.pathname === &quot;/api&quot;) {\n      return newWorkersRpcResponse(request, new MyApiServer());\n    }\n\n    // You could serve other endpoints here...\n    return new Response(&quot;Not found&quot;, {status: 404});\n  }\n}\n</pre></code>\n            <p>That&#39;s it. That&#39;s the app.</p><ul><li><p>You can add more methods to <code>MyApiServer</code>, and call them from the client.</p></li><li><p>You can have the client pass a callback function to the server, and then the server can just call it.</p></li><li><p>You can define a TypeScript interface for your API, and easily apply it to the client and server.</p></li></ul><p>It just works.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"why-rpc-and-what-is-rpc-anyway\">Why RPC? (And what is RPC anyway?)</h3>\n      <a href=\"#why-rpc-and-what-is-rpc-anyway\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Remote Procedure Calls (RPC) are a way of expressing communications between two programs over a network. Without RPC, you might communicate using a protocol like HTTP. With HTTP, though, you must format and parse your communications as an HTTP request and response, perhaps designed in <a href=\"https://en.wikipedia.org/wiki/REST\"><u>REST</u></a> style. RPC systems try to make communications look like a regular function call instead, as if you were calling a library rather than a remote service. The RPC system provides a &quot;stub&quot; object on the client side which stands in for the real server-side object. When a method is called on the stub, the RPC system figures out how to serialize and transmit the parameters to the server, invoke the method on the server, and then transmit the return value back.</p><p>The merits of RPC have been subject to a great deal of debate. RPC is often accused of committing many of the <a href=\"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\"><u>fallacies of distributed computing</u></a>.</p><p>But this reputation is outdated. When RPC was first invented some 40 years ago, async programming barely existed. We did not have Promises, much less async and await. Early RPC was synchronous: calls would block the calling thread waiting for a reply. At best, latency made the program slow. At worst, network failures would hang or crash the program. No wonder it was deemed &quot;broken&quot;.</p><p>Things are different today. We have Promise and async and await, and we can throw exceptions on network failures. We even understand how RPCs can be pipelined so that a chain of calls takes only one network round trip. Many large distributed systems you likely use every day are built on RPC. It works.</p><p>The fact is, RPC fits the programming model we&#39;re used to. Every programmer is trained to think in terms of APIs composed of function calls, not in terms of byte stream protocols nor even REST. Using RPC frees you from the need to constantly translate between mental models, allowing you to move faster.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"when-should-you-use-capn-web\">When should you use Cap&#39;n Web?</h3>\n      <a href=\"#when-should-you-use-capn-web\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cap&#39;n Web is useful anywhere where you have two JavaScript applications speaking to each other over a network, including client-to-server and microservice-to-microservice scenarios. However, it is particularly well-suited to interactive web applications with real-time collaborative features, as well as modeling interactions over complex security boundaries.</p><p>Cap&#39;n Web is still new and experimental, so for now, a willingness to live on the cutting edge may also be required!</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"features-features-features\">Features, features, features…</h2>\n      <a href=\"#features-features-features\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Here&#39;s some more things you can do with Cap&#39;n Web.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"http-batch-mode\">HTTP batch mode</h3>\n      <a href=\"#http-batch-mode\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Sometimes a WebSocket connection is a bit too heavyweight. What if you just want to make a quick one-time batch of calls, but don&#39;t need an ongoing connection?</p><p>For that, Cap&#39;n Web supports HTTP batch mode:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { newHttpBatchRpcSession } from &quot;capnweb&quot;;\n\nlet batch = newHttpBatchRpcSession(&quot;https://example.com/api&quot;);\n\nlet result = await batch.hello(&quot;World&quot;);\n\nconsole.log(result);\n</pre></code>\n            <p><i>(The server is exactly the same as before.)</i></p><p>Note that once you&#39;ve awaited an RPC in the batch, the batch is done, and all the remote references received through it become broken. To make more calls, you need to start over with a new batch. However, you can make multiple calls in a single batch:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">let batch = newHttpBatchRpcSession(&quot;https://example.com/api&quot;);\n\n// We can call make multiple calls, as long as we await them all at once.\nlet promise1 = batch.hello(&quot;Alice&quot;);\nlet promise2 = batch.hello(&quot;Bob&quot;);\n\nlet [result1, result2] = await Promise.all([promise1, promise2]);\n\nconsole.log(result1);\nconsole.log(result2);\n</pre></code>\n            <p>And that brings us to another feature…</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"chained-calls-promise-pipelining\">Chained calls (Promise Pipelining)</h3>\n      <a href=\"#chained-calls-promise-pipelining\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Here&#39;s where things get magical.</p><p>In both batch mode and WebSocket mode, you can make a call that depends on the result of another call, without waiting for the first call to finish. In batch mode, that means you can, in a single batch, call a method, then use its result in another call. The entire batch still requires only one network round trip.</p><p>For example, say your API is:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">class MyApiServer extends RpcTarget {\n  getMyName() {\n    return &quot;Alice&quot;;\n  }\n\n  hello(name) {\n    return `Hello, ${name}!`\n  }\n}\n</pre></code>\n            <p>You can do:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">let namePromise = batch.getMyName();\nlet result = await batch.hello(namePromise);\n\nconsole.log(result);\n</pre></code>\n            <p>Notice the initial call to <code>getMyName()</code> returned a promise, but we used the promise itself as the input to <code>hello()</code>, without awaiting it first. With Cap&#39;n Web, this just works: The client sends a message to the server saying: &quot;Please insert the result of the first call into the parameters of the second.&quot;</p><p>Or perhaps the first call returns an object with methods. You can call the methods immediately, without awaiting the first promise, like:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">let batch = newHttpBatchRpcSession(&quot;https://example.com/api&quot;);\n\n// Authencitate the API key, returning a Session object.\nlet sessionPromise = batch.authenticate(apiKey);\n\n// Get the user&#039;s name.\nlet name = await sessionPromise.whoami();\n\nconsole.log(name);\n</pre></code>\n            <p>This works because the promise returned by a Cap&#39;n Web call is not a regular promise. Instead, it&#39;s a JavaScript Proxy object. Any methods you call on it are interpreted as speculative method calls on the eventual result. These calls are sent to the server immediately, telling the server: &quot;When you finish the call I sent earlier, call this method on what it returns.&quot;</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"did-you-spot-the-security\">Did you spot the security?</h3>\n      <a href=\"#did-you-spot-the-security\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>This last example shows an important security pattern enabled by Cap&#39;n Web&#39;s object-capability model.</p><p>When we call the authenticate() method, after it has verified the provided API key, it returns an authenticated session object. The client can then make further RPCs on the session object to perform operations that require authorization as that user. The server code might look like this:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">class MyApiServer extends RpcTarget {\n  authenticate(apiKey) {\n    let username = await checkApiKey(apiKey);\n    return new AuthenticatedSession(username);\n  }\n}\n\nclass AuthenticatedSession extends RpcTarget {\n  constructor(username) {\n    super();\n    this.username = username;\n  }\n\n  whoami() {\n    return this.username;\n  }\n\n  // ...other methods requiring auth...\n}\n</pre></code>\n            <p>Here&#39;s what makes this work: <b>It is impossible for the client to &quot;forge&quot; a session object. The only way to get one is to call authenticate(), and have it return successfully.</b></p><p>In most RPC systems, it is not possible for one RPC to return a stub pointing at a new RPC object in this way. Instead, all functions are top-level, and can be called by anyone. In such a traditional RPC system, it would be necessary to pass the API key again to every function call, and check it again on the server each time. Or, you&#39;d need to do authorization outside the RPC system entirely.</p><p>This is a common pain point for WebSockets in particular. Due to the design of the web APIs for WebSocket, you generally cannot use headers nor cookies to authorize them. Instead, authorization must happen in-band, by sending a message over the WebSocket itself. But this can be annoying for RPC protocols, as it means the authentication message is &quot;special&quot; and changes the state of the connection itself, affecting later calls. This breaks the abstraction.</p><p>The authenticate() pattern shown above neatly makes authentication fit naturally into the RPC abstraction. It&#39;s even type-safe: you can&#39;t possibly forget to authenticate before calling a method requiring auth, because you wouldn&#39;t have an object on which to make the call. Speaking of type-safety…</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"typescript\">TypeScript</h3>\n      <a href=\"#typescript\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you use TypeScript, Cap&#39;n Web plays nicely with it. You can declare your RPC API once as a TypeScript interface, implement in on the server, and call it on the client:</p>\n            <pre class=\"language-TypeScript\"><code class=\"language-TypeScript\">// Shared interface declaration:\ninterface MyApi {\n  hello(name: string): Promise&lt;string&gt;;\n}\n\n// On the client:\nlet api: RpcStub&lt;MyApi&gt; = newWebSocketRpcSession(&quot;wss://example.com/api&quot;);\n\n// On the server:\nclass MyApiServer extends RpcTarget implements MyApi {\n  hello(name) {\n    return `Hello, ${name}!`\n  }\n}\n</pre></code>\n            <p>Now you get end-to-end type checking, auto-completed method names, and so on.</p><p>Note that, as always with TypeScript, no type checks occur at runtime. The RPC system itself does not prevent a malicious client from calling an RPC with parameters of the wrong type. This is, of course, not a problem unique to Cap&#39;n Web – JSON-based APIs have always had this problem. You may wish to use a runtime type-checking system like Zod to solve this. (Meanwhile, we hope to add type checking based directly on TypeScript types in the future.)</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"an-alternative-to-graphql\">An alternative to GraphQL?</h2>\n      <a href=\"#an-alternative-to-graphql\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you’ve used GraphQL before, you might notice some similarities. One benefit of GraphQL was to solve the “waterfall” problem of traditional REST APIs by allowing clients to ask for multiple pieces of data in one query. For example, instead of making three sequential HTTP calls:</p>\n            <pre class=\"language-Rust\"><code class=\"language-Rust\">GET /user\nGET /user/friends\nGET /user/friends/photos</pre></code>\n            <p>…you can write one GraphQL query to fetch it all at once.</p><p>That’s a big improvement over REST, but GraphQL comes with its own tradeoffs:</p><ul><li><p><b>New language and tooling.</b> You have to adopt GraphQL’s schema language, servers, and client libraries. If your team is all-in on JavaScript, that’s a lot of extra machinery.</p></li><li><p><b>Limited composability.</b> GraphQL queries are declarative, which makes them great for fetching data, but awkward for chaining operations or mutations. For example, you can’t easily say: “create a user, then immediately use that new user object to make a friend request, all-in-one round trip.”</p></li><li><p><b>Different abstraction model.</b> GraphQL doesn’t look or feel like the JavaScript APIs you already know. You’re learning a new mental model rather than extending the one you use every day.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-capn-web-goes-further\">How Cap&#39;n Web goes further</h3>\n      <a href=\"#how-capn-web-goes-further\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cap&#39;n Web solves the waterfall problem <i>without</i> introducing a new language or ecosystem. It’s just JavaScript. Because Cap&#39;n Web supports promise pipelining and object references, you can write code that looks like this:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">let user = api.createUser({ name: &quot;Alice&quot; });\nlet friendRequest = await user.sendFriendRequest(&quot;Bob&quot;);</pre></code>\n            <p>What happens under the hood? Both calls are pipelined into a single network round trip:</p><ol><li><p>Create the user.</p></li><li><p>Take the result of that call (a new User object).</p></li><li><p>Immediately invoke sendFriendRequest() on that object.</p></li></ol><p>All of this is expressed naturally in JavaScript, with no schemas, query languages, or special tooling required. You just call methods and pass objects around, like you would in any other JavaScript code.</p><p>In other words, GraphQL gave us a way to flatten REST’s waterfalls. Cap&#39;n Web lets us go even further: it gives you the power to model complex interactions exactly the way you would in a normal program, with no impedance mismatch.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"but-how-do-we-solve-arrays\">But how do we solve arrays?</h3>\n      <a href=\"#but-how-do-we-solve-arrays\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With everything we&#39;ve presented so far, there&#39;s a critical missing piece to seriously consider Cap&#39;n Web as an alternative to GraphQL: handling lists. Often, GraphQL is used to say: &quot;Perform this query, and then, for every result, perform this other query.&quot; For example: &quot;List the user&#39;s friends, and then for each one, fetch their profile photo.&quot;</p><p>In short, we need an <code>array.map()</code> operation that can be performed without adding a round trip.</p><p>Cap&#39;n Proto, historically, has never supported such a thing.</p><p>But with Cap&#39;n Web, we&#39;ve solved it. You can do:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">let user = api.authenticate(token);\n\n// Get the user&#039;s list of friends (an array).\nlet friendsPromise = user.listFriends();\n\n// Do a .map() to annotate each friend record with their photo.\n// This operates on the *promise* for the friends list, so does not\n// add a round trip.\n// (wait WHAT!?!?)\nlet friendsWithPhotos = friendsPromise.map(friend =&gt; {\n  return {friend, photo: api.getUserPhoto(friend.id))};\n}\n\n// Await the friends list with attached photos -- one round trip!\nlet results = await friendsWithPhotos;\n</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"wait-how\">Wait… How!?</h3>\n      <a href=\"#wait-how\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><code>.map()</code> takes a callback function, which needs to be applied to each element in the array. As we described earlier, <i>normally</i> when you pass a function to an RPC, the function is passed &quot;by reference&quot;, meaning that the remote side receives a stub, where calling that stub makes an RPC back to the client where the function was created.</p><p>But that is NOT what is happening here. That would defeat the purpose: we don&#39;t want the server to have to round-trip to the client to process every member of the array. We want the server to just apply the transformation server-side.</p><p>To that end, <code>.map() </code>is special. It does not send JavaScript code to the server, but it does send something like &quot;code&quot;, restricted to a domain-specific, non-Turing-complete language. The &quot;code&quot; is a list of instructions that the server should carry out for each member of the array. In this case, the instructions are:</p><ol><li><p>Invoke <code>api.getUserPhoto(friend.id)</code>.</p></li><li><p>Return an object <code>{friend, photo}</code>, where friend is the original array element and photo is the result of step 1.</p></li></ol><p>But the application code just specified a JavaScript method. How on Earth could we convert this into the narrow DSL?</p><p>The answer is record-replay: On the client side, we execute the callback once, passing in a special placeholder value. The parameter behaves like an RPC promise. However, the callback is required to be synchronous, so it cannot actually await this promise. The only thing it can do is use promise pipelining to make pipelined calls. These calls are intercepted by the implementation and recorded as instructions, which can then be sent to the server, where they can be replayed as needed.</p><p>And because the recording is based on promise pipelining, which is what the RPC protocol itself is designed to represent, it turns out that the &quot;DSL&quot; used to represent &quot;instructions&quot; for the map function is <i>just the RPC protocol itself</i>. 🤯</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"implementation-details\">Implementation details</h2>\n      <a href=\"#implementation-details\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n    <div class=\"flex anchor relative\">\n      <h3 id=\"json-based-serialization\">JSON-based serialization</h3>\n      <a href=\"#json-based-serialization\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cap&#39;n Web&#39;s underlying protocol is based on JSON – but with a preprocessing step to handle special types. Arrays are treated as &quot;escape sequences&quot; that let us encode other values. For example, JSON does not have an encoding for <code>Date</code> objects, but Cap&#39;n Web does. You might see a message that looks like this:</p>\n            <pre class=\"language-JSON\"><code class=\"language-JSON\">{\n  event: &quot;Birthday Week&quot;,\n  timestamp: [&quot;date&quot;, 1758499200000]\n}\n</pre></code>\n            <p>To encode a literal array, we simply double-wrap it in <code>[]</code>:</p>\n            <pre class=\"language-JSON\"><code class=\"language-JSON\">{\n  names: [[&quot;Alice&quot;, &quot;Bob&quot;, &quot;Carol&quot;]]\n}\n</pre></code>\n            <p>In other words, an array with just one element which is itself an array, evaluates to the inner array literally. An array whose first element is a type name, evaluates to an instance of that type, where the remaining elements are parameters to the type.</p><p>Note that only a fixed set of types are supported: essentially, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\"><u>&quot;structured clonable&quot; types</u></a>, and RPC stub types.</p><p>On top of this basic encoding, we define an RPC protocol inspired by Cap&#39;n Proto – but greatly simplified.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"rpc-protocol\">RPC protocol</h3>\n      <a href=\"#rpc-protocol\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Since Cap&#39;n Web is a symmetric protocol, there is no well-defined &quot;client&quot; or &quot;server&quot; at the protocol level. There are just two parties exchanging messages across a connection. Every kind of interaction can happen in either direction.</p><p>In order to make it easier to describe these interactions, I will refer to the two parties as &quot;Alice&quot; and &quot;Bob&quot;.</p><p>Alice and Bob start the connection by establishing some sort of bidirectional message stream. This may be a WebSocket, but Cap&#39;n Web also allows applications to define their own transports. Each message in the stream is JSON-encoded, as described earlier.</p><p>Alice and Bob each maintain some state about the connection. In particular, each maintains an &quot;export table&quot;, describing all the pass-by-reference objects they have exposed to the other side, and an &quot;import table&quot;, describing the references they have received. Alice&#39;s exports correspond to Bob&#39;s imports, and vice versa. Each entry in the export table has a signed integer ID, which is used to reference it. You can think of these IDs like file descriptors in a POSIX system. Unlike file descriptors, though, IDs can be negative, and an ID is never reused over the lifetime of a connection.</p><p>At the start of the connection, Alice and Bob each populate their export tables with a single entry, numbered zero, representing their &quot;main&quot; interfaces. Typically, when one side is acting as the &quot;server&quot;, they will export their main public RPC interface as ID zero, whereas the &quot;client&quot; will export an empty interface. However, this is up to the application: either side can export whatever they want.</p><p>From there, new exports are added in two ways:</p><ul><li><p>When Alice sends a message to Bob that contains within it an object or function reference, Alice adds the target object to her export table. IDs assigned in this case are always negative, starting from -1 and counting downwards.</p></li><li><p>Alice can send a &quot;push&quot; message to Bob to request that Bob add a value to his export table. The &quot;push&quot; message contains an expression which Bob evaluates, exporting the result. Usually, the expression describes a method call on one of Bob&#39;s existing exports – this is how an RPC is made. Each &quot;push&quot; is assigned a positive ID on the export table, starting from 1 and counting upwards. Since positive IDs are only assigned as a result of pushes, Alice can predict the ID of each push she makes, and can immediately use that ID in subsequent messages. This is how promise pipelining is achieved.</p></li></ul><p>After sending a push message, Alice can subsequently send a &quot;pull&quot; message, which tells Bob that once he is done evaluating the &quot;push&quot;, he should proactively serialize the result and send it back to Alice, as a &quot;resolve&quot; (or &quot;reject&quot;) message. However, this is optional: Alice may not actually care to receive the return value of an RPC, if Alice only wants to use it in promise pipelining. In fact, the Cap&#39;n Web implementation will only send a &quot;pull&quot; message if the application has actually awaited the returned promise.</p><p>Putting it together, a code sequence like this:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">let namePromise = api.getMyName();\nlet result = await api.hello(namePromise);\n\nconsole.log(result);</pre></code>\n            <p>Might produce a message exchange like this:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Call api.getByName(). `api` is the server&#039;s main export, so has export ID 0.\n-&gt; [&quot;push&quot;, [&quot;pipeline&quot;, 0, &quot;getMyName&quot;, []]\n// Call api.hello(namePromise). `namePromise` refers to the result of the first push,\n// so has ID 1.\n-&gt; [&quot;push&quot;, [&quot;pipeline&quot;, 0, &quot;hello&quot;, [[&quot;pipeline&quot;, 1]]]]\n// Ask that the result of the second push be proactively serialized and returned.\n-&gt; [&quot;pull&quot;, 2]\n// Server responds.\n&lt;- [&quot;resolve&quot;, 2, &quot;Hello, Alice!&quot;]</pre></code>\n            <p>For more details about the protocol, <a href=\"https://github.com/cloudflare/capnweb/blob/main/protocol.md\"><u>check out the docs</u></a>.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"try-it-out\">Try it out!</h2>\n      <a href=\"#try-it-out\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cap&#39;n Web is new and still highly experimental. There may be bugs to shake out. But, we&#39;re already using it today. Cap&#39;n Web is the basis of <a href=\"https://developers.cloudflare.com/changelog/2025-09-16-remote-bindings-ga/\"><u>the recently-launched &quot;remote bindings&quot; feature in Wrangler</u></a>, allowing a local test instance of workerd to speak RPC to services in production. We&#39;ve also begun to experiment with it in various frontend applications – expect more blog posts on this in the future.</p><p>In any case, Cap&#39;n Web is open source, and you can start using it in your own projects now.</p><p><a href=\"https://github.com/cloudflare/capnweb\"><u>Check it out on GitHub.</u></a></p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/53YF87AtEsYhHMN3PV23UV/8e9a938099c71e6f274e95292b16b382/BLOG-2954_2.png\" alt=\"BLOG-2954 2\" class=\"kg-image\" width=\"1200\" height=\"446\" loading=\"lazy\"/>\n          </figure><p>\n</p>",
		"id": "4Du5F6RJFvwqqEbMMuuxTi",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Cap'n Web is a new open source, JavaScript-native RPC protocol for use in browsers and web servers. It provides the expressive power of Cap'n Proto, but with no schemas and no boilerplate.\n",
		"metadata": {
			"title": "Cap'n Web: A new RPC system for browsers and web servers",
			"description": "Cap'n Web is a new open source, JavaScript-native RPC protocol for use in browsers and web servers. It provides the expressive power of Cap'n Proto, but with no schemas and no boilerplate.\n",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/26HRSc4ldW98MKG1lBnGRy/635c3ab7a59a949d930443d1b28b4dd2/BLOG-2954_OG.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2025-09-22T14:00+01:00",
		"slug": "capnweb-javascript-rpc-library",
		"tags": [
			{
				"id": "1Cv5JjXzKWKEA10JdYbXu1",
				"name": "Birthday Week",
				"slug": "birthday-week"
			},
			{
				"id": "3txfsA7N73yBL9g3VPBLL0",
				"name": "Open Source",
				"slug": "open-source"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			}
		],
		"title": "Cap'n Web: a new RPC system for browsers and web servers",
		"updated_at": "2025-09-22T16:16:38.551Z",
		"url": "https://blog.cloudflare.com/capnweb-javascript-rpc-library"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}