{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "8",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Ping developers clearly put some thought into that. I wondered how far they went. Did they handle clock changes in both directions? Are the bad measurements excluded from the final statistics? How do they test the software?",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3F4ofeCPsXkutZ2rltYkOA/5b9c7325ae7ee2c5f13209499ebbe53a/the-day-my-ping-took-countermeasures.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/54VFTzFRRuTnCohpxnbJXx/72a29d0a708199a1d430fdbb03acddc5/unnamed-1.png\" alt=\"The day my ping took countermeasures\" class=\"kg-image\" width=\"1600\" height=\"900\" loading=\"lazy\"/>\n            \n            </figure>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3n0xGuyOEFmzVNvoE2XTh0/d14bafdc7ac93fbc0bb1f9d3d790240e/Screenshot-2023-07-11-at-13.30.23.png\" alt=\"\" class=\"kg-image\" width=\"1620\" height=\"802\" loading=\"lazy\"/>\n            \n            </figure><p>Once my holidays had passed, I found myself reluctantly reemerging into the world of the living. I powered on a corporate laptop, scared to check on my email inbox. However, before turning on the browser, obviously, I had to run a ping. Debugging the network is a mandatory first step after a boot, right? As expected, the network was perfectly healthy but what caught me off guard was this message:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5bipMZ0BFtWHz9fK7eNo3Q/13a2d4930b304d293727af404c798c8e/image6.png\" alt=\"\" class=\"kg-image\" width=\"1548\" height=\"449\" loading=\"lazy\"/>\n            \n            </figure><p>I was not expecting <b>ping</b> to <b>take countermeasures</b> that early on in a day. Gosh, I wasn&#39;t expecting any countermeasures that Monday!</p><p>Once I got over the initial confusion, I took a deep breath and collected my thoughts. You don&#39;t have to be Sherlock Holmes to figure out what has happened. I&#39;m really fast - I started <b>ping</b> <i>before</i> the system <b>NTP</b> daemon synchronized the time. In my case, the computer clock was rolled backward, confusing ping.</p><p>While this doesn&#39;t happen too often, a computer clock can be freely adjusted either forward or backward. However, it&#39;s pretty rare for a regular network utility, like ping, to try to manage a situation like this. It&#39;s even less common to call it &quot;taking countermeasures&quot;. I would totally expect ping to just print a nonsensical time value and move on without hesitation.</p><p>Ping developers clearly put some thought into that. I wondered how far they went. Did they handle clock changes in both directions? Are the bad measurements excluded from the final statistics? How do they test the software?</p><p>I can&#39;t just walk past ping &quot;taking countermeasures&quot; on me. Now I have to understand what ping did and why.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"understanding-ping\">Understanding ping</h3>\n      <a href=\"#understanding-ping\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>An investigation like this starts with a quick glance at the source code:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"> *\t\t\tP I N G . C\n *\n * Using the InterNet Control Message Protocol (ICMP) &quot;ECHO&quot; facility,\n * measure round-trip-delays and packet loss across network paths.\n *\n * Author -\n *\tMike Muuss\n *\tU. S. Army Ballistic Research Laboratory\n *\tDecember, 1983</pre></code>\n            <p><b>Ping</b> goes back a long way. It was originally written by <a href=\"https://en.wikipedia.org/wiki/Mike_Muuss\">Mike Muuss</a> while at the U. S. Army Ballistic Research Laboratory, in 1983, before I was born. The code we&#39;re looking for is under <a href=\"https://github.com/iputils/iputils/blob/ee0a515e74b8d39fbe9b68f3309f0cb2586ccdd4/ping/ping_common.c#L746\">iputils/ping/ping_common.c</a> gather_statistics() function:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2FJGGtP0ecs0zhiBKsyfxx/224080cf97fc53fa3fb83c59a86e43c9/image5.png\" alt=\"\" class=\"kg-image\" width=\"1175\" height=\"253\" loading=\"lazy\"/>\n            \n            </figure><p>The code is straightforward: the message in question is printed when the measured <a href=\"https://www.cloudflare.com/learning/cdn/glossary/round-trip-time-rtt/\">RTT</a> is negative. In this case ping resets the latency measurement to zero. Here you are: &quot;taking countermeasures&quot; is nothing more than just marking an erroneous measurement as if it was 0ms.</p><p>But what precisely does ping measure? Is it the wall clock? The <a href=\"https://man7.org/linux/man-pages/man8/ping.8.html\">man page</a> comes to the rescue. Ping has two modes.</p><p>The &quot;old&quot;, -U mode, in which it uses the wall clock. This mode is less accurate (has more jitter). It calls <b>gettimeofday</b> before sending and after receiving the packet.</p><p>The &quot;new&quot;, default, mode in which it uses &quot;network time&quot;. It calls <b>gettimeofday</b> before sending, and gets the receive timestamp from a more accurate SO_TIMESTAMP CMSG. More on this later.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"tracing-gettimeofday-is-hard\">Tracing gettimeofday is hard</h3>\n      <a href=\"#tracing-gettimeofday-is-hard\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let&#39;s start with a good old strace:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ strace -e trace=gettimeofday,time,clock_gettime -f ping -n -c1 1.1 &gt;/dev/null\n... nil ...</pre></code>\n            <p>It doesn&#39;t show any calls to <b>gettimeofday</b>. What is going on?</p><p>On modern Linux some syscalls are not true syscalls. Instead of jumping to the kernel space, which is slow, they remain in userspace and go to a special code page provided by the host kernel. This code page is called <b>vdso</b>. It&#39;s visible as a <b>.so</b> library to the program:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ldd `which ping` | grep vds\n    linux-vdso.so.1 (0x00007ffff47f9000)</pre></code>\n            <p>Calls to the <b>vdso</b> region are not syscalls, they remain in userspace and are super fast, but classic strace can&#39;t see them. For debugging it would be nice to turn off <b>vdso</b> and fall back to classic slow syscalls. It&#39;s easier said than done.</p><p>There is no way to prevent loading of the <b>vdso</b>. However there are two ways to convince a loaded program not to use it.</p><p>The first technique is about fooling glibc into thinking the <b>vdso</b> is not loaded. This case must be handled for compatibility with ancient Linux. When bootstrapping in a freshly run process, glibc inspects the <a href=\"https://www.gnu.org/software/libc/manual/html_node/Auxiliary-Vector.html\">Auxiliary Vector</a> provided by ELF loader. One of the parameters has the location of the <b>vdso</b> pointer, <a href=\"https://man7.org/linux/man-pages/man7/vdso.7.html\">the man page</a> gives this example:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">void *vdso = (uintptr_t) getauxval(AT_SYSINFO_EHDR);</pre></code>\n            <p>A technique proposed on <a href=\"https://stackoverflow.com/a/63811017\">Stack Overflow</a> works like that: let&#39;s hook on a program before <b>execve</b>() exits and overwrite the Auxiliary Vector AT_SYSINFO_EHDR parameter. Here&#39;s the <a href=\"https://github.com/danteu/novdso/blob/master/novdso.c\">novdso.c</a> code. However, the linked code doesn&#39;t quite work for me (one too many <b>kill(SIGSTOP)</b>), and has one bigger, fundamental flaw. To hook on <b>execve()</b> it uses <b>ptrace()</b> therefore doesn&#39;t work under our strace!</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ strace -f ./novdso ping 1.1 -c1 -n\n...\n[pid 69316] ptrace(PTRACE_TRACEME)  \t= -1 EPERM (Operation not permitted)</pre></code>\n            <p>While this technique of rewriting AT_SYSINFO_EHDR is pretty cool, it won&#39;t work for us. (I wonder if there is another way of doing that, but without ptrace. Maybe with some BPF? But that is another story.)</p><p>A second technique is to use <b>LD_PRELOAD</b> and preload a trivial library overloading the functions in question, and forcing them to go to slow real syscalls. This works fine:</p>\n            <pre class=\"language-c++\"><code class=\"language-c++\">$ cat vdso_override.c\n#include &lt;sys/syscall.h&gt;\n#include &lt;sys/time.h&gt;\n#include &lt;time.h&gt;\n#include &lt;unistd.h&gt;\n\nint gettimeofday(struct timeval *restrict tv, void *restrict tz) {\n\treturn syscall(__NR_gettimeofday, (long)tv, (long)tz, 0, 0, 0, 0);\n}\n\ntime_t time(time_t *tloc) {\n\treturn syscall(__NR_time, (long)tloc, 0, 0, 0, 0, 0);\n}\n\nint clock_gettime(clockid_t clockid, struct timespec *tp) {\n    return syscall(__NR_clock_gettime, (long)clockid, (long)tp, 0, 0, 0, 0);\n}</pre></code>\n            <p>To load it:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ gcc -Wall -Wextra -fpic -shared -o vdso_override.so vdso_override.c\n\n$ LD_PRELOAD=./vdso_override.so \\\n       strace -e trace=gettimeofday,clock_gettime,time \\\n       date\n\nclock_gettime(CLOCK_REALTIME, {tv_sec=1688656245 ...}) = 0\nThu Jul  6 05:10:45 PM CEST 2023\n+++ exited with 0 +++</pre></code>\n            <p>Hurray! We can see the <b>clock_gettime</b> call in <b>strace</b> output. Surely we&#39;ll also see <b>gettimeofday</b> from our <b>ping</b>, right?</p><p>Not so fast, it still doesn&#39;t quite work:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ LD_PRELOAD=./vdso_override.so \\\n     strace -c -e trace=gettimeofday,time,clock_gettime -f \\\n     ping -n -c1 1.1 &gt;/dev/null\n... nil ...</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"to-suid-or-not-to-suid\">To suid or not to suid</h3>\n      <a href=\"#to-suid-or-not-to-suid\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>I forgot that <b>ping</b> might need special permissions to read and write raw packets. Historically it had a <b>suid</b> bit set, which granted the program elevated user identity. However LD_PRELOAD doesn&#39;t work with suid. When a program is being loaded a <a href=\"https://github.com/bminor/musl/blob/718f363bc2067b6487900eddc9180c84e7739f80/ldso/dynlink.c#L1820\">dynamic linker checks if it has <b>suid</b> bit</a>, and if so, it ignores LD_PRELOAD and LD_LIBRARY_PATH settings.</p><p>However, does <b>ping</b> need suid? Nowadays it&#39;s totally possible to send and receive ICMP Echo messages without any extra privileges, like this:</p>\n            <pre class=\"language-py\"><code class=\"language-py\">from socket import *\nimport struct\n\nsd = socket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP)\nsd.connect((&#039;1.1&#039;, 0))\n\nsd.send(struct.pack(&quot;!BBHHH10s&quot;, 8, 0, 0, 0, 1234, b&#039;payload&#039;))\ndata = sd.recv(1024)\nprint(&#039;type=%d code=%d csum=0x%x id=%d seq=%d payload=%s&#039; % struct.unpack_from(&quot;!BBHHH10s&quot;, data))</pre></code>\n            <p>Now you know how to write &quot;ping&quot; in eight lines of Python. This Linux API is known as <b>ping socket</b>. It generally works on modern Linux, however it requires a correct sysctl, which is typically enabled:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sysctl net.ipv4.ping_group_range\nnet.ipv4.ping_group_range = 0    2147483647</pre></code>\n            <p>The <b>ping socket</b> is not as mature as UDP or TCP sockets. The &quot;ICMP ID&quot; field is used to dispatch an ICMP Echo Response to an appropriate socket, but when using <b>bind()</b> this property is settable by the user without any checks. A malicious user can deliberately cause an &quot;ICMP ID&quot; conflict.</p><p>But we&#39;re not here to discuss Linux networking API&#39;s. We&#39;re here to discuss the <b>ping</b> utility and indeed, it&#39;s using the <b>ping sockets</b>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ strace -e trace=socket -f ping 1.1 -nUc 1\nsocket(AF_INET, SOCK_DGRAM, IPPROTO_ICMP) = 3\nsocket(AF_INET6, SOCK_DGRAM, IPPROTO_ICMPV6) = 4</pre></code>\n            <p>Ping sockets are rootless, and <b>ping</b>, at least on my laptop, is not a suid program:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ls -lah `which ping`\n-rwxr-xr-x 1 root root 75K Feb  5  2022 /usr/bin/ping</pre></code>\n            <p>So why doesn&#39;t the LD_PRELOAD? It turns out <b>ping</b> binary holds a CAP_NET_RAW capability. Similarly to suid, this is preventing the library preloading machinery from working:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ getcap `which ping`\n/usr/bin/ping cap_net_raw=ep</pre></code>\n            <p>I think this capability is enabled only to handle the case of a misconfigured <b>net.ipv4.ping_group_range</b> sysctl. For me ping works perfectly fine without this capability.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"rootless-is-perfectly-fine\">Rootless is perfectly fine</h3>\n      <a href=\"#rootless-is-perfectly-fine\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let&#39;s remove the CAP_NET_RAW and try out LD_PRELOAD hack again:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ cp `which ping` .\n\n$ LD_PRELOAD=./vdso_override.so strace -f ./ping -n -c1 1.1\n...\nsetsockopt(3, SOL_SOCKET, SO_TIMESTAMP_OLD, [1], 4) = 0\ngettimeofday({tv_sec= ... ) = 0\nsendto(3, ...)\nsetitimer(ITIMER_REAL, {it_value={tv_sec=10}}, NULL) = 0\nrecvmsg(3, { ... cmsg_level=SOL_SOCKET, \n                 cmsg_type=SO_TIMESTAMP_OLD, \n                 cmsg_data={tv_sec=...}}, )</pre></code>\n            <p>We finally made it! Without -U, in the &quot;network timestamp&quot; mode, <b>ping</b>:</p><ul><li><p>Sets SO_TIMESTAMP flag on a socket.</p></li><li><p>Calls <b>gettimeofday</b> before sending the packet.</p></li><li><p>When fetching a packet, gets the timestamp from the <b>CMSG</b>.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"fault-injection-fooling-ping\">Fault injection - fooling ping</h3>\n      <a href=\"#fault-injection-fooling-ping\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With <b>strace</b> up and running we can finally do something interesting. You see, <b>strace</b> has a little known fault injection feature, named <a href=\"https://man7.org/linux/man-pages/man1/strace.1.html\">&quot;tampering&quot; in the manual</a>:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6EpzqSkXe9BCttqJajgXpi/79d3f4051066ab7e8fa88795c2c33e58/image3.png\" alt=\"\" class=\"kg-image\" width=\"1305\" height=\"391\" loading=\"lazy\"/>\n            \n            </figure><p>With a couple of command line parameters we can overwrite the result of the <b>gettimeofday</b> call. I want to set it forward to confuse ping into thinking the SO_TIMESTAMP time is in the past:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">LD_PRELOAD=./vdso_override.so \\\n    strace -o /dev/null -e trace=gettimeofday \\\n            -e inject=gettimeofday:poke_exit=@arg1=ff:when=1 -f \\\n    ./ping -c 1 -n 1.1.1.1\n\nPING 1.1.1.1 (1.1.1.1) 56(84) bytes of data.\n./ping: Warning: time of day goes back (-59995290us), taking countermeasures\n./ping: Warning: time of day goes back (-59995104us), taking countermeasures\n64 bytes from 1.1.1.1: icmp_seq=1 ttl=60 time=0.000 ms\n\n--- 1.1.1.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.000/0.000/0.000/0.000 ms</pre></code>\n            <p>It worked! We can now generate the &quot;taking countermeasures&quot; message reliably!</p><p>While we can cheat on the <b>gettimeofday</b> result, with <b>strace</b> it&#39;s impossible to overwrite the CMSG timestamp. Perhaps it might be possible to adjust the CMSG timestamp with Linux <a href=\"https://man7.org/linux/man-pages/man7/time_namespaces.7.html\">time namespaces</a>, but I don&#39;t think it&#39;ll work. As far as I understand, time namespaces are not taken into account by the network stack. A program using SO_TIMESTAMP is deemed to compare it against the system clock, which might be rolled backwards.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"fool-me-once-fool-me-twice\">Fool me once, fool me twice</h3>\n      <a href=\"#fool-me-once-fool-me-twice\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>At this point we could conclude our investigation. We&#39;re now able to reliably trigger the &quot;taking countermeasures&quot; message using strace fault injection.</p><p>There is one more thing though. When sending ICMP Echo Request messages, does <b>ping</b> <b>remember</b> the send timestamp in some kind of hash table? That might be wasteful considering a long-running ping sending thousands of packets.</p><p>Ping is smart, and instead puts the timestamp in the ICMP Echo Request <b>packet payload</b>!</p><p>Here&#39;s how the full algorithm works:</p><ol><li><p>Ping sets the SO_TIMESTAMP_OLD socket option to receive timestamps.</p></li><li><p>It looks at the wall clock with <b>gettimeofday</b>.</p></li><li><p>It puts the current timestamp in the first bytes of the ICMP payload.</p></li><li><p>After receiving the ICMP Echo Reply packet, it inspects the two timestamps: the send timestamp from the payload and the receive timestamp from CMSG.</p></li><li><p>It calculates the RTT delta.</p></li></ol><p>This is pretty neat! With this algorithm, ping doesn&#39;t need to remember much, and can have an unlimited number of packets in flight! (For completeness, ping maintains a small fixed-size bitmap to account for the DUP! packets).</p><p>What if we set a packet length to be less than 16 bytes? Let&#39;s see:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ping 1.1 -c2 -s0\nPING 1.1 (1.0.0.1) 0(28) bytes of data.\n8 bytes from 1.0.0.1: icmp_seq=1 ttl=60\n8 bytes from 1.0.0.1: icmp_seq=2 ttl=60\n--- 1.1 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1002ms</pre></code>\n            <p>In such a case ping just skips the RTT from the output. Smart!</p><p>Right... this opens two completely new subjects. While ping was written back when everyone was friendly, today’s Internet can have rogue actors. What if we spoofed responses to confuse ping. Can we: cut the payload to prevent ping from producing RTT, and spoof the timestamp and fool the RTT measurements?</p><p>Both things work! The truncated case will look like this to the sender:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ping 139.162.188.91\nPING 139.162.188.91 (139.162.188.91) 56(84) bytes of data.\n8 bytes from 139.162.188.91: icmp_seq=1 ttl=53 (truncated)</pre></code>\n            <p>The second case, of an overwritten timestamp, is even cooler. We can move timestamp forwards causing ping to show our favorite &quot;taking countermeasures&quot; message:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ping 139.162.188.91  -c 2 -n\nPING 139.162.188.91 (139.162.188.91) 56(84) bytes of data.\n./ping: Warning: time of day goes back (-1677721599919015us), taking countermeasures\n./ping: Warning: time of day goes back (-1677721599918907us), taking countermeasures\n64 bytes from 139.162.188.91: icmp_seq=1 ttl=53 time=0.000 ms\n./ping: Warning: time of day goes back (-1677721599905149us), taking countermeasures\n64 bytes from 139.162.188.91: icmp_seq=2 ttl=53 time=0.000 ms\n\n--- 139.162.188.91 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1001ms\nrtt min/avg/max/mdev = 0.000/0.000/0.000/0.000 ms</pre></code>\n            <p>Alternatively we can move the time in the packet backwards causing <a href=\"https://github.com/iputils/iputils/issues/480\">ping to show nonsensical RTT values</a>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./ping 139.162.188.91  -c 2 -n\nPING 139.162.188.91 (139.162.188.91) 56(84) bytes of data.\n64 bytes from 139.162.188.91: icmp_seq=1 ttl=53 time=1677721600430 ms\n64 bytes from 139.162.188.91: icmp_seq=2 ttl=53 time=1677721600084 ms\n\n--- 139.162.188.91 ping statistics ---\n2 packets transmitted, 2 received, 0% packet loss, time 1000ms\nrtt min/avg/max/mdev = 1677721600084.349/1677721600257.351/1677721600430.354/-9223372036854775.-808 ms</pre></code>\n            <p>We proved that &quot;countermeasures&quot; work only when time moves in one direction. In another direction ping is just fooled.</p><p>Here&#39;s a rough scapy snippet that generates an ICMP Echo Response fooling ping:</p>\n            <pre class=\"language-python\"><code class=\"language-python\"># iptables -I INPUT -i eth0 -p icmp --icmp-type=8 -j DROP\nimport scapy.all as scapy\nimport struct\n\ndef custom_action(echo_req):\n    try:\n    \tpayload = bytes(echo_req[scapy.ICMP].payload)\n    \tif len(payload) &gt;= 8:\n        \tts, tu = struct.unpack_from(&quot;&lt;II&quot;, payload)\n        \tpayload = struct.pack(&quot;&lt;II&quot;, (ts-0x64000000)&amp;0xffffffff, tu) \\\n                     + payload[8:]\n\n    \techo_reply = scapy.IP(\n        \tdst=echo_req[scapy.IP].src,\n        \tsrc=echo_req[scapy.IP].dst,\n    \t) / scapy.ICMP(type=0, code=0,\n                 \tid=echo_req[scapy.ICMP].id,\n                 \tseq=echo_req.payload.seq,\n   \t  \t) / payload\n    \tscapy.send(echo_reply,iface=iface)\n    except Exception as e:\n        pass\n\nscapy.sniff(filter=&quot;icmp and icmp[0] = 8&quot;, iface=iface, prn=custom_action)</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"leap-second\">Leap second</h3>\n      <a href=\"#leap-second\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In practice, how often does time change on a computer? The <b>NTP</b> daemon adjusts the clock all the time to account for any drift. However, these are very small changes. Apart from initial clock synchronization after boot or sleep wakeup, big clock shifts shouldn&#39;t really happen.</p><p>There are exceptions as usual. Systems that operate in virtual environments or have unreliable Internet connections often experience their clocks getting out of sync.</p><p>One notable case that affects all computers is a coordinated clock adjustment called a <a href=\"https://en.wikipedia.org/wiki/Leap_second\">leap second</a>. It causes the clock to move backwards, which is particularly troublesome. An issue with handling leap second <a href=\"/how-and-why-the-leap-second-affected-cloudflare-dns/\">caused our engineers a headache in late 2016</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4iGPlBeYYXm0RYyxhEmOMQ/20b49ba0ad47eeb0404610e710bd4226/Screenshot-2023-07-11-at-13.33.02.png\" alt=\"\" class=\"kg-image\" width=\"1614\" height=\"648\" loading=\"lazy\"/>\n            \n            </figure><p>Leap seconds often cause issues, so the current consensus is to <a href=\"https://www.nytimes.com/2022/11/19/science/time-leap-second-bipm.html\">deprecate them by 2035</a>. However, <a href=\"https://en.wikipedia.org/wiki/Leap_second#International_proposals_for_elimination_of_leap_seconds\">according to Wikipedia</a> the solution seem to be to just kick the can down the road:</p><blockquote><p><i>A suggested possible future measure would be to let the discrepancy increase to a full minute, which would take 50 to 100 years, and then have the last minute of the day taking two minutes in a &quot;kind of smear&quot; with no discontinuity.</i></p></blockquote><p>In any case, there hasn&#39;t been a leap second since 2016, there might be some in the future, but there likely won&#39;t be any after 2035. Many environments already use a <a href=\"https://cloudplatform.googleblog.com/2015/05/Got-a-second-A-leap-second-that-is-Be-ready-for-June-30th.html\">leap second smear</a> to avoid the problem of clock jumping back.</p><p>In most cases, it might be completely fine to ignore the clock changes. When possible, to count time durations use CLOCK_MONOTONIC, which is bulletproof.</p><p>We haven&#39;t mentioned <a href=\"https://en.wikipedia.org/wiki/Daylight_saving_time\">daylight savings</a> clock adjustments here because, from a computer perspective they are not real clock changes! Most often programmers deal with the operating system clock, which is typically set to the <a href=\"https://en.wikipedia.org/wiki/Coordinated_Universal_Time\">UTC timezone</a>. DST timezone is taken into account only when pretty printing the date on screen. The underlying software operates on integer values. Let&#39;s consider an example of two timestamps, which in my <a href=\"https://devblogs.microsoft.com/oldnewthing/20061027-00/?p=29213\">Warsaw timezone</a>, appear as two different DST timezones. While it may like the clock rolled back, this is just a user interface illusion. The integer timestamps are sequential:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ date --date=@$[1698541199+0]\nSun Oct 29 02:59:59 AM CEST 2023\n\n$ date --date=@$[1698541199+1]\nSun Oct 29 02:00:00 AM CET 2023</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"lessons\">Lessons</h3>\n      <a href=\"#lessons\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Arguably, the clock jumping backwards is a rare occurrence. It&#39;s very hard to test for such cases, and I was surprised to find that <b>ping</b> made such an attempt. To avoid the problem, to measure the latency ping might use CLOCK_MONOTONIC, its developers already <a href=\"https://github.com/iputils/iputils/commit/4fd276cd8211c502cb87c5db0ce15cd685177216\">use this time source in another place</a>.</p><p>Unfortunately this won&#39;t quite work here. Ping needs to compare send timestamp to receive timestamp from SO_TIMESTAMP CMSG, which uses the non-monotonic system clock. Linux API&#39;s are sometimes limited, and dealing with time is hard. For time being, clock adjustments will continue to confuse ping.</p><p>In any case, now we know what to do when <b>ping</b> is &quot;<b>taking countermeasures</b>&quot;! Pull down your periscope and check the <b>NTP</b> daemon status!</p>",
		"id": "6M6gXK7v29wVHnBMZMYRpS",
		"localeList": {
			"name": "The day my ping took countermeasures Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Ping developers clearly put some thought into that. I wondered how far they went. Did they handle clock changes in both directions? Are the bad measurements excluded from the final statistics? How do they test the software?",
		"metadata": {
			"title": "The day my ping took countermeasures",
			"description": "Ping developers clearly put some thought into that. I wondered how far they went. Did they handle clock changes in both directions? Are the bad measurements excluded from the final statistics? How do they test the software?",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4wXCP1MZPeGibU238jC1Sr/fd9c3773490665f491287aebff4b7229/the-day-my-ping-took-countermeasures-y3RESD.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2023-07-11T14:05:00.000+01:00",
		"slug": "the-day-my-ping-took-countermeasures",
		"tags": [
			{
				"id": "1U6ifhBwTuaJ2w4pjNOzNT",
				"name": "Network",
				"slug": "network"
			}
		],
		"title": "The day my ping took countermeasures",
		"updated_at": "2024-10-09T23:24:58.126Z",
		"url": "https://blog.cloudflare.com/the-day-my-ping-took-countermeasures"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}