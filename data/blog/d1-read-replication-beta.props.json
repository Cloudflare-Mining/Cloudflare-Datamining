{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "14",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Justin Mazzola Paluska",
				"slug": "justin-mazzola-paluska",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/kWY2RGoxbmCclJWHvUydC/527ed544883a38459996e2c89a33147d/justin-mazzola-paluska.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null
			},
			{
				"name": "Lambros Petrou",
				"slug": "lambros-petrou",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/63Ww3YmwYCAZwWWCuoJOYT/cce31b0d7c22067b39840727892cd7f2/Lambros_Petrou.jpg"
			}
		],
		"excerpt": "D1, Cloudflare’s managed SQL database, announces read replication beta. Here's a deep dive of the read replication implementation and how your queries can remain consistent across all regions.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2SWdpbhtoHkEeBL0KLzmWn/d1e067d4eef463a5ecf3eb5daf8cbe02/image2.png",
		"featured": false,
		"html": "<p>Read replication of <a href=\"https://developers.cloudflare.com/d1/\"><u>D1</u></a> databases is in public beta!</p><p>D1 read replication makes read-only copies of your database available in multiple regions across Cloudflare’s network.  For busy, read-heavy applications like e-commerce websites, content management tools, and mobile apps:</p><ul><li><p>D1 read replication lowers average latency by routing user requests to read replicas in nearby regions.</p></li><li><p>D1 read replication increases overall throughput by offloading read queries to read replicas, allowing the primary database to handle more write queries.</p></li></ul><p>The main copy of your database is called the primary database and the read-only copies are called read replicas.  When you enable replication for a D1 database, the D1 service automatically creates and maintains read replicas of your primary database.  As your users make requests, D1 routes those requests to an appropriate copy of the database (either the primary or a replica) based on performance heuristics, the type of queries made in those requests, and the query consistency needs as expressed by your application.</p><p>All of this global replica creation and request routing is handled by Cloudflare at no additional cost.</p><p>To take advantage of read replication, your Worker needs to use the new D1 <a href=\"https://developers.cloudflare.com/d1/best-practices/read-replication/\"><u>Sessions API</u></a>. Click the button below to run a Worker using D1 read replication with this <a href=\"https://github.com/cloudflare/templates/tree/main/d1-starter-sessions-api-template\"><u>code example</u></a> to see for yourself!</p><a href=\"https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/templates/tree/main/d1-starter-sessions-api-template\"><img src=\"https://deploy.workers.cloudflare.com/button\" alt=\"Deploy to Cloudflare\"/></a>\n<p></p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"d1-sessions-api\">D1 Sessions API</h2>\n            <a href=\"#d1-sessions-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>D1’s read replication feature is built around the concept of database <i>sessions</i>.  A session encapsulates all the queries representing one logical session for your application. For example, a session might represent all requests coming from a particular web browser or all requests coming from a mobile app used by one of your users. If you use sessions, your queries will use the appropriate copy of the D1 database that makes the most sense for your request, be that the primary database or a nearby replica.</p><p>The sessions implementation ensures <a href=\"https://jepsen.io/consistency/models/sequential\"><u>sequential consistency</u></a> for all queries in the session, no matter what copy of the database each query is routed to.  The sequential consistency model has important properties like &quot;<a href=\"https://jepsen.io/consistency/models/read-your-writes\"><u>read my own writes</u></a>&quot; and &quot;<a href=\"https://jepsen.io/consistency/models/writes-follow-reads\"><u>writes follow reads</u></a>,&quot; as well as a total ordering of writes. The total ordering of writes means that every replica will see transactions committed in the same order, which is exactly the behavior we want in a transactional system.  Said another way, sequential consistency guarantees that the reads and writes are executed in the order in which you write them in your code.</p><p>Some examples of consistency implications in real-world applications:</p><ul><li><p>You are using an online store and just placed an order (write query), followed by a visit to the account page to list all your orders (read query handled by a replica). You want the newly placed order to be listed there as well.</p></li><li><p>You are using your bank’s web application and make a transfer to your electricity provider (write query), and then immediately navigate to the account balance page (read query handled by a replica) to check the latest balance of your account, including that last payment.</p></li></ul><p>Why do we need the Sessions API? Why can we not just query replicas directly?</p><p>Applications using D1 read replication need the Sessions API because D1 runs on Cloudflare’s global network and there’s no way to ensure that requests from the same client get routed to the same replica for every request. For example, the client may switch from WiFi to a mobile network in a way that changes how their requests are routed to Cloudflare. Or the data center that handled previous requests could be down because of an outage or maintenance.</p><p>D1’s read replication is asynchronous, so it’s possible that when you switch between replicas, the replica you switch to lags behind the replica you were using. This could mean that, for example, the new replica hasn’t learned of the writes you just completed.  We could no longer guarantee useful properties like “read your own writes”.  In fact, in the presence of shifty routing, the only consistency property we could guarantee is that what you read had been committed at some point in the past (<a href=\"https://jepsen.io/consistency/models/read-committed\"><u>read committed</u></a> consistency), which isn’t very useful at all!</p><p>Since we can’t guarantee routing to the same replica, we flip the script and use the information we get from the Sessions API to make sure whatever replica we land on can handle the request in a sequentially-consistent manner.</p><p>Here’s what the Sessions API looks like in a Worker:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export default {\n  async fetch(request: Request, env: Env) {\n    // A. Create the session.\n    // When we create a D1 session, we can continue where we left off from a previous    \n    // session if we have that session&#039;s last bookmark or use a constraint.\n    const bookmark = request.headers.get(&#039;x-d1-bookmark&#039;) ?? &#039;first-unconstrained&#039;\n    const session = env.DB.withSession(bookmark)\n\n    // Use this session for all our Workers&#039; routes.\n    const response = await handleRequest(request, session)\n\n    // B. Return the bookmark so we can continue the session in another request.\n    response.headers.set(&#039;x-d1-bookmark&#039;, session.getBookmark())\n\n    return response\n  }\n}\n\nasync function handleRequest(request: Request, session: D1DatabaseSession) {\n  const { pathname } = new URL(request.url)\n\n  if (request.method === &quot;GET&quot; &amp;&amp; pathname === &#039;/api/orders&#039;) {\n    // C. Session read query.\n    const { results } = await session.prepare(&#039;SELECT * FROM Orders&#039;).all()\n    return Response.json(results)\n\n  } else if (request.method === &quot;POST&quot; &amp;&amp; pathname === &#039;/api/orders&#039;) {\n    const order = await request.json&lt;Order&gt;()\n\n    // D. Session write query.\n    // Since this is a write query, D1 will transparently forward it to the primary.\n    await session\n      .prepare(&#039;INSERT INTO Orders VALUES (?, ?, ?)&#039;)\n      .bind(order.orderId, order.customerId, order.quantity)\n      .run()\n\n    // E. Session read-after-write query.\n    // In order for the application to be correct, this SELECT statement must see\n    // the results of the INSERT statement above.\n    const { results } = await session\n      .prepare(&#039;SELECT * FROM Orders&#039;)\n      .all()\n\n    return Response.json(results)\n  }\n\n  return new Response(&#039;Not found&#039;, { status: 404 })\n}</pre></code>\n            <p>To use the Session API, you first need to create a session using the <code>withSession</code> method (<b><i>step A</i></b>).  The <code>withSession</code> method takes a bookmark as a parameter, or a constraint.  The provided constraint instructs D1 where to forward the first query of the session. Using <code>first-unconstrained</code> allows the first query to be processed by any replica without any restriction on how up-to-date it is. Using <code>first-primary</code> ensures that the first query of the session will be forwarded to the primary.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// A. Create the session.\nconst bookmark = request.headers.get(&#039;x-d1-bookmark&#039;) ?? &#039;first-unconstrained&#039;\nconst session = env.DB.withSession(bookmark)</pre></code>\n            <p>Providing an explicit bookmark instructs D1 that whichever database instance processes the query has to be at least as up-to-date as the provided bookmark (in case of a replica; the primary database is always up-to-date by definition).  Explicit bookmarks are how we can continue from previously-created sessions and maintain sequential consistency across user requests.</p><p>Once you’ve created the session, make queries like you normally would with D1.  The session object ensures that the queries you make are sequentially consistent with regards to each other.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// C. Session read query.\nconst { results } = await session.prepare(&#039;SELECT * FROM Orders&#039;).all()</pre></code>\n            <p>For example, in the code example above, the session read query for listing the orders (<b><i>step C</i></b>) will return results that are at least as up-to-date as the bookmark used to create the session (<b><i>step A</i></b><i>)</i>.</p><p>More interesting is the write query to add a new order (<b><i>step D</i></b>) followed by the read query to list all orders (<b><i>step E</i></b>). Because both queries are executed on the same session, it is guaranteed that the read query will observe a database copy that includes the write query, thus maintaining sequential consistency.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// D. Session write query.\nawait session\n  .prepare(&#039;INSERT INTO Orders VALUES (?, ?, ?)&#039;)\n  .bind(order.orderId, order.customerId, order.quantity)\n  .run()\n\n// E. Session read-after-write query.\nconst { results } = await session\n  .prepare(&#039;SELECT * FROM Orders&#039;)\n  .all()</pre></code>\n            <p>Note that we could make a single batch query to the primary including both the write and the list, but the benefit of using the new Sessions API is that you can use the extra read replica databases for your read queries and allow the primary database to handle more write queries.</p><p>The session object does the necessary bookkeeping to maintain the latest bookmark observed across all queries executed using that specific session, and always includes that latest bookmark in requests to D1. Note that any query executed without using the session object is not guaranteed to be sequentially consistent with the queries executed in the session.</p><p>When possible, we suggest continuing sessions across requests by including bookmarks in your responses to clients (<b><i>step B</i></b>), and having clients passing previously received bookmarks in their future requests.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// B. Return the bookmark so we can continue the session in another request.\nresponse.headers.set(&#039;x-d1-bookmark&#039;, session.getBookmark())</pre></code>\n            <p>This allows <i>all</i> of a client’s requests to be in the same session. You can do this by grabbing the session’s current bookmark at the end of the request (<code>session.getBookmark()</code>) and sending the bookmark in the response back to the client in HTTP headers, in HTTP cookies, or in the response body itself.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"consistency-with-and-without-sessions-api\">Consistency with and without Sessions API</h3>\n            <a href=\"#consistency-with-and-without-sessions-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In this section, we will explore the classic scenario of a read-after-write query to showcase how using the new D1 Sessions API ensures that we get sequential consistency and avoid any issues with inconsistent results in our application.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1zIBf3V1YIogYJKeWm1kDn/f484faf38cc0f8d7227f9db1fa386354/1.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1323\" loading=\"lazy\"/>\n          </figure><p>The Client, a user Worker, sends a D1 write query that gets processed by the database primary and gets the results back. However, the subsequent read query ends up being processed by a database replica. If the database replica is lagging far enough behind the database primary, such that it does not yet include the first write query, then the returned results will be inconsistent, and probably incorrect for your application business logic.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1w81ec5tNGWJ7sQyFBZQ6l/d487ccf225a097a0e48054d88df0ba1f/2.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1323\" loading=\"lazy\"/>\n          </figure><p>Using the Sessions API fixes the inconsistency issue. The first write query is again processed by the database primary, and this time the response includes “<b>Bookmark 100</b>”. The session object will store this bookmark for you transparently.</p><p>The subsequent read query is processed by database replica as before, but now since the query includes the previously received “<b>Bookmark 100</b>”, the database replica will wait until its database copy is at least up-to-date as “<b>Bookmark 100</b>”. Only once it’s up-to-date, the read query will be processed and the results returned, including the replica’s latest bookmark “<b>Bookmark 104</b>”.</p><p>Notice that the returned bookmark for the read query is “<b>Bookmark 104</b>”, which is different from the one passed in the query request. This can happen if there were other writes from other client requests that also got replicated to the database replica in-between the two queries our own client executed.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"enabling-read-replication\">Enabling read replication</h2>\n            <a href=\"#enabling-read-replication\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>To start using D1 read replication:</p><ol><li><p>Update your Worker to use the D1 Sessions API to tell D1 what queries are part of the same database session. The Sessions API works with databases that do not have read replication enabled as well, so it’s safe to ship this code even before you enable replicas. Here’s <a href=\"http://developers.cloudflare.com/d1/best-practices/read-replication/\"><u>an example</u></a>.</p></li><li><p><a href=\"https://developers.cloudflare.com/d1/best-practices/read-replication/#enable-read-replication\"><u>Enable replicas</u></a> for your database via <a href=\"https://dash.cloudflare.com/?to=/:account/workers/d1\"><u>Cloudflare dashboard</u></a> &gt; Select D1 database &gt; Settings.</p></li></ol><p>D1 read replication is built into D1, and you don’t pay extra storage or compute costs for replicas. You incur the exact same D1 usage with or without replicas, based on <code>rows_read</code> and <code>rows_written</code> by your queries. Unlike other traditional database systems with replication, you don’t have to manually create replicas, including where they run, or decide how to route requests between the primary database and read replicas. Cloudflare handles this when using the Sessions API while ensuring sequential consistency.</p><p>Since D1 read replication is in beta, we recommend trying D1 read replication on a non-production database first, and migrate to your production workloads after validating read replication works for your use case.</p><p>If you don’t have a D1 database and want to try out D1 read replication, <a href=\"https://dash.cloudflare.com/?to=/:account/workers/d1/create\"><u>create a test database</u></a> in the Cloudflare dashboard.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"observing-your-replicas\">Observing your replicas</h3>\n            <a href=\"#observing-your-replicas\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Once you’ve enabled D1 read replication, read queries will start to be processed by replica database instances. The response of each query includes information in the nested <code>meta</code> object relevant to read replication, like <code>served_by_region</code> and <code>served_by_primary</code>. The first denotes the region of the database instance that processed the query, and the latter will be <code>true</code> if-and-only-if your query was processed by the primary database instance.</p><p>In addition, the <a href=\"https://dash.cloudflare.com/?to=/:account/workers/d1/\"><u>D1 dashboard overview</u></a> for a database now includes information about the database instances handling your queries. You can see how many queries are handled by the primary instance or by a replica, and a breakdown of the queries processed by region. The example screenshots below show graphs displaying the number of queries executed  and number of rows read by each region.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ChIlqQ5xgJfiftOHw9Egg/b583d00d22dcea60e7439dfbfa1761df/image10.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"859\" loading=\"lazy\"/>\n          </figure>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4Zze5y22759fOIYPOqrK1Y/6cd3c684006ca8234db20924cae8b960/image1.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"857\" loading=\"lazy\"/>\n          </figure>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"under-the-hood-how-d1-read-replication-is-implemented\">Under the hood: how D1 read replication is implemented</h2>\n            <a href=\"#under-the-hood-how-d1-read-replication-is-implemented\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>D1 is implemented on top of SQLite-backed Durable Objects running on top of Cloudflare’s <a href=\"https://blog.cloudflare.com/sqlite-in-durable-objects/#under-the-hood-storage-relay-service\"><u>Storage Relay Service</u></a>.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3GWWL8goIzrGTmkH54O416/aabd47fcd94bfc73492556b19ac6069f/5.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"741\" loading=\"lazy\"/>\n          </figure><p>D1 is structured with a 3-layer architecture.  First is the binding API layer that runs in the customer’s Worker.  Next is a stateless Worker layer that routes requests based on database ID to a layer of Durable Objects that handle the actual SQL operations behind D1.  This is similar to how <a href=\"https://developers.cloudflare.com/durable-objects/what-are-durable-objects/#durable-objects-in-cloudflare\"><u>most applications using Cloudflare Workers and Durable Objects are structured</u></a>.</p><p>For a non-replicated database, there is exactly one Durable Object per database.  When a user’s Worker makes a request with the D1 binding for the database, that request is first routed to a D1 Worker running in the same location as the user’s Worker.  The D1 Worker figures out which D1 Durable Object backs the user’s D1 database and fetches an RPC stub to that Durable Object.  The Durable Objects routing layer figures out where the Durable Object is located, and opens an RPC connection to it.  Finally, the D1 Durable Object then handles the query on behalf of the user’s Worker using the Durable Objects SQL API.</p><p>In the Durable Objects SQL API, all queries go to a SQLite database on the local disk of the server where the Durable Object is running.  Durable Objects run <a href=\"https://www.sqlite.org/wal.html\"><u>SQLite in WAL mode</u></a>.  In WAL mode, every write query appends to a write-ahead log (the WAL).  As SQLite appends entries to the end of the WAL file, a database-specific component called the Storage Relay Service <i>leader</i> synchronously replicates the entries to 5 <i>durability followers</i> on servers in different datacenters.  When a quorum (at least 3 out of 5) of the durability followers acknowledge that they have safely stored the data, the leader allows SQLite’s write queries to commit and opens the Durable Object’s output gate, so that the Durable Object can respond to requests.</p><p>Our implementation of WAL mode allows us to have a complete log of all of the committed changes to the database. This enables a couple of important features in SQLite-backed Durable Objects and D1:</p><ul><li><p>We identify each write with a <a href=\"https://en.wikipedia.org/wiki/Lamport_timestamp\"><u>Lamport timestamp</u></a> we call a <a href=\"https://developers.cloudflare.com/d1/reference/time-travel/#bookmarks\"><u>bookmark</u></a>.</p></li><li><p>We construct databases anywhere in the world by downloading all of the WAL entries from cold storage and replaying each WAL entry in order.</p></li><li><p>We implement <a href=\"https://developers.cloudflare.com/d1/reference/time-travel/\"><u>Point-in-time recovery (PITR)</u></a> by replaying WAL entries up to a specific bookmark rather than to the end of the log.</p></li></ul><p>Unfortunately, having the main data structure of the database be a log is not ideal.  WAL entries are in write order, which is often neither convenient nor fast.  In order to cut down on the overheads of the log, SQLite <i>checkpoints</i> the log by copying the WAL entries back into the main database file.  Read queries are serviced directly by SQLite using files on disk — either the main database file for checkpointed queries, or the WAL file for writes more recent than the last checkpoint.  Similarly, the Storage Relay Service snapshots the database to cold storage so that we can replay a database by downloading the most recent snapshot and replaying the WAL from there, rather than having to download an enormous number of individual WAL entries.</p><p>WAL mode is the foundation for implementing read replication, since we can stream writes to locations other than cold storage in real time.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/ezp8gcf3gXqkvumzufGfP/1a54fc6f434290968c7e695c2e5bb0c9/6.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1280\" loading=\"lazy\"/>\n          </figure><p>We implemented read replication in 5 major steps.</p><p>First, we made it possible to make replica Durable Objects with a read-only copy of the database.  These replica objects boot by fetching the latest snapshot and replaying the log from cold storage to whatever bookmark primary database’s leader last committed. This basically gave us point-in-time replicas, since without continuous updates, the replicas never updated until the Durable Object restarted.</p><p>Second, we registered the replica leader with the primary’s leader so that the primary leader sends the replicas every entry written to the WAL at the same time that it sends the WAL entries to the durability followers.  Each of the WAL entries is marked with a bookmark that uniquely identifies the WAL entry in the sequence of WAL entries.  We’ll use the bookmark later.</p><p>Note that since these writes are sent to the replicas <i>before</i> a quorum of durability followers have confirmed them, the writes are actually unconfirmed writes, and the replica leader must be careful to keep the writes hidden from the replica Durable Object until they are confirmed.  The replica leader in the Storage Relay Service does this by implementing enough of SQLite’s <a href=\"https://www.sqlite.org/walformat.html#the_wal_index_file_format\"><u>WAL-index protocol</u></a>, so that the unconfirmed writes coming from the primary leader look to SQLite as though it’s just another SQLite client doing unconfirmed writes.  SQLite knows to ignore the writes until they are confirmed in the log.  The upshot of this is that the replica leader can write WAL entries to the SQLite WAL <i>immediately,</i> and then “commit” them when the primary leader tells the replica that the entries have been confirmed by durability followers.</p><p>One neat thing about this approach is that writes are sent from the primary to the replica as quickly as they are generated by the primary, helping to minimize lag between replicas.  In theory, if the write query was proxied through a replica to the primary, the response back to the replica will arrive at almost the same time as the message that updates the replica.  In such a case, it looks like there’s no replica lag at all!</p><p>In practice, we find that replication is really fast.  Internally, we measure <i>confirm lag</i>, defined as the time from when a primary confirms a change to when the replica confirms a change.  The table below shows the confirm lag for two D1 databases whose primaries are in different regions.</p><div style=\"margin-left:0pt;\" dir=\"ltr\" align=\"center\">\n    <figure class=\"table\">\n        <table class=\"ck-table-resized\" style=\"border-collapse:collapse;border-style:none;\">\n            <colgroup>\n                <col style=\"width:33.33%;\" width=\"233\">\n                <col style=\"width:33.33%;\" width=\"233\">\n                <col style=\"width:33.34%;\" width=\"233\">\n            </colgroup>\n            <tbody>\n                <tr style=\"height:0pt;\">\n                    <td style=\"border-bottom:2.25pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;\" dir=\"ltr\"><br><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">Replica Region</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:2.25pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">Database A</span></span></p>\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">(Primary region: ENAM)</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:2.25pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">Database B</span></span><br><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">(Primary region: WNAM)</span></span></p>\n                    </td>\n                </tr>\n                <tr style=\"height:0pt;\">\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:2.25pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">ENAM</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:2.25pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">N/A</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:2.25pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">30 ms</span></span></p>\n                    </td>\n                </tr>\n                <tr style=\"height:0pt;\">\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">WNAM</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">45 ms</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">N/A</span></span></p>\n                    </td>\n                </tr>\n                <tr style=\"height:0pt;\">\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">WEUR</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">55 ms</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:0.5pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">75 ms</span></span></p>\n                    </td>\n                </tr>\n                <tr style=\"height:0pt;\">\n                    <td style=\"border-bottom:2.25pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">EEUR</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:2.25pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">67 ms</span></span></p>\n                    </td>\n                    <td style=\"border-bottom:2.25pt solid #000000;border-top:0.5pt solid #000000;overflow-wrap:break-word;overflow:hidden;padding:5pt;vertical-align:top;\">\n                        <p style=\"line-height:1.2;margin-bottom:0pt;margin-top:0pt;text-align:right;\" dir=\"ltr\"><span style=\"background-color:transparent;color:#000000;font-family:Arial,sans-serif;\"><span style=\"font-style:normal;font-variant:normal;font-weight:400;text-decoration:none;vertical-align:baseline;white-space:pre-wrap;\">75 ms</span></span></p>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </figure>\n</div><p><sup><i>Confirm lag for 2 replicated databases.  N/A means that we have no data for this combination.  The region abbreviations are the same ones used for </i></sup><a href=\"https://developers.cloudflare.com/durable-objects/reference/data-location/#supported-locations-1\"><sup><i><u>Durable Object location hints</u></i></sup></a><sup><i>.</i></sup></p><p>The table shows that confirm lag is correlated with the network round-trip time between the data centers hosting the primary databases and their replicas.  This is clearly visible in the difference between the confirm lag for the European replicas of the two databases.  As airline route planners know, EEUR is <a href=\"http://www.gcmap.com/mapui?P=ewr-lhr,+ewr-waw\"><u>appreciably further away</u></a> from ENAM than WEUR is, but from WNAM, both European regions (WEUR and EEUR) are <a href=\"http://www.gcmap.com/mapui?P=sjc-lhr,+sjc-waw\"><u>about equally as far away</u></a>.  We see that in our replication numbers.</p><p>The exact placement of the D1 database in the region matters too.  Regions like ENAM and WNAM are quite large in themselves.  Database A’s placement in ENAM happens to be further away from most data centers in WNAM compared to database B’s placement in WNAM relative to the ENAM data centers.  As such, database B sees slightly lower confirm lag.</p><p>Try as we might, we can’t beat the speed of light!</p><p>Third, we updated the Durable Object routing system to be aware of Durable Object replicas.  When read replication is enabled on a Durable Object, two things happen.  First, we create a set of replicas according to a replication policy.  The current replication policy that D1 uses is simple: a static set of replicas in <a href=\"https://developers.cloudflare.com/d1/configuration/data-location/#available-location-hints\"><u>every region that D1 supports</u></a>.  Second, we turn on a routing policy for the Durable Object.  The current policy that D1 uses is also simple: route to the Durable Object replica in the region close to where the user request is.  With this step, we have updateable read-only replicas, and can route requests to them!</p><p>Fourth, we updated D1’s Durable Object code to handle write queries on replicas. D1 uses SQLite to figure out whether a request is a write query or a read query.  This means that the determination of whether something is a read or write query happens <i>after</i> the request is routed.  Read replicas will have to handle write requests!  We solve this by instantiating each replica D1 Durable Object with a reference to its primary.  If the D1 Durable Object determines that the query is a write query, it forwards the request to the primary for the primary to handle. This happens transparently, keeping the user code simple.</p><p>As of this fourth step, we can handle read and write queries at every copy of the D1 Durable Object, whether it&#39;s a primary or not.  Unfortunately, as outlined above, if a user&#39;s requests get routed to different read replicas, they may see different views of the database, leading to a very weak consistency model.  So the last step is to implement the Sessions API across the D1 Worker and D1 Durable Object.  Recall that every WAL entry is marked with a bookmark.  These bookmarks uniquely identify a point in (logical) time in the database.  Our bookmarks are strictly monotonically increasing; every write to a database makes a new bookmark with a value greater than any other bookmark for that database.</p><p>Using bookmarks, we implement the Sessions API with the following algorithm split across the D1 binding implementation, the D1 Worker, and D1 Durable Object.</p><p>First up in the D1 binding, we have code that creates the <code>D1DatabaseSession</code> object and code within the <code>D1DatabaseSession</code> object to keep track of the latest bookmark.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// D1Binding is the binding code running within the user&#039;s Worker\n// that provides the existing D1 Workers API and the new withSession method.\nclass D1Binding {\n  // Injected by the runtime to the D1 Binding.\n  d1Service: D1ServiceBinding\n\n  function withSession(initialBookmark) {\n    return D1DatabaseSession(this.d1Service, this.databaseId, initialBookmark);\n  }\n}\n\n// D1DatabaseSession holds metadata about the session, most importantly the\n// latest bookmark we know about for this session.\nclass D1DatabaseSession {\n  constructor(d1Service, databaseId, initialBookmark) {\n    this.d1Service = d1Service;\n    this.databaseId = databaseId;\n    this.bookmark = initialBookmark;\n  }\n\n  async exec(query) {\n    // The exec method in the binding sends the query to the D1 Worker\n    // and waits for the the response, updating the bookmark as\n    // necessary so that future calls to exec use the updated bookmark.\n    var resp = await this.d1Service.handleUserQuery(databaseId, query, bookmark);\n    if (isNewerBookmark(this.bookmark, resp.bookmark)) {\n      this.bookmark = resp.bookmark;\n    }\n    return resp;\n  }\n\n  // batch and other SQL APIs are implemented similarly.\n}</pre></code>\n            <p>The binding code calls into the D1 stateless Worker (<code>d1Service</code> in the snippet above), which figures out which Durable Object to use, and proxies the request to the Durable Object.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">class D1Worker {\n  async handleUserQuery(databaseId, query) {\n    var doId = /* look up Durable Object for databaseId */;\n    return await this.D1_DO.get(doId).handleWorkerQuery(query, bookmark)\n  }\n}</pre></code>\n            <p>Finally, we reach the Durable Objects layer, which figures out how to actually handle the request.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">class D1DurableObject {\n  async handleWorkerQuery(queries, bookmark) {\n    var bookmark = bookmark ?? &quot;first-primary&quot;;\n    var results = {};\n\n    if (this.isPrimaryDatabase()) {\n      // The primary always has the latest data so we can run the\n      // query without checking the bookmark.\n      var result = /* execute query directly */;\n      bookmark = getCurrentBookmark();\n      results = result;\n    } else {\n      // This is running on a replica.\n      if (bookmark === &quot;first-primary&quot; || isWriteQuery(query)) {\n        // The primary must handle this request, so we&#039;ll proxy the\n        // request to the primary.\n        var resp = await this.primary.handleWorkerQuery(query, bookmark);\n        bookmark = resp.bookmark;\n        results = resp.results;\n      } else {\n        // The replica can handle this request, but only after the\n        // database is up-to-date with the bookmark.\n        if (bookmark !== &quot;first-unconstrained&quot;) {\n          await waitForBookmark(bookmark);\n        }\n        var result = /* execute query locally */;\n        bookmark = getCurrentBookmark();\n        results = result;\n      }\n    }\n    return { results: results, bookmark: bookmark };\n  }\n}</pre></code>\n            <p>The D1 Durable Object first figures out if this instance can handle the query, or if the query needs to be sent to the primary.  If the Durable Object can execute the query, it ensures that we execute the query with a bookmark at least as up-to-date as the bookmark requested by the binding.</p><p>The upshot is that the three pieces of code work together to ensure that all of the queries in the session see the database in a sequentially consistent order, because each new query will be blocked until it has seen the results of previous queries within the same session.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"conclusion\">Conclusion</h2>\n            <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>D1’s new read replication feature is a significant step towards making globally distributed databases easier to use without sacrificing consistency. With automatically provisioned replicas in every region, your applications can now serve read queries faster while maintaining strong sequential consistency across requests, and keeping your application Worker code simple.</p><p>We’re excited for developers to explore this feature and see how it improves the performance of your applications. The public beta is just the beginning—we’re actively refining and expanding D1’s capabilities, including evolving replica placement policies, and your feedback will help shape what’s next.</p><p>Note that the Sessions API is only available through the <a href=\"https://developers.cloudflare.com/d1/worker-api/\"><u>D1 Worker Binding</u></a> for now, and support for the HTTP REST API will follow soon.</p><p>Try out D1 read replication today by clicking the “Deploy to Cloudflare&quot; button, check out <a href=\"http://developers.cloudflare.com/d1/best-practices/read-replication/\"><u>documentation and examples</u></a>, and let us know what you build in the <a href=\"https://discord.com/channels/595317990191398933/992060581832032316\"><u>D1 Discord channel</u></a>!</p><a href=\"https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/templates/tree/main/d1-starter-sessions-api-template\"><img src=\"https://deploy.workers.cloudflare.com/button\" alt=\"Deploy to Cloudflare\"/></a>\n<p></p><p></p>",
		"id": "2qUAO70BqnRBomg83fCRPe",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "D1, Cloudflare’s managed SQL database, announces read replication beta. In this post, we do a technical deep dive of the read replication implementation and how your queries can remain consistent across all regions.",
		"metadata": {
			"title": "Sequential consistency without borders: How D1 implements global read replication",
			"description": "D1, Cloudflare’s managed SQL database, announces read replication beta. In this post, we do a technical deep dive of the read replication implementation and how your queries can remain consistent across all regions.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4quATrNSJ5R7dmiEUIgFfS/6e82e75b37b8b3d53a55027a3bee58a1/OG_Share_2024__43_.png"
		},
		"primary_author": {},
		"published_at": "2025-04-10T14:00+00:00",
		"slug": "d1-read-replication-beta",
		"tags": [
			{
				"id": "2xCnBweKwOI3VXdYsGVbMe",
				"name": "Developer Week",
				"slug": "developer-week"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "UKt2GEAUQsbObsNqZ3Pr7",
				"name": "D1",
				"slug": "d1"
			},
			{
				"id": "2UVIYusJwlvsmPYl2AvSuR",
				"name": "Deep Dive",
				"slug": "deep-dive"
			},
			{
				"id": "3RrKxQpSeoUVWXO1gT9jsU",
				"name": "Edge Database",
				"slug": "edge-database"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "1pPf2NNj9SXrC0A0ERKp9v",
				"name": "SQL",
				"slug": "sql"
			}
		],
		"title": "Sequential consistency without borders: how D1 implements global read replication",
		"updated_at": "2025-04-12T18:03:02.136Z",
		"url": "https://blog.cloudflare.com/d1-read-replication-beta"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}