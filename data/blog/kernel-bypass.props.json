{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null
			}
		],
		"excerpt": "In two previous posts we've discussed how to receive 1M UDP packets per second and how to reduce the round trip time. We did the experiments on Linux and the performance was very good considering it's a general purpose operating system.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3666RYL023B0bIu5BtI21o/8ac75cb625ec3092b71557173b59211a/kernel-bypass.jpg",
		"featured": false,
		"html": "<p>In two previous posts we&#39;ve discussed <a href=\"/how-to-receive-a-million-packets/\">how to receive 1M UDP packets per second</a> and <a href=\"/how-to-achieve-low-latency/\">how to reduce the round trip time</a>. We did the experiments on Linux and the performance was very good considering it&#39;s a general purpose operating system.</p><p>Unfortunately the speed of vanilla Linux kernel networking is not sufficient for more specialized workloads. For example, here at CloudFlare, we are constantly dealing with large packet floods. Vanilla Linux can do only about 1M pps. This is not enough in our environment, especially since the network cards are capable of handling a much higher throughput. Modern 10Gbps NIC&#39;s can usually process at least 10M pps.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6L7VhSXQeBPMTZxGz2hayc/9faea000056440478c530bf7db7490e0/hispeed.jpg\" alt=\"hispeed.jpg\" class=\"kg-image\" width=\"640\" height=\"427\" loading=\"lazy\"/>\n            \n            </figure><p>CC BY 2.0 <a href=\"https://www.flickr.com/photos/diversey/4573842992/\">image</a> by Tony Webster</p><p>It&#39;s apparent that the only way to squeeze more packets from our hardware is by working around the Linux kernel networking stack. This is called a &quot;kernel bypass&quot; and in this article we&#39;ll dig into various ways of achieving it.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"the-kernel-is-insufficient\">The kernel is insufficient</h3>\n            <a href=\"#the-kernel-is-insufficient\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Let&#39;s prepare a small experiment to convince you that working around Linux is indeed necessary. Let&#39;s see how many packets can be handled by the kernel under perfect conditions. Passing packets to userspace is costly, so instead let&#39;s try to drop them as soon as they leave the network driver code. To my knowledge the fastest way to drop packets in Linux, without hacking the kernel sources, is by placing a DROP rule in the <code>PREROUTING</code> iptables chain:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ sudo iptables -t raw -I PREROUTING -p udp --dport 4321 --dst 192.168.254.1 -j DROP\n$ sudo ethtool -X eth2 weight 1\n$ watch &#039;ethtool -S eth2|grep rx&#039;\n     rx_packets:       12.2m/s\n     rx-0.rx_packets:   1.4m/s\n     rx-1.rx_packets:   0/s\n     ...</pre></code>\n            <p>Ethtool statistics above show that the network card receives a line rate of 12M packets per second. By manipulating an indirection table on a NIC with <code>ethtool -X</code>, we direct all the packets to RX queue #0. As we can see the kernel is able to process 1.4M pps on that queue with a single CPU.</p><p>Processing 1.4M pps on a single core is certainly a very good result, but unfortunately the stack doesn&#39;t scale. When the packets hit many cores the numbers drop sharply. Let&#39;s see the numbers when we direct packets to four RX queues:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ sudo ethtool -X eth2 weight 1 1 1 1\n$ watch &#039;ethtool -S eth2|grep rx&#039;\n     rx_packets:     12.1m/s\n     rx-0.rx_packets: 477.8k/s\n     rx-1.rx_packets: 447.5k/s\n     rx-2.rx_packets: 482.6k/s\n     rx-3.rx_packets: 455.9k/s</pre></code>\n            <p>Now we process only 480k pps per core. This is bad news. Even optimistically assuming the performance won&#39;t drop further when adding more cores, we would still need more than 20 CPU&#39;s to handle packets at line rate. So the kernel is not going to work.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"kernel-bypass-to-the-rescue\">Kernel bypass to the rescue</h3>\n            <a href=\"#kernel-bypass-to-the-rescue\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7CEpRDnaP9vzj6kZ2ZYpwT/1136d4f77b047fb854bbb8c139d45bd3/bypass-1.jpg\" alt=\"bypass.jpg\" class=\"kg-image\" width=\"640\" height=\"480\" loading=\"lazy\"/>\n            \n            </figure><p>CC BY 2.0 <a href=\"https://www.flickr.com/photos/londonmatt/11421393074/\">image</a> by Matt Brown</p><p>The performance limitations of the Linux kernel network <a href=\"https://lwn.net/Articles/629155/\">are nothing new</a>. Over the years there had been <i>many</i> attempts to address them. The most common techniques involve creating specialized API&#39;s to aid with receiving packets from the hardware at very high speed. Unfortunately these techniques are in total flux and a single widely adopted approach hasn&#39;t emerged yet.</p><p>Here is a list of the most widely known kernel bypass techniques.</p><h4>PACKET_MMAP</h4><p><a href=\"https://www.kernel.org/doc/Documentation/networking/packet_mmap.txt\">Packet_mmap</a> is a Linux API for fast packet sniffing. While it&#39;s not strictly a kernel bypass technique, it requires a special place on the list - it&#39;s already available in vanilla kernels.</p><h4>PF_RING</h4><p><a href=\"http://www.ntop.org/products/packet-capture/pf_ring/\"><code>PF_RING</code></a> is another known technique that intends to speed up packet capture. Unlike <code>packet_mmap</code>, <code>PF_RING</code> is not in the mainline kernel and requires special modules. With <a href=\"https://github.com/xtao/PF_RING/tree/master/drivers/ZC/intel\">ZC drivers</a> and <a href=\"http://www.ntop.org/pf_ring/pf_ring-and-transparent-mode/\"><code>transparent_mode=2</code></a> the packets will only be delivered to the PF_RING client, and not the kernel network stack. Since the kernel is the slow part this ensures the fastest operation.</p><h4>Snabbswitch</h4><p><a href=\"https://github.com/SnabbCo/snabbswitch/\"><code>Snabbswitch</code></a> is a networking framework in Lua mostly geared towards writing L2 applications. It works by completely taking over a network card, and implements a hardware driver in userspace. It&#39;s done on a PCI device level with a form of <a href=\"https://lwn.net/Articles/232575/\">userspace IO (UIO)</a>, by mmaping the device registers with sysfs. This allows for very fast operation, but it means the packets completely skip the kernel network stack.</p><h4>DPDK</h4><p><a href=\"https://core.dpdk.org/doc/\"><code>DPDK</code></a> is a networking framework written in C, created especially for Intel chips. It&#39;s similar to <code>snabbswitch</code> in spirit, since it&#39;s a full framework and <a href=\"http://www.slideshare.net/garyachy/dpdk-44585840\">relies on UIO</a>.</p><h4>Netmap</h4><p><a href=\"http://info.iet.unipi.it/~luigi/netmap/\"><code>Netmap</code></a> is also a rich framework, but as opposed to UIO techniques it is implemented as a couple of kernel modules. To integrate with networking hardware it requires users to patch the kernel network drivers. The main benefit of the added complexity is a nicely documented, <a href=\"https://www.freebsd.org/cgi/man.cgi?query=netmap&sektion=4\">vendor-agnostic and clean API</a>.</p><p>Since the goal of kernel bypass is to spare the kernel from processing packets, we can rule out <code>packet_mmap</code>. It doesn&#39;t take over the packets - it&#39;s just a fast interface for packet sniffing. Similarly, plain <code>PF_RING</code> without ZC modules is unattractive since its main goal is to speed up libpcap.</p><p>We&#39;ve already ruled out two techniques, but unfortunately for our workloads none of <a href=\"http://www.slideshare.net/shemminger/uio-final\">the remaining solutions</a> is acceptable either!</p><p>Let me show why. In order to achieve a kernel bypass all of the remaining techniques: <code>Snabbswitch</code>, <code>DPDK</code> and <code>netmap</code> take over the whole network card, not allowing <i>any</i> traffic on that NIC to reach the kernel. At CloudFlare, we simply can&#39;t afford to dedicate the whole NIC to a single offloaded application.</p><p>Having said that, many people use the techniques above. In other circumstances dedicating a NIC to bypass would be acceptable.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"solarflares-ef_vi\">Solarflare&#39;s EF_VI</h3>\n            <a href=\"#solarflares-ef_vi\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>While the techniques listed above require taking over a whole NIC, there are alternatives.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4gB3CqgOE8Md1XBMjAPW5s/2a50997ab6f1710d97734b0e21f2d711/efvi-model.png\" alt=\"efvi\" class=\"kg-image\" width=\"600\" height=\"289\" loading=\"lazy\"/>\n            \n            </figure><p>Solarflare network cards support <a href=\"http://www.openonload.org\">OpenOnload</a>, a magical network accelerator. It achieves a kernel bypass by implementing the network stack in userspace and using an <code>LD_PRELOAD</code> to overwrite network syscalls of the target program. For low level access to the network card OpenOnload relies on an &quot;EF_VI&quot; library. This library can be used directly and <a href=\"https://support.solarflare.com/index.php?option=com_cognidox&file=SF-114063-CD-1_ef_vi_User_Guide.pdf&task=download&format=raw&Itemid=11\">is well documented</a>.</p><p>EF_VI, being a proprietary library, can be only used on Solarflare NIC&#39;s, but you may wonder how it actually works behind the scenes. It turns out EF_VI reuses the usual NIC features in a very smart way.</p><p>Under the hood each EF_VI program is granted access to a dedicated RX queue, hidden from the kernel. By default the queue receives no packets, until you create an EF_VI &quot;filter&quot;. This filter is nothing more than a hidden flow steering rule. You won&#39;t see it in <code>ethtool -n</code>, but the rule does in fact exist on the network card. Having allocated an RX queue and managed flow steering rules, the only remaining task for EF_VI is to provide a userspace API for accessing the queue.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"bifurcated-driver\">Bifurcated driver</h3>\n            <a href=\"#bifurcated-driver\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/43gbb8giqS3qGsKT5fp67R/26b9724f1707a683efbbcbc3625cd130/dpdk-model.png\" alt=\"dpdk\" class=\"kg-image\" width=\"600\" height=\"248\" loading=\"lazy\"/>\n            \n            </figure><p>While EF_VI is specific to Solarflare, it&#39;s possible to replicate its techniques with other NIC&#39;s. To start off we need a multi-queue network card that supports flow steering and indirection table manipulation.</p><p>Having these features we can:</p><ul><li><p>Start the network card as usual, everything managed by the kernel.</p></li><li><p>Modify an indirection table to ensure that no packets will flow to one of the RX queues. Let&#39;s say we selected an RX queue #16.</p></li><li><p>Direct a specific network flow to our RX queue #16 with a flow steering rule.</p></li></ul><p>Having done that, the only remaining step is to provide an userspace API to receive packets from RX queue #16 without affecting any other RX queues.</p><p>This idea is referred to as a &quot;bifurcated driver&quot; in the DPDK community. There was an attempt to <a href=\"http://events.linuxfoundation.org/sites/events/files/slides/LinuxConEurope_DPDK-2014.pdf\">create a bifurcated driver in 2014</a>, unfortunately <a href=\"https://patchwork.ozlabs.org/patch/396713/\">the patch didn&#39;t make it</a> to the mainline kernel yet.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"virtualization-approach\">Virtualization approach</h3>\n            <a href=\"#virtualization-approach\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6XbgZy5GdiIt1QT3lEdKav/8464cb36fb1c580d3e97fe04574cd73c/virt-model.png\" alt=\"virt\" class=\"kg-image\" width=\"600\" height=\"308\" loading=\"lazy\"/>\n            \n            </figure><p>There is an alternative strategy for the Intel 82599 chips. Instead of having a bifurcated driver we could use the virtualization features of the NIC to do a kernel bypass.</p><p>First, I owe a bit of context. It turns out that in the virtualization world passing packets from the host to the guest virtual machine is often a bottleneck. As the demands for virtualization performance grew over the the years, the usual technique of software emulating the networking hardware became a major performance hog.</p><p>Network card vendors came to the rescue and cooked features to speed up the virtualized guests. In one of the virtualization techniques the network card is asked to present itself as many PCI devices. Those fake virtual interfaces can then be used inside the virtualized guests without requiring any cooperation from the host operating system. Let me show how it looks in practice. For example, this is my native 82599 network card. This &quot;real&quot; device is referred to as a PF (physical function) interface:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ lspci\n04:00.1 Ethernet controller: Intel Corporation 82599EB 10-Gigabit SFI/SFP+ Network Connection (rev 01)\n</pre></code>\n            <p>We ask the device to create one VF (virtual function) device:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ echo 1 &gt; /sys/class/net/eth3/device/sriov_numvfs\n$ lspci\n04:00.1 Ethernet controller: Intel Corporation 82599EB 10-Gigabit SFI/SFP+ Network Connection (rev 01)\n04:10.1 Ethernet controller: Intel Corporation 82599 Ethernet Controller Virtual Function (rev 01)</pre></code>\n            <p>This fake PCI device can be easily given to, say, a KVM guest. On the other hand, nothing stops us from using it the host environment. To do that just load the &quot;ixgbevf&quot; kernel module and another &quot;ethX&quot; interface will pop up.</p><p>You may wonder how that helps with kernel bypass. Since the &quot;ixgbevf&quot; device is not used by the kernel to do normal networking, we could dedicate it to the bypass. It seems possible <a href=\"http://dpdk.readthedocs.org/en/latest/nics/intel_vf.html\">to run DPDK on &quot;ixgbevf&quot; devices</a>.</p><p>To recap: the idea is to keep the PF device around to handle normal kernel work and run a VF interface dedicated to the kernel bypass. Since the VF is dedicated we can run the &quot;take over the whole NIC&quot; techniques.</p><p>While it sounds good on the paper, it&#39;s not all that simple. First, only DPDK supports &quot;ixgbevf&quot; interfaces, netmap, snabbswitch and PF_RING don&#39;t. Secondly, by default the VF interface won&#39;t receive any packets. To send some flows from PF to VF you need <a href=\"https://patchwork.ozlabs.org/patch/470164/\">this obscure patch to ixgbe</a>. With it you can address the VF by encoding it in the high bits of &quot;action&quot; queue number in <code>ethtool</code>, for example:</p>\n            <pre class=\"language-.bash\"><code class=\"language-.bash\">$ ethtool -N eth3 flow-type tcp4 dst-ip 192.168.254.30 dst-port 80 action 4294967296</pre></code>\n            <p>Finally, a last roadblock occurs. By enabling a VF features on 82599 chip, the maximum size of an RSS group is reduced. Without virtualization 82599 can do RSS over 16 CPU cores. With VF enabled this number falls down to just 4. If you have low traffic on a PF, then spreading it across only 4 cores may be okay. Unfortunately at CloudFlare we need large RSS group sizes.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"final-words\">Final words</h3>\n            <a href=\"#final-words\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Achieving a kernel bypass is not that simple. While many open source techniques exist, all of them seem to require a dedicated network card. We&#39;ve shown three possible alternative architectures:</p><ul><li><p>EF_VI-style hidden RX queues</p></li><li><p>DPDK bifurcated driver</p></li><li><p>The VF hack</p></li></ul><p>Unfortunately out of the many techniques we&#39;ve researched only EF_VI seem to be a practical in our circumstances. I do hope an open source kernel bypass API will emerge soon, one that doesn&#39;t require a dedicated NIC.</p>",
		"id": "5UgQpz0gWhfIeghu5fzdNH",
		"localeList": {
			"name": "Kernel bypass Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"published_at": "2015-09-07T10:52:44.000+01:00",
		"slug": "kernel-bypass",
		"tags": [
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			}
		],
		"title": "Kernel bypass",
		"updated_at": "2024-10-10T00:34:52.412Z",
		"url": "https://blog.cloudflare.com/kernel-bypass"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}