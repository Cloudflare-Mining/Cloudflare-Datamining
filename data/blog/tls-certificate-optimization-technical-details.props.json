{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "9",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Patrick R. Donahue",
				"slug": "patrick",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1LQFonIW7hvlt7UKRMOzlk/268d04eef37cd375ab2063158e74dea2/patrick.png",
				"location": "San Francisco, CA",
				"website": "https://www.cloudflare.com",
				"twitter": "@prdonahue",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Back in early December we announced our \"no browser left behind\" initiative to the world. Since then, we have served well over 500 billion SHA-1 certificates to visitors that otherwise would not have been able to communicate securely with our customers’ sites using HTTPS.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ZIHOxPdIx90SbuqE7QEd1/95c52fe343385640142f9c1f2ea77fbb/tls-certificate-optimization-technical-details.png",
		"featured": false,
		"html": "\n    <div class=\"flex anchor relative\">\n      <h3 id=\"overview\">Overview</h3>\n      <a href=\"#overview\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Back in early December <a href=\"/sha-1-deprecation-no-browser-left-behind/\">we announced</a> our &quot;no browser left behind&quot; initiative to the world. Since then, we have served well over 500 billion SHA-1 certificates to visitors that otherwise would not have been able to communicate securely with our customers’ sites using HTTPS. All the while, we’ve continued to present newer SHA-2 certificates to modern browsers using <a href=\"/ecdsa-the-digital-signature-algorithm-of-a-better-internet/\">the latest in elliptic curve cryptography</a>, demonstrating that one does not have to sacrifice security to accommodate all the world’s Internet users. (If you weren’t able to acquire a SHA-1 certificate before CAs ceased issuing them on 2015/12/31, you can still <a href=\"https://www.cloudflare.com/plans/\">sign up for a paid plan</a> and we will immediately generate one to serve to your legacy visitors.)</p><p>Shortly after we announced these new benefits for our paid Universal SSL customers, we started hearing from other technology leaders who were implementing (or already had implemented) similar functionality. At first glance, the logic to identify incoming connections that only support SHA-1 seems straightforward, but as we spoke with our friends at Facebook, Twitter, and Mozilla, I realized that everyone was taking a slightly different approach. Complicating the matter even further was the fact that at CloudFlare we not only wanted to optimize between SHA-1 and SHA-2, but also between RSA and the newer, but less universally supported <a href=\"/ecdsa-the-digital-signature-algorithm-of-a-better-internet/\">ECDSA certificates</a>. Solve the &quot;optimal certificate&quot; question incorrectly, and the TLS handshake will fail — or get explicitly aborted by browsers that have deprecated SHA-1 entirely; solve it correctly, and the client and server will establish the most performant, secure connection available between the two endpoints.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"certificate-optimization-logic\">Certificate Optimization Logic</h3>\n      <a href=\"#certificate-optimization-logic\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>After several trillion requests, we’re confident that our approach works quite well for CloudFlare’s customers and their visitors. If you have taken an alternative approach to implementation, or have found any exceptions/potential refinements to our logic, please chime in below. We remain committed to withdrawing SHA-1 support if, <a href=\"/sha-1-deprecation-no-browser-left-behind/\">as our CEO said</a>, &quot;a vulnerability is discovered [in our certificate optimization logic] which allows some form of downgrade attack—where a modern browser can be tricked into receiving a certificate signed with an insecure protocol—and the vulnerability cannot be patched&quot;.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"tls-handshake\">TLS Handshake</h4>\n      <a href=\"#tls-handshake\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Before your web browser can securely exchange &quot;application data&quot; such as HTTP GET or POST requests and responses with a web server, it must first establish the cryptographic parameters of the secure session. This well-choreographed dance, known as the SSL/TLS handshake, commences as soon as you click, type, or get redirected to a URL containing the &quot;https://&quot; scheme. (The process described below also applies to connections from any user agent — not just browsers—so substitute &quot;mobile app&quot;, &quot;command-line utility&quot;, or anything else that can communicate via HTTPS.)</p>\n    <div class=\"flex anchor relative\">\n      <h5 id=\"note-on-embedded-traversable-packet-captures\">Note on embedded, traversable packet captures</h5>\n      <a href=\"#note-on-embedded-traversable-packet-captures\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Each figure below contains an actual SSL/TLS record embedded from <a href=\"https://www.cloudshark.org/\">CloudShark</a>, a browser based version of WireShark. To view details of the handshake, expand the bottom-most row labeled &quot;Secure Sockets Layer&quot; and drill down until you see, e.g., &quot;Handshake Protocol: Client Hello&quot;. Note that some extensions will render as &quot;Unknown&quot; due to CloudShark using an old version of WireShark, but these are immaterial to understanding our certificate switching logic.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"step-1-client-hello\">Step 1 - Client Hello</h4>\n      <a href=\"#step-1-client-hello\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>After establishing a TCP connection to port 443 on the server, your browser transmits a <b>ClientHello</b> message containing the most recent version of TLS it supports; randomly generated data to be used for key exchange; the hostname of the website the user wants to browse; other capabilities or extensions it supports; and a rank ordered list of supported encryption algorithms.</p><p>If the session had previously been established with a server that supports session IDs or <a href=\"/microsoft-tls-downgrade-schannel-bug#overview\">session tickets</a>, this resumption data would have been sent in an attempt to abbreviate the process and avoid a “full” handshake; the steps below assume a full handshake, however, not an abbreviated one.</p><p>_Figure 1 - ClientHello message sent by Chrome to <a href=\"http://www.cloudflare.com\\\">www.cloudflare.com\\</a>_</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"step-2-server-hello\">Step 2 - Server Hello</h4>\n      <a href=\"#step-2-server-hello\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If the basic parameters of the <b>ClientHello</b> are acceptable to the web server, it responds with a <b>ServerHello</b> containing its own random data, the subset of the client-sent extensions it supports, and the selection it made from each of the options—(maximum supported) TLS version, cipher suite, and method of compression—provided by the client. Those interested in the cipher suites that CloudFlare’s edge supports can find them <a href=\"https://github.com/cloudflare/sslconfig/blob/master/conf\">listed on GitHub</a>.</p><p>_Figure 2 - ServerHello message sent by <a href=\"http://www.cloudflare.com\">www.cloudflare.com</a> to Chrome_</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"step-3-server-certificate\">Step 3 - (Server) Certificate</h4>\n      <a href=\"#step-3-server-certificate\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Immediately after sending the <b>ServerHello</b>, i.e., without waiting for a response from the client, the server sends the <b>Certificate</b> message. This message contains — at minimum — the leaf certificate matching the requested site, but it also can contain <a href=\"/what-we-just-did-to-make-ssl-even-faster/\">other certificates in the chain</a> such as the CA intermediate(s).</p><p>We&#39;ll come back to this message in a moment, as by this point any server-side logic to determine the optimal certificate to present to the browser — SHA-2 ECDSA, SHA-2 RSA, or SHA-1 RSA — must have been executed.</p><p><i>Figure 3 - Certificate message sent by </i><a href=\"http://www.cloudflare.com\"><i>www.cloudflare.com</i></a><i> to Chrome</i></p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"step-4-certificate-chain-validation\">Step 4 - Certificate Chain Validation</h4>\n      <a href=\"#step-4-certificate-chain-validation\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>While not an explicit step in most TLS handshake diagrams, it&#39;s important to pause here and review the process in the context of SHA-1 deprecation. When browsers like Chrome, Firefox, and Internet Explorer drop (or plan to drop) support for SHA-1 certificates, it is this certificate validation logic that they are modifying to explicitly reject such certificates<a href=\"#fn1\">[1]</a>. Conversely, when we consider browsers that can <i>only</i> utilize SHA-1 certificates, it is here where they would encounter critical, handshake-aborting errors if presented with a SHA-2 chain for validation. (Even worse, the web server would almost surely not be able to distinguish between SHA-2 validation errors and intermittent network issues.)</p><p>After receiving the <b>Certificate</b> message, the browser<a href=\"#fn1\">[1:1]</a> must first build a chain between the leaf certificate (i.e., the one valid for the hostname of the requested site) and the specific CA root that the system explicitly trusts due to inclusion in the root store. This process is fast and unambiguous when connecting to HTTPS providers—such as CloudFlare—that bundle the full chain together: leaf and intermediate(s). But for those that do not, the process can be slower and error-prone as the user agent is sometimes forced to decide between alternate paths with insufficient and imperfect information.</p><p>Then, for each certificate in the assembled chain, the browser extracts the signature provided by the issuing certificate authority (CA) and verifies it using the issuer’s public key. To do so, the browser uses the specified hashing algorithm — typically SHA-1 or SHA-256 — to create a digest of the data contained within the <a href=\"http://tools.ietf.org/html/rfc5280#section-4.1\">To Be Signed (TBS) Certificate section</a> of the X509 structure (e.g., expiration date, valid hostnames, etc.). It then takes that digest, along with the issuer&#39;s public key and signature, and runs it through the &quot;verify&quot; function for the signature algorithm. If the output of this verify function is &quot;true&quot;, the browser knows the structure is intact and unchanged from when the CA vetted it, as only someone in possession of the corresponding private key could have produced a valid signature.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5KoMEV43Sf1gU0AE99fcgQ/d2319780dd58af5c06561d92628d6943/ca-cert-signing.png\" alt=\"Creating and validating the CA's signature\" class=\"kg-image\" width=\"1326\" height=\"982\" loading=\"lazy\"/>\n            \n            </figure><p><i>Figure 4 - Validating a certificate signature</i></p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"remaining-steps-5\">Remaining Steps (5+)</h4>\n      <a href=\"#remaining-steps-5\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The handshake steps remaining after certificate verification—<b>ClientKeyExchange</b>, <b>ChangeCipherSpec</b> and <b>Finished</b>, followed by <b>ChangeCipherSpec</b> and <b>Finished</b> from the server—are not important to our certificate optimization logic, so they are not discussed here in detail. To summarize, the same primary key is generated on either end (<b>ClientKeyExchange</b>) and is used to encrypt traffic (<b>ChangeCipherSpec</b>) with a fast, symmetric, block cipher algorithm such as AES.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"logic-tree\">Logic Tree</h3>\n      <a href=\"#logic-tree\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Now that we understand how user agents establish TLS sessions with servers, let’s turn our attention to how CloudFlare specifically determines which certificate to present and, relatedly, which cipher suite to use. As we’ll soon see, this logic must execute prior to the <b>ServerHello</b> and <b>Certificate</b> messages being sent to the client. Fortunately, we have everything we need to act after parsing the <b>ClientHello</b>.</p><p>Below is the logic tree that our edge traverses to craft the appropriate response to the client&#39;s <b>ClientHello</b>. We’ve labeled each decision point with a number that corresponds to the headings below so that you can understand each step in the process. Before you attempt to verify this logic with your own zone, please remember that i) this flow only applies to paid plans—free plans always see the SHA-256/ECDSA certificate—and ii) you may have <a href=\"https://support.cloudflare.com/hc/en-us/articles/214770928-Legacy-Browser-Support\">Legacy Browser Support disabled</a>, so make sure to confirm on the Crypto tab in your CloudFlare dashboard.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/29TLfMfCAPTDpQygz5ZK0v/3f6c549538c598bbc5046f93b0492fdd/certificate_optimization_logic.png\" alt=\"Certificate Optimization Logic for Paid plans\" class=\"kg-image\" width=\"1800\" height=\"1369\" loading=\"lazy\"/>\n            \n            </figure><p><i>Figure 5 - Certificate Optimization Logic for Paid plans</i></p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"decision-0-plan-type\">Decision #0: Plan type</h4>\n      <a href=\"#decision-0-plan-type\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The first check is quite simple: if the zone is using the <a href=\"https://www.cloudflare.com/plans/free/\">Free plan</a>, we abort the rest of the checks and immediately return the SHA-256/ECDSA certificate. The reason we take this shortcut is that only one certificate is generated for free zones during onboarding, so there are no other candidates to consider besides SHA-256/ECDSA.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"decision-1-presence-of-signature_algorithm-extension\">Decision #1: Presence of signature_algorithm extension</h4>\n      <a href=\"#decision-1-presence-of-signature_algorithm-extension\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The next check that is performed is for the presence of the signature_algorithm extension (0x000d). This extension, <a href=\"https://www.ietf.org/rfc/rfc5246.txt\">added to TLS</a> in version 1.2, “indicate[s] to the server which signature/hash algorithm pairs may be used in digital signatures.” The specification (<a href=\"https://www.ietf.org/rfc/rfc5246.txt\">RFC 5246</a>) also reads:</p><blockquote><p>The semantics of this extension are somewhat complicated because the cipher suite indicates permissible signature algorithms but not hash algorithms. If the client supports only the default hash and signature algorithms (listed in this section), it MAY omit the signature_algorithms extension. If the client does not support the default algorithms, or supports other hash and signature algorithms (and it is willing to use them for verifying messages sent by the server, i.e., server certificates and server key exchange), it MUST send the signature_algorithms extension, listing the algorithms it is willing to accept.</p></blockquote><p>While many clients appear to support only the default set of signature algorithms (&quot;sigalgs&quot;), we have yet to see one TLS 1.2 ClientHello omit this extension (perhaps because the RFC is unclear on the default enumerations of hashes and signatures). If we don&#39;t see any sigalgs, we head to decision #5, while we head to #2 if we do.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"decisions-2-4-inclusion-of-specific-signature_algorithms-and-shared-cipher-suites\">Decisions #2-4: Inclusion of specific signature_algorithms and shared cipher suites</h4>\n      <a href=\"#decisions-2-4-inclusion-of-specific-signature_algorithms-and-shared-cipher-suites\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>At this point we know we are dealing with TLS 1.2 so we begin by checking if SHA-256/ECDSA is present in the signature_algorithm array.<a href=\"#fn1\">[1:2]</a> If it is, we also know that the client is able to validate a certificate signed with SHA-256 ECDSA, so we set that certificate as our top candidate and proceed to the next check.</p><p>With our optimal certificate in mind, we confirm, as §7.4.2 of RFC 5246 requires, that &quot;the certificate MUST be appropriate for the negotiated cipher suite&#39;s key exchange algorithm and any negotiated extensions.&quot; Bear in mind that we haven&#39;t yet chosen the cipher suite—the <b>ServerHello</b> message is yet to be sent—so we take the opportunity here to filter the client-provided candidates to those that i) are compatible with our SHA-256/ECDSA certificate and ii) overlap with <a href=\"https://github.com/cloudflare/sslconfig/blob/master/conf\">our preferred list as configured in NGINX</a>.<a href=\"#fn1\">[1:3]</a> After filtering this list, we try to choose a cipher suite that supports ECDSA keys, such as those that use ECDH(E)_ECDSA key exchange rather than ECDH(E)_RSA; assuming one is found, we select it and respond with the <b>ServerHello</b> and <b>Certificate</b> messages. If we’re unable to find a cipher suite that can be used with the zone’s SHA-2/ECDSA certificate, we look to see if SHA-256/RSA is an acceptable signature algorithm and return that certificate (and compatible cipher suite) to the user agent.</p><p>Note that adhering to this §7.4.2 check has helped us work around bugs in popular browsers such as Google Chrome. For example, during our implementation <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=409901\">we discovered that Chrome incorrectly reports it supports SHA-2/ECDSA</a> on Windows XP, even though that operating system has zero support for ECDSA signatures nor can it use the SHA-2 family of hashing algorithms without SP3 installed. (While Google acknowledged and initially committed code to fix the bug, they later determined that because i) cipher suites were still adjusted accordingly and ii) Windows XP support will be removed in the not too distant future, the fix was not worth merging.)</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"decision-5-presence-of-server_name_indication-extension\">Decision #5: Presence of server_name_indication extension</h4>\n      <a href=\"#decision-5-presence-of-server_name_indication-extension\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><i>Note that this check was added after initial launch, to reduce the frequency of SHA-2 capable clients receiving SHA-1. If we discover other ways to optimize our logic, we’ll push those as well.</i></p><p>If our edge code was unable to determine SHA-2 support by any other means (i.e., decision points #2-4 failed to converge on a certificate), we check for the presence of the server_name extension (&quot;SNI&quot;) as a last resort before serving SHA-1. The reason this check works is due to assumptions we have made—and confirmed—on a few important dates: when the SHA-2 standard was published by NIST (5/2001), when the <a href=\"https://www.ietf.org/rfc/rfc3546.txt\">TLS extensions</a> (6/2003) and <a href=\"https://www.ietf.org/rfc/rfc4346.txt\">TLS 1.1</a> (4/2006) RFCs were published, and how quickly vendors implemented these new specifications.</p><p>Outside of some extreme corner cases, we have been <a href=\"https://support.cloudflare.com/hc/en-us/articles/217484398\">unable to find any instances</a> of user agents that support SNI—defined in RFC 3546 in 2003, but not shipped by most major browsers until they added TLS 1.1 after 2006—but not SHA-2, which was published by NIST in 2001. Therefore, if we see SNI in the inbound request, we are confident that the user agent can validate a SHA-2/RSA signed certificate, so send it along with a compatible cipher suite. If we don’t, we’ve exhausted all of our signals that indicate the capability to use SHA-2, and move onto decision #6.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"decision-6-setting-of-legacy-browser-support-in-cloudflare-dashboard\">Decision #6: Setting of Legacy Browser Support in CloudFlare dashboard</h4>\n      <a href=\"#decision-6-setting-of-legacy-browser-support-in-cloudflare-dashboard\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If we reach this step we believe—based on the information conveyed in the <b>ClientHello</b>—that the user agent we are speaking with cannot support SHA-2 based certificates. But before serving a SHA-1 certificate, we first check to make sure that our customer (i.e., the owner of the site being requested), has not explicitly <a href=\"https://support.cloudflare.com/hc/en-us/articles/214770928-Legacy-Browser-Support\">disabled support for Legacy Browsers</a>.</p><p>While the vast majority of our customers are happy to support as many browsers as possible and thus leave this support on by default, some may be prohibited from doing so by their own information security policies. It is for reasons like this that we built a switch in the CloudFlare dashboard so customers can prevent our certificate optimization logic from falling all the way back to SHA-1 certificates. In the future, we plan to expand this UI control to allow clients to disable (or warn on) other protocols, such as TLS 1.0, 1.1, etc.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"verifying-your-uploaded-or-cloudflare-generated-certificates\">Verifying your uploaded or CloudFlare-generated certificates</h3>\n      <a href=\"#verifying-your-uploaded-or-cloudflare-generated-certificates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you’d like to verify that the certificates you’ve uploaded are optimized appropriately for the browser’s cryptographic capabilities, you can run the following commands. Before doing so, verify that you have a version of OpenSSL that supports TLS 1.2 (i.e., at least 1.0.1).</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"emulating-a-modern-browser-that-supports-tls-1-2-with-sha-2-ecdsa-certificates\">Emulating a modern browser that supports TLS 1.2 with SHA-2 ECDSA certificates</h4>\n      <a href=\"#emulating-a-modern-browser-that-supports-tls-1-2-with-sha-2-ecdsa-certificates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ openssl s_client -connect www.cloudflare.com:443 -servername www.cloudflare.com -tls1_2 &lt;/dev/null 2&gt;/dev/null | openssl x509 -noout -text | egrep &quot;DNS:|Signature Algorithm:&quot;|head -n2\n    \nSignature Algorithm: ecdsa-with-SHA256\nDNS:cloudflare.com, DNS:www.cloudflare.com</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"emulating-a-browser-that-supports-tls-1-2-and-sha-2-but-only-rsa-not-ecdsa\">Emulating a browser that supports TLS 1.2 and SHA-2 but only RSA (not ECDSA)</h4>\n      <a href=\"#emulating-a-browser-that-supports-tls-1-2-and-sha-2-but-only-rsa-not-ecdsa\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ openssl s_client -connect www.cloudflare.com:443 -servername www.cloudflare.com -tls1_2 -sigalgs RSA+SHA256 &lt;/dev/null 2&gt;/dev/null | openssl x509 -noout -text | egrep &quot;DNS:|Signature Algorithm:&quot;|head -n2\n\nSignature Algorithm: sha256WithRSAEncryption\nDNS:cloudflare.com, DNS:www.cloudflare.com`</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"emulating-a-legacy-browser-that-supports-tls-1-1-sha-2-and-sni\">Emulating a legacy browser that supports TLS 1.1, SHA-2, and SNI</h4>\n      <a href=\"#emulating-a-legacy-browser-that-supports-tls-1-1-sha-2-and-sni\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ openssl s_client -connect www.cloudflare.com:443 -servername www.cloudflare.com -tls1_1 &lt;/dev/null 2&gt;/dev/null | openssl x509 -noout -text | egrep &quot;DNS:|Signature Algorithm:&quot;|head -n2\n\nSignature Algorithm: sha256WithRSAEncryption\nDNS:cloudflare.com, DNS:www.cloudflare.com</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h4 id=\"emulating-a-legacy-browser-that-supports-only-tls-1-0-and-sha-1-no-sni\">Emulating a legacy browser that supports only TLS 1.0 and SHA-1 (no SNI)</h4>\n      <a href=\"#emulating-a-legacy-browser-that-supports-only-tls-1-0-and-sha-1-no-sni\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ openssl s_client -connect www.cloudflare.com:443 -tls1 &lt;/dev/null 2&gt;/dev/null | openssl x509 -noout -text | egrep &quot;DNS:|Signature Algorithm:&quot;|head -n2\n\nSignature Algorithm: sha1WithRSAEncryption\nDNS:cloudflare.com, DNS:www.cloudflare.com</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"special-thanks\">Special Thanks</h3>\n      <a href=\"#special-thanks\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Thank you to Zi Lin and Nick Sullivan for their assistance in designing, implementing, deploying, and testing our certificate optimization logic.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"were-hiring\">We&#39;re Hiring</h2>\n      <a href=\"#were-hiring\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Would you like to work on solving interesting problems like this for hundreds of millions of website visitors? If so, you&#39;re in luck: we&#39;re hiring for a wide range of engineering and product management positions and welcome you to apply through the <a href=\"https://www.cloudflare.com/join-our-team/\">CloudFlare Careers</a> page.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"endnotes\">Endnotes</h3>\n      <a href=\"#endnotes\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <hr/><ol><li><p>The format used in this config file is the shorthand expected by OpenSSL. As such, each colon-delimited value potentially represents many individual cipher suites. To enumerate this list, try running: $ for cs in $(curl -s <a href=\"https://raw.githubusercontent.com/cloudflare/sslconfig/master/conf%7Cgrep\">https://raw.githubusercontent.com/cloudflare/sslconfig/master/conf|grep</a> ssl_ciphers|awk &#39;{print $2}&#39;|sed -e &#39;s/:/ /g; s/!.*//; s/.$//&#39;); do echo &quot;expanding $cs:&quot; &amp;&amp; openssl ciphers -V $cs; done. <a href=\"#fnref1\">↩︎</a> <a href=\"#fnref1:1\">↩︎</a> <a href=\"#fnref1:2\">↩︎</a> <a href=\"#fnref1:3\">↩︎</a></p></li></ol>",
		"id": "5guELBSe4xnBimhT6KuVNJ",
		"localeList": {
			"name": "TLS Certificate Optimization: The Technical Details behind \"No Browser Left Behind\" Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Back in early December we announced our \"no browser left behind\" initiative to the world. Since then, we have served well over 500 billion SHA-1",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2016-03-23T16:03:04.000+00:00",
		"slug": "tls-certificate-optimization-technical-details",
		"tags": [
			{
				"id": "56vA0Z6hqev6QaJBQmO2J8",
				"name": "TLS",
				"slug": "tls"
			},
			{
				"id": "5US4l4wdDysuDpZ4ktL3yP",
				"name": "HTTPS",
				"slug": "https"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			},
			{
				"id": "1HblPaFreDjetoJDJPjTAi",
				"name": "SSL",
				"slug": "ssl"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "TLS Certificate Optimization: The Technical Details behind \"No Browser Left Behind\"",
		"updated_at": "2025-10-03T19:50:43.140Z",
		"url": "https://blog.cloudflare.com/tls-certificate-optimization-technical-details"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}