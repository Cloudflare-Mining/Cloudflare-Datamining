{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Sudarsan Reddy",
				"slug": "sudarsan",
				"bio": "Stuck somewhere between the Network and Transport Layers with Rusty tools. ",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7v5Ou4CdawyV4RdPJubEbc/d2ea259faeadccafe4dd912785dee0d1/sudarsan.jpg",
				"location": "Lisbon",
				"website": null,
				"twitter": "@sudproquo",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": " It is now possible to connect a Cloudflare Tunnel to the Cloudflare network with QUIC. While doing this, we ran into an interesting connectivity problem unique to UDP. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3gQ56AradbZUduX3MhnUlA/f2fd66fdb518ecd268723de000f85760/getting-cloudflare-tunnels-to-connect-to-the-cloudflare-network-with-quic.png",
		"featured": false,
		"html": "<p></p><p>I work on <i>Cloudflare Tunnel</i>, which lets customers quickly connect their private services and networks through the Cloudflare network without having to expose their public IPs or ports through their firewall. Tunnel is managed for users by <i>cloudflared</i>, a tool that runs on the same network as the private services. It proxies traffic for these services via Cloudflare, and users can then access these services securely through the Cloudflare network.</p><p>Recently, I was trying to get <i>Cloudflare Tunnel</i> to connect to the Cloudflare network using a UDP protocol, QUIC. While doing this, I ran into an interesting connectivity problem unique to UDP. In this post I will talk about how I went about debugging this connectivity issue beyond the land of firewalls, and how some interesting differences between UDP and TCP came into play when sending network packets.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-does-cloudflare-tunnel-work\">How does Cloudflare Tunnel work?</h3>\n      <a href=\"#how-does-cloudflare-tunnel-work\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/NEssmu5aijDShf2V3IWjw/cfd10b15ec2b255155f13cc2899d7b69/2-17.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"866\" loading=\"lazy\"/>\n            \n            </figure><p><i>cloudflared</i> works by opening several connections to different servers on the Cloudflare edge. Currently, these are long-lived TCP-based connections proxied over HTTP/2 frames. When Cloudflare receives a request to a hostname, it is proxied through these connections to the local service behind <i>cloudflared</i>.</p><p>While our HTTP/2 protocol mode works great, we’d like to improve a few things. First, TCP traffic sent over HTTP/2 is susceptible to <a href=\"https://en.wikipedia.org/wiki/Head-of-line_blocking\">Head of Line (HoL) blocking</a> — this affects both HTTP traffic and traffic from <a href=\"https://developers.cloudflare.com/cloudflare-one/tutorials/warp-to-tunnel\">WARP routing</a>. Additionally, it is currently not possible to initiate communication from <i>cloudflared’s</i> HTTP/2 server in an efficient way. With the current Go implementation of HTTP/2, we could use <a href=\"https://en.wikipedia.org/wiki/Server-sent_events#:~:text=Server%2DSent%20Events%20(SSE),client%20connection%20has%20been%20established.\">Server-Sent Events</a>, but this is not very useful in the scheme of proxying L4 traffic.</p><p>The upgrade to QUIC solves possible HoL blocking issues and opens up avenues that allow us to initiate communication from <i>cloudflared</i> to a different <i>cloudflared</i> in the future.</p><p>Naturally, QUIC required a UDP-based listener on our edge servers which <i>cloudflared</i> could connect to. We already connect to a TCP-based listener for the existing protocols, so this should be nice and easy, right?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"failed-to-dial-to-the-edge\">Failed to dial to the edge</h3>\n      <a href=\"#failed-to-dial-to-the-edge\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Things weren’t as straightforward as they first looked. I added a QUIC listener on the edge, and the ability for <i>cloudflared</i> to connect to this new UDP-based listener. I tried to run my brand new QUIC tunnel and this happened.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$  cloudflared tunnel run --protocol quic my-tunnel\n2021-09-17T18:44:11Z ERR Failed to create new quic connection, err: failed to dial to edge: timeout: no recent network activity</pre></code>\n            <p><i>cloudflared</i> wasn’t even establishing a connection to the edge. I started looking at the obvious places first. <i>Did I add a firewall rule allowing traffic to this port?</i> Check_. Did I have iptables rules ACCEPTing or DROPping appropriate traffic for this port?_ Check_._ They seemed to be in order. So what else could I do?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"tcpdump-all-the-packets\">tcpdump all the packets</h3>\n      <a href=\"#tcpdump-all-the-packets\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>I started by logging for UDP traffic on the machine my server was running on to see what could be happening.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$  sudo tcpdump -n -i eth0 port 7844 and udp\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n14:44:27.742629 IP 173.13.13.10.50152 &gt; 198.41.200.200.7844: UDP, length 1252\n14:44:27.743298 IP 203.0.113.0.7844 &gt; 173.13.13.10.50152: UDP, length 37</pre></code>\n            <p>Looking at this <i>tcpdump</i> helped me understand why I had no connectivity! Not only was this port getting UDP traffic but I was also seeing traffic flow out. But there seemed to be something strange afoot. Incoming packets were being sent to 198.41.200.200:7844 while responses were being sent back from 203.0.113.0:7844 (this is an <a href=\"https://datatracker.ietf.org/doc/html/rfc5737\">example IP</a> used for illustration purposes)  instead.</p><p>Why is this a problem? If a host (in this case, the server) chooses an address from a network unable to communicate with a public Internet host, it is likely that the return half of the communication will never arrive. But wait a minute. Why is some other IP getting prioritized over a source address my packets were already being sent to? Let’s take a deeper look at some IP addresses. (Note that I’ve deliberately oversimplified and scrambled results to minimally illustrate the problem)</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$  ip addr list\neth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1600 qdisc noqueue state UP group default qlen 1000\ninet 203.0.113.0/32 scope global eth0\ninet 198.41.200.200/32 scope global eth0 </pre></code>\n            \n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ip route show\ndefault via 203.0.113.0 dev eth0</pre></code>\n            <p>So this was clearly why the server was working fine on my machine but not on the Cloudflare edge servers. It looks like I have multiple IPs on the interface my service is bound to. The IP that is the default route is being sent back as the source address of the packet.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"why-does-this-work-for-tcp-but-not-udp\">Why does this work for TCP but not UDP?</h3>\n      <a href=\"#why-does-this-work-for-tcp-but-not-udp\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Connection-oriented protocols, like TCP, initiate a connection (<a href=\"https://man7.org/linux/man-pages/man2/connect.2.html\">connect()</a>) with a <a href=\"https://en.wikipedia.org/wiki/Handshaking#TCP_three-way_handshake\">three-way handshake</a>. The kernel therefore maintains a state about ongoing connections and uses this to determine the source IP address at the time of a response.</p><p>Because UDP (unless SOCK_SEQPACKET is involved) is connectionless, the kernel cannot maintain state like TCP does. The <a href=\"https://man7.org/linux/man-pages/man3/recvfrom.3p.html\"><i>recvfrom</i></a>  system call is invoked from the server side and tells who the data comes from. Unfortunately, <i>recvfrom</i>  does not tell us which IP this data is addressed for. Therefore, when the UDP server invokes the <code>[sendto](https://man7.org/linux/man-pages/man3/sendto.3p.html) system call</code> to respond to the client, we can only tell it which address to send the data to. The responsibility of determining the source-address IP then falls to the kernel. The kernel has certain <a href=\"http://linux-ip.net/html/routing-selection.html\">heuristics</a> that it uses to determine the source address. This may or may not work, and in the <i>ip routes</i> example above, these heuristics did not work. The kernel naturally (and wrongly) picks the address of the default route to respond with.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"telling-the-kernel-what-to-do\">Telling the kernel what to do</h3>\n      <a href=\"#telling-the-kernel-what-to-do\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>I had to rely on my application to set the source address explicitly and therefore not rely on kernel heuristics.</p><p>Linux has some generic I/O system calls, namely <a href=\"https://man7.org/linux/man-pages/man3/recvmsg.3p.html\"><i>recvmsg</i></a>  and <a href=\"https://man7.org/linux/man-pages/man3/sendmsg.3p.html\"><i>sendmsg</i></a>. Their function signatures allow us to both read or write additional <a href=\"http://www.gnu.org/software/libc/manual/html_node/Out_002dof_002dBand-Data.html\">out-of-band data</a> we can pass the source address to. This control information is passed via the <i>msghdr</i> struct’s <i>msg_control</i> field.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">ssize_t sendmsg(int socket, const struct msghdr *message, int flags)\nssize_t recvmsg(int socket, struct msghdr *message, int flags);\n \nstruct msghdr {\n     void    *   msg_name;   /* Socket name          */\n     int     msg_namelen;    /* Length of name       */\n     struct iovec *  msg_iov;    /* Data blocks          */\n     __kernel_size_t msg_iovlen; /* Number of blocks     */\n     void    *   msg_control;    /* Per protocol magic (eg BSD file descriptor passing) */\n    __kernel_size_t msg_controllen; /* Length of cmsg list */\n     unsigned int    msg_flags;\n};</pre></code>\n            <p>We can now copy the control information we’ve gotten from <i>recvmsg</i> back when calling <i>sendmsg</i>, providing the kernel with information about the source address.The library I used (<a href=\"https://github.com/lucas-clemente/quic-go\">https://github.com/lucas-clemente/quic-go</a>) had a recent update that did exactly this! I pulled the changes into my service and gave it a spin.</p><p>But alas. It did not work! A quick <i>tcpdump</i> showed that the same source address was being sent back. It seemed clear from reading the source code that the <i>recvmsg</i> and <i>sendmsg</i> were being called with the right values. It did not make sense.</p><p>So I had to see for myself if these system calls were being made.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"strace-all-the-system-calls\">strace all the system calls</h3>\n      <a href=\"#strace-all-the-system-calls\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><a href=\"https://man7.org/linux/man-pages/man1/strace.1.html\"><i>strace</i></a> is an extremely useful tool that tracks all system calls and signals sent/received by a process. Here’s what it had to say. I&#39;ve removed all the information not relevant to this specific issue.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">17:39:09.130346 recvmsg(3, {msg_name={sa_family=AF_INET6,\nsin6_port=htons(35224), inet_pton(AF_INET6, &quot;::ffff:171.54.148.10&quot;, \n&amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0}, msg_namelen=112-&gt;28, msg_iov=\n[{iov_base=&quot;_\\5S\\30\\273]\\275@\\34\\24\\322\\243{2\\361\\312|\\325\\n\\1\\314\\316`\\3\n03\\250\\301X\\20&quot;, iov_len=1452}], msg_iovlen=1, msg_control=[{cmsg_len=36, \ncmsg_level=SOL_IPV6, cmsg_type=0x32}, {cmsg_len=28, cmsg_level=SOL_IP, \ncmsg_type=IP_PKTINFO, cmsg_data={ipi_ifindex=if_nametoindex(&quot;eth0&quot;),\nipi_spec_dst=inet_addr(&quot;198.41.200.200&quot;),ipi_addr=inet_addr(&quot;198.41.200.200&quot;)}},\n{cmsg_len=17, cmsg_level=SOL_IP, \ncmsg_type=IP_TOS, cmsg_data=[0]}], msg_controllen=96, msg_flags=0}, 0) = 28 &lt;0.000007&gt;</pre></code>\n            \n            <pre class=\"language-bash\"><code class=\"language-bash\">17:39:09.165160 sendmsg(3, {msg_name={sa_family=AF_INET6, \nsin6_port=htons(35224), inet_pton(AF_INET6, &quot;::ffff:171.54.148.10&quot;, \n&amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0}, msg_namelen=28, \nmsg_iov=[{iov_base=&quot;Oe4\\37:3\\344 &amp;\\243W\\10~c\\\\\\316\\2640\\255*\\231 \nOY\\326b\\26\\300\\264&amp;\\33\\&quot;&quot;..., iov_len=1302}], msg_iovlen=1, msg_control=\n[{cmsg_len=28, cmsg_level=SOL_TCP, cmsg_type=0x8}], msg_controllen=28, \nmsg_flags=0}, 0) = 1302 &lt;0.000054&gt;</pre></code>\n            <p>Let&#39;s start with <i>recvmsg</i> . We can clearly see that the ipi_addr for the source is being passed correctly: <i>ipi_addr=inet_addr(&quot;172.16.90.131&quot;)</i>. This part works as expected. Looking at <i>sendmsg</i>  almost instantly tells us where the problem is. The field we want, ip_spec_dst is not being set as we make this system call. So the kernel continues to make wrong guesses as to what the source address may be.</p><p>This turned out to be a <a href=\"https://github.com/lucas-clemente/quic-go/blob/3b46d7402c8436c38ca0d07a1ab4b4251acfd794/conn_oob.go#L249\">bug</a> where the library was using <i>IPROTO_TCP</i> instead of <i>IPPROTO_IPV4</i> as the control message level while making the <i>sendmsg</i> call. Was that it? Seemed a little anticlimactic. I submitted a slightly more typesafe <a href=\"https://github.com/lucas-clemente/quic-go/pull/3278\">fix</a> and sure enough, straces now showed me what I was expecting to see.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">18:22:08.334755 sendmsg(3, {msg_name={sa_family=AF_INET6, \nsin6_port=htons(37783), inet_pton(AF_INET6, &quot;::ffff:171.54.148.10&quot;, \n&amp;sin6_addr), sin6_flowinfo=htonl(0), sin6_scope_id=0}, msg_namelen=28, \nmsg_iov=\n[{iov_base=&quot;Ki\\20NU\\242\\211Y\\254\\337\\3107\\224\\201\\233\\242\\2647\\245}6jlE\\2\n70\\227\\3023_\\353n\\364&quot;..., iov_len=33}], msg_iovlen=1, msg_control=\n[{cmsg_len=28, cmsg_level=SOL_IP, cmsg_type=IP_PKTINFO, cmsg_data=\n{ipi_ifindex=if_nametoindex(&quot;eth0&quot;), \nipi_spec_dst=inet_addr(&quot;198.41.200.200&quot;),ipi_addr=inet_addr(&quot;0.0.0.0&quot;)}}\n], msg_controllen=32, msg_flags=0}, 0) =\n33 &lt;0.000049&gt;</pre></code>\n            <p><i>cloudflared</i> is now able to connect with UDP (QUIC) to the Cloudflare network from anywhere in the world!</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$  cloudflared tunnel --protocol quic run sudarsans-tunnel\n2021-09-21T11:37:30Z INF Starting tunnel tunnelID=a72e9cb7-90dc-499b-b9a0-04ee70f4ed78\n2021-09-21T11:37:30Z INF Version 2021.9.1\n2021-09-21T11:37:30Z INF GOOS: darwin, GOVersion: go1.16.5, GoArch: amd64\n2021-09-21T11:37:30Z INF Settings: map[p:quic protocol:quic]\n2021-09-21T11:37:30Z INF Initial protocol quic\n2021-09-21T11:37:32Z INF Connection 3ade6501-4706-433e-a960-c793bc2eecd4 registered connIndex=0 location=AMS</pre></code>\n            <p>While the programmatic bug causing this issue was a trivial one, the journey into systematically discovering the issue and understanding how Linux internals worked for UDP along the way turned out to be very rewarding for me. It also reiterated my belief that <i>tcpdump</i> and <i>strace</i> are indeed invaluable tools in anybody’s arsenal when debugging network problems.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"whats-next\">What’s next?</h3>\n      <a href=\"#whats-next\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>You can give this a try with the latest <i>cloudflared</i> release at <a href=\"https://github.com/cloudflare/cloudflared/releases/latest\">https://github.com/cloudflare/cloudflared/releases/latest</a>. Just remember to set the <i>protocol</i> flag to <i>quic</i>. We plan to leverage this new mode to roll out some exciting new features for <i>Cloudflare Tunnel</i>. So upgrade away and keep watching this space for more information on how you can take advantage of this.</p>",
		"id": "1HDlvSKaYHiPl8cXFEdNV6",
		"localeList": {
			"name": "Getting Cloudflare Tunnels to connect to the Cloudflare Network with QUIC Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-10-20T14:00:53.000+01:00",
		"slug": "getting-cloudflare-tunnels-to-connect-to-the-cloudflare-network-with-quic",
		"tags": [
			{
				"id": "2kFnzwwExTv3DVtV0CTReO",
				"name": "Cloudflare Tunnel",
				"slug": "cloudflare-tunnel"
			},
			{
				"id": "J61Eszqn98amrYHq4IhTx",
				"name": "Zero Trust",
				"slug": "zero-trust"
			},
			{
				"id": "6QktrXeEFcl4e2dZUTZVGl",
				"name": "Product News",
				"slug": "product-news"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "76HSdQ6sNz56VVQXRUhhSw",
				"name": "QUIC",
				"slug": "quic"
			}
		],
		"title": "Getting Cloudflare Tunnels to connect to the Cloudflare Network with QUIC",
		"updated_at": "2025-10-24T10:01:41.869Z",
		"url": "https://blog.cloudflare.com/getting-cloudflare-tunnels-to-connect-to-the-cloudflare-network-with-quic"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}