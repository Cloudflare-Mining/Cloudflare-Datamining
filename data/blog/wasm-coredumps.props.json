{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "10",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Sven Sauleau",
				"slug": "sven",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4AvybzTkWLlF4cdTgLrE3q/0d45d87578c7668f3d62e49095bb4409/sven.jpg",
				"location": null,
				"website": null,
				"twitter": "@svensauleau",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Celso Martinho",
				"slug": "celso",
				"bio": "From when Mosaic took over Gopher. Engineering Director at Cloudflare.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pzgat1zmt1oF1byi7hskH/7b25e8e00117ee44afe36ad27d7d8032/celso.png",
				"location": "Portugal, Lisbon",
				"website": "https://celso.io/",
				"twitter": "@celso",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Debugging Rust and Wasm with Cloudflare Workers involves a lot of the good old time-consuming and nerve-wracking printf'ing strategy. What if there’s a better way? This blog is about enabling and using Wasm core dumps and how you can easily debug Rust in Cloudflare Workers",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5Yyn1buoS0XypIGN6rFH0E/763bee524ecc9557f1e6aafddaaa3893/wasm-coredumps.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5mXdKDMicecNL6Iy017EXq/9b5a272fb48c3bf892c228984aee6ddd/image4-5.png\" alt=\"Wasm core dumps and debugging Rust in Workers\" class=\"kg-image\" width=\"1999\" height=\"1125\" loading=\"lazy\"/>\n            \n            </figure><p>A clear sign of maturing for any new programming language or environment is how easy and efficient debugging them is. Programming, like any other complex task, involves various challenges and potential pitfalls. Logic errors, off-by-ones, null pointer dereferences, and memory leaks are some examples of things that can make software developers desperate if they can&#39;t pinpoint and fix these issues quickly as part of their workflows and tools.</p><p><a href=\"https://webassembly.org/\">WebAssembly</a> (Wasm) is a binary instruction format designed to be a portable and efficient target for the compilation of high-level languages like <a href=\"https://www.rust-lang.org/\">Rust</a>, C, C++, and others. In recent years, it has gained significant traction for building high-performance applications in web and serverless environments.</p><p>Cloudflare Workers has had <a href=\"https://github.com/cloudflare/workers-rs\">first-party support for Rust and Wasm</a> for quite some time. We&#39;ve been using this powerful combination to bootstrap and build some of our most recent services, like <a href=\"/introducing-d1/\">D1</a>, <a href=\"/introducing-constellation/\">Constellation</a>, and <a href=\"/automatic-signed-exchanges/\">Signed Exchanges</a>, to name a few.</p><p>Using tools like <a href=\"https://github.com/cloudflare/workers-sdk\">Wrangler</a>, our command-line tool for building with Cloudflare developer products, makes streaming real-time logs from our applications running remotely easy. Still, to be honest, debugging Rust and Wasm with Cloudflare Workers involves a lot of the good old time-consuming and nerve-wracking <a href=\"https://news.ycombinator.com/item?id=26925570\">printf&#39;ing</a> strategy.</p><p>What if there’s a better way? This blog is about enabling and using Wasm core dumps and how you can easily debug Rust in Cloudflare Workers.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"what-are-core-dumps\">What are core dumps?</h3>\n      <a href=\"#what-are-core-dumps\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In computing, a <a href=\"https://en.wikipedia.org/wiki/Core_dump\">core dump</a> consists of the recorded state of the working memory of a computer program at a specific time, generally when the program has crashed or otherwise terminated abnormally. They also add things like the processor registers, stack pointer, program counter, and other information that may be relevant to fully understanding why the program crashed.</p><p>In most cases, depending on the system’s configuration, core dumps are usually initiated by the operating system in response to a program crash. You can then use a debugger like <a href=\"https://linux.die.net/man/1/gdb\">gdb</a> to examine what happened and hopefully determine the cause of a crash. <a href=\"https://linux.die.net/man/1/gdb\">gdb</a> allows you to run the executable to try to replicate the crash in a more controlled environment, inspecting the variables, and much more. The Windows&#39; equivalent of a core dump is a <a href=\"https://learn.microsoft.com/en-us/troubleshoot/windows-client/performance/read-small-memory-dump-file\">minidump</a>. Other mature languages that are interpreted, like Python, or languages that run inside a virtual machine, like <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/visualvm/coredumps.html\">Java</a>, also have their ways of generating core dumps for post-mortem analysis.</p><p>Core dumps are particularly useful for post-mortem debugging, determining the conditions that lead to a failure after it has occurred.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"webassembly-core-dumps\">WebAssembly core dumps</h3>\n      <a href=\"#webassembly-core-dumps\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>WebAssembly has had a <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Coredump.md\">proposal for implementing core dumps</a> in discussion for a while. It&#39;s a work-in-progress experimental specification, but it provides basic support for the main ideas of post-mortem debugging, including using the <a href=\"https://yurydelendik.github.io/webassembly-dwarf/\">DWARF</a> (debugging with attributed record formats) debug format, the same that Linux and gdb use. Some of the most popular Wasm runtimes, like <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5868\">Wasmtime</a> and <a href=\"https://github.com/wasmerio/wasmer/pull/3626\">Wasmer</a>, have experimental flags that you can enable and start playing with Wasm core dumps today.</p><p>If you run Wasmtime or Wasmer with the flag:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">--coredump-on-trap=/path/to/coredump/file</pre></code>\n            <p>The core dump file will be emitted at that location path if a crash happens. You can then use tools like <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/wasmgdb\">wasmgdb</a> to inspect the file and debug the crash.</p><p>But let&#39;s dig into how the core dumps are generated in WebAssembly, and what’s inside them.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"how-are-wasm-core-dumps-generated\">How are Wasm core dumps generated</h3>\n      <a href=\"#how-are-wasm-core-dumps-generated\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>(and what’s inside them)</p><p>When WebAssembly terminates execution due to abnormal behavior, we say that it entered a trap. With Rust, examples of operations that can trap are accessing out-of-bounds addresses or a division by zero arithmetic call. You can read about the <a href=\"https://webassembly.org/docs/security/\">security model of WebAssembly</a> to learn more about traps.</p><p>The core dump specification plugs into the trap workflow. When WebAssembly crashes and enters a trap, core dumping support kicks in and starts unwinding the call <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#stack\">stack</a> gathering debugging information. For each frame in the stack, it collects the <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-func\">function</a> parameters and the values stored in locals and in the stack, along with binary offsets that help us map to exact locations in the source code. Finally, it snapshots the <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-mem\">memory</a> and captures information like the <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-table\">tables</a> and the <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-global\">global variables</a>.</p><p><a href=\"https://dwarfstd.org/\">DWARF</a> is used by many mature languages like C, C++, Rust, Java, or Go. By emitting DWARF information into the binary at compile time a debugger can provide information such as the source name and the line number where the exception occurred, function and argument names, and more. Without DWARF, the core dumps would be just pure assembly code without any contextual information or metadata related to the source code that generated it before compilation, and they would be much harder to debug.</p><p>WebAssembly <a href=\"https://webassembly.github.io/spec/core/appendix/custom.html#name-section\">uses a (lighter) version of DWARF</a> that maps functions, or a module and local variables, to their names in the source code (you can read about the <a href=\"https://webassembly.github.io/spec/core/appendix/custom.html#name-section\">WebAssembly name section</a> for more information), and naturally core dumps use this information.</p><p>All this information for debugging is then bundled together and saved to the file, the core dump file.</p><p>The <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Coredump.md#coredump-file-format\">core dump structure</a> has multiple sections, but the most important are:</p><ul><li><p>General information about the process;</p></li><li><p>The <a href=\"https://webassembly.github.io/threads/core/\">threads</a> and their stack frames (note that WebAssembly is <a href=\"https://developers.cloudflare.com/workers/runtime-apis/webassembly/#threading\">single threaded</a> in Cloudflare Workers);</p></li><li><p>A snapshot of the WebAssembly linear memory or only the relevant regions;</p></li><li><p>Optionally, other sections like globals, data, or table.</p></li></ul><p>Here’s the thread definition from the core dump specification:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">corestack   ::= customsec(thread-info vec(frame))\nthread-info ::= 0x0 thread-name:name ...\nframe       ::= 0x0 ... funcidx:u32 codeoffset:u32 locals:vec(value)\n                stack:vec(value)</pre></code>\n            <p>A thread is a custom section called <code>corestack</code>. A corestack section contains the thread name and a vector (or array) of frames. Each frame contains the function index in the WebAssembly module (<code>funcidx</code>), the code offset relative to the function&#39;s start (<code>codeoffset</code>), the list of locals, and the list of values in the stack.</p><p>Values are defined as follows:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">value ::= 0x01       =&gt; ∅\n        | 0x7F n:i32 =&gt; n\n        | 0x7E n:i64 =&gt; n\n        | 0x7D n:f32 =&gt; n\n        | 0x7C n:f64 =&gt; n</pre></code>\n            <p>At the time of this writing these are the possible <a href=\"https://webassembly.github.io/spec/core/binary/types.html#binary-numtype\">numbers types</a> in a value. Again, we wanted to describe the basics; you should track the full <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Coredump.md#coredump-file-format\">specification</a> to get more detail or find information about future changes. WebAssembly core dump support is in its early stages of specification and implementation, things will get better, things might change.</p><p>This is all great news. Unfortunately, however, the Cloudflare Workers <a href=\"https://github.com/cloudflare/workerd\">runtime</a> doesn’t support WebAssembly core dumps yet. There is no technical impediment to adding this feature to <a href=\"https://github.com/cloudflare/workerd\">workerd</a>; after all, it&#39;s <a href=\"https://developers.cloudflare.com/workers/learning/how-workers-works/\">based on V8</a>, but since it powers a critical part of our production infrastructure and products, we tend to be conservative when it comes to adding specifications or standards that are still considered experimental and still going through the definitions phase.</p><p>So, how do we get core Wasm dumps in Cloudflare Workers today?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"polyfilling\">Polyfilling</h3>\n      <a href=\"#polyfilling\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Polyfilling means using userland code to provide modern functionality in older environments that do not natively support it. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Polyfill\">Polyfills</a> are widely popular in the JavaScript community and the browser environment; they&#39;ve been used extensively to address issues where browser vendors still didn&#39;t catch up with the latest standards, or when they implement the same features in different ways, or address cases where old browsers can never support a new standard.</p><p>Meet <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/rewriter\">wasm-coredump-rewriter</a>, a tool that you can use to rewrite a Wasm module and inject the core dump runtime functionality in the binary. This runtime code will catch most traps (exceptions in host functions are not yet catched and memory violation not by default) and generate a standard core dump file. To some degree, this is similar to how Binaryen&#39;s <a href=\"https://github.com/WebAssembly/binaryen/blob/main/src/passes/Asyncify.cpp\">Asyncify</a> <a href=\"https://kripken.github.io/blog/wasm/2019/07/16/asyncify.html\">works</a>.</p><p>Let’s look at code and see how this works. He’s some simple pseudo code:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">export function entry(v1, v2) {\n    return addTwo(v1, v2)\n}\n\nfunction addTwo(v1, v2) {\n  res = v1 + v2;\n  throw &quot;something went wrong&quot;;\n\n  return res\n}</pre></code>\n            <p>An imaginary compiler could take that source and generate the following Wasm binary code:</p>\n            <pre class=\"language-webassembly\"><code class=\"language-webassembly\">  (func $entry (param i32 i32) (result i32)\n    (local.get 0)\n    (local.get 1)\n    (call $addTwo)\n  )\n\n  (func $addTwo (param i32 i32) (result i32)\n    (local.get 0)\n    (local.get 1)\n    (i32.add)\n    (unreachable) ;; something went wrong\n  )\n\n  (export &quot;entry&quot; (func $entry))</pre></code>\n            <p><i>“;;” is used to denote a comment.</i></p><p><code>entry()</code> is the Wasm function <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostfunc\">exported to the host</a>. In an environment like the browser, JavaScript (being the host) can call entry().</p><p>Irrelevant parts of the code have been snipped for brevity, but this is what the Wasm code will look like after <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/rewriter\">wasm-coredump-rewriter</a> rewrites it:</p>\n            <pre class=\"language-webassembly\"><code class=\"language-webassembly\">  (func $entry (type 0) (param i32 i32) (result i32)\n    ...\n    local.get 0\n    local.get 1\n    call $addTwo ;; see the addTwo function bellow\n    global.get 2 ;; is unwinding?\n    if  ;; label = @1\n      i32.const x ;; code offset\n      i32.const 0 ;; function index\n      i32.const 2 ;; local_count\n      call $coredump/start_frame\n      local.get 0\n      call $coredump/add_i32_local\n      local.get 1\n      call $coredump/add_i32_local\n      ...\n      call $coredump/write_coredump\n      unreachable\n    end)\n\n  (func $addTwo (type 0) (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add\n    ;; the unreachable instruction was here before\n    call $coredump/unreachable_shim\n    i32.const 1 ;; funcidx\n    i32.const 2 ;; local_count\n    call $coredump/start_frame\n    local.get 0\n    call $coredump/add_i32_local\n    local.get 1\n    call $coredump/add_i32_local\n    ...\n    return)\n\n  (export &quot;entry&quot; (func $entry))</pre></code>\n            <p>As you can see, a few things changed:</p><ol><li><p>The (unreachable) instruction in <code>addTwo()</code> was replaced by a call to <code>$coredump/unreachable_shim</code> which starts the unwinding process. Then, the location and debugging data is captured, and the function returns normally to the <code>entry()</code> caller.</p></li><li><p>Code has been added after the <code>addTwo()</code> call instruction in <code>entry()</code> that detects if we have an unwinding process in progress or not. If we do, then it also captures the local debugging data, writes the core dump file and then, finally, moves to the unconditional trap unreachable.</p></li></ol><p>In short, we unwind until the host function <code>entry()</code> gets destroyed by calling unreachable.</p><p>Let’s go over the runtime functions that we inject for more clarity, stay with us:</p><ul><li><p><code>$coredump/start_frame(funcidx, local_count)</code> starts a new frame in the coredump.</p></li><li><p><code>$coredump/add_*_local(value)</code> captures the values of function arguments and in locals (currently capturing values from the stack isn’t implemented.)</p></li><li><p><code>$coredump/write_coredump</code> is used at the end and writes the core dump in memory. We take advantage of the first 1 KiB of the Wasm linear memory, which is unused, to store our core dump.</p></li></ul><p>A diagram is worth a thousand words:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/27DxZQioAhBsBiltjwIiyL/2dc57b370b6741120a5bb263c2795652/image2-7.png\" alt=\"\" class=\"kg-image\" width=\"1372\" height=\"986\" loading=\"lazy\"/>\n            \n            </figure><p>Wait, what’s this about the first 1 KiB of the memory being unused, you ask? Well, it turns out that most WebAssembly linters and tools, including <a href=\"https://github.com/emscripten-core/emscripten/issues/5775#issuecomment-344049528\">Emscripten</a> and <a href=\"https://github.com/llvm/llvm-project/blob/121e15f96ce401c875e717992a4d054e308ba775/lld/wasm/Writer.cpp#L366\">WebAssembly’s LLVM</a> don’t use the first 1 KiB of memory. <a href=\"https://github.com/rust-lang/rust/issues/50543\">Rust</a> and <a href=\"https://github.com/ziglang/zig/issues/4496\">Zig</a> also use LLVM, but they changed the default. This isn’t pretty, but the hugely popular Asyncify polyfill relies on the same trick, so there’s reasonable support until we find a better way.</p><p>But we digress, let’s continue. After the crash, the host, typically JavaScript in the browser, can now catch the exception and extract the core dump from the Wasm instance’s memory:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">try {\n    wasmInstance.exports.someExportedFunction();\n} catch(err) {\n    const image = new Uint8Array(wasmInstance.exports.memory.buffer);\n    writeFile(&quot;coredump.&quot; + Date.now(), image);\n}</pre></code>\n            <p>If you&#39;re curious about the actual details of the core dump implementation, you can find the <a href=\"https://github.com/xtuc/wasm-coredump/blob/main/lib/asc-coredump/assembly/coredump.ts\">source code here</a>. It was written in <a href=\"https://www.assemblyscript.org/\">AssemblyScript</a>, a TypeScript-like language for WebAssembly.</p><p>This is how we use the polyfilling technique to implement Wasm core dumps when the runtime doesn’t support them yet. Interestingly, some Wasm runtimes, being optimizing compilers, are likely to make debugging more difficult because function arguments, locals, or functions themselves can be optimized away. Polyfilling or rewriting the binary could actually preserve more source-level information for debugging.</p><p>You might be asking what about performance? We did some testing and found that the <a href=\"https://github.com/xtuc/wasm-coredump-bench/blob/main/results.md\">impact is negligible</a>; the cost-benefit of being able to debug our crashes is positive. Also, you can easily turn wasm core dumps on or off for specific builds or environments; deciding when you need them is up to you.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"debugging-from-a-core-dump\">Debugging from a core dump</h3>\n      <a href=\"#debugging-from-a-core-dump\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We now know how to generate a core dump, but how do we use it to diagnose and debug a software crash?</p><p>Similarly to <a href=\"https://en.wikipedia.org/wiki/GNU_Debugger\">gdb</a> (GNU Project Debugger) on Linux, <a href=\"https://github.com/xtuc/wasm-coredump/blob/main/bin/wasmgdb/README.md\">wasmgdb</a> is the tool you can use to parse and make sense of core dumps in WebAssembly; it understands the file structure, uses DWARF to provide naming and contextual information, and offers interactive commands to navigate the data. To exemplify how it works, <a href=\"https://github.com/xtuc/wasm-coredump/blob/main/bin/wasmgdb/demo.md\">wasmgdb has a demo</a> of a Rust application that deliberately crashes; we will use it.</p><p>Let&#39;s imagine that our Wasm program crashed, wrote a core dump file, and we want to debug it.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ wasmgdb source-program.wasm /path/to/coredump\nwasmgdb&gt;</pre></code>\n            <p>When you fire wasmgdb, you enter a <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">REPL (Read-Eval-Print Loop)</a> interface, and you can start typing commands. The tool tries to mimic the gdb command syntax; you can find the <a href=\"https://github.com/xtuc/wasm-coredump/blob/main/bin/wasmgdb/README.md#commands\">list here</a>.</p><p>Let&#39;s examine the backtrace using the bt command:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">wasmgdb&gt; bt\n#18     000137 as __rust_start_panic () at library/panic_abort/src/lib.rs\n#17     000129 as rust_panic () at library/std/src/panicking.rs\n#16     000128 as rust_panic_with_hook () at library/std/src/panicking.rs\n#15     000117 as {closure#0} () at library/std/src/panicking.rs\n#14     000116 as __rust_end_short_backtrace&lt;std::panicking::begin_panic_handler::{closure_env#0}, !&gt; () at library/std/src/sys_common/backtrace.rs\n#13     000123 as begin_panic_handler () at library/std/src/panicking.rs\n#12     000194 as panic_fmt () at library/core/src/panicking.rs\n#11     000198 as panic () at library/core/src/panicking.rs\n#10     000012 as calculate (value=0x03000000) at src/main.rs\n#9      000011 as process_thing (thing=0x2cff0f00) at src/main.rs\n#8      000010 as main () at src/main.rs\n#7      000008 as call_once&lt;fn(), ()&gt; (???=0x01000000, ???=0x00000000) at /rustc/b833ad56f46a0bbe0e8729512812a161e7dae28a/library/core/src/ops/function.rs\n#6      000020 as __rust_begin_short_backtrace&lt;fn(), ()&gt; (f=0x01000000) at /rustc/b833ad56f46a0bbe0e8729512812a161e7dae28a/library/std/src/sys_common/backtrace.rs\n#5      000016 as {closure#0}&lt;()&gt; () at /rustc/b833ad56f46a0bbe0e8729512812a161e7dae28a/library/std/src/rt.rs\n#4      000077 as lang_start_internal () at library/std/src/rt.rs\n#3      000015 as lang_start&lt;()&gt; (main=0x01000000, argc=0x00000000, argv=0x00000000, sigpipe=0x00620000) at /rustc/b833ad56f46a0bbe0e8729512812a161e7dae28a/library/std/src/rt.rs\n#2      000013 as __original_main () at &lt;directory not found&gt;/&lt;file not found&gt;\n#1      000005 as _start () at &lt;directory not found&gt;/&lt;file not found&gt;\n#0      000264 as _start.command_export at &lt;no location&gt;</pre></code>\n            <p>Each line represents a frame from the program&#39;s call <a href=\"https://webassembly.github.io/spec/core/exec/runtime.html#stack\">stack</a>; see frame #3:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">#3      000015 as lang_start&lt;()&gt; (main=0x01000000, argc=0x00000000, argv=0x00000000, sigpipe=0x00620000) at /rustc/b833ad56f46a0bbe0e8729512812a161e7dae28a/library/std/src/rt.rs</pre></code>\n            <p>You can read the funcidx, function name, arguments names and values and source location are all present. Let&#39;s select frame #9 now and inspect the locals, which include the function arguments:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">wasmgdb&gt; f 9\n000011 as process_thing (thing=0x2cff0f00) at src/main.rs\nwasmgdb&gt; info locals\nthing: *MyThing = 0xfff1c</pre></code>\n            <p>Let’s use the <code>p</code> command to inspect the content of the thing argument:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">wasmgdb&gt; p (*thing)\nthing (0xfff2c): MyThing = {\n    value (0xfff2c): usize = 0x00000003\n}</pre></code>\n            <p>You can also use the <code>p</code> command to inspect the value of the variable, which can be useful for nested structures:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">wasmgdb&gt; p (*thing)-&gt;value\nvalue (0xfff2c): usize = 0x00000003</pre></code>\n            <p>And you can use p to inspect memory addresses. Let’s point at <code>0xfff2c</code>, the start of the <code>MyThing</code> structure, and inspect:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">wasmgdb&gt; p (MyThing) 0xfff2c\n0xfff2c (0xfff2c): MyThing = {\n    value (0xfff2c): usize = 0x00000003\n}</pre></code>\n            <p>All this information in every step of the stack is very helpful to determine the cause of a crash. In our test case, if you look at frame #10, we triggered an integer overflow. Once you get comfortable walking through wasmgdb and using its commands to inspect the data, debugging core dumps will be another powerful skill under your belt.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"tidying-up-everything-in-cloudflare-workers\">Tidying up everything in Cloudflare Workers</h3>\n      <a href=\"#tidying-up-everything-in-cloudflare-workers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We learned about core dumps and how they work, and we know how to make Cloudflare Workers generate them using the wasm-coredump-rewriter polyfill, but how does all this work in practice end to end?</p><p>We&#39;ve been dogfooding the technique described in this blog at Cloudflare for a while now. Wasm core dumps have been invaluable in helping us debug Rust-based services running on top of Cloudflare Workers like <a href=\"/introducing-d1/\">D1</a>, <a href=\"/privacy-edge-making-building-privacy-first-apps-easier/\">Privacy Edge</a>, <a href=\"/announcing-amp-real-url/\">AMP</a>, or <a href=\"/introducing-constellation/\">Constellation</a>.</p><p>Today we&#39;re open-sourcing the <a href=\"https://github.com/cloudflare/wasm-coredump\">Wasm Coredump Service</a> and enabling anyone to deploy it. This service collects the Wasm core dumps originating from your projects and applications when they crash, parses them, prints an exception with the stack information in the logs, and can optionally store the full core dump in a file in an <a href=\"https://developers.cloudflare.com/r2/\">R2 bucket</a> (which you can then use with wasmgdb) or send the exception to <a href=\"https://sentry.io/\">Sentry</a>.</p><p>We use a <a href=\"https://developers.cloudflare.com/workers/configuration/bindings/about-service-bindings/\">service binding</a> to facilitate the communication between your application Worker and the Coredump service Worker. A Service binding allows you to send HTTP requests to another Worker without those requests going over the Internet, thus avoiding network latency or having to deal with authentication. Here’s a diagram of how it works:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/gntGbV7rjDOncMZhFP7x1/3429a64f297c0edbf3327c677d56e0d3/image1-12.png\" alt=\"\" class=\"kg-image\" width=\"1520\" height=\"1000\" loading=\"lazy\"/>\n            \n            </figure><p>Using it is as simple as npm/yarn installing <code>@cloudflare/wasm-coredump</code>, configuring a few options, and then adding a few lines of code to your other applications running in Cloudflare Workers, in the exception handling logic:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import shim, { getMemory, wasmModule } from &quot;../build/worker/shim.mjs&quot;\n\nconst timeoutSecs = 20;\n\nasync function fetch(request, env, ctx) {\n    try {\n        // see https://github.com/rustwasm/wasm-bindgen/issues/2724.\n        return await Promise.race([\n            shim.fetch(request, env, ctx),\n            new Promise((r, e) =&gt; setTimeout(() =&gt; e(&quot;timeout&quot;), timeoutSecs * 1000))\n        ]);\n    } catch (err) {\n      const memory = getMemory();\n      const coredumpService = env.COREDUMP_SERVICE;\n      await recordCoredump({ memory, wasmModule, request, coredumpService });\n      throw err;\n    }\n}</pre></code>\n            <p>The <code>../build/worker/shim.mjs</code> import comes from the <a href=\"https://github.com/cloudflare/workers-rs/tree/main/worker-build\">worker-build</a> tool, from the <a href=\"https://github.com/cloudflare/workers-rs/tree/main\">workers-rs</a> packages and is automatically generated when <a href=\"https://developers.cloudflare.com/workers/wrangler/install-and-update/\">wrangler</a> builds your Rust-based Cloudflare Workers project. If the Wasm throws an exception, we catch it, extract the core dump from memory, and send it to our Core dump service.</p><p>You might have noticed that we race the <a href=\"https://github.com/cloudflare/workers-rs\">workers-rs</a> <code>shim.fetch()</code> entry point with another Promise to generate a timeout exception if the Rust code doesn&#39;t respond earlier. This is because currently, <a href=\"https://github.com/rustwasm/wasm-bindgen/\">wasm-bindgen</a>, which generates the glue between the JavaScript and Rust land, used by workers-rs, has <a href=\"https://github.com/rustwasm/wasm-bindgen/issues/2724\">an issue</a> where a Promise might not be rejected if Rust panics asynchronously (leading to the Worker runtime killing the worker with “Error: The script will never generate a response”.). This can block the wasm-coredump code and make the core dump generation flaky.</p><p>We are working to improve this, but in the meantime, make sure to adjust <code>timeoutSecs</code> to something slightly bigger than the typical response time of your application.</p><p>Here’s an example of a Wasm core dump exception in Sentry:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/gqZyPFslc9uqCV7jEgaqW/9425701b4209952518e3aef155d9b572/image3-4.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1083\" loading=\"lazy\"/>\n            \n            </figure><p>You can find a <a href=\"https://github.com/cloudflare/wasm-coredump/tree/main/example\">working example</a>, the Sentry and R2 configuration options, and more details in the <a href=\"https://github.com/cloudflare/wasm-coredump\">@cloudflare/wasm-coredump</a> GitHub repository.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"too-big-to-fail\">Too big to fail</h3>\n      <a href=\"#too-big-to-fail\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>It&#39;s worth mentioning one corner case of this debugging technique and the solution: sometimes your codebase is so big that adding core dump and DWARF debugging information might result in a Wasm binary that is too big to fit in a Cloudflare Worker. Well, worry not; we have a solution for that too.</p><p>Fortunately the DWARF for WebAssembly specification also supports <a href=\"https://yurydelendik.github.io/webassembly-dwarf/#external-DWARF\">external DWARF files</a>. To make this work, we have a tool called <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/debuginfo-split\">debuginfo-split</a> that you can add to the build command in the <code>wrangler.toml</code> configuration:</p>\n            <pre class=\"language-toml\"><code class=\"language-toml\">command = &quot;... &amp;&amp; debuginfo-split ./build/worker/index.wasm&quot;</pre></code>\n            <p>What this does is it strips the debugging information from the Wasm binary, and writes it to a new separate file called <code>debug-{UUID}.wasm</code>. You then need to upload this file to the same R2 bucket used by the Wasm Coredump Service (you can automate this as part of your CI or build scripts). The same UUID is also injected into the main Wasm binary; this allows us to correlate the Wasm binary with its corresponding DWARF debugging information. Problem solved.</p><p>Binaries without DWARF information can be significantly smaller. Here’s our example:</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\" width=\"100%\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">4.5 MiB</span></th>\n    <th class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">debug-63372dbe-41e6-447d-9c2e-e37b98e4c656.wasm</span></th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">313 KiB</span></td>\n    <td class=\"tg-0lax\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\">build/worker/index.wasm</span></td>\n  </tr>\n</tbody>\n</table><!--kg-card-end: html-->\n    <div class=\"flex anchor relative\">\n      <h3 id=\"final-words\">Final words</h3>\n      <a href=\"#final-words\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We hope you enjoyed reading this blog as much as we did writing it and that it can help you take your Wasm debugging journeys, using Cloudflare Workers or not, to another level.</p><p>Note that while the examples used here were around using Rust and WebAssembly because that&#39;s a common pattern, you can use the same techniques if you&#39;re compiling WebAssembly from other languages like C or C++.</p><p>Also, note that the WebAssembly core dump standard is a hot topic, and its implementations and adoption are evolving quickly. We will continue improving the <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/rewriter\">wasm-coredump-rewriter</a>, <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/debuginfo-split\">debuginfo-split</a>, and <a href=\"https://github.com/xtuc/wasm-coredump/tree/main/bin/wasmgdb\">wasmgdb</a> tools and the <a href=\"https://github.com/cloudflare/wasm-coredump\">wasm-coredump service</a>. More and more runtimes, including V8, will eventually support core dumps natively, thus eliminating the need to use polyfills, and the tooling, in general, will get better; that&#39;s a certainty. For now, we present you with a solution that works today, and we have strong incentives to keep supporting it.</p><p>As usual, you can talk to us on our <a href=\"https://discord.cloudflare.com/\">Developers Discord</a> or the <a href=\"https://community.cloudflare.com/c/developers/constellation/97\">Community forum</a> or open issues or PRs in our GitHub repositories; the team will be listening.</p>",
		"id": "7xtevgzV4ycZa3fIFTQOP5",
		"localeList": {
			"name": "Wasm core dumps and debugging Rust in Cloudflare Workers Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Debugging Rust and Wasm with Cloudflare Workers involves a lot of the good old time-consuming and nerve-wracking printf'ing strategy. What if there’s a better way? This blog is about enabling and using Wasm core dumps and how you can easily debug Rust in Cloudflare Workers.",
		"metadata": {
			"title": "Wasm core dumps and debugging Rust in Cloudflare Workers",
			"description": "Debugging Rust and Wasm with Cloudflare Workers involves a lot of the good old time-consuming and nerve-wracking printf'ing strategy. What if there’s a better way? This blog is about enabling and using Wasm core dumps and how you can easily debug Rust in Cloudflare Workers.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1KjAQe3DsacU4jhgZLy48w/49f493203c1a6475ba3ae414d159c8e8/wasm-coredumps-GlVUff.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2023-08-14T14:00:33.000+01:00",
		"slug": "wasm-coredumps",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "4hhzQ9V5KQE5wXF4VtEcoG",
				"name": "WASM",
				"slug": "wasm"
			},
			{
				"id": "5ghWZAL0nNGxrphuhWW6G0",
				"name": "WebAssembly",
				"slug": "webassembly"
			},
			{
				"id": "w4e8pkoz9c8xNDVhy9eNe",
				"name": "Rust",
				"slug": "rust"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Wasm core dumps and debugging Rust in Cloudflare Workers",
		"updated_at": "2024-10-09T23:25:13.577Z",
		"url": "https://blog.cloudflare.com/wasm-coredumps"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}