{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "11",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Kyle Boutette",
				"slug": "kyle-boutette",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4kaWPS8nsy8dcT0OEQAaGE/d9179b173ccf326dbf563dc48e277b31/kyle-boutette.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "At Cloudflare, we work to provide a great viewing experience while keeping our service affordable. In this post, let's have some fun to see changes between different versions of a video.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4Zjq5yjSg74JORpJCNfzTV/7278b243e7151c1c3b32e33fc51974ac/making-video-intuitive-an-explainer.png",
		"featured": false,
		"html": "<p>On the Stream team at Cloudflare, we work to provide a great viewing experience while keeping our service affordable. That involves a lot of small tweaks to our video pipeline that can be difficult to discern by most people. And that makes the results of those tweaks less intuitive.</p><p>In this post, let&#39;s have some fun. Instead of fine-grained optimization work, we’ll do the opposite. Today we’ll make it easy to see changes between different versions of a video: we’ll start with a high-quality video and ruin it. Instead of aiming for perfection, let’s see the impact of various video coding settings. We’ll go on a deep dive on how to make some victim video look gloriously bad and learn on the way.</p><p>Everyone agrees that video on the Internet should look good, start playing fast, and never re-buffer regardless of the device they’re on. People can prefer one version of a video over another and say it looks better. Most people, though, would have difficulty elaborating on what ‘better’ means. That’s not an issue when you’re just consuming video. However, when you’re storing, encoding, and distributing it, how that video looks determines how happy your viewers are.</p><p>To determine what looks better, video engineers can use a variety of techniques. The most accessible is the most obvious: compare two versions of a video by having people look at them—a subjective comparison. We’ll apply eyeballs here.</p><p>So, who’s our sacrificial video? We’re going to use a classic video for the demonstration here—perhaps too classic for people that work with video—<a href=\"https://en.wikipedia.org/wiki/Big_Buck_Bunny\">Big Buck Bunny</a>. This is an open-source film by Sacha Goedegebure available under the permissive <a href=\"https://creativecommons.org/licenses/by/3.0/us/\">Creative Commons Attribution 3.0 license</a>. We’re only going to work with 17 seconds of it to save some time. This is what the video looks like when downloaded from <a href=\"https://peach.blender.org/download/\">https://peach.blender.org/download/</a>. Take a moment to savor the quality since we’re only getting worse from here.</p><!--kg-card-begin: html--><stream src=\"050eda8829cc2a4a5a934e4d4e6ffe89\" preload controls></stream>\n<script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.videodelivery.net/embed/r4xu.fla9.latest.js?video=050eda8829cc2a4a5a934e4d4e6ffe89\"></script>\n<br><!--kg-card-end: html--><p>For brevity, we&#39;ll evaluate our results by two properties: smooth motion and looking ‘crisp’. The video shouldn’t stutter, and its important features should be distinguishable.</p><p>It’s worth mentioning that video is a hack of your brain. Every video is just an optimized series of pictures— a very sophisticated flip book. Display those pictures quickly enough, and you can fool the brain into interpreting motion. If you show enough points of light close together, they meld into a continuous image. Then, change the color of those lights frequently enough, and you end up with smooth motion.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7EMewvsE1wQR8Zb7UuuY7f/5618cf12979c1fe4806202d17c190115/flipbook_2x.png\" alt=\"\" class=\"kg-image\" width=\"593\" height=\"530\" loading=\"lazy\"/>\n            \n            </figure>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"frame-rate\">Frame rate</h3>\n            <a href=\"#frame-rate\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Not stuttering is covered by frame rate, measured in frames-per-second (fps). Fps is the number of individual pictures displayed in a single second; many videos are encoded at somewhere between 24 and 30fps. One way to describe fps is in terms of how long a frame is shown for—commonly called the frame time. At 24fps, each frame is shown for about 41 milliseconds. At 2fps, that jumps to 500ms. Lowering fps causes frames to trend rapidly towards persisting for the full second. Smooth motion mostly comes down to the single knob of fps. Mucking about with frame rate isn’t a sporting way to achieve our goal. It’s extremely easy to tank the frame rate and ruin the experience. Humans have a low tolerance for janky motion. To get the idea, here’s what our original clip reduced to 2fps looks like; 500ms per-frame is a long time.</p><p><code>ffmpeg -v info -y -hide_banner -i source.mp4 -r 2 -c:v h264 -c:a copy 2fps.mp4</code></p><div style=\"position: relative; padding-top: 56.25%;\">\n  <iframe\n    src=\"https://customer-eq7kiuol0tk9chox.cloudflarestream.com/3500917ca1f756546103c86ca5a90348/iframe?poster=https%3A%2F%2Fcustomer-eq7kiuol0tk9chox.cloudflarestream.com%2F3500917ca1f756546103c86ca5a90348%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600\"\n    loading=\"lazy\"\n    style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\"\n    allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\"\n    allowfullscreen=\"true\"\n  ></iframe>\n</div>\n<br>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"resolution\">Resolution</h3>\n            <a href=\"#resolution\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Making tiny features distinguishable has many more knobs. Choices you can make include what codec, level, profile, bitrate, resolution, color space, or key frame frequency, to name a few. Each of these also influences factors apart from perceived quality, such as how large the resulting file is plus what devices it is compatible with. There’s no universal right answer for what parameters to encode a video with. For the best experience while not wasting resources, the same video intended for a modern 4k display should be tailored differently for a 2007 iPod Nano. We’ll spend our time here focusing on what impacts a video’s crispness since that’s what largely determines the experience.</p><p>We’re going to use <a href=\"https://www.ffmpeg.org/\">FFmpeg</a> to make this happen. This is the sonic screwdriver of the video world; a near-universal command-line tool for converting and manipulating media. FFmpeg is almost two decades old, has hundreds of contributors, and can do essentially any digital video-related task. Its flexibility also makes it rather complex to work with. For each version of the video, we’ll show the command used to generate it as we go.</p><p>Let’s figure out exactly what we want to change about the video to make it a bad experience.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5MjHU6o5w4TzXr7hmENL1a/695ffd6e6fdf7158b3e48ced2795d241/gradient-bucket-_2x.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"339\" loading=\"lazy\"/>\n            \n            </figure><p>You may have heard about resolution and bitrate. To explain them, let’s use an analogy. Resolution provides pixels. Pixels are buckets for information. Bitrate is the information that fills those buckets. How full a given bucket is determines how well a pixel can represent content. With too few bits of information for a bucket, the pixel will get less and less accurate to the original source. In practice, their numerical relationship is complicated. These are what we’ll be varying.</p><p>The decision of which bucket should get how many bits of information is determined by software called a video encoder. The job of the encoder is to use the bits budgeted for it as efficiently as possible to display the best quality video. We’ll be changing the bitrate budget to influence the resulting bitrate. Like people with money, budgeting is a good idea for our encoder. Uncompressed video can use a byte, or more, per-pixel for each of the red, green, and blue(RGB) channels. For a 1080p video, that means 1920x1080 pixels multiplied by 3 bytes to get 6.2MB per frame. We’ll talk about frames later but 6.2 MB is a lot— at this rate, a DVD disc would only fit about 50 seconds of video.</p><p>With our variables chosen, we’re good to go. For every variation we encode, we’ll show a comparison to this table. Our source video is encoded in H.264 at 24fps with a variety of other settings, those features will not change. Expect these numbers to get significantly smaller as we poke around to see what changes.</p><table><tr><td><p><b></b></p></td><td><p><b>Resolution</b></p></td><td><p><b>Bitrate</b></p></td><td><p><b>File Size</b></p></td></tr><tr><td><p>Source</p></td><td><p>1280x720</p></td><td><p>7.5Mbps</p></td><td><p>16MB</p></td></tr></table><p>To start, let’s change just resolution and see what impact that has. The lowest resolution most people are exposed to is usually 140p, so let’s re-encode our source video targeting that. Since many video platforms have this as an option, we’re not expecting an unwatchable experience quite yet.</p><p><code>ffmpeg -v info -y -hide_banner -i source.mp4 -vf scale=-2:140 -c:v h264 -b:v 6000k -c:a copy scaled-140.mp4</code></p><!--kg-card-begin: html--><stream src=\"3d4c5a2b4793c7a34fc2f8ad245a94b2\" preload controls></stream>\n<script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.videodelivery.net/embed/r4xu.fla9.latest.js?video=3d4c5a2b4793c7a34fc2f8ad245a94b2\"></script>\n<br><!--kg-card-end: html--><table><tr><td><p></p></td><td><p>Resolution</p></td><td><p>Bitrate</p></td><td><p>File Size</p></td></tr><tr><td><p>Source</p></td><td><p>1280x720</p></td><td><p>7.5Mbps</p></td><td><p>16MB</p></td></tr><tr><td><p>Scaled to 140p</p></td><td><p><b>248x140</b></p></td><td><p>2.9Mbps</p></td><td><p>6.1MB</p></td></tr></table><p>By the numbers, we find some curious results. We didn’t ask for a different bitrate from the source, but our encoder gave us one that is roughly a third. Given that the number of pixels was dramatically reduced, the encoder had fewer buckets to put the information in our bitrate. Despite its best attempt at using the entire bitrate budget provided to it, our encoder filled all the buckets we provided. What did it do with the leftover information? Since it isn’t in the video, it tossed it.</p><p>This would probably be an acceptable experience on a 4in phone screen. You wouldn’t notice the sort-of grainy result on a small display. On a 40in TV, it’d be blocky and unpleasant. At 40in, 140 rows of pixels become individually distinguishable which doesn’t fool the brain and ruins the magic.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"bitrate\">Bitrate</h3>\n            <a href=\"#bitrate\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Bitrate is the density of information for a given period of time, typically a second. This interacts with frame rate to give us a per frame bitrate budget. Our source having a bitrate of 7.5Mbps (millions of bits-per-second) and frame rate of 24fps means we have an average of 7500Kbps / 24fps = 312.5Kb of information per frame.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"different-kinds-of-frames\">Different kinds of frames</h3>\n            <a href=\"#different-kinds-of-frames\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2fYct9qhwwZwDraTn29gB7/219e49f4c51ed757ae259b3925e20c9e/pasted-image-0--1-.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"552\" loading=\"lazy\"/>\n            \n            </figure><p>There are different ways a frame can be encoded. It doesn’t make sense to use the same technique for a sequence of frames of a single color and most of the sequences in Big Buck Bunny. There’s differing information density and distribution between those sequences. Different ways of representing frames take advantage of those differing patterns. As a result, the 312Kb average for each frame is both lower than the size of the larger frames and greater than the size of the smallest frames. Some frames contain just changes relative to other frames – these are P or B frames – those could be far smaller than 312Kb. However, some frames contain full images – these are I frames – and tend to be far larger than 312Kb. Since we’re viewing the video holistically as multiple seconds, we don’t need to worry about them since we’re concerned with the overall experience. Knowing about frames is useful for their impact on bitrate for different types of content, which we’ll discuss later.</p><p>Our starting bitrate is extremely large and has more information than we actually need. Let’s be aggressive and cut it down to 1/75th while maintaining the source’s resolution.</p><p><code>ffmpeg -v info -y -hide_banner -i source.mp4 -c:v h264 -b:v 100k -c:a copy bitrate-100k.mp4</code></p><!--kg-card-begin: html--><stream src=\"7848e2bd7577c121b7cd63e5cc2074e8\" preload controls></stream>\n<script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.videodelivery.net/embed/r4xu.fla9.latest.js?video=7848e2bd7577c121b7cd63e5cc2074e8\"></script>\n<br><!--kg-card-end: html--><table><tr><td><p></p></td><td><p><b>Resolution</b></p></td><td><p><b>Bitrate</b></p></td><td><p><b>File Size</b></p></td></tr><tr><td><p>Source</p></td><td><p>1280x720</p></td><td><p>7.5Mbps</p></td><td><p>16MB</p></td></tr><tr><td><p>Scaled to 140p</p></td><td><p><b>248x140</b></p></td><td><p>2.9Mbps</p></td><td><p>6.1MB</p></td></tr><tr><td><p>Targeted to 100Kbps</p></td><td><p>1280x720</p></td><td><p><b>102Kbps</b></p></td><td><p>217KB</p></td></tr></table><p>When you take a look at the video, fur and grass become blobs. There’s just not enough information to accurately represent the fine details.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4SgHZxPmzWOK6cXxmfwK6D/cec712f07e0d7d18c51197a64d2f856f/VFLXlL9wI-cBWPlqs7dIfTOnSotYY7asU1lneWr3CW4gdF6S2fY9zVkgnOddmXKgbaYcpt4qhik-8PHogyj1MYAM9S8dag-ww76rRUCR7dVaJCiznUNDbGVYrBiS.png\" alt=\"\" class=\"kg-image\" width=\"436\" height=\"384\" loading=\"lazy\"/>\n            \n            </figure><p>Source Video</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2c67nPJ71w1tnhfcz1sMsQ/e0cc89170bea7e8b307c09a5e960e98e/KBvYhdIEKc49weV-tPJkCt2BxVvUVccQpNx6zIjU2I5vPnmnBO6ORBBjrwSy4a2JBbq0o_RQ79s3DhGYL9YIbVPBmnKtQNfojO-WBY_OTd0uPlKbU-oT5lK-a7HW.png\" alt=\"\" class=\"kg-image\" width=\"436\" height=\"384\" loading=\"lazy\"/>\n            \n            </figure><p>100 Kbps budget</p><p>We provided a bitrate budget of 100Kbps, but the encoder doesn’t seem to have quite hit it. When we changed the resolution, we had a lower bitrate than we asked for, here we have a higher bitrate. Why would that be the case?</p><p>We have so many buckets that there’s some minimum amount the encoder wants in each. Since it can play with the bitrate, it ends up favoring slightly more full buckets since that’s easier. This is somewhat the reverse of why our previous experiment had a lower bitrate than expected.</p><p>We can influence how the encoder budgets bitrate using rate control modes. We’re going to stick with the default ‘Average-Bitrate’ mode to keep things easy. This mode is suboptimal since it lets the encoder spend a bunch of budget up front to its detriment later. However, it&#39;s easy to reason about.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"resolution-bitrate\">Resolution + Bitrate</h3>\n            <a href=\"#resolution-bitrate\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Targeting a bitrate of 100Kbps got us an unpleasant video but not something completely unwatchable. We haven’t quite ruined our video yet. We might as well take bitrate down to an even further extreme of 20Kbps while keeping the resolution constant.</p><p><code>ffmpeg -v info -y -hide_banner -i source.mp4 -c:v h264 -b:v 20k -c:a copy bitrate-20k.mp4</code></p><!--kg-card-begin: html--><stream src=\"c6ae1836ec3505c9150429222e7f9bbb\" preload controls></stream>\n<script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.videodelivery.net/embed/r4xu.fla9.latest.js?video=c6ae1836ec3505c9150429222e7f9bbb\"></script>\n<br><!--kg-card-end: html--><table><tr><td><p></p></td><td><p><b>Resolution</b></p></td><td><p><b>Bitrate</b></p></td><td><p><b>File Size</b></p></td></tr><tr><td><p>Source</p></td><td><p>1280x720</p></td><td><p>7.5Mbps</p></td><td><p>16MB</p></td></tr><tr><td><p>Scaled to 140p</p></td><td><p><b>248x140</b></p></td><td><p>2.9Mbps</p></td><td><p>6.1MB</p></td></tr><tr><td><p>Targeted to 100Kbps</p></td><td><p>1280x720</p></td><td><p><b>102Kbps</b></p></td><td><p>217KB</p></td></tr><tr><td><p>Targeted to 20Kbps</p></td><td><p>1280x720</p></td><td><p><b>35Kbps</b></p></td><td><p>81KB</p></td></tr></table><p>Now, this is truly unwatchable! There’s sometimes color, but the video mostly devolves into grayscale rectangles roughly approximating the silhouettes of what we’re expecting. At slightly less than a third the bitrate of the previous trial, this definitely looks like it has less than a third of the information.</p><p>As before, we didn’t hit our bitrate target and for the same reason that our pixel buckets were insufficiently filled with information. The encoder needed to start making hard decisions at some point between 102 and 35Kbps. Most of the color and the comprehensibility of the scene were sacrificed.</p><p>We’ll discuss why there’s moving grayscale rectangles and patches of color in a bit. They’re giving us a hint about how the encoder works under the hood.</p><p>What if we go just one step further and combine our tiny resolution with the absurdly low bitrate? That should be an even worse experience, right?</p><p><code>ffmpeg -v info -y -hide_banner -i source.mp4 -vf scale=-2:140 -c:v h264 -b:v 20k -c:a copy scaled-140_bitrate-20k.mp4</code></p><!--kg-card-begin: html--><stream src=\"03b273318416ccaa9af82729bfa3c224\" preload controls></stream>\n<script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.videodelivery.net/embed/r4xu.fla9.latest.js?video=03b273318416ccaa9af82729bfa3c224\"></script>\n<br><!--kg-card-end: html--><table><tr><td><p></p></td><td><p><b>Resolution</b></p></td><td><p><b>Bitrate</b></p></td><td><p><b>File Size</b></p></td></tr><tr><td><p>Source</p></td><td><p>1280x720</p></td><td><p>7.5Mbps</p></td><td><p>16MB</p></td></tr><tr><td><p>Scaled to 140p</p></td><td><p><b>248x140</b></p></td><td><p>2.9Mbps</p></td><td><p>6.1MB</p></td></tr><tr><td><p>Targeted to 100Kbps</p></td><td><p>1280x720</p></td><td><p><b>102Kbps</b></p></td><td><p>217KB</p></td></tr><tr><td><p>Targeted to 20Kbps</p></td><td><p>1280x720</p></td><td><p><b>35Kbps</b></p></td><td><p>81KB</p></td></tr><tr><td><p>Scaled to 140p and Targeted to 20Kbps</p></td><td><p><b>248x140</b></p></td><td><p><b>19Kbps</b></p></td><td><p>48KB</p></td></tr></table><p>Wait a minute, that’s actually not too bad at all. It’s almost like a tinier version of 1280 by 720 at 100Kbps. Why doesn’t this look terrible? Having a lower bitrate means there’s less information, which implies that the video should look worse. A lower resolution means the image should be less detailed. The numbers got smaller, so the video shouldn’t look better!</p><p>Thinking back to buckets and information, we now have less information but fewer discrete places for that information to live. This specific combination of low bitrate and low resolution means the buckets are nicely filled. The encoder exactly hit our target bitrate which is a reasonable indicator that it was at least somewhat satisfied with the final result.</p><p>This isn’t going to be a fun experience on a 4k display, but it is fine enough for an iPod Nano from 2007. A 3rd generation iPod Nano has a 320x240 display spread across a 2in screen. Our 140p video will be nearly indistinguishable from a much higher quality video. Even more, 48KB for 17 seconds of video makes fantastic use of the limited storage – 4GB on some models. In a resource-constrained environment, this low video quality can be a large quality of experience improvement.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6lffrqtLboX9DPq5hTlmwa/e93dde9c71e8c7f48a6789ae5c3d8f77/iPod-Nano-3rd-Gen.jpg\" alt=\"\" class=\"kg-image\" width=\"800\" height=\"543\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://creativecommons.org/licenses/by/2.0\">CC BY 2.0</a> - <a href=\"https://www.flickr.com/photos/nez/1346068786/in/photostream/\">image</a> by <a href=\"https://www.flickr.com/photos/nez/\">nez</a></p><p>We should have a decent intuition for the relationship between bitrate and resolution plus what the tradeoffs are. There’s a lingering question, though, do we need to make tradeoffs? There has to be some ratio of bitrate to pixel-count in order to get the best quality for a given resolution at a minimal file size.</p><p>In fact, there are such perfect ratios. In ruining the video, we ended up testing a few candidates of this ratio for our source video.</p><table><tr><td><p></p></td><td><p><b>Resolution</b></p></td><td><p><b>Bitrate</b></p></td><td><p><b>File Size</b></p></td><td><p><b>Bits/Pixel</b></p></td></tr><tr><td><p>Source</p></td><td><p>1280x720</p></td><td><p>7.5Mbps</p></td><td><p>16MB</p></td><td><p>8.10</p></td></tr><tr><td><p>Scaled to 140p</p></td><td><p><b>248x140</b></p></td><td><p>2.9Mbps</p></td><td><p>6.1MB</p></td><td><p>83.5</p></td></tr><tr><td><p>Targeted to 100Kbps</p></td><td><p>1280x720</p></td><td><p><b>102Kbps</b></p></td><td><p>217KB</p></td><td><p>0.11</p></td></tr><tr><td><p>Targeted to 20Kbps</p></td><td><p>1280x720</p></td><td><p><b>35Kbps</b></p></td><td><p>81KB</p></td><td><p>0.03</p></td></tr><tr><td><p>Scaled to 140p and Targeted to 20Kbps</p></td><td><p><b>248x140</b></p></td><td><p><b>19Kbps</b></p></td><td><p>48KB</p></td><td><p>0.55</p></td></tr></table><p>However, there are some complications.</p><p>The biggest caveat is that the optimal ratio depends on your source video. Each video has a different amount of information required to be displayed. There are a couple of reasons for that.</p><p>If a frame has many details then it takes more information to represent. Frames in chronological order that visually differ significantly (think of an action movie) take more information than a set of visually similar frames (like a security camera outside a quiet warehouse). The former can’t use as many B or P frames which occupy less space. Animated content with flat colors require encoders to make fewer trade-offs that cause visual degradation than live-action.</p><p>Thinking back to the settings that resulted in grayscale rectangles and patches of color, we can learn a bit more. We saw that the rectangles and color seem to move, as though the encoder was playing a shell game with tiny boxes of pictures.</p><p>What is happening is that the encoder is recognizing repeated patterns within and between frames. Then, it can reference those patterns to move them around without needing to actually duplicate them. The P and B frames mentioned earlier are mainly composed of these shifted patterns. This is similar, at least in spirit, to other compression algorithms that use dictionaries to refer to previous content. In most video codecs, the bits of picture that can be shifted are called ‘macroblocks’, which subdivide each frame with NxN squares of pixels. The less stingy the bitrate, the less obvious the macroblock shell game.</p><p>To see this effect more clearly, we can ask FFmpeg to show us decisions it makes. Specifically, <a href=\"https://trac.ffmpeg.org/wiki/Debug/MacroblocksAndMotionVectors\">it can show us what it decides is ‘motion’ moving the macroblocks</a>. The video here is 140p for the motion vector arrows to be easier to see.</p><p><code>ffmpeg -v info -y -hide_banner -flags2 +export_mvs -i source.mp4 -vf scale=-2:140,codecview=mv=pf+bf+bb -c:v h264 -b:v 6000k -c:a copy motion-vector.mp4</code></p><!--kg-card-begin: html--><stream src=\"c9ea3f4197316457214c77e4d6b4d032\" preload controls></stream>\n<script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.videodelivery.net/embed/r4xu.fla9.latest.js?video=c9ea3f4197316457214c77e4d6b4d032\"></script>\n<br><!--kg-card-end: html--><p>Even worse is that flat color and noise might only be seen in two different scenes in the same video. That forces you to either waste your bitrate budget in one scene or look terrible in the other. We give the encoder a bitrate budget it can use. How it uses it is the result of a feedback loop during encoding.</p><p>Yet another caveat is that you&#39;re resulting bitrate is influenced by all those knobs that were listed earlier, the most impactful being codec choice followed by bitrate budget. We explored the relationship between bitrate and resolution, but every knob has an impact on the quality and a single knob frequently interacts with other knobs.</p><p>So far we’ve taken a look at some of the knobs and settings that affect visual quality in a video. Every day, video engineers and encoders make tough decisions to optimize for the human eye, while keeping file sizes at a minimum. Modern encoding schemes use techniques such as <a href=\"https://netflixtechblog.com/per-title-encode-optimization-7e99442b62a2\">per title encoding</a> to narrow down the best resolution-bitrate combinations. Those schemes look somewhat similar to what we’ve done here: test various settings and see what gives the desired result.</p><p>With every example, we’ve included an FFmpeg command you can use to replicate the output above and experiment with your own videos. We encourage you to try improving the video quality while reducing file sizes on your own and to find other levers that will help you on this journey!</p>",
		"id": "5QRTNbThmCHIa9w2TlJisg",
		"localeList": {
			"name": "Making Video Intuitive: An Explainer Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "The Stream team at Cloudflare works to provide a great viewing experience while keeping our service affordable. That involves a lot of small tweaks to our video pipeline. In this post, let's do the opposite to have some fun and learn about video.",
		"metadata": {
			"title": "Making Video Intuitive: An Explainer",
			"description": "The Stream team at Cloudflare works to provide a great viewing experience while keeping our service affordable. That involves a lot of small tweaks to our video pipeline. In this post, let's do the opposite to have some fun and learn about video.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1xmXRPsIQyWyUDSHUE4IuT/f4e5e7b667d49e3d3d32df3ad9d6c1cf/making-video-intuitive-an-explainer-WdZY3j.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2020-05-12T12:00:00.000+01:00",
		"slug": "making-video-intuitive-an-explainer",
		"tags": [
			{
				"id": "7mVMfcxp4tMqKil9jj8BJa",
				"name": "Cloudflare Stream",
				"slug": "cloudflare-stream"
			},
			{
				"id": "4m0TnPrRHWtb7J6Ht4M4oj",
				"name": "Video",
				"slug": "video"
			}
		],
		"title": "Making Video Intuitive: An Explainer",
		"updated_at": "2025-03-04T03:42:04.063Z",
		"url": "https://blog.cloudflare.com/making-video-intuitive-an-explainer"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}