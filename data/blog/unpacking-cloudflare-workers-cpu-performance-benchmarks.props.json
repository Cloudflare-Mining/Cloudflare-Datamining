{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "17",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Kenton Varda",
				"slug": "kenton-varda",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1FFs4T2j1RyvxasKOkkdtP/e7bd05ce89c560a545853000a25da9bc/kenton-varda.jpg",
				"location": null,
				"website": null,
				"twitter": "@kentonvarda",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Cloudflare investigated CPU performance benchmark results for Workers, uncovering and fixing issues in infrastructure, V8 garbage collection, and OpenNext optimizations. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/iQiXzPRHTAG10HFtFnNPw/281efb5935b2bae707f3f89eb3e91521/image__6_.png",
		"featured": false,
		"html": "<p>On October 4, independent developer Theo Browne published <a href=\"https://github.com/t3dotgg/cf-vs-vercel-bench\"><u>a series of benchmarks</u></a> designed to compare server-side JavaScript execution speed between Cloudflare Workers and Vercel, a competing compute platform built on AWS Lambda. The initial results showed Cloudflare Workers performing worse than Node.js on Vercel at a variety of CPU-intensive tasks, by a factor of as much as 3.5x.</p><p>We were surprised by the results. The benchmarks were designed to compare JavaScript execution speed in a CPU-intensive workload that never waits on external services. But, Cloudflare Workers and Node.js both use the same underlying JavaScript engine: <a href=\"https://en.wikipedia.org/wiki/V8_(JavaScript_engine)\"><u>V8, the open source engine from Google Chrome</u></a>. Hence, one would expect the benchmarks to be executing essentially identical code in each environment. Physical CPUs can vary in performance, but modern server CPUs do not vary by anywhere near 3.5x.</p><p>On investigation, we discovered a wide range of small problems that contributed to the disparity, ranging from some bad tuning in our infrastructure, to differences between the JavaScript libraries used on each platform, to some issues with the test itself. We spent the week working on many of these problems, which means over the past week Workers got better and faster for all of our customers. We even fixed some problems that affect other compute providers but not us, such as an issue that made trigonometry functions much slower on Vercel. This post will dig into all the gory details.</p><p>It&#39;s important to note that the original benchmark was not representative of billable CPU usage on Cloudflare, nor did the issues involved impact most typical workloads. Most of the disparity was an artifact of the specific benchmark methodology. Read on to understand why.</p><p>With our fixes, the results now look much more like we&#39;d expect:</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4LbjDIgtezBKTCWKEW5ePJ/1b053a44c90cf6c59dd0da4d9f7d8057/BLOG-3051_2.png\" alt=\"BLOG-3051 2\" class=\"kg-image\" width=\"1418\" height=\"954\" loading=\"lazy\"/>\n          </figure><p>There is still work to do, but we&#39;re happy to say that after these changes, Cloudflare now performs on par with Vercel in every benchmark case except the one based on Next.js. On that benchmark, the gap has closed considerably, and we expect to be able to eliminate it with further improvements detailed later in this post.</p><p>We are grateful to Theo for highlighting areas where we could make improvements, which will now benefit all our customers, and even many who aren&#39;t our customers.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"our-benchmark-methodology\">Our benchmark methodology</h3>\n      <a href=\"#our-benchmark-methodology\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We wanted to run Theo&#39;s test with no major design changes, in order to keep numbers comparable. Benchmark cases are nearly identical to Theo&#39;s original test but we made a couple changes in how we ran the test, in the hopes of making the results more accurate:</p><ul><li><p>Theo ran the test client on a laptop connected by a Webpass internet connection in San Francisco, against Vercel instances running in its sfo1 region. In order to make our results easier to reproduce, we chose instead to run our test client directly in AWS&#39;s us-east-1 datacenter, invoking Vercel instances running in its iad1 region (which we understand to be in the same building). We felt this would minimize any impact from network latency. Because of this, Vercel&#39;s numbers are slightly better in our results than they were in Theo&#39;s.</p></li><li><p>We chose to use Vercel instances with 1 vCPU instead of 2. All of the benchmarks are single-threaded workloads, meaning they cannot take advantage of a second CPU anyway. Vercel&#39;s CTO, Malte Ubl, had <a href=\"https://x.com/cramforce/status/1975656443954274780\"><u>stated publicly on X</u></a> that using single-CPU instances would make no difference in this test, and indeed, we found this to be correct. Using 1 vCPU makes it easier to reason about pricing, since both Vercel and Cloudflare charge for CPU time (<code>$</code>0.128/hr for Vercel in iad1, and <code>$</code>0.072/hr for Cloudflare globally).</p></li><li><p>We made some changes to fix bugs in the test, for which <a href=\"https://github.com/t3dotgg/cf-vs-vercel-bench/pull/5\"><u>we submitted a pull request</u></a>. More on this below.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"cloudflare-platform-improvements\">Cloudflare platform improvements</h2>\n      <a href=\"#cloudflare-platform-improvements\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Theo&#39;s benchmarks covered a variety of frameworks, making it clear that no single JavaScript library could be at fault for the general problem. Clearly, we needed to look first at the Workers Runtime itself. And so we did, and we found two problems â€“ not bugs, but tuning and heuristic choices which interacted poorly with the benchmarks as written.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"sharding-and-warm-isolate-routing-a-problem-of-scheduling-not-cpu-speed\">Sharding and warm isolate routing: A problem of scheduling, not CPU speed</h3>\n      <a href=\"#sharding-and-warm-isolate-routing-a-problem-of-scheduling-not-cpu-speed\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><a href=\"https://blog.cloudflare.com/eliminating-cold-starts-2-shard-and-conquer/\"><u>Over the last year we shipped smarter routing that sends traffic to warm isolates more often</u></a>. That cuts cold starts for large apps, which matters for frameworks with heavy initialization requirements like Next.js. The original policy optimized for latency and throughput across billions of requests, but was less optimal for heavily CPU-bound workloads for the same reason that such workloads cause performance issues in other platforms like Node.js: When the CPU is busy computing an expensive operation for one request, other requests sent to the same isolate must wait for it to finish before they can proceed.</p><p>The system uses heuristics to detect when requests are getting blocked behind each other, and automatically spin up more isolates to compensate. However, these heuristics are not precise, and the particular workload generated by Theo&#39;s tests â€“ in which a burst of expensive traffic would come from a single client â€“ played poorly with our existing algorithm. As a result, the benchmarks showed much higher latency (and variability in latency) than would normally be expected.</p><p><b>It&#39;s important to understand that, as a result of this problem, the benchmark was not really measuring CPU time.</b> Pricing on the Workers platform is based on CPU time â€“ that is, time spent actually executing JavaScript code, as opposed to time waiting for things. Time spent waiting for the isolate to become available makes the request take longer, but is not billed as CPU time against the waiting request. <b>So, this problem would not have affected your bill.</b></p><p>After analyzing the benchmarks, we updated the algorithm to detect sustained CPU-heavy work earlier, then bias traffic so that new isolates spin up faster. The result is that Workers can more effectively and efficiently autoscale when different workloads are applied. I/O-bound workloads coalesce into individual already warm isolates while CPU-bound are directed so that they do not block each other. This change has already been rolled out globally and is enabled automatically for everyone. It should be pretty clear from the graph when the change was rolled out:</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/Cio8BSY6tH7crMbXdnzYi/3e7ea255457ba4baadb2666ac31e4071/BLOG-3051_3.png\" alt=\"BLOG-3051 3\" class=\"kg-image\" width=\"512\" height=\"285\" loading=\"lazy\"/>\n          </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"v8-garbage-collector-tuning\">V8 garbage collector tuning</h3>\n      <a href=\"#v8-garbage-collector-tuning\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>While this scheduling issue accounted for the majority of the disparity in the benchmark, we did find a minor issue affecting code execution performance during our testing.</p><p>The range of issues that we uncovered in the framework code in these benchmarks repeatedly pointed at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Memory_management#garbage_collection\"><u>garbage collection</u></a> and memory management issues as being key contributors to the results. But, we would expect these to be an issue with the same frameworks running in Node.js as well. To see exactly what was going on differently with Workers and why it was causing such a significant degradation in performance, we had to look inwards at our own memory management configuration.</p><p>The <a href=\"https://v8.dev/blog/trash-talk\"><u>V8 garbage collector has a huge number of knobs</u></a> that can be tuned that directly impact performance. One of these is the size of the &quot;young generation&quot;. This is where newly created objects go initially. It&#39;s a memory area that&#39;s less compact, but optimized for short-lived objects. When objects have bounced around the &quot;young space&quot; for a few generations they get moved to the old space, which is more compact, but requires more CPU to reclaim.</p><p>V8 allows the embedding runtime to tune the size of the young generation. And it turns out, we had done so. Way back in June of 2017, just two months after the Workers project kicked off, we â€“ or specifically, I, Kenton, as I was the only engineer on the project at the time â€“ had configured this value according to V8&#39;s recommendations at the time for environments with 512MB of memory or less. Since Workers defaults to a limit of 128MB per isolate, this seemed appropriate.</p><p>V8&#39;s entire garbage collector has changed dramatically since 2017. When analyzing the benchmarks, it became apparent that the setting which made sense in 2017 no longer made sense in 2025, and we were now limiting V8&#39;s young space too rigidly. Our configuration was causing V8&#39;s garbage collection to work harder and more frequently than it otherwise needed to. As a result, we have backed off on the manual tuning and now allow V8 to pick its young space size more freely, based on its internal heuristics. This is already live on Cloudflare Workers, and it has given an approximately 25% boost to the benchmarks with only a small increase in memory usage. Of course, the benchmarks are not the only Workers that benefit: all Workers should now be faster. That said, for most Workers the difference has been much smaller.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"tuning-opennext-for-performance\">Tuning OpenNext for performance</h2>\n      <a href=\"#tuning-opennext-for-performance\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The platform changes solved most of the problem. Following the changes, our testing showed we were now even on all of the benchmarks save one: Next.js.</p><p>Next.js is a popular web application framework which, historically, has not had built-in support for hosting on a wide range of platforms. Recently, a project called <a href=\"https://opennext.js.org/\"><u>OpenNext</u></a> has arisen to fill the gap, making Next.js work well on many platforms, including Cloudflare. On investigation, we found several missing optimizations and other opportunities to improve performance, explaining much of why the benchmark performed poorly on Workers.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"unnecessary-allocations-and-copies\">Unnecessary allocations and copies</h3>\n      <a href=\"#unnecessary-allocations-and-copies\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>When profiling the benchmark code, we noticed that garbage collection was dominating the timeline. From 10-25% of the request processing time was being spent reclaiming memory.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7lYdrV1WFzKEsD6qXspQ2K/725225d0d2e01f74057152b0d736868c/BLOG-3051_4.png\" alt=\"BLOG-3051 4\" class=\"kg-image\" width=\"512\" height=\"186\" loading=\"lazy\"/>\n          </figure>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6Ab4DJG0VzETky4t8rtYSe/23e9f0578bf8ac9834f7897d628b7cb2/BLOG-3051_5.png\" alt=\"BLOG-3051 5\" class=\"kg-image\" width=\"512\" height=\"141\" loading=\"lazy\"/>\n          </figure><p>So we dug in and discovered that OpenNext, and in some cases Next.js and React itself, will often create unnecessary copies of internal data buffers at some of the worst times during the handling of the process. For instance, there&#39;s one <code>pipeThrough()</code> operation in the rendering pipeline that we saw creating no less than 50 2048-byte <code>Buffer</code> instances, whether they are actually used or not.</p><p>We further discovered that on every request, the <a href=\"https://github.com/opennextjs/opennextjs-cloudflare\"><u>Cloudflare OpenNext adapter</u></a> has been needlessly copying every chunk of streamed output data as itâ€™s passed out of the renderer and into the Workers runtime to return to users. Given this benchmark returns a 5 MB result on every request, that&#39;s a lot of data being copied!</p><p>In other places, we found that arrays of internal Buffer instances were being copied and concatenated using <a href=\"https://nodejs.org/docs/latest/api/buffer.html#static-method-bufferconcatlist-totallength\"><code><u>Buffer.concat</u></code></a> for no other reason than to get the total number of bytes in the collection. That is, we spotted code of the form <code>getBody().length</code>. The function <code>getBody()</code> would concatenate a large number of buffers into a single buffer and return it, without storing the buffer anywhere. So, all that work was being done just to read the overall length. Obviously this was not intended, and fixing it was an easy win.</p><p>We&#39;ve started opening a series of pull requests in OpenNext to fix these issues, and others in hot paths, removing some unnecessary allocations and copies:</p><ul><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/991\"><u>Improving streaming response performance</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/996\"><u>Reduce allocations of streams</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1005\"><u>Optimize readable/writable stream piping</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1009\"><u>Cache expensive compute on </u></a><a href=\"http://opennext.js\"><u>OpenNext.js</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1004\"><u>Improve composable-cache performance</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1006\"><u>Improve performance of OpenNext.js converters</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1007\"><u>Avoid slow-mode on frequently accessed objects</u></a>Â </p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1008\"><u>Avoid copying/allocation extra header objects</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-aws/pull/1010\"><u>Avoid unnecessary buffer copies on responses</u></a></p></li><li><p><a href=\"https://github.com/opennextjs/opennextjs-cloudflare/pull/939\"><u>Cache regexes to avoid GC pressure</u></a></p></li></ul><p>We&#39;re not done. We intend to keep iterating through OpenNext code, making improvements wherever theyâ€™re needed â€“ not only in the parts that run on Workers. Many of these improvements apply to other OpenNext platforms. The shared goal of OpenNext is to make NextJS as fast as possible regardless of where you choose to run your code.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"inefficient-streams-adapters\">Inefficient Streams Adapters</h2>\n      <a href=\"#inefficient-streams-adapters\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Much of the Next.js code was written to use Node.js&#39;s APIs for byte streams. Workers, however, prefers the web-standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\"><u>Streams API</u></a>, and uses it to represent HTTP request and response bodies. This necessitates using adapters to convert between the two APIs. When investigating the performance bottlenecks, we found a number of examples where inefficient streams adapters are being needlessly applied. For example:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const stream = Readable.toWeb(Readable.from(res.getBody()))</pre></code>\n            <p><code>res.getBody()</code> was performing a <code>Buffer.concat(chunks)</code> to copy accumulated chunks of data into a new Buffer, which was then passed as an iterable into a Node.js <a href=\"https://nodejs.org/docs/latest/api/stream.html#readable-streams\"><code><u>stream.Readable</u></code></a> that was then wrapped <a href=\"https://nodejs.org/docs/latest/api/stream.html#streamreadabletowebstreamreadable-options\"><u>by an adapter</u></a> that returns a <code>ReadableStream</code>. While these utilities do serve a useful purpose, this becomes a data buffering nightmare since both Node.js streams and Web streams each apply their own internal buffers! Instead we can simply do:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const stream = ReadableStream.from(chunks);</pre></code>\n            <p>This returns a <code>ReadableStream</code> directly from the accumulated chunks without additional copies, extraneous buffering, or passing everything through inefficient adaptation layers.</p><p>In other places we see that Next.js and React make extensive use of <code>ReadableStream</code> to pass bytes through, but the streams being created are value-oriented rather than byte-oriented! For example,</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const readable = new ReadableStream({\n  pull(controller) {\n    controller.enqueue(chunks.shift());\n    if (chunks.length === 0) {\n      controller.close();\n    }\n});  // Default highWaterMark is 1!\n</pre></code>\n            <p>Seems perfectly reasonable. However, there&#39;s an issue here. If the chunks are <code>Buffer</code> or <code>Uint8Array</code> instances, every instance ends up being a separate read by default. So if the <code>chunk</code> is only a single byte, or 1000 bytes, that&#39;s still always two reads. By converting this to a byte stream with a reasonable high water mark, we can make it possible to read this stream much more efficiently:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const readable = new ReadableStream({\n  type: &#039;bytes&#039;,\n  pull(controller) {\n    controller.enqueue(chunks.shift());\n    if (chunks.length === 0) {\n      controller.close();\n    }\n}, { highWaterMark: 4096 });\n</pre></code>\n            <p>Now, the stream can be read as a stream of bytes rather than a stream of distinct JavaScript values, and the individual chunks can be coalesced internally into 4096 byte chunks, making it possible to optimize the reads much more efficiently. Rather than reading each individual enqueued chunk one at a time, the ReadableStream will proactively call <code>pull()</code> repeatedly until the highWaterMark is reached. Reads then do not have to ask the stream for one chunk of data at a time.</p><p>While it would be best for the rendering pipeline to be using byte streams and paying attention to back pressure signals more, our implementation can still be tuned to better handle cases like this.</p><p>The bottom line? We&#39;ve got some work to do! There are a number of improvements to make in the implementation of OpenNext and the adapters that allow it to work on Cloudflare that we will continue to investigate and iterate on. We&#39;ve made a handful of these fixes already and we&#39;re already seeing improvements. Soon we also plan to start submitting patches to Next.js and React to make further improvements upstream that will ideally benefit the entire ecosystem.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"json-parsing\">JSON parsing</h3>\n      <a href=\"#json-parsing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Aside from buffer allocations and streams, one additional item stood out like a sore thumb in the profiles: <code>JSON.parse()</code> with a reviver function. This is used in both React and Next.js and in our profiling this was significantly slower than it should be. We built a microbenchmark and found that JSON.parse with a reviver argument recently got even slower when the standard <a href=\"https://github.com/tc39/proposal-json-parse-with-source\"><u>added a third argument</u></a> to the reviver callback to provide access to the JSON source context.</p><p>For those unfamiliar with the reviver function, it allows an application to effectively customize how JSON is parsed. But it has drawbacks. The function gets called on every key-value pair included in the JSON structure, including every individual element of an Array that gets serialized. In Theo&#39;s NextJS benchmark, in any single request, it ends up being called well over 100,000 times!</p><p>Even though this problem affects all platforms, not just ours, we decided that we weren&#39;t just going to accept it. After all, we have contributors to V8 on the Workers runtime team! We&#39;ve upstreamed a <a href=\"https://chromium-review.googlesource.com/c/v8/v8/+/7027411\"><u>V8 patch</u></a> that can speed up <code>JSON.parse()</code> with revivers by roughly 33 percent. That should be in V8 starting with version 14.3 (Chrome 143) and can help everyone using V8, not just Cloudflare: Node.js, Chrome, Deno, the entire ecosystem.Â  If you are not using Cloudflare Workers or didn&#39;t change the syntax of your reviver you are currently suffering under the red performance bar.</p><p>We will continue to work with framework authors to reduce overhead in hot paths. Some changes belong in the frameworks, some belong in the engine, some in our platform.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"node-jss-trigonometry-problem\">Node.js&#39;s trigonometry problem</h2>\n      <a href=\"#node-jss-trigonometry-problem\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We are engineers, and we like to solve engineering problems â€” whether our own, or for the broader community.</p><p>Theo&#39;s benchmarks were actually posted in response to a different benchmark by another author which compared Cloudflare Workers against Vercel. The original benchmark focused on calling trigonometry functions (e.g. sine and cosine) in a tight loop. In this benchmark, Cloudflare Workers performed 3x faster than Node.js running on Vercel.</p><p>The author of the original benchmark offered this as evidence that Cloudflare Workers are just faster. Theo disagreed, and so did we. We expect to be faster, but not by 3x! We don&#39;t implement math functions ourselves; these come with V8. We weren&#39;t happy to just accept the win, so we dug in.</p><p>It turns out that Node.js is not using the latest, fastest path for these functions. Node.js can be built with either the <a href=\"https://clang.llvm.org/\"><u>clang</u></a> or <a href=\"https://gcc.gnu.org/\"><u>gcc</u></a> compilers, and is written to support a broader range of operating systems and architectures than Workers. This means that Node.js&#39; compilation often ends up using a lowest-common denominator for some things in order to provide support for the broadest range of platforms. V8 includes a <a href=\"https://github.com/search?q=repo%3Av8%2Fv8%20V8_USE_LIBM_TRIG_FUNCTIONS&type=code\"><u>compile-time flag</u></a> that, in some configurations, allows it to use a faster implementation of the trig functions. In Workers, mostly by coincidence, that flag is enabled by default. In Node.js, it is not. We&#39;ve opened a <a href=\"https://github.com/nodejs/node/pull/60153\"><u>pull request</u></a> to enable the flag in Node.js so that everyone benefits, at least on platforms where it can be supported.</p><p>Assuming that lands, and once AWS Lambda and Vercel are able to pick it up, we expect this specific gap to go away, making these operations faster for everyone. This change won&#39;t benefit our customers, since Cloudflare Workers already uses the faster trig functions, but a bug is a bug and we like making everything faster.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"benchmarks-are-hard\">Benchmarks are hard</h2>\n      <a href=\"#benchmarks-are-hard\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Even the best benchmarks have bias and tradeoffs. It&#39;s difficult to create a benchmark that is truly representative of real-world performance, and all too easy to misinterpret the results of benchmarks that are not. <a href=\"https://planetscale.com/benchmarks\"><u>We particularly liked Planetscale&#39;s take on this subject.</u></a></p><p>These specific CPU-bound tests are not an ideal choice to represent web applications. Theo even notes this in his video. Most real-world applications on Workers and Vercel are bound by databases, downstream services, network, and page size. End user experience is what matters. CPU is one piece of that picture. That said, if a benchmark shows us slower, we take it seriously.</p><p>While the benchmarks helped us find and fix many real problems, we also found a few problems with the benchmarks themselves, which contributed to the apparent disparity in speed:</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"running-locally\">Running locally</h3>\n      <a href=\"#running-locally\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The benchmark is designed to be run on your laptop, from which it hits Cloudflare&#39;s and Vercel&#39;s servers over the Internet. It makes the assumption that latency observed from the client is a close enough approximation of server-side CPU time. The reasons are fair: As Theo notes, Cloudflare does not permit an application to measure its own CPU time, in order to prevent timing side channel attacks. Actual CPU time can be seen in logs after the fact, but gathering those may be a lot of work. It&#39;s just easier to measure time from the client.</p><p>However, as Cloudflare and Vercel are hosted from different data centers, the network latency to each can be a factor in the benchmark, and this can skew the results. Typically, this effect will favor Cloudflare, because Cloudflare can run your Worker in locations spread across 330+ cities worldwide, and will tend to choose the closest one to you. Vercel, on the other hand, usually places compute in a central location, so latency will vary depending on your distance from that location.</p><p>For our own testing, to minimize this effect, we ran the benchmark client from a VM on AWS located in the same data center as our Vercel instances. Since Cloudflare is well-connected to every AWS location, we think this should have eliminated network latency from the picture. We chose AWS&#39;s us-east-1 / Vercel&#39;s iad1 for our test as it is widely seen as the default choice; any other choice could draw questions about cherry-picking.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"not-all-cpus-are-equal\">Not all CPUs are equal</h3>\n      <a href=\"#not-all-cpus-are-equal\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare&#39;s servers aren&#39;t all identical. Although we refresh them aggressively, there will always be multiple generations of hardware in production at any particular time. Currently, this includes generations <a href=\"https://blog.cloudflare.com/cloudflares-gen-x-servers-for-an-accelerated-future/\"><u>10</u></a>, <a href=\"https://blog.cloudflare.com/the-epyc-journey-continues-to-milan-in-cloudflares-11th-generation-edge-server/\"><u>11</u></a>, and <a href=\"https://blog.cloudflare.com/gen-12-servers/\"><u>12</u></a> of our server hardware.</p><p>Other cloud providers are no different. No cloud provider simply throws away all their old servers every time a new version becomes available.</p><p>Of course, newer CPUs run faster, even for single-threaded workloads. The differences are not as large as they used to be 20-30 years ago, but they are not nothing. As such, an application may get (a little bit) lucky or unlucky depending on what machine it is assigned to.</p><p>In cloud environments, even identical CPUs can yield different performance depending on circumstances, due to multitenancy. The server your application is assigned to is running many others as well. In AWS Lambda, a server may be running hundreds of applications; in Cloudflare, with our ultra-efficient runtime, a server may be running thousands. These &quot;noisy neighbors&quot; won&#39;t share the same CPU core as your app, but they may share other resources, such as memory bandwidth. As a result, performance can vary.</p><p>It&#39;s important to note that these problems create <i>correlated</i> noise. That is, if you run the test again, the application is likely to remain assigned to the same machines as before â€“ this is true of both Cloudflare and Vercel. So, this noise cannot be corrected by simply running more iterations. To correct for this type of noise on Cloudflare, one would need to initiate requests from a variety of geographic locations, in order to hit different Cloudflare data centers and therefore different machines. But, that is admittedly a lot of work. (We are not familiar with how best to get an application to switch machines on Vercel.)</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-next-js-config-bug\">A Next.js config bug</h3>\n      <a href=\"#a-next-js-config-bug\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The Cloudflare version of the NextJS benchmark was not configured to use <a href=\"https://nextjs.org/docs/app/guides/caching#opting-out-2\"><u>force-dynamic</u></a> while the Vercel version was. This triggered curious behavior. Our understanding is that pages which are not &quot;dynamic&quot; should normally be rendered statically at build time. With OpenNext, however, it appears the pages are still rendered dynamically, but if multiple requests for the same page are received at the same time, OpenNext will only invoke the rendering once. Before we made the changes to fix our scheduling algorithm to avoid sending too many requests to the same isolate, this behavior may have somewhat counteracted that problem. Theo reports that he had disabled force-dynamic in the Cloudflare version specifically for this reason: with it on, our results were so bad as to appear outright broken, so he intentionally turned it off.</p><p>Ironically, though, once we fixed the scheduling issue, using &quot;static&quot; rendering (i.e. not enabling force-dynamic) hurt Cloudflare&#39;s performance for other reasons. It seems that when OpenNext renders a &quot;cacheable&quot; page, streaming of the response body is inhibited. This interacted poorly with a property of the benchmark client: it measured time-to-first-byte (TTFB), rather than total request/response time. When running in dynamic mode â€“ as the test did on Vercel â€“ the first byte would be returned to the client before the full page had been rendered. The rest of the rendering would happen as bytes streamed out. But with OpenNext in non-dynamic mode, the entire payload was rendered into a giant buffer upfront, before any bytes were returned to the client.</p><p>Due to the TTFB behavior of the benchmark client, in dynamic mode, the benchmark actually does not measure the time needed to fully render the page. We became suspicious when we noticed that Vercel&#39;s observability tools indicated more CPU time had been spent than the benchmark itself had reported.</p><p>One option would have been to change the benchmarks to use TTLB instead â€“ that is, wait until the last byte is received before stopping the timer. However, this would make the benchmark even more affected by network differences: The responses are quite large, ranging from 2MB to 15MB, and so the results could vary depending on the bandwidth to the provider. Indeed, this would tend to favor Cloudflare, but as the point of the test is to measure CPU speed, not bandwidth, it would be an unfair advantage.</p><p>Once we changed the Cloudflare version of the test to use force-dynamic as well, matching the Vercel version, the streaming behavior then matched, making the request fair. This means that neither version is actually measuring the cost of rendering the full page to HTML, but at least they are now measuring the same thing.</p><p>As a side note, the original behavior allowed us to spot that OpenNext has a couple of performance bottlenecks in its implementation of the composable cache it uses to deduplicate rendering requests. While fixes to these aren&#39;t going to impact the numbers for this particular set of benchmarks, we&#39;re working on improving those pieces also.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-react-ssr-config-bug\">A React SSR config bug</h3>\n      <a href=\"#a-react-ssr-config-bug\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The React SSR benchmark contained a more basic configuration error. React inspects the environment variable <code>NODE_ENV</code> to decide whether the environment is &quot;production&quot; or a development environment. Many Node.js-based environments, including Vercel, set this variable automatically in production. Many frameworks, such as OpenNext, automatically set this variable for Workers in production as well. However, the React SSR benchmark was written against lower-level React APIs, not using any framework. In this case, the <code>NODE_ENV</code> variable wasn&#39;t being set at all.</p><p>And, unfortunately, when <code>NODE_ENV</code> is not set, React defaults to &quot;dev mode&quot;, a mode that contains extra debugging checks and is therefore much slower than production mode. As a result, the numbers for Workers were much worse than they should have been.</p><p>Arguably, it may make sense for Workers to set this variable automatically for all deployed workers, particularly when Node.js compatibility is enabled. We are looking into doing this in the future, but for now we&#39;ve updated the test to set it directly.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"what-were-going-to-do-next\">What weâ€™re going to do next</h2>\n      <a href=\"#what-were-going-to-do-next\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our improvements to the Workers Runtime are already live for all workers, so you do not need to change anything. Many apps will already see faster, steadier tail latency on compute heavy routes with less jitter during bursts. In places where garbage collection improved, some workloads will also use fewer billed CPU seconds.</p><p>We also sent Theo a <a href=\"https://github.com/t3dotgg/cf-vs-vercel-bench/pull/5\"><u>pull request</u></a> to update OpenNext with our improvements there, and with other test fixes.</p><p>But we&#39;re far from done. We still have work to do to close the gap between OpenNext and Next.js on Vercel â€“ but given the other benchmark results, it&#39;s clear we can get there. We also have plans for further improvements to our scheduling algorithm, so that requests almost never block each other. We will continue to improve V8, and even Node.js â€“ the Workers team employs multiple core contributors to each project. Our approach is simple: improve open source infrastructure so that everyone gets faster, then make sure our platform makes the most of those improvements.</p><p>And, obviously, we&#39;ll be writing more benchmarks, to make sure we&#39;re catching these kinds of issues ourselves in the future. If you have a benchmark that shows Workers being slower, send it to us with a repro. We will profile it, fix what we can upstream, and share back what we learn!</p>",
		"id": "7GhQHTIyNTjaRyYup7T7qr",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Cloudflare investigated CPU performance benchmark results for Workers, uncovering and fixing issues in infrastructure, V8 garbage collection, and OpenNext optimizations. These improvements have made Cloudflare Workers faster for all customers.",
		"metadata": {
			"title": "Unpacking Cloudflare Workers CPU Performance Benchmarks",
			"description": "Cloudflare investigated CPU performance benchmark results for Workers, uncovering and fixing issues in infrastructure, V8 garbage collection, and OpenNext optimizations. These improvements have made Cloudflare Workers faster for all customers.\n",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5IVrReUPfoAtskoFgzKlKX/662239d64cc42db86bb41674ab64b1bf/BLOG-3051_OG.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2025-10-14T20:00:25.230Z",
		"slug": "unpacking-cloudflare-workers-cpu-performance-benchmarks",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			}
		],
		"title": "Unpacking Cloudflare Workers CPU Performance Benchmarks",
		"updated_at": "2025-10-14T20:40:47.095Z",
		"url": "https://blog.cloudflare.com/unpacking-cloudflare-workers-cpu-performance-benchmarks"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}