{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "3",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Guest Author",
				"slug": "guest-author",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/YJzTr2p8aLvtEX5J7CysP/dd56b510670ea7bd78c3b19cc5b3bcd7/guest-author.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "At Timely we started a project to migrate our web applications from legacy Azure services to a modern PaaS offering. In theory it meant no code changes. We decided to start with our webhooks. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/39ooRb2ZxPCSsok7SokSV3/85772b454e8a51be1add9d9f3cdc4753/upgrading-cloud-infrastructure-with-workers-kv.png",
		"featured": false,
		"html": "<p><i>This is a guest post by</i> <a href=\"https://twitter.com/bcnzer\"><i>Ben Chartrand</i></a><i>, who is a Development Manager at</i> <a href=\"https://www.gettimely.com/\"><i>Timely</i></a><i>. You can check out some of Ben&#39;s other Workers projects on his</i> <a href=\"https://github.com/bcnzer\"><i>GitHub</i></a> <i>and his</i> <a href=\"https://liftcodeplay.com/\"><i>blog</i></a><i>.</i></p><p>At <a href=\"https://www.gettimely.com/\">Timely</a> we started a project to migrate our web applications from legacy Azure services to a modern PaaS offering. In theory it meant no code changes.</p><p>We decided to start with our webhooks. All our endpoints can be grouped into four categories:</p><ol><li><p>Integration with internal tools i.e. HelpScout, monitoring endpoint for PagerDuty</p></li><li><p>Payment confirmations</p></li><li><p>Calendar integrations i.e. Google Calendar</p></li><li><p>SMS confirmations</p></li></ol><p>Despite their limited number, these are vitally important. We did a lot of testing but it was clear we’d only really know if everything was working once we had production traffic. How could we migrate traffic?</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"option-1\">Option 1</h3>\n            <a href=\"#option-1\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Change the CNAME to point to the new hosting infrastructure. This is high risk. DNS takes time to propagate so, if we needed to roll back, it would take time. We would also be shifting over everything at once.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"option-2\">Option 2</h3>\n            <a href=\"#option-2\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Use a traffic manager to shift a percentage of traffic using Cloudflare Load Balancing. We could start at, say, 5% traffic to the new infrastructure and, assuming everything appears to be ok, slowly increase the traffic.</p><p>In our case the vast majority of our traffic goes to our calendar integration endpoints. The other endpoints were unlikely to receive traffic, especially if started with just 5% of traffic. This wasn’t the best option.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"enter-option-3-cloudflare-workers-and-workers-kv\">Enter Option 3: Cloudflare Workers and Workers KV</h3>\n            <a href=\"#enter-option-3-cloudflare-workers-and-workers-kv\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>I remember thinking: wouldn’t it be great if we could migrate traffic one endpoint at a time? We have about 20. We could start at the low risk endpoints and progressively move our way up.</p><p>We were able to write a Cloudflare Worker script that:</p><ul><li><p>Detected the path i.e. <i>/webhooks/paypal</i></p></li><li><p>If the path matched one our endpoints, we checked Workers KV (Key Value storage) to see if that endpoint was enabled. This was our feature flag / setting</p></li><li><p>If it was enabled and the path matched we redirected to the new infrastructure. This involved changing the domain but otherwise keeping the request as-is i.e. <b>webhooks.currentdomain.com/webhooks/paypal</b> to <b>webhooks.newinfrastructure.com/webhooks/paypal</b></p></li></ul><p>The first step was to add <code>passThroughOnException</code> mentioned in <a href=\"/dogfooding-edge-workers/\">this post</a>.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">addEventListener(&#039;fetch&#039;, event =&gt; {\n event.passThroughOnException()\n event.respondWith(handleRequest(event))\n})</pre></code>\n            <p>Next, in the handleRequest method, I created a map of each endpoint (the path) and the corresponding Workers KV key, so I know where to look for the setting.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">const endpoints = new Map()\n   endpoints.set(&#039;/monitoring&#039;, &#039;monitoring&#039;)\n   endpoints.set(&#039;/paypal&#039;, &#039;payPalIpnWebHook&#039;)\n   // more endpoints\n   endpoints.set(&#039;/helpscout&#039;, &#039;helpScoutWebHook&#039;)</pre></code>\n            <p>Next I inspect the path for each request. If the path matches then we check the setting. If so, we set a redirect flag.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">   for (var [key, value] of endpoints.entries()) {\n     if (currentUrl.pathname.startsWith(key)) {\n       const flag = await WEBHOOK_SETTINGS.get(value)\n       if (flag == 1) {\n         console.log(`redirected: ${key}`)\n         redirect = true\n         break\n       }\n     }\n   }</pre></code>\n            <p>If the redirect flag is true we change the hostname in the request but leave everything else as-is. This involves creating a new Request object. If we are not redirecting we fetch the request.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">   // Handle the request\n   let response = null\n   if (redirect) {\n     // Redirect to the new infra\n     const newUrl = request.url.replace(currentHost, newHost)\n     const init = {\n         method: request.method,\n         headers: request.headers,\n         body: request.body\n     }\n     console.log(newUrl)\n     const redirectedRequest = new Request(newUrl, init)\n     console.log(redirectedRequest)\n\n     response = await fetch(redirectedRequest)\n   } else {\n     // Handle with the existing infra\n     response = await fetch(request)\n   }</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"complete-code\">Complete Code</h3>\n            <a href=\"#complete-code\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        \n            <pre class=\"language-bash\"><code class=\"language-bash\">addEventListener(&#039;fetch&#039;, event =&gt; {\n event.passThroughOnException()\n event.respondWith(handleRequest(event))\n})\n\nfunction postLog(data) {\n return fetch(&quot;http://logs-01.loggly.com/inputs/&lt;my id&gt;/tag/http/&quot;, {\n   method: &quot;POST&quot;,\n   body: data\n })\n}\n\nasync function handleRequest(event) {\n try {\n   const request = event.request\n   const currentHost = &#039;webhooks.currentdomain.com&#039;\n   const newHost = &#039;webhooks.newinfrastructure.com&#039;\n\n   const currentUrl = new URL(request.url)\n   let redirect = false\n\n   // This is a map of the paths and the corresponding KV entry\n   const endpoints = new Map()\n   endpoints.set(&#039;/monitoring&#039;, &#039;monitoring&#039;)\n   endpoints.set(&#039;/paypal&#039;, &#039;payPalIpnWebHook&#039;)\n   // more endpoints\n   endpoints.set(&#039;/helpscout&#039;, &#039;helpScoutWebHook&#039;)\n\n   for (var [key, value] of endpoints.entries()) {\n     if (currentUrl.pathname.startsWith(key)) {\n       const flag = await WEBHOOK_SETTINGS.get(value)\n       if (flag == 1) {\n         console.log(`redirected: ${key}`)\n         redirect = true\n         break\n       }\n     }\n   }\n\n   // Handle the request\n   let response = null\n   if (redirect) {\n     // Redirect to the new infra\n     const newUrl = request.url.replace(currentHost, newHost)\n     const init = {\n         method: request.method,\n         headers: request.headers,\n         body: request.body\n     }\n     console.log(newUrl)\n     const redirectedRequest = new Request(newUrl, init)\n     console.log(redirectedRequest)\n\n     response = await fetch(redirectedRequest)\n   } else {\n     // Handle with the existing infra\n     response = await fetch(request)\n   }\n\n   return response\n } catch (error) {\n   event.waitUntil(postLog(error))\n   throw error\n }\n}</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"why-use-workers-kv\">Why use Workers KV?</h3>\n            <a href=\"#why-use-workers-kv\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We could have written everything as a hard coded script, which was updated each time to enable/disable redirection of traffic. This would require the team to make code changes and deploy the worker every time we wanted to make a change.</p><p>Using Workers KV, I enabled any member of the team to enable/disable endpoints using the Cloudflare API. To make things easier I created a Postman collection and shared it.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"go-live-problems-and-solutions\">Go Live Problems - and Solutions!</h3>\n            <a href=\"#go-live-problems-and-solutions\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>We went live with our first endpoint. The Workers script and KV worked fine but I noticed a small number of exceptions were being reported in Workers &gt; Worker Status.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2pnhZSWVA4UMBnF0X7njDy/fedf6fe02f350fd29a453ae91818f53f/Chart1.png\" alt=\"\" class=\"kg-image\" width=\"447\" height=\"324\" loading=\"lazy\"/>\n            \n            </figure><p>Cloudflare provides <a href=\"https://www.google.com/url?q=https://developers.cloudflare.com/workers/writing-workers/debugging-tips/&sa=D&ust=1547151883991000\">Debugging Tips</a>. I followed the section “Make subrequests to your debug server” and decided to incorporate <a href=\"https://www.google.com/url?q=https://www.loggly.com/&sa=D&ust=1547151883991000\">Loggly</a>. I could now catch the exceptions and send it to Loggly by running a POST using <code>fetch</code> to the URL provided by Loggly. With this I quickly determined what the problem was and corrected the issue.</p><p>Another problem that came up was a plethora of 403s. This was highly visible in the Workers &gt; Status Code graph (the green).</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3Uhf1vQOMhOASqnneZ2doB/0bd76855ec86210022fd39a2285138e2/Chart2.png\" alt=\"\" class=\"kg-image\" width=\"422\" height=\"445\" loading=\"lazy\"/>\n            \n            </figure><p>Turns out our IIS box had <a href=\"https://docs.microsoft.com/en-us/iis/configuration/system.webserver/security/dynamicipsecurity/denybyrequestrate\">rate limiting</a> setup. Instead of returning a 429 (Too Many Requests), it returned 403 (Forbidden). Phew - it wasn’t an issue with my Worker or the new infrastructure!</p><p>We could have set up the rate limiting on the new infrastructure but we instead opted for <a href=\"https://www.cloudflare.com/rate-limiting/\">Cloudflare Rate Limiting</a>. It was cheap, easy to setup and meant the blocked requests didn’t even hit our infrastructure in the first place.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"where-to-from-here\">Where to From Here?</h3>\n            <a href=\"#where-to-from-here\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>As I write this we’ve transitioned all traffic. All endpoints are enabled. Once we’re ready to decommission the old infrastructure we will:</p><ul><li><p>Change the CNAME to point to the new infrastructure</p></li><li><p>Disable the worker</p></li><li><p>Celebrate!</p></li></ul><p>We’ll then move onto our new web application, such as our API or main web app. We’re likely to use one of two options:</p><ol><li><p>Use the traffic manager to migrate a percentage of traffic</p></li><li><p>Migrate traffic on a per-customer basis. It would be similar to above except we would store a setting per-customer (KV would store a setting per customer and we know the customer by the request header, which would have the customer ID). We could, for example, start with internal test accounts, then our beta users and, at the very end, migrate our VIPs.</p></li></ol><p>Upgrading Cloud Infrastructure Made Easier and Safer Using Cloudflare Workers and Workers KV</p>",
		"id": "2he1am2htXKE1gJsK9L8xH",
		"localeList": {
			"name": "Upgrading Cloud Infrastructure Made Easier and Safer Using Cloudflare Workers and Workers KV Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-01-10T22:00:00.000+00:00",
		"slug": "upgrading-cloud-infrastructure-with-workers-kv",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "q88b6J14cYlPx98w6u1If",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Upgrading Cloud Infrastructure Made Easier and Safer Using Cloudflare Workers and Workers KV",
		"updated_at": "2024-10-10T00:32:29.740Z",
		"url": "https://blog.cloudflare.com/upgrading-cloud-infrastructure-with-workers-kv"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}