{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Back in 2015 we deployed ECMP routing - Equal Cost Multi Path - within our datacenters. This technology allowed us to spread traffic heading to a single IP address across multiple physical servers.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2zYPGrhkfV8AMzgS6G7pg3/2fe3587725932a9f1f920cc7a2641dd8/increasing-ipv6-mtu.png",
		"featured": false,
		"html": "<p>Back in 2015 we deployed <a href=\"https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing\">ECMP routing</a> - Equal Cost Multi Path - within our datacenters. This technology allowed us to spread traffic heading to a single IP address across multiple physical servers.</p><p>You can think about it as a third layer of load balancing.</p><ul><li><p>First we split the traffic across multiple IP addresses with DNS.</p></li><li><p>Then we split the traffic across <a href=\"https://www.cloudflare.com/learning/cdn/glossary/anycast-network/\">multiple datacenters with Anycast</a>.</p></li><li><p>Finally, we split the traffic across multiple servers with ECMP.</p></li></ul>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6brB6jYvBwnIHL5UyGZZpq/dbc2f52a7ba7056bebc36eb90ec98c55/5799659266_28038df72f_b.jpg\" alt=\"\" class=\"kg-image\" width=\"1024\" height=\"683\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://www.flickr.com/photos/superlatif/5799659266/\">photo</a> by <a href=\"https://www.flickr.com/photos/superlatif/\">Sahra</a> by-sa/2.0</p><p>When deploying ECMP we hit a problem with Path MTU discovery. The ICMP packets destined to our Anycast IP&#39;s were being dropped. You can read more about that (and the solution) in the 2015 blog post <a href=\"/path-mtu-discovery-in-practice/\">Path MTU Discovery in practice</a>.</p><p>To solve the problem we created a small piece of software, called <code>pmtud</code> (<a href=\"https://github.com/cloudflare/pmtud\">https://github.com/cloudflare/pmtud</a>). Since deploying <code>pmtud</code>, our ECMP setup has been working smoothly.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"hardcoding-ipv6-mtu\">Hardcoding IPv6 MTU</h3>\n      <a href=\"#hardcoding-ipv6-mtu\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>During that initial ECMP rollout things were broken. To keep services running until <code>pmtud</code> was done, we deployed a quick hack. We reduced the MTU of  IPv6 traffic to the minimal possible value: 1280 bytes.</p><p>This was done as a tag on a default route. This is how our routing table used to look:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ip -6 route show\n...\ndefault via 2400:xxxx::1 dev eth0 src 2400:xxxx:2  metric 1024  mtu 1280</pre></code>\n            <p>Notice the <code>mtu 1280</code> in the default route.</p><p>With this setting our servers never transmitted IPv6 packets larger than 1280 bytes, therefore &quot;fixing&quot; the issue. Since all IPv6 routers must have an MTU of at least 1280, we could expect that no ICMP Packet-Too-Big message would ever be sent to us.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/WoQ4atXDbAlJ1mhDnXDcf/0e2df496f1184bf35217d2be59f255b8/ECMP-hashing-ICMP.png\" alt=\"\" class=\"kg-image\" width=\"931\" height=\"331\" loading=\"lazy\"/>\n            \n            </figure><p>Remember - the original problem introduced by ECMP was that ICMP routed back to our Anycast addresses could go to a wrong machine within the ECMP group. Therefore we became ICMP black holes. Cloudflare would send large packets, they would be dropped with ICMP PTB packet flying back to us. Which, in turn would fail to be delivered to the right machine due to ECMP.</p><p>But why did this problem not appear for IPv4 traffic? We believe the same issue exists on IPv4, but it&#39;s less damaging due to the different nature of the network. IPv4 is more mature and the great majority of end-hosts support either MTU 1500 or have their MSS option well configured - or clamped by some middle box. This is different in IPv6 where a large proportion of  users use tunnels, have Path MTU strictly smaller than 1500 and use incorrect MSS settings in the TCP header. Finally, Linux implements <a href=\"https://tools.ietf.org/html/rfc4821\">RFC4821</a> for IPv4 but not IPv6. RFC4821 (PLPMTUD) has its disadvantages, but does slightly help to alleviate the ICMP blackhole issue.</p><p>Our &quot;fix&quot; - reducing the MTU to 1280 - was serving us well and we had no pressing reason to revert it.</p><p>Researchers did notice though. We were caught red-handed twice:</p><ul><li><p><a href=\"https://blog.apnic.net/2016/11/15/scoring-dns-root-server-system/\">In 2017 Geoff Huston noticed (pdf)</a> that we sent DNS fragments of 1280 only (<a href=\"https://blog.apnic.net/2016/11/15/scoring-dns-root-server-system/\">older blog post</a>).</p></li><li><p>In June 2018 the paper <a href=\"http://tma.ifip.org/2018/wp-content/uploads/sites/3/2018/06/tma2018_paper57.pdf\">&quot;Exploring usable Path MTU in the Internet&quot; (pdf)</a> mentioned our weird setting - where we can accept 1500 bytes just fine, but transmit is limited to 1280.</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"when-small-mtu-is-too-small\">When small MTU is too small</h3>\n      <a href=\"#when-small-mtu-is-too-small\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3yo93AUS4hONJUarTUlGP/1c9fd02139519ea6f947b61a39da9d8b/6545737741_077583ca1f_b-1.jpg\" alt=\"\" class=\"kg-image\" width=\"1024\" height=\"768\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://www.flickr.com/photos/nh53/6545737741/\">photo</a> by <a href=\"https://www.flickr.com/photos/nh53\">NH53</a> by/2.0</p><p>This changed recently, when we started working on <a href=\"/spectrum/\">Cloudflare Spectrum</a> support for UDP. Spectrum is a terminating proxy, able to handle protocols other than HTTP. Getting Spectrum to <a href=\"/how-we-built-spectrum/\">forward TCP was relatively straightforward</a> (barring couple of <a href=\"/mmproxy-creative-way-of-preserving-client-ips-in-spectrum/\">awesome hacks</a>). UDP is different.</p><p>One of the major issues we hit was related to the MTU on our servers.</p><p>During tests we wanted to forward UDP VPN packets through Spectrum. As you can imagine, any VPN would encapsulate a packet in another packet. Spectrum received packets like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"> +---------------------+------------------------------------------------+\n +  IPv6 + UDP header  |  UDP payload encapsulating a 1280 byte packet  |\n +---------------------+------------------------------------------------+</pre></code>\n            <p>It&#39;s pretty obvious, that our edge servers supporting IPv6 packets of max 1280 bytes won&#39;t be able to handle this type of traffic. We are going to need at least 1280+40+8 bytes MTU! Hardcoding MTU=1280 in IPv6 may be acceptable solution if you are an end-node on the internet, but is definitely too small when forwarding tunneled traffic.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"picking-a-new-mtu\">Picking a new MTU</h3>\n      <a href=\"#picking-a-new-mtu\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>But what MTU value should we use instead? Let&#39;s see what other major internet companies do. Here is a couple of examples of advertised MSS values in TCP SYN+ACK packets over IPv6:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">+---- site -----+- MSS --+- estimated MTU -+\n| google.com    |  1360  |    1420         |\n+---------------+--------+-----------------+\n| facebook.com  |  1410  |    1470         |\n+---------------+--------+-----------------+\n| wikipedia.org |  1440  |    1500         |\n+---------------+--------+-----------------+</pre></code>\n            <p>I believe Google and Facebook adjust their MTU due to their use of L4 load balancers. Their implementations do IP-in-IP encapsulation so need a bit of space for the header. Read more:</p><ul><li><p>Google - <a href=\"https://ai.google/research/pubs/pub44824\">Maglev</a></p></li><li><p>Facebook - <a href=\"https://code.fb.com/open-source/open-sourcing-katran-a-scalable-network-load-balancer/\">Katran</a></p></li></ul><p>There may be other reasons for having a smaller MTU. A reduced value may decrease the probability of the Path MTU detection algorithm kicking in (ie: relying on ICMP PTB). We can theorize that for the misconfigured eyeballs:</p><ul><li><p>MTU=1280 will never run Path MTU detection</p></li><li><p>MTU=1500 will always run it.</p></li><li><p>In-between values would have increasing different chances of hitting the problem.</p></li></ul><p>But just what is the chance of that?</p><p>A quick unscientific study of the MSS values we encountered from eyeballs shows the following distributions. For connections going over IPv4:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">IPv4 eyeball advertised MSS in SYN:\n value |-------------------------------------------------- count cummulative\n  1300 |                                                 *  1.28%   98.53%\n  1360 |                                              ****  4.40%   95.68%\n  1370 |                                                 *  1.15%   91.05%\n  1380 |                                               ***  3.35%   89.81%\n  1400 |                                          ********  7.95%   84.79%\n  1410 |                                                 *  1.17%   76.66%\n  1412 |                                              ****  4.58%   75.49%\n  1440 |                                            ******  6.14%   65.71%\n  1452 |                                      ************ 11.50%   58.94%\n  1460 |************************************************** 47.09%   47.34%</pre></code>\n            <p>Assuming the majority of clients have MSS configured right, we can say that 89.8% of connections advertised MTU=1380+40=1420 or higher. 75% had MTU &gt;= 1452.</p><p>For IPv6 connections we saw:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">IPv6 eyeball advertised MSS in SYN:\n value |-------------------------------------------------- count cummulative\n  1220 |                                               ***  4.21%   99.96%\n  1340 |                                                **  3.11%   93.23%\n  1362 |                                                 *  1.31%   87.70%\n  1368 |                                               ***  3.38%   86.36%\n  1370 |                                               ***  4.24%   82.98%\n  1380 |                                               ***  3.52%   78.65%\n  1390 |                                                 *  2.11%   75.10%\n  1400 |                                               ***  3.89%   72.25%\n  1412 |                                               ***  3.64%   68.21%\n  1420 |                                                 *  2.02%   64.54%\n  1440 |************************************************** 54.31%   54.34%</pre></code>\n            <p>On IPv6 87.7% connections had MTU &gt;= 1422 (1362+60). 75% had MTU &gt;= 1450. (See also: <a href=\"https://blog.apnic.net/2016/05/19/fragmenting-ipv6/\">MTU distribution of DNS  servers</a>).</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"interpretation\">Interpretation</h3>\n      <a href=\"#interpretation\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Before we move on it&#39;s worth reiterating the original problem. Each connection from an eyeball to our Anycast network has three numbers related to it:</p><ul><li><p>Client advertised MTU - seen in MSS option in TCP header</p></li><li><p>True Path MTU value - generally unknown until measured</p></li><li><p>Our Edge server MTU - value we are trying to optimize in this exercise</p></li></ul><p>(This is a slight simplification, paths on the internet aren&#39;t symmetric so the path from eyeball to Cloudflare could have different Path MTU than the reverse path.)</p><p>In order for the connection to misbehave, three conditions must be met:</p><ul><li><p>Client advertised MTU must be &quot;wrong&quot;, that is: larger than True Path MTU</p></li><li><p>Our edge server must be willing to send such large packets: Edge server MTU &gt;= True Path MTU</p></li><li><p>The ICMP PTB messages must fail to be delivered to our edge server - preventing Path MTU detection from working.</p></li></ul><p>The last condition could occur for one of the reasons:</p><ul><li><p>the routers on the path are misbehaving and perhaps firewalling ICMP</p></li><li><p>due to the asymmetric nature of the internet the ICMP back is routed to the wrong Anycast datacenter</p></li><li><p>something is wrong on our side, for example <code>pmtud</code> process fails</p></li></ul><p>In the past we limited our Edge Server MTU value to the smallest possible, to make sure we never encounter the problem. Due to the development of Spectrum UDP support we must increase the Edge Server MTU, while still minimizing the probability of the issue happening.</p><p>Finally, relying on ICMP PTB messages for a large fraction of traffic is a bad idea. It&#39;s easy to imagine the cost this induces: even with Path MTU detection working fine, the affected connection will suffer a hiccup. A couple of large packets will be dropped before the reverse ICMP will get through and reconfigure the saved Path MTU value. This is not optimal for latency.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"progress\">Progress</h3>\n      <a href=\"#progress\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In recent days we increased the IPv6 MTU. As part of the process we could have chosen 1300, 1350, or 1400. We choose 1400 because we think it&#39;s the next best value to use after 1280. With 1400 we believe 93.2% of IPv6 connections will not need to rely on Path MTU Detection/ICMP. In the near future we plan to increase this value further. We won&#39;t settle on 1500 though - we want to leave a couple of bytes for IPv4 encapsulation, to allow the most popular tunnels to keep working without suffering poor latency when Path MTU Detection kicks in.</p><p>Since the rollout we&#39;ve been monitoring <code>Icmp6InPktTooBigs</code> counters:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ nstat -az | grep Icmp6InPktTooBigs\nIcmp6InPktTooBigs               738748             0.0</pre></code>\n            <p>Here is a chart of the ICMP PTB packets we received over last 7 days. You can clearly see that when the rollout started, we saw a large increase in PTB ICMP messages (Y label - packet count - deliberately obfuscated):</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/64aFjrP5OwJLKlbMfwIofg/abc284d8d6f8b2b0c7441277cfea12cc/Screen-Shot-2018-09-06-at-2.12.28-PM.png\" alt=\"\" class=\"kg-image\" width=\"1678\" height=\"806\" loading=\"lazy\"/>\n            \n            </figure><p>Interestingly the majority of the ICMP packets are concentrated in our Frankfurt datacenter:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7rwp7vqya4hZUVtqgALCo0/70c29ca328859bd7330a9399305d7d79/Screen-Shot-2018-09-06-at-2.11.53-PM.png\" alt=\"\" class=\"kg-image\" width=\"1722\" height=\"800\" loading=\"lazy\"/>\n            \n            </figure><p>We estimate that in our Frankfurt datacenter, we receive ICMP PTB message on 2 out of every 100 IPv6 TCP connections. These seem to come from only a handful of ASNs:</p><ul><li><p>AS6830 - Liberty Global Operations B.V.</p></li><li><p>AS20825- Unitymedia NRW GmbH</p></li><li><p>AS31334 - Vodafone Kabel Deutschland GmbH</p></li><li><p>AS29562 - Kabel BW GmbH</p></li></ul><p>These networks send to us ICMP PTB messages, usually informing that their MTU is 1280. For example:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo tcpdump -tvvvni eth0 icmp6 and ip6[40+0]==2 \nIP6 2a02:908:xxx &gt; 2400:xxx ICMP6, packet too big, mtu 1280, length 1240\nIP6 2a02:810d:xx &gt; 2400:xxx ICMP6, packet too big, mtu 1280, length 1240\nIP6 2001:ac8:xxx &gt; 2400:xxx ICMP6, packet too big, mtu 1390, length 1240</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"final-thoughts\">Final thoughts</h3>\n      <a href=\"#final-thoughts\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Finally, if you are an IPv6 user with a weird MTU and have misconfigured MSS - basically if you are doing tunneling - please let us know of any issues. We know that debugging MTU issues is notoriously hard. To aid that we created <a href=\"/ip-fragmentation-is-broken/\">an online fragmentation and ICMP delivery test</a>. You can run it:</p><ul><li><p>IPv6 version: <a href=\"http://icmpcheckv6.popcount.org\">http://icmpcheckv6.popcount.org</a></p></li><li><p>(for completeness, we also have an <a href=\"http://icmpcheck.popcount.org\">IPv4 version</a>)</p></li></ul><p>If you are a server operator running IPv6 applications, you should not worry. In most cases leaving the MTU at default 1500 is a good choice and should work for the majority of connections.  Just remember to allow ICMP PTB packets on the firewall and you should be good. If you serve variety of IPv6 users and need to optimize latency, you may consider choosing a slightly smaller MTU for outbound packets, to reduce the risk of relying on Path MTU Detection / ICMP.</p><p><i>Low level network tuning sound interesting? Join our </i><a href=\"https://boards.greenhouse.io/cloudflare/jobs/589572\"><i>world famous team</i></a><i> in London, Austin, San Francisco, Champaign and our elite office in Warsaw, Poland.</i></p>",
		"id": "4jilwfKi5MVWxnIA3ErwZ8",
		"localeList": {
			"name": "Fixing an old hack - why we are bumping the IPv6 MTU Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-09-10T10:21:25.000+01:00",
		"slug": "increasing-ipv6-mtu",
		"tags": [
			{
				"id": "32jGdfwzeLK9NDinLOJn6J",
				"name": "IPv6",
				"slug": "ipv6"
			},
			{
				"id": "5fZHv2k9HnJ7phOPmYexHw",
				"name": "DNS",
				"slug": "dns"
			},
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "7jhcqd4x1lAMEMo1QGlEtg",
				"name": "Anycast",
				"slug": "anycast"
			},
			{
				"id": "z8ZZrDbXCT44IU6BaHLWl",
				"name": "Load Balancing",
				"slug": "loadbalancing"
			}
		],
		"title": "Fixing an old hack - why we are bumping the IPv6 MTU",
		"updated_at": "2025-10-24T11:02:49.239Z",
		"url": "https://blog.cloudflare.com/increasing-ipv6-mtu"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}