{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "16",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"fr-fr",
		"de-de",
		"ja-jp"
	],
	"post": {
		"authors": [
			{
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5vGNsXzZrtSLn2X30pnpUY/6f350e7dd36058a6422f9199b452bb02/john-graham-cumming.jpg",
				"location": "Lisbon, Portugal",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Almost nine years ago, Cloudflare was a tiny company and I was a customer not an employee. Cloudflare had launched a month earlier and one day alerting told me that my little site, jgc.org, didn’t seem to have working DNS any more. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4Pp9DIF07pZuUxDoCm9ib0/137143c72e1ef111d0596c0954c34c7a/details-of-the-cloudflare-outage-on-july-2-2019.png",
		"featured": false,
		"html": "<p>Almost nine years ago, Cloudflare was a tiny company and I was a customer not an employee. Cloudflare had launched a month earlier and one day alerting told me that my little site, <a href=\"https://jgc.org/\">jgc.org</a>, didn’t seem to have working DNS any more. Cloudflare had pushed out a change to its use of <a href=\"https://developers.google.com/protocol-buffers/\">Protocol Buffers</a> and it had broken DNS.</p><p>I wrote to Matthew Prince directly with an email titled “Where’s my dns?” and he replied with a long, detailed, technical response (you can read the <a href=\"https://gist.github.com/jgrahamc/6bb02a6f7c3799a1590b3cdb901f8e08\">full email exchange here</a>) to which I replied:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">From: John Graham-Cumming\nDate: Thu, Oct 7, 2010 at 9:14 AM\nSubject: Re: Where&#039;s my dns?\nTo: Matthew Prince\n\nAwesome report, thanks. I&#039;ll make sure to call you if there&#039;s a\nproblem.  At some point it would probably be good to write this up as\na blog post when you have all the technical details because I think\npeople really appreciate openness and honesty about these things.\nEspecially if you couple it with charts showing your post launch\ntraffic increase.\n\nI have pretty robust monitoring of my sites so I get an SMS when\nanything fails.  Monitoring shows I was down from 13:03:07 to\n14:04:12.  Tests are made every five minutes.\n\nIt was a blip that I&#039;m sure you&#039;ll get past.  But are you sure you\ndon&#039;t need someone in Europe? :-)</pre></code>\n            <p>To which he replied:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">From: Matthew Prince\nDate: Thu, Oct 7, 2010 at 9:57 AM\nSubject: Re: Where&#039;s my dns?\nTo: John Graham-Cumming\n\nThanks. We&#039;ve written back to everyone who wrote in. I&#039;m headed in to\nthe office now and we&#039;ll put something on the blog or pin an official\npost to the top of our bulletin board system. I agree 100%    \ntransparency is best.</pre></code>\n            <p>And so, today, as an employee of a much, much larger Cloudflare I get to be the one who writes, transparently about a mistake we made, its impact and what we are doing about it.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"the-events-of-july-2\">The events of July 2</h3>\n            <a href=\"#the-events-of-july-2\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>On July 2, we deployed a new rule in our WAF Managed Rules that <a href=\"/cloudflare-outage/\">caused CPUs to become exhausted</a> on every CPU core that handles HTTP/HTTPS traffic on the Cloudflare network worldwide. We are constantly improving WAF Managed Rules to respond to new vulnerabilities and threats. In May, for example, we used the speed with which we can update the WAF to <a href=\"/stopping-cve-2019-0604/\">push a rule</a> to protect against a serious SharePoint vulnerability. Being able to deploy rules quickly and globally is a critical feature of our <a href=\"https://www.cloudflare.com/learning/ddos/glossary/web-application-firewall-waf/\">WAF</a>.</p><p>Unfortunately, last Tuesday’s update contained a regular expression that backtracked enormously and exhausted CPU used for HTTP/HTTPS serving. This brought down Cloudflare’s core proxying, CDN and WAF functionality. The following graph shows CPUs dedicated to serving HTTP/HTTPS traffic spiking to nearly 100% usage across the servers in our network.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1MnDqPQIRm0bORmq8VfJel/7d6ede3ccccdd8eb21d3a3904052e2d3/cpu-goes-boom.png\" alt=\"\" class=\"kg-image\" width=\"2000\" height=\"821\" loading=\"lazy\"/>\n            \n            </figure><p>CPU utilization in one of our PoPs during the incident</p><p>This resulted in our customers (and their customers) seeing a 502 error page when visiting any Cloudflare domain. The 502 errors were generated by the front line Cloudflare web servers that still had CPU cores available but were unable to reach the processes that serve HTTP/HTTPS traffic.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1gI4GAm9Xyp9pmIGOs1YfQ/02425f89dc6b13e46bfc427c7ea7111c/502-bad-gateway.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"709\" loading=\"lazy\"/>\n            \n            </figure><p>We know how much this hurt our customers. We’re ashamed it happened. It also had a negative impact on our own operations while we were dealing with the incident.</p><p>It must have been incredibly stressful, frustrating and frightening if you were one of our customers. It was even more upsetting because we haven’t had a <a href=\"/todays-outage-post-mortem-82515/\">global outage</a> for six years.</p><p>The CPU exhaustion was caused by a single WAF rule that contained a poorly written regular expression that ended up creating excessive backtracking. The regular expression that was at the heart of the outage is <code>(?:(?:\\&quot;|&#39;|\\]|\\}|\\\\|\\d|(?:nan|infinity|true|false|null|undefined|symbol|math)|\\`|\\-|\\+)+[)]*;?((?:\\s|-|~|!|{}|\\|\\||\\+)*.*(?:.*=.*)))</code></p><p>Although the regular expression itself is of interest to many people (and is discussed more below), the real story of how the Cloudflare service went down for 27 minutes is much more complex than “a regular expression went bad”. We’ve taken the time to write out the series of events that led to the outage and kept us from responding quickly. And, if you want to know more about regular expression backtracking and what to do about it, then you’ll find it in an appendix at the end of this post.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"what-happened\">What happened</h3>\n            <a href=\"#what-happened\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Let’s begin with the sequence of events. All times in this blog are UTC.</p><p>At 13:42 an engineer working on the firewall team deployed a minor change to the rules for <a href=\"https://www.cloudflare.com/learning/security/threats/cross-site-scripting/\">XSS</a> detection via an automatic process. This generated a Change Request ticket. We use Jira to manage these tickets and a screenshot is below.</p><p>Three minutes later the first PagerDuty page went out indicating a fault with the WAF. This was a synthetic test that checks the functionality of the WAF (we have hundreds of such tests) from outside Cloudflare to ensure that it is working correctly. This was rapidly followed by pages indicating many other end-to-end tests of Cloudflare services failing, a global traffic drop alert, widespread 502 errors and then many reports from our points-of-presence (PoPs) in cities worldwide indicating there was CPU exhaustion.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5xcBZg45cch5C07Quo2Fcq/fddf5747eb92394814692e3de6a8f7b0/pager-duty-1345.png\" alt=\"\" class=\"kg-image\" width=\"750\" height=\"228\" loading=\"lazy\"/>\n            \n            </figure>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2FzCjO9IEzriDywsT9aFZY/43ef7c5c586e559a707cdbf455a65eef/pager-duty-1346.jpg\" alt=\"\" class=\"kg-image\" width=\"750\" height=\"242\" loading=\"lazy\"/>\n            \n            </figure><p>Some of these alerts hit my watch and I jumped out of the meeting I was in and was on my way back to my desk when a leader in our Solutions Engineering group told me we had lost 80% of our traffic. I ran over to SRE where the team was debugging the situation. In the initial moments of the outage there was speculation it was an attack of some type we’d never seen before.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/9qOCsRkTpHvns6U9tL8Yy/ac00df0e19af1a0109f40b500c3e0a6a/pager-duty-1348.jpg\" alt=\"\" class=\"kg-image\" width=\"750\" height=\"231\" loading=\"lazy\"/>\n            \n            </figure><p>Cloudflare’s SRE team is distributed around the world, with continuous, around-the-clock coverage. Alerts like these, the vast majority of which are noting very specific issues of limited scopes in localized areas, are monitored in internal dashboards and addressed many times every day. This pattern of pages and alerts, however, indicated that something gravely serious had happened, and SRE immediately declared a P0 incident and escalated to engineering leadership and systems engineering.</p><p>The London engineering team was at that moment in our main event space listening to an internal tech talk. The talk was interrupted and everyone assembled in a large conference room and others dialed-in. This wasn’t a normal problem that SRE could handle alone, it needed every relevant team online at once.</p><p>At 14:00 the WAF was identified as the component causing the problem and an attack dismissed as a possibility. The Performance Team pulled live CPU data from a machine that clearly showed the WAF was responsible. Another team member used strace to confirm. Another team saw error logs indicating the WAF was in trouble. At 14:02 the entire team looked at me when it was proposed that we use a ‘global terminate’, a mechanism built into Cloudflare to disable a single component worldwide.</p><p>But getting to the global WAF termination was another story. Things stood in our way. We use our own products and with our <a href=\"https://www.cloudflare.com/products/cloudflare-access/\">Access</a> service down we couldn’t authenticate to our internal control panel (and once we were back we’d discover that some members of the team had lost access because of a security feature that disables their credentials if they don’t use the internal control panel frequently).</p><p>And we couldn’t get to other internal services like Jira or the build system. To get to them, we had to use a bypass mechanism that wasn’t frequently used (another thing to drill on after the event). Eventually, a team member executed the global WAF termination at 14:07 and by 14:09 traffic levels and CPU were back to expected levels worldwide. The rest of Cloudflare&#39;s protection mechanisms continued to operate.</p><p>Then we moved on to restoring the WAF functionality. Because of the sensitivity of the situation we performed both negative tests (asking ourselves “was it really that particular change that caused the problem?”) and positive tests (verifying the rollback worked) in a single city using a subset of traffic after removing our paying customers’ traffic from that location.</p><p>At 14:52 we were 100% satisfied that we understood the cause and had a fix in place and the WAF was re-enabled globally.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"how-cloudflare-operates\">How Cloudflare operates</h3>\n            <a href=\"#how-cloudflare-operates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Cloudflare has a team of engineers who work on our WAF Managed Rules product; they are constantly working to improve detection rates, lower false positives, and respond rapidly to new threats as they emerge. In the last 60 days, 476 change requests have been handled for the WAF Managed Rules (averaging one every 3 hours).</p><p>This particular change was to be deployed in “simulate” mode where real customer traffic passes through the rule but nothing is blocked. We use that mode to test the effectiveness of a rule and measure its false positive and false negative rate. But even in the simulate mode the rules actually need to execute and in this case the rule contained a regular expression that consumed excessive CPU.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/16x7kdRpp79whMvSA9cxcB/2069494cb95affef11fef139f5c73227/change-request.png\" alt=\"\" class=\"kg-image\" width=\"1470\" height=\"926\" loading=\"lazy\"/>\n            \n            </figure><p>As can be seen from the Change Request above there’s a deployment plan, a rollback plan and a link to the internal Standard Operating Procedure (SOP) for this type of deployment. The SOP for a rule change specifically allows it to be pushed globally. This is very different from all the software we release at Cloudflare where the SOP first pushes software to an internal dogfooding network point of presence (PoP) (which our employees pass through), then to a small number of customers in an isolated location, followed by a push to numerous customers and finally to the world.</p><p>The process for a software release looks like this: We use git internally via BitBucket. Engineers working on changes push code which is built by TeamCity and when the build passes, reviewers are assigned. Once a pull request is approved the code is built and the test suite runs (again).</p><p>If the build and tests pass then a Change Request Jira is generated, and the change has to be approved by the relevant manager or technical lead. Once approved deployment to what we call the “animal PoPs” occurs: DOG, PIG, and the <a href=\"https://en.wikipedia.org/wiki/Sentinel_species\">Canaries</a>.</p><p>The DOG PoP is a Cloudflare PoP (just like any of our cities worldwide) but it is used only by Cloudflare employees. This dogfooding PoP enables us to catch problems early before any customer traffic has touched the code. And it frequently does.</p><p>If the DOG test passes successfully code goes to PIG (as in “Guinea Pig”). This is a Cloudflare PoP where a small subset of customer traffic from non-paying customers passes through the new code.</p><p>If that is successful the code moves to the Canaries. We have three Canary PoPs spread across the world and run paying and non-paying customer traffic running through them on the new code as a final check for errors.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/sxCQQWRdbtZpVh4UBxFKS/2352efb87e4a488bfff06c33dc17b5b5/animal-deploy-1.png\" alt=\"\" class=\"kg-image\" width=\"1946\" height=\"986\" loading=\"lazy\"/>\n            \n            </figure><p>Cloudflare software release process</p><p>Once successful in Canary the code is allowed to go live. The entire DOG, PIG, Canary, Global process can take hours or days to complete, depending on the type of code change. The diversity of Cloudflare’s network and customers allows us to test code thoroughly before a release is pushed to all our customers globally. But, by design, the WAF doesn’t use this process because of the need to respond rapidly to threats.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"waf-threats\">WAF Threats</h3>\n            <a href=\"#waf-threats\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In the last few years we have seen a dramatic increase in vulnerabilities in common applications. This has happened due to the increased availability of software testing tools, like fuzzing for example (we just posted a new blog on fuzzing <a href=\"/a-gentle-introduction-to-linux-kernel-fuzzing/\">here</a>).</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5pixnb5M7HDmnsIbYXbQNe/675aadfadad4196b5c2bd7afadc535f4/Number-of-CVEs-per-year.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"371\" loading=\"lazy\"/>\n            \n            </figure><p>Source: <a href=\"https://cvedetails.com/\">https://cvedetails.com/</a></p><p>What is commonly seen is a Proof of Concept (PoC) is created and often published on GitHub quickly, so that teams running and maintaining applications can test to make sure they have adequate protections. Because of this, it’s imperative that Cloudflare are able to react as quickly as possible to new attacks to give our customers a chance to patch their software.</p><p>A great example of how Cloudflare proactively provided this protection was through the deployment of our protections against the SharePoint vulnerability in May (<a href=\"/stopping-cve-2019-0604/\">blog here</a>). Within a short space of time from publicised announcements, we saw a huge spike in attempts to exploit our customer’s Sharepoint installations. Our team continuously monitors for new threats and writes rules to mitigate them on behalf of our customers.</p><p>The specific rule that caused last Tuesday’s outage was targeting Cross-site scripting (XSS) attacks. These, too, have increased dramatically in recent years.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/33MloziZUz1FN0kzcyNOzJ/5e10c2f974e4ef23787cdfa2d833c8b2/Number-of-XSS-CVEs-by-year.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"371\" loading=\"lazy\"/>\n            \n            </figure><p>Source: <a href=\"https://cvedetails.com/\">https://cvedetails.com/</a></p><p>The standard procedure for a WAF Managed Rules change indicates that Continuous Integration (CI) tests must pass prior to a global deploy. That happened normally last Tuesday and the rules were deployed. At 13:31 an engineer on the team had merged a Pull Request containing the change after it was approved.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5UVYKUe8LnxOMfMtjBHKX2/1e5d2075afd8359024a5cfac59984a0f/change-details.png\" alt=\"\" class=\"kg-image\" width=\"1338\" height=\"316\" loading=\"lazy\"/>\n            \n            </figure><p>At 13:37 TeamCity built the rules and ran the tests, giving it the green light. The WAF test suite tests that the core functionality of the WAF works and consists of a large collection of unit tests for individual matching functions. After the unit tests run the individual WAF rules are tested by executing a huge collection of HTTP requests against the WAF. These HTTP requests are designed to test requests that should be blocked by the WAF (to make sure it catches attacks) and those that should be let through (to make sure it isn’t over-blocking and creating false positives). What it didn’t do was test for runaway CPU utilization by the WAF and examining the log files from previous WAF builds shows that no increase in test suite run time was observed with the rule that would ultimately cause CPU exhaustion on our edge.</p><p>With the tests passing, TeamCity automatically began deploying the change at 13:42.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4Fj2DnT9zMYICUwJs5p41v/23d717e3e06f17d6472c2ee7643e87ae/build-process.png\" alt=\"\" class=\"kg-image\" width=\"1348\" height=\"810\" loading=\"lazy\"/>\n            \n            </figure>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"quicksilver\">Quicksilver</h3>\n            <a href=\"#quicksilver\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Because WAF rules are required to address emergent threats they are deployed using our Quicksilver distributed key-value (KV) store that can push changes globally in seconds. This technology is used by all our customers when making configuration changes in our dashboard or via the API and is the backbone of our service’s ability to respond to changes very, very rapidly.</p><p>We haven’t really talked about Quicksilver much. We previously used <a href=\"https://fallabs.com/kyototycoon/\">Kyoto Tycoon</a> as a globally distributed key-value store, but we ran into operational issues with it and wrote our own KV store that is replicated across our more than 180 cities. Quicksilver is how we push changes to customer configuration, update WAF rules, and distribute JavaScript code written by customers using Cloudflare Workers.</p><p>From clicking a button in the dashboard or making an API call to change configuration to that change coming into effect takes seconds, globally. Customers have come to love this high speed configurability. And with Workers they expect near instant, global software deployment. On average Quicksilver distributes about 350 changes per second.</p><p>And Quicksilver is very fast.  On average, we hit a p99 of 2.29s for a change to be distributed to every machine worldwide. Usually, this speed is a great thing. It means that when you enable a feature or purge your cache you know that it’ll be live globally nearly instantly. When you push code with Cloudflare Workers it&#39;s pushed out at the same speed. This is part of the promise of Cloudflare fast updates when you need them.</p><p>However, in this case, that speed meant that a change to the rules went global in seconds. You may notice that the WAF code uses Lua. Cloudflare makes use of Lua extensively in production and details of the <a href=\"/cloudflares-new-waf-compiling-to-lua/\">Lua in the WAF</a> have been <a href=\"https://www.youtube.com/watch?v=nlt4XKhucS4\">discussed before</a>. The Lua WAF uses <a href=\"https://www.pcre.org/\">PCRE</a> internally, and it uses backtracking for matching and has no mechanism to protect against a runaway expression. More on that and what we&#39;re doing about it below.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/lThtGZGRjedEbbekP2uYq/79e0d557ae341374aecd6f20563db791/rule-deployment.png\" alt=\"\" class=\"kg-image\" width=\"1690\" height=\"166\" loading=\"lazy\"/>\n            \n            </figure><p>Everything that occurred up to the point the rules were deployed was done “correctly”: a pull request was raised, it was approved, CI/CD built the code and tested it, a change request was submitted with an SOP detailing rollout and rollback, and the rollout was executed.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5X4juGcqYkEpoT9TBBCWT5/7f17924aabb9449665c1e9a02d2fe501/WAF-deploy-1.png\" alt=\"\" class=\"kg-image\" width=\"1946\" height=\"734\" loading=\"lazy\"/>\n            \n            </figure><p>Cloudflare WAF deployment process</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"what-went-wrong\">What went wrong</h3>\n            <a href=\"#what-went-wrong\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>As noted, we deploy dozens of new rules to the WAF every week, and we have numerous systems in place to prevent any negative impact of that deployment. So when things do go wrong, it’s generally the unlikely convergence of multiple causes. Getting to a single root cause, while satisfying, may obscure the reality. Here are the multiple vulnerabilities that converged to get to the point where Cloudflare’s service for HTTP/HTTPS went offline.</p><ol><li><p>An engineer wrote a regular expression that could easily <a href=\"https://www.regular-expressions.info/catastrophic.html\">backtrack</a> enormously.</p></li><li><p>A protection that would have helped prevent excessive CPU use by a regular expression was removed by mistake during a refactoring of the WAF weeks prior—a refactoring that was part of making the WAF use less CPU.</p></li><li><p>The regular expression engine being used didn’t have complexity guarantees.</p></li><li><p>The test suite didn’t have a way of identifying excessive CPU consumption.</p></li><li><p>The SOP allowed a non-emergency rule change to go globally into production without a staged rollout.</p></li><li><p>The rollback plan required running the complete WAF build twice taking too long.</p></li><li><p>The first alert for the global traffic drop took too long to fire.</p></li><li><p>We didn’t update our status page quickly enough.</p></li><li><p>We had difficulty accessing our own systems because of the outage and the bypass procedure wasn’t well-trained on.</p></li><li><p>SREs had lost access to some systems because their credentials had been timed out for security reasons.</p></li><li><p>Our customers were unable to access the Cloudflare Dashboard or API because they pass through the Cloudflare edge.</p></li></ol>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"whats-happened-since-last-tuesday\">What’s happened since last Tuesday</h3>\n            <a href=\"#whats-happened-since-last-tuesday\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Firstly, we stopped all release work on the WAF completely and are doing the following:</p><ol><li><p>Re-introduce the excessive CPU usage protection that got removed. (Done)</p></li><li><p>Manually inspecting all 3,868 rules in the WAF Managed Rules to find and correct any other instances of possible excessive backtracking. (Inspection complete)</p></li><li><p>Introduce performance profiling for all rules to the test suite. (ETA:  July 19)</p></li><li><p>Switching to either the <a href=\"https://github.com/google/re2\">re2</a> or <a href=\"https://docs.rs/regex/1.1.9/regex/\">Rust regex engine</a> which both have run-time guarantees. (ETA: July 31)</p></li><li><p>Changing the SOP to do staged rollouts of rules in the same manner used for other software at Cloudflare while retaining the ability to do emergency global deployment for active attacks.</p></li><li><p>Putting in place an emergency ability to take the Cloudflare Dashboard and API off Cloudflare&#39;s edge.</p></li><li><p>Automating update of the <a href=\"https://www.cloudflarestatus.com/\">Cloudflare Status</a> page.</p></li></ol><p>In the longer term we are moving away from the Lua WAF that I wrote years ago. We are porting the WAF to use the <a href=\"/how-we-made-firewall-rules/\">new firewall engine</a>. This will make the WAF both faster and add yet another layer of protection.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"conclusion\">Conclusion</h3>\n            <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>This was an upsetting outage for our customers and for the team. We responded quickly to correct the situation and are correcting the process deficiencies that allowed the outage to occur and going deeper to protect against any further possible problems with the way we use regular expressions by replacing the underlying technology used.</p><p>We are ashamed of the outage, and sorry for the impact on our customers. We believe the changes we’ve made mean such an outage will never recur.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"appendix-about-regular-expression-backtracking\">Appendix: About Regular Expression Backtracking</h3>\n            <a href=\"#appendix-about-regular-expression-backtracking\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>To fully understand how <code>(?:(?:\\&quot;|&#39;|\\]|\\}|\\\\|\\d|(?:nan|infinity|true|false|null|undefined|symbol|math)|\\`|\\-|\\+)+[)]*;?((?:\\s|-|~|!|{}|\\|\\||\\+)*.*(?:.*=.*)))</code>  caused CPU exhaustion you need to understand a little about how a standard regular expression engine works. The critical part is <code>.*(?:.*=.*)</code>. The <code>(?:</code> and matching <code>)</code> are a non-capturing group (i.e. the expression inside the parentheses is grouped together as a single expression).</p><p>For the purposes of the discussion of why this pattern causes CPU exhaustion we can safely ignore it and treat the pattern as <a href=\"https://www.debuggex.com/r/DpHY-UOB9tRCJ62L\"><code>.*.*=.*</code></a>. When reduced to this, the pattern obviously looks unnecessarily complex; but what&#39;s important is any &quot;real-world&quot; expression (like the complex ones in our WAF rules) that ask the engine to &quot;match anything followed by anything&quot; can lead to catastrophic backtracking. Here’s why.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4l74jgKpXyveETH9FQ1xWN/c547b3fd1961edd53ad5cf283dfad0e1/regex.png\" alt=\"\" class=\"kg-image\" width=\"644\" height=\"198\" loading=\"lazy\"/>\n            \n            </figure><p>In a regular expression, <code>.</code> means match a single character, <code>.*</code> means match zero or more characters greedily (i.e. match as much as possible) so <code>.*.*=.*</code> means match zero or more characters, then match zero or more characters, then find a literal <code>=</code> sign, then match zero or more characters.</p><p>Consider the test string <code>x=x</code>. This will match the expression <code>.*.*=.*</code>. The <code>.*.*</code> before the equal can match the first <code>x</code> (one of the <code>.*</code> matches the <code>x</code>, the other matches zero characters). The <code>.*</code> after the <code>=</code> matches the final <code>x</code>.</p><p>It takes 23 steps for this match to happen. The first <code>.*</code> in <code>.*.*=.*</code> acts greedily and matches the entire <code>x=x</code> string. The engine moves on to consider the next <code>.*</code>. There are no more characters left to match so the second <code>.*</code> matches zero characters (that’s allowed). Then the engine moves on to the <code>=</code>. As there are no characters left to match (the first <code>.*</code> having consumed all of <code>x=x</code>) the match fails.</p><p>At this point the regular expression engine backtracks. It returns to the first <code>.*</code> and matches it against <code>x=</code> (instead of <code>x=x</code>) and then moves onto the second <code>.*</code>. That <code>.*</code> matches the second <code>x</code> and now there are no more characters left to match. So when the engine tries to match the <code>=</code> in <code>.*.*=.*</code> the match fails. The engine backtracks again.</p><p>This time it backtracks so that the first <code>.*</code> is still matching <code>x=</code> but the second <code>.*</code> no longer matches <code>x</code>; it matches zero characters. The engine then moves on to try to find the literal <code>=</code> in the <code>.*.*=.*</code> pattern, but it fails (because it was already matched against the first <code>.*</code>). The engine backtracks again.</p><p>This time the first <code>.*</code> matches just the first <code>x</code>. But the second <code>.*</code> acts greedily and matches <code>=x</code>. You can see what’s coming. When it tries to match the literal <code>=</code> it fails and backtracks again.</p><p>The first <code>.*</code> still matches just the first <code>x</code>. Now the second <code>.*</code> matches just <code>=</code>. But, you guessed it, the engine can’t match the literal <code>=</code> because the second <code>.*</code> matched it. So the engine backtracks again. Remember, this is all to match a three character string.</p><p>Finally, with the first <code>.*</code> matching just the first <code>x</code>, the second <code>.*</code> matching zero characters the engine is able to match the literal <code>=</code> in the expression with the <code>=</code> in the string. It moves on and the final <code>.*</code> matches the final <code>x</code>.</p><p>23 steps to match <code>x=x</code>. Here’s a short video of that using the Perl <a href=\"https://metacpan.org/pod/Regexp::Debugger\">Regexp::Debugger</a> showing the steps and backtracking as they occur.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1klUH23Ln0g7wzuzeF8zXh/f51ca63d7c440fcb68ece621cd1c3b95/23-steps-1.gif\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"296\" loading=\"lazy\"/>\n            \n            </figure><p>That’s a lot of work but what happens if the string is changed from <code>x=x</code> to <code>x=xx</code>? This time is takes 33 steps to match. And if the input is <code>x=xxx</code> it takes 45. That’s not linear. Here’s a chart showing matching from <code>x=x</code> to <code>x=xxxxxxxxxxxxxxxxxxxx</code> (20 <code>x</code>’s after the <code>=</code>). With 20 <code>x</code>’s after the <code>=</code> the engine takes 555 steps to match! (Worse, if the <code>x=</code> was missing, so the string was just 20 <code>x</code>’s, the engine would take 4,067 steps to find the pattern doesn’t match).</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/492t92b72E9LlQk3sSwRi1/1ddfcdc4e3d3b7fbae0bae2257199e4f/matching-x-x.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"371\" loading=\"lazy\"/>\n            \n            </figure><p>This video shows all the backtracking necessary to match <code>x=xxxxxxxxxxxxxxxxxxxx</code>:</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1jHgZTutfW1tcTQkXpQlr2/1d10ecf75e3d30e37fb06c08f4fcaafb/555-steps.gif\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"310\" loading=\"lazy\"/>\n            \n            </figure><p>That’s bad because as the input size goes up the match time goes up super-linearly. But things could have been even worse with a slightly different regular expression. Suppose it had been <code>.*.*=.*;</code> (i.e. there’s a literal semicolon at the end of the pattern). This could easily have been written to try to match an expression like <code>foo=bar;</code>.</p><p>This time the backtracking would have been catastrophic. To match <code>x=x</code> takes 90 steps instead of 23. And the number of steps grows very quickly. Matching <code>x=</code> followed by 20 <code>x</code>’s takes 5,353 steps. Here’s the corresponding chart. Look carefully at the Y-axis values compared the previous chart.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3sBXHPU222SATdzCf03M1L/942994d5935e94453a5c87c16a5719dd/failing-x-x.png\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"371\" loading=\"lazy\"/>\n            \n            </figure><p>To complete the picture here are all 5,353 steps of failing to match <code>x=xxxxxxxxxxxxxxxxxxxx</code> against <code>.*.*=.*;</code></p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7rKCfjvp7ntf7NhXd0JcHq/f6568463a8e119557e4d779355c9a199/5353.gif\" alt=\"\" class=\"kg-image\" width=\"600\" height=\"270\" loading=\"lazy\"/>\n            \n            </figure><p>Using lazy rather than greedy matches helps control the amount of backtracking that occurs in this case. If the original expression is changed to <code>.*?.*?=.*?</code> then matching <code>x=x</code> takes 11 steps (instead of 23) and so does matching <code>x=xxxxxxxxxxxxxxxxxxxx</code>. That’s because the <code>?</code> after the <code>.*</code> instructs the engine to match the smallest number of characters first before moving on.</p><p>But laziness isn’t the total solution to this backtracking behaviour. Changing the catastrophic example <code>.*.*=.*;</code> to <code>.*?.*?=.*?;</code> doesn’t change its run time at all. <code>x=x</code> still takes 555 steps and <code>x=</code> followed by 20 <code>x</code>’s still takes 5,353 steps.</p><p>The only real solution, short of fully re-writing the pattern to be more specific, is to move away from a regular expression engine with this backtracking mechanism. Which we are doing within the next few weeks.</p><p>The solution to this problem has been known since 1968 when Ken Thompson wrote a paper titled “<a href=\"https://dl.acm.org/citation.cfm?doid=363347.363387\">Programming Techniques: Regular expression search algorithm</a>”. The paper describes a mechanism for converting a regular expression into an NFA (non-deterministic finite automata) and then following the state transitions in the NFA using an algorithm that executes in time linear in the size of the string being matched against.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4n156xYlxhI3MDEeDRthnP/5d5f998f0aa1dc890888c1223a1e239a/thompson-1968.png\" alt=\"\" class=\"kg-image\" width=\"1904\" height=\"1434\" loading=\"lazy\"/>\n            \n            </figure><p>Thompson’s paper doesn’t actually talk about NFA, but the linear time algorithm is clearly explained and an ALGOL-60 program that generates assembly language code for the IBM 7094 is presented. The implementation may be arcane but the idea it presents is not.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/pdDjKS5C8WBlPqkoo9MHa/ec5984b58b493875c75123b4752ed6a2/nfa.png\" alt=\"\" class=\"kg-image\" width=\"1826\" height=\"574\" loading=\"lazy\"/>\n            \n            </figure><p>Here’s what the <code>.*.*=.*</code> regular expression would look like when diagrammed in a similar manner to the pictures in Thompson’s paper.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2uKtWhF7BRnnOvYbe4hqSe/3183b44bcb32385be4593666baa68bd5/figure-0_1.5x.png\" alt=\"\" class=\"kg-image\" width=\"2049\" height=\"1433\" loading=\"lazy\"/>\n            \n            </figure><p>Figure 0 has five states starting at 0. There are three loops which begin with the states 1, 2 and 3. These three loops correspond to the three <code>.*</code> in the regular expression. The three lozenges with dots in them match a single character. The lozenge with an <code>=</code> sign in it matches the literal <code>=</code> sign. State 4 is the ending state, if reached then the regular expression has matched.</p><p>To see how such a state diagram can be used to match the regular expression <code>.*.*=.*</code> we’ll examine matching the string <code>x=x</code>. The program starts in state 0 as shown in Figure 1.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1gdODacQaWntch4rJ49FQ6/9553dd137e88877d35ca7e801f888980/figure-1_1.5x.png\" alt=\"\" class=\"kg-image\" width=\"2049\" height=\"1433\" loading=\"lazy\"/>\n            \n            </figure><p>The key to making this algorithm work is that the state machine is in multiple states at the same time. The NFA will take every transition it can, simultaneously.</p><p>Even before it reads any input, it immediately transitions to <i>both</i> states 1 and 2 as shown in Figure 2.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7bbx0IwgTR4AnIusx8mQh7/15a0654b0c54569aae46af4ff1f32c46/figure-2_1.5x.png\" alt=\"\" class=\"kg-image\" width=\"2049\" height=\"1433\" loading=\"lazy\"/>\n            \n            </figure><p>Looking at Figure 2 we can see what happened when it considers  first <code>x</code> in <code>x=x</code>. The <code>x</code> can match the top dot by transitioning from state 1 and back to state 1. Or the <code>x</code> can match the dot below it by transitioning from state 2 and back to state 2.</p><p>So after matching the first <code>x</code> in <code>x=x</code> the states are still 1 and 2. It’s not possible to reach state 3 or 4 because a literal <code>=</code> sign is needed.</p><p>Next the algorithm considers the <code>=</code> in <code>x=x</code>. Much like the <code>x</code> before it, it can be matched by either of the top two loops transitioning from state 1 to state 1 or state 2 to state 2, but additionally the literal <code>=</code> can be matched, and the algorithm can transition state 2 to state 3 (and immediately state 4). That’s illustrated in Figure 3.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5k61w05lI8prOu8bz6lNsa/44ef75e636aac8a41a03d020273940eb/figure-3_1.5x.png\" alt=\"\" class=\"kg-image\" width=\"2049\" height=\"1433\" loading=\"lazy\"/>\n            \n            </figure><p>Next the algorithm reaches the final <code>x</code> in <code>x=x</code>. From states 1 and 2 the same transitions are possible back to states 1 and 2. From state 3 the <code>x</code> can match the dot on the right and transition back to state 3.</p><p>At that point every character of <code>x=x</code> has been considered and because state 4 has been reached the regular expression matches that string. Each character was processed once so the algorithm was linear in the length of the input string. And no backtracking was needed.</p><p>It might also be obvious that once state 4 was reached (after <code>x=</code> was matched) the regular expression had matched and the algorithm could terminate without considering the final <code>x</code> at all.</p><p>This algorithm is linear in the size of its input.</p>",
		"id": "5wHDQyXAGYs2LjSXtjnw6z",
		"localeList": {
			"name": "Details of the Cloudflare outage on July 2, 2019 Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "Translated for Locale",
			"deDE": "Translated for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-07-12T16:45:21.000+01:00",
		"slug": "details-of-the-cloudflare-outage-on-july-2-2019",
		"tags": [
			{
				"id": "3cCNoJJ5uusKFBLYKFX1jB",
				"name": "Post Mortem",
				"slug": "post-mortem"
			},
			{
				"id": "4yliZlpBPZpOwBDZzo1tTh",
				"name": "Outage",
				"slug": "outage"
			},
			{
				"id": "2UVIYusJwlvsmPYl2AvSuR",
				"name": "Deep Dive",
				"slug": "deep-dive"
			}
		],
		"title": "Details of the Cloudflare outage on July 2, 2019",
		"updated_at": "2024-10-10T00:43:51.090Z",
		"url": "https://blog.cloudflare.com/details-of-the-cloudflare-outage-on-july-2-2019"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}