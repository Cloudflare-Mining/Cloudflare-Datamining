{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "13",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Kenton Varda",
				"slug": "kenton-varda",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1FFs4T2j1RyvxasKOkkdtP/e7bd05ce89c560a545853000a25da9bc/kenton-varda.jpg",
				"location": null,
				"website": null,
				"twitter": "@kentonvarda",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "When multiple clients access the same storage concurrently, race conditions abound. Durable Objects can make it easier. We recently rolled out improvements to Durable Objects that automatically correct many common race conditions while actually making your code faster. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1clasYXq4Bt8pwsICSXWl5/e8e98a1699ed5498c2c1b7f8b791e777/durable-objects-easy-fast-correct-choose-three.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/33fbEXtJJwEpFzKnwx3qIF/74787e9624ed480248eac2b68fac7e12/blog-570-DO-collisions-1.png\" alt=\"\" class=\"kg-image\" width=\"1500\" height=\"788\" loading=\"lazy\"/>\n            \n            </figure><p>Storage in distributed systems is surprisingly hard to get right. Distributed databases and consensus are well-known to be extremely hard to build. But, application code isn&#39;t necessarily easy either. There are many ways in which apps that use databases can have subtle timing bugs that could result in inconsistent results, or even data loss. Worse, these problems can be very hard to test for, as they&#39;ll often manifest only under heavy load, or only after a sudden machine failure.</p><p>Up until recently, Durable Objects were no exception. A Durable Object is a special kind of Cloudflare Worker that has access to persistent storage and processes requests in one of Cloudflare’s points of presence. Each Object has its own private storage, accessible through a classical key/value storage API. Like any classical database API, this storage API had to be used carefully to avoid possible race conditions and data loss, especially when performance mattered. And like any classical database API, many apps got it wrong.</p><p>However, rather than fix the apps, we decided to fix the model. Last month, we rolled out deep changes to the Durable Objects runtime such that many applications which previously contained subtle race conditions are now correct by default, and many that were previously slow are now fast. Developers can now write their code in an intuitive way, and have it work. No changes at all are needed to your code in order to take advantage of these new features.</p><p>So, let me tell you about what changed…</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"background-durable-objects-are-single-threaded\">Background: Durable Objects are Single-Threaded</h2>\n      <a href=\"#background-durable-objects-are-single-threaded\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To understand what changed, it&#39;s necessary to first understand Durable Objects. For a full introduction, see the <a href=\"/introducing-workers-durable-objects/\">Durable Objects announcement blog post</a>.</p><p>The most important point is: Each Durable Object runs in exactly one location, in one single thread, at a time. Each object has its own private on-disk storage. This is a very different situation from a typical database, where many clients may be accessing the same data. In Durable Objects, any particular piece of data belongs to exactly one thread at a time.</p><p>Because a single Durable Object is single-threaded, it&#39;s possible, and even encouraged, to keep state and perform synchronization in memory. This is, indeed, the killer feature of Durable Objects. With classical databases, in-memory state is extremely difficult to keep synchronized between all database clients. But with Durable Objects, since each piece of data belongs to a specific thread, this synchronization is easy.</p><p>However, interacting with the disk is still an I/O (input/output) operation, which means that each operation returns a <code>Promise</code> which you must <code>await</code>. As we&#39;ll see, this re-introduces some of the synchronization difficulties that we were trying to avoid. However, it turns out, we can solve these difficulties within the system itself, without bothering application developers.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"an-example\">An Example</h2>\n      <a href=\"#an-example\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Consider this code:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Used to be slow and racy -- but not anymore!\nasync function getUniqueNumber() {\n  let val = await this.storage.get(&quot;counter&quot;);\n  await this.storage.put(&quot;counter&quot;, val + 1);\n  return val;\n}</pre></code>\n            <p>At first glance, this seems like reasonable code that returns a unique number each time it is called (incrementing each time).</p><p>Unfortunately, before now, this code had two problems:</p><ol><li><p>It had a subtle race condition (even though Durable Objects are single-threaded!).</p></li><li><p>It was kind of slow.</p></li></ol>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-race-condition\">The Race Condition</h3>\n      <a href=\"#the-race-condition\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>A race condition occurs when two operations running concurrently might interfere with each other in a way that makes them behave incorrectly. Race conditions are commonly associated with code that uses multiple threads.</p><p>JavaScript, however, famously does not use threads. Instead, it uses event-driven programming, with callbacks. It&#39;s not possible for two pieces of JavaScript code to be running &quot;at the same time&quot; in the same isolate (and Durable Objects promises that no other isolate could possibly be accessing the same storage). Does that mean that race conditions aren&#39;t a problem in JavaScript, the way they are in multi-threaded apps?</p><p>Unfortunately, it does not. The problem is, the code above is an <code>async</code> function, containing two <code>await</code> statements. Each time <code>await</code> is used, execution pauses, waiting for the specified <code>Promise</code> to complete.</p><p>In the meantime, though, other code can run! For example, the Durable Object might receive two requests at the same time. If each of them calls <code>getUniqueNumber()</code>, then the two calls might be interleaved. Each time one call performs an <code>await</code>, execution may switch to the other call. So, the two calls might end up looking like this:</p><p></p><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-jf6t{background-color:#FFF;color:#36393A;text-align:left;vertical-align:middle}\n.tg .tg-d46s{background-color:#F5F2F0;color:#36393A;text-align:left;vertical-align:top}\n.tg .tg-jwid{background-color:#F5F2F0;color:#07A;text-align:left;vertical-align:top}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;margin: auto 0px;}}</style>\n<div class=\"tg-wrap\"><table class=\"tg\"><thead>\n  <tr>\n    <th class=\"tg-jf6t\">Request 1 timeline</th>\n    <th class=\"tg-jf6t\">Request 2 timeline</th>\n  </tr></thead>\n<tbody>\n  <tr>\n    <td class=\"tg-jwid\"><span style=\"color:#07A\">async</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">function</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#DD4A68\">getUniqueNumber</span><span style=\"color:#999\">()</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">{</span><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span><span style=\"color:#07A\">let</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">=</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#07A\">get</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">);</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n    <td class=\"tg-jwid\"><span style=\"color:#07A\">async</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">function</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#DD4A68\">getUniqueNumber</span><span style=\"color:#999\">()</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">{</span><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span><span style=\"color:#07A\">let</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">=</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#07A\">get</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">);</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;</span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#DD4A68\">put</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">,</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">+</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#905\">1</span><span style=\"color:#999\">);</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\"> </span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\"> </span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;</span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#DD4A68\">put</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">,</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">+</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#905\">1</span><span style=\"color:#999\">);</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;</span><span style=\"color:#07A\">return</span><span style=\"color:black;background-color:initial\"> val</span><span style=\"color:#999\">;</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">}</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;</span><span style=\"color:#07A\">return</span><span style=\"color:black;background-color:initial\"> val</span><span style=\"color:#999\">;</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">}</span></td>\n  </tr>\n</tbody></table></div><p>There&#39;s a big problem here: Both of these two calls will call <code>get(&quot;counter&quot;)</code> before <i>either</i> of them calls <code>put(&quot;counter&quot;, val + 1)</code>. That means, both of them will return the same value!</p><p>This problem is especially bad because it only happens when multiple requests are being handled at the same time -- and even then, only sometimes. It is very hard to test for this kind of problem, and everything might seem just fine when the application is deployed, as long as it isn&#39;t getting too much traffic. But one day, when a lot of visitors try to use the same object at the same time, all of a sudden <code>getUniqueNumber()</code> starts returning duplicates!</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"the-slowness\">The Slowness</h3>\n      <a href=\"#the-slowness\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To add insult to injury, <code>getUniqueNumber()</code> was (until recently) pretty slow. The problem is, it has to do two round trips to storage -- a <code>get()</code> and a <code>put()</code>. The <code>get()</code> might typically take a couple milliseconds. The <code>put()</code>, however, will take much longer, probably tens of milliseconds.</p><p>Why is <code>put()</code> so slow? Because we don&#39;t want to lose data. The worst thing an application can do is tell the user that their action was successful when it wasn&#39;t. If, for some reason, a write cannot be completed, then it&#39;s imperative that the application presents an error to the user, so that the user knows that something is wrong and they&#39;ll have to try again or look for a fix.</p><p>In order to make sure an application does not prematurely report success to the user, <code>await put()</code> has to make sure it doesn&#39;t return until the data is actually safe on disk. Disks are slow, so this might take a while.</p><p>But that&#39;s not all. Disks can fail. In order for the data to be really safe, we have to write the same data on multiple disks, in multiple machines. That means we have to wait for some network traffic.</p><p>But that&#39;s still not all. What if a meteor were to come out of the sky and land on a Cloudflare data center, completely destroying it? Or, more likely, what if the power or network connection failed? We don&#39;t want a user&#39;s data to be lost in this case, or even temporarily become unavailable. Therefore, Durable Object data is replicated to multiple Cloudflare locations. This requires communicating across long distances before any write can be confirmed. There is little we can do to make this faster, the speed of light being what it is.</p><p>A call to <code>getUniqueNumber()</code> will therefore always take tens of milliseconds. If an application calls it multiple times, <code>await</code>ing each call before beginning the next, it can easily become very slow very quickly. Or, at least, that was the case before our recent changes.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"the-wrong-fixes\">The Wrong Fixes</h2>\n      <a href=\"#the-wrong-fixes\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>There are several ways that an application could fix these problems, but all of them have their own issues.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"transactions\">Transactions?</h3>\n      <a href=\"#transactions\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Many databases offer &quot;transactions&quot;. A transaction allows an application to make sure some operation completes &quot;atomically&quot;, with no interference from concurrent operations.</p><p>The Durable Objects storage API has always supported transactions. We could use them to fix our <code>getUniqueNumber()</code> implementation like so:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// No more race condition... but slow and complicated.\nasync function getUniqueNumber() {\n  let val;\n  await this.storage.transaction(async (txn) =&gt; {\n    val = await txn.get(&quot;counter&quot;);\n    await txn.put(&quot;counter&quot;, val + 1);\n  });\n  return val;\n}</pre></code>\n            <p>This fixes our race condition. Now, if <code>getUniqueNumber()</code> is called multiple times concurrently such that the storage operations interleave, the system will detect the problem. One of the concurrent calls will be chosen to be the &quot;winner&quot;, and will complete normally. The other calls will be canceled and retried, so that they can see the value written by the first call.</p><p>This fixes our problems! But, at some cost:</p><ul><li><p><code>getUniqueNumber()</code> is now even slower than it was before. The difference typically won&#39;t be huge, but setting up a transaction does require some additional coordination in the database. Of course, if the transaction needs to be retried, then it may end up being much slower. And retries will tend to happen more when load gets high… the worst possible time.</p></li><li><p>Speaking of retries, many developers might not realize that the transaction callback can be called multiple times. It&#39;s difficult to test for this, since retries will only happen when concurrent operations cause conflicts. The problem is especially acute when the application is trying to synchronize not just on-disk state, but also in-memory state -- if the transaction callback modifies in-memory state, it must be careful to ensure that its changes are idempotent. The need for idempotency may not be top of mind for most developers, and tests won&#39;t catch the problem, making it very easy to end up deploying buggy code.</p></li></ul><p>So we solved our problem, but we did it with a foot-gun. If we keep using the foot-gun, we&#39;re probably going to shoot our own feet eventually.</p><p>Is there another way?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"in-memory-caching\">In-memory caching?</h3>\n      <a href=\"#in-memory-caching\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Durable Objects&#39; superpower is their in-memory state. Each object has only one active instance at any particular time. All requests sent to that object are handled by that same instance. That means, you can store some state in memory.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Much faster! But (used to be) wrong.\nasync function getUniqueNumber() {\n  if (this.val === undefined) {\n    this.val = await this.storage.get(&quot;counter&quot;);\n  }\n\n  let result = this.val;\n  ++this.val;\n  this.storage.put(&quot;counter&quot;, this.val);\n  return result;\n}</pre></code>\n            <p>This code is MUCH faster than the previous implementation, because it stores the value in memory. In fact, after the function runs once, further calls won&#39;t wait for any I/O at all -- they will return immediately. This is because by caching the value in memory, we avoid waiting for a <code>get()</code> (except for the first time), and we don&#39;t wait for the <code>put()</code> either, trusting that it will complete asynchronously later on.</p><p>Returning immediately also means that there&#39;s no opportunity for concurrency, so the calls that return immediately will always return unique numbers! This means that not only is this implementation faster than our original implementation, it is also <i>more correct</i>. This is only possible because the Durable Objects platform guarantees that there will only be one instance, and therefore only one copy of <code>this.val</code>.</p><p>Unfortunately, there are two problems with this code:</p><ul><li><p>We still have a race condition on initialization. If the <i>first</i> two calls to <code>getUniqueNumber()</code> happen to occur at about the same time, then initialization will be performed multiple times. The second call will likely clobber what the first call did, and the two calls will end up returning the same number. We could solve this problem by making initialization more complicated -- the first call could create an initialization promise, and other concurrent calls could wait on it, so that initialization really only happens once. But this creates even deeper complexity: What if initialization fails for some reason? The object could be placed in a permanently broken state. It&#39;s possible to get this right, but it&#39;s surprisingly tricky.</p></li><li><p>Because we don&#39;t wait for the <code>put()</code> to report success, it&#39;s possible that it could be silently lost. For example, if the machine hosting the Durable Object suffered a sudden power failure, then the Durable Object would be transferred to some other machine. When it starts up there, calls to <code>getUniqueNumber()</code> might return numbers that had already been returned under the old instance before it failed, because the <code>put()</code>s hadn&#39;t actually completed before the failure occurred. But if we <code>await</code> the <code>put()</code>, then our function becomes slow again, and creates more opportunities for race conditions (e.g. in the calling code).</p></li></ul>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"our-answer-make-it-automatic\">Our answer: Make it automatic</h2>\n      <a href=\"#our-answer-make-it-automatic\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>When looking at this, we had two options:</p><ol><li><p>Try to carefully document these problems and educate developers about them, so that they could write code that does the right thing.</p></li><li><p>Change the system so that naturally-written code just does the right thing by default -- and runs quickly.</p></li></ol><p>We chose option 2. We accomplished this in three parts.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"part-1-input-gates\">Part 1: Input Gates</h3>\n      <a href=\"#part-1-input-gates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let&#39;s go back to our original example. Can we make this example &quot;just work&quot;, even in the face of concurrent requests?</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Can this &quot;just work&quot; please?\nasync function getUniqueNumber() {\n  let val = await this.storage.get(&quot;counter&quot;);\n  await this.storage.put(&quot;counter&quot;, val + 1);\n  return val;\n}</pre></code>\n            <p>It turns out we can! We create a new rule:</p><blockquote><p><b>Input gates:</b> While a storage operation is executing, no events shall be delivered to the object except for storage completion events. Any other events will be deferred until such a time as the object is no longer executing JavaScript code <i>and</i> is no longer waiting for any storage operations. We say that these events are waiting for the &quot;input gate&quot; to open.</p></blockquote><p>If we do this, then our storage operations above are no longer an opportunity for concurrency. Our concurrent requests now look like this:</p><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-tsrn{background-color:#F5F2F0;color:#708090;text-align:left;vertical-align:top}\n.tg .tg-jf6t{background-color:#FFF;color:#36393A;text-align:left;vertical-align:middle}\n.tg .tg-d46s{background-color:#F5F2F0;color:#36393A;text-align:left;vertical-align:top}\n.tg .tg-jwid{background-color:#F5F2F0;color:#07A;text-align:left;vertical-align:top}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;margin: auto 0px;}}</style>\n<div class=\"tg-wrap\"><table class=\"tg\"><thead>\n  <tr>\n    <th class=\"tg-jf6t\">Request 1 timeline</th>\n    <th class=\"tg-jf6t\">Request 2 timeline</th>\n  </tr></thead>\n<tbody>\n  <tr>\n    <td class=\"tg-jwid\"><span style=\"color:#07A\">async</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">function</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#DD4A68\">getUniqueNumber</span><span style=\"color:#999\">()</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">{</span><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span><span style=\"color:#07A\">let</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">=</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#07A\">get</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">);</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n    <td class=\"tg-tsrn\"><span style=\"color:slategray\">// Request 2 delivery is blocked because</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:slategray\">// request 1 is waiting for storage.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;</span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#DD4A68\">put</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">,</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">+</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#905\">1</span><span style=\"color:#999\">);</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\"> </span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n    <td class=\"tg-tsrn\"><span style=\"color:slategray\">// Request 2 delivery is blocked because</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:slategray\">// request 1 is waiting for storage.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;</span><span style=\"color:#07A\">return</span><span style=\"color:black;background-color:initial\"> val</span><span style=\"color:#999\">;</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">}</span></td>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-d46s\"><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td>\n    <td class=\"tg-jwid\"><span style=\"color:#07A\">async</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">function</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#DD4A68\">getUniqueNumber</span><span style=\"color:#999\">()</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">{</span><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span><span style=\"color:#07A\">let</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">=</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#07A\">get</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">);</span><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span><span style=\"color:#07A\">await</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#07A\">this</span><span style=\"color:#999\">.</span><span style=\"color:black;background-color:initial\">storage</span><span style=\"color:#999\">.</span><span style=\"color:#DD4A68\">put</span><span style=\"color:#999\">(</span><span style=\"color:#690\">\"counter\"</span><span style=\"color:#999\">,</span><span style=\"color:black;background-color:initial\"> val </span><span style=\"color:#A67F59;background-color:rgba(255, 255, 255, 0.5)\">+</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#905\">1</span><span style=\"color:#999\">);</span><span style=\"color:black;background-color:initial\">&nbsp;&nbsp;&nbsp;</span><span style=\"color:#07A\">return</span><span style=\"color:black;background-color:initial\"> val</span><span style=\"color:#999\">;</span><span style=\"color:black;background-color:initial\"> </span><span style=\"color:#999\">}</span></td>\n  </tr>\n</tbody></table></div><p>The two calls return unique numbers, as expected. Hooray! (Unfortunately, we did it by delaying the second request, creating latency and reducing throughput -- but we&#39;ll address that in part 3, below.)</p><p>Note that our rule does not preclude making multiple concurrent requests to storage at the same time. You can still say:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">let promise1 = this.storage.get(&quot;foo&quot;);\nlet promise2 = this.storage.put(&quot;bar&quot;, 123);\nawait promise1;\nfrob();\nawait promise2;</pre></code>\n            <p>Here, the <code>get()</code> and <code>put()</code> execute concurrently. Moreover, the call to <code>frob()</code> may execute before the <code>put()</code> has completed (but strictly after the <code>get()</code> completes, since we <code>await</code>ed that promise). However, no <i>other</i> event -- such as receiving a new request -- can unexpectedly happen in the meantime.</p><p>On the other hand, the rule protects you not just against concurrent incoming requests, but also concurrent responses to outgoing requests. For example, say you have:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">async function task1() {\n  await fetch(&quot;https://example.com/api1&quot;);\n  return await this.getUniqueNumber();\n}\nasync function task2() {\n  await fetch(&quot;https://example.com/api2&quot;);\n  return await this.getUniqueNumber();\n}\nlet promise1 = task1();\nlet promise2 = task2();\nlet val1 = await promise1;\nlet val2 = await promise2;</pre></code>\n            <p>This code launches two <code>fetch()</code> calls concurrently. After each fetch completes, getUniqueNumber() is invoked. Could the two calls interfere with each other?</p><p>No, they will not. The completion of a <code>fetch()</code> is itself a kind of event. Our rule states that such events cannot be delivered while storage events are in progress. When the first of the two fetches returns, the app calls <code>getUniqueNumber()</code>, which starts performing some storage operations. If the second <code>fetch()</code> also returns while these storage operations are still outstanding, that return will be deferred until after the storage operations are done. Once again, our code ends up correct!</p><p>At this point, the async programming experts in the audience are probably starting to feel like something is fishy here. Indeed, there is a catch. What if we do:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Still a problem even with input gates.\nlet promise1 = getUniqueNumber();\nlet promise2 = getUniqueNumber();\nlet val1 = await promise1;\nlet val2 = await promise2;</pre></code>\n            <p>In this case, there is, in fact, a problem. Two calls to <code>getUniqueNumber()</code> are initiated <i>by the same event</i>. The application does not <code>await</code> the first call before starting the second, so the two calls end up running concurrently. Our special rule doesn&#39;t protect us here, because there is no incoming event that can be deferred between when the two calls are made. From the system&#39;s point of view, there&#39;s no way to distinguish this code from code which legitimately decided to perform two storage operations in parallel.</p><p>As such, in this case, the two calls to <code>getUniqueNumber()</code> will interfere with each other. However, this problem is far less likely to come about by accident, and is far easier to catch in testing. This bug is <i>deterministic</i>, not caused by the unpredictable timing of network events. We consider this an acceptable caveat in order to solve the larger problem posed by concurrent requests.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"part-2-output-gates\">Part 2: Output Gates</h3>\n      <a href=\"#part-2-output-gates\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Let&#39;s go back to our in-memory caching example. Can we make it work?</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Can we make this &quot;just work&quot;?\nasync function getUniqueNumber() {\n  if (this.val === undefined) {\n    this.val = await this.storage.get(&quot;counter&quot;);\n  }\n\n  let result = this.val;\n  ++this.val;\n  this.storage.put(&quot;counter&quot;, this.val);\n  return result;\n}</pre></code>\n            <p>With input gates (part 1), we&#39;ve solved one of the two problems this code had: the race condition of initialization. We no longer need to worry that two requests will call this at the same time, leading <code>this.val</code> to be initialized twice.</p><p>However, the problem with not <code>await</code>ing the <code>put()</code> is still there. If we don&#39;t <code>await</code> it, then we could lose data. If we do <code>await</code> it, then the call is slow.</p><p>We make another new rule:</p><blockquote><p><b>Output gates:</b> When a storage write operation is in progress, any new outgoing network messages will be held back until the write has completed. We say that these messages are waiting for the &quot;output gate&quot; to open. If the write ultimately fails, the outgoing network messages will be discarded and replaced with errors, while the Durable Object will be shut down and restarted from scratch.</p></blockquote><p>With this rule, we no longer have to <code>await</code> the result of <code>put()</code>. Our code can happily continue executing and just <i>assume</i> the put() will succeed. If the <code>put()</code> doesn&#39;t succeed, then anything the application does here will never be observable to the rest of the world anyway. For example, if the app prematurely sends a response to the user saying that the operation succeeded, this response will not actually be delivered until after the <code>put()</code> completes successfully. So, by the time the user <i>receives</i> the message, it is no longer &quot;premature&quot;! In the very rare event that the write operation fails, the user will not receive the premature confirmation at all.</p><p>Note that output gates apply not only to responses sent back to a client, but also to new outgoing requests made with <code>fetch()</code> -- those requests will be delayed from being sent until all prior writes are confirmed. So, once again, it is impossible for anything else in the world to observe a premature confirmation.</p><p>With this change, our <code>getUniqueNumber()</code> implementation with in-memory caching is now fully correct, while retaining most of its speed advantage over the non-caching implementation. Except for the very first call, the application will never be blocked waiting for <code>getUniqueNumber()</code> to finish. The final response from the app to the client will be delayed pending write confirmation, but that write can be performed in parallel with any writes the application performs after <code>getUniqueNumber()</code> completes.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"part-3-automatic-in-memory-caching\">Part 3: Automatic in-memory caching</h3>\n      <a href=\"#part-3-automatic-in-memory-caching\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our in-memory caching example now works great. But, it&#39;s still a little bit complicated and unnatural to write. Let&#39;s go back to our original, simple code one more time… can we make it fast by default?</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Can we make this not just work, but just work FAST?\nasync function getUniqueNumber() {\n  let val = await this.storage.get(&quot;counter&quot;);\n  await this.storage.put(&quot;counter&quot;, val + 1);\n  return val;\n}</pre></code>\n            <p>The answer to this part is a classic one: we can add automatic caching to the storage layer, just like most operating systems do for disk storage.</p><p>We have rolled out an in-memory caching layer for Durable Objects. This layer keeps up to several megabytes worth of data directly in memory in the process where the object runs.</p><p>When a <code>get()</code> requests a key that is in cache, the operation returns immediately, without even context-switching out of the thread and isolate where the object is hosted. If the key is not in cache, then a storage request will still be needed, but reads complete relatively quickly.</p><p>Better yet, <code>put()</code> requests now always complete &quot;instantaneously&quot;. A <code>put()</code> simply writes to cache. We rely on output gates (&quot;part 2&quot;, above) to prevent the premature confirmation of writes to any external party. Writes will be coalesced (even if you <code>await</code> them), so that the output gate waits only for O(1) network round trips of latency, not O(n).</p><p>Moreover, because <code>get()</code> and <code>put()</code> now complete instantly in most or all cases, the negative impact of input gates on throughput is largely mitigated, because the gate now spends relatively little time blocked.</p><p>With Durable Objects built-in caching, our simple code is now <i>just as fast</i> as our code that manually implemented in-memory caching. Combined with input and output gates, our code is now simple, fast, <i>and</i> correct, all at the same time.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"bonus-correctness\">Bonus Correctness</h4>\n      <a href=\"#bonus-correctness\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Our caching layer provides some bonus consistency guarantees, in addition to performance.</p><p>First, writes are automatically coalesced. That is, if you perform multiple <code>put()</code> or <code>delete()</code> operations without <code>await</code>ing them or anything else in between, then the operations are automatically grouped together and stored atomically. In the case of a sudden power failure, after coming back up, either all of the writes will have been stored, or none of them will. For example:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// Move a value from &quot;foo&quot; to &quot;bar&quot;.\nlet val = await this.storage.get(&quot;foo&quot;);\n\nthis.storage.delete(&quot;foo&quot;);\nthis.storage.put(&quot;bar&quot;, val);\n// There&#039;s no possibility of data loss, because the delete() and the\n// following put() are automatically coalesced into one atomic\n// operation. This is true as long as you do not `await` anything\n// in between.</pre></code>\n            <p>Second, the API is also able to provide stronger ordering guarantees for reads. Previously, overlapping storage operations did not have guaranteed ordering. For example, if you issued a <code>get()</code> and a <code>put()</code> on the same key at the same time (without <code>await</code>ing one before starting the other), then it was not deterministic whether the <code>get()</code> might return the value written by the <code>put()</code> -- regardless of the ordering of the statements in your code. The caching layer fixes this. Now, operations are performed in exactly the order in which they were initiated, regardless of when they complete.</p><p>These two features eliminate more subtle bugs that might otherwise be hard to catch in testing, so that you don&#39;t have to be a database expert to write code that works.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"optional-bypass\">Optional Bypass</h3>\n      <a href=\"#optional-bypass\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We expect gates and caching will be a win in the vast majority of use cases, but not always. In some use cases, concurrency won&#39;t lead to any problems, and so blocking it may be a loss. Sometimes, the application is OK with prematurely confirming writes in order to minimize latency. And sometimes, caching may just waste memory because the same keys are not frequently accessed.</p><p>For those cases, we offer explicit bypasses:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">this.storage.get(&quot;foo&quot;, {allowConcurrency: true, noCache: true});\nthis.storage.put(&quot;foo&quot;, &quot;bar&quot;, {allowUnconfirmed: true, noCache: true});</pre></code>\n            <p>Developers who have taken the time to think carefully about these issues can use these flags to tune performance to their specific needs. For those who don&#39;t want to think about it, the defaults should work well.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"conclusion\">Conclusion</h2>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Concurrency is hard. It doesn&#39;t matter if you&#39;re a novice or an expert: even experts regularly get it wrong. It&#39;s difficult to think about all the ways that concurrent operations might overlap to corrupt your application state.</p><p>The traditional answer has been to make applications stateless, and defer all concurrency control to the database layer using transactions. However, transactions are slow, which is a big reason why so many web applications today take hundreds of milliseconds or more to respond to basic actions.</p><p>Durable Objects are all about state. By keeping state in memory in addition to on disk, and directing requests for the same data to be coordinated through the same instance, we can make applications much faster. But until recently, this was extremely tricky to get right.</p><p>With input gates, output gates, and caching, code written in the most intuitive way now &quot;just works&quot;, and runs fast. This means you can focus on building your application, without wasting time optimizing I/O performance and debugging obscure race conditions.</p>",
		"id": "3Jqpb0snfffIYkIguxuzNT",
		"localeList": {
			"name": "Durable Objects: Easy, Fast, Correct — Choose three Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "When multiple clients access the same storage concurrently, race conditions abound. Durable Objects can make it easier. We recently rolled out improvements to Durable Objects that automatically correct many common race conditions while actually making your code faster.",
		"metadata": {
			"title": "Durable Objects: Easy, Fast, Correct — Choose three",
			"description": "When multiple clients access the same storage concurrently, race conditions abound. Durable Objects can make it easier. We recently rolled out improvements to Durable Objects that automatically correct many common race conditions while actually making your code faster.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/508fF0TfxJ4UdAETGGY02r/4cf823d77fc913905101a0ca9e7cbd80/durable-objects-easy-fast-correct-choose-three-NneZC2.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-08-03T14:24:44.000+01:00",
		"slug": "durable-objects-easy-fast-correct-choose-three",
		"tags": [
			{
				"id": "5v2UZdTRX1Rw9akmhexnxs",
				"name": "Durable Objects",
				"slug": "durable-objects"
			}
		],
		"title": "Durable Objects: Easy, Fast, Correct — Choose three",
		"updated_at": "2024-10-16T01:39:04.001Z",
		"url": "https://blog.cloudflare.com/durable-objects-easy-fast-correct-choose-three"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}