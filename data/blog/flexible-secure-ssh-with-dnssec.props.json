{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Etienne Labaume",
				"slug": "etienne-labaume",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4vhRJH6DMgldaxQbpJhnsT/26db246e44176f24a5f2c62638b8d65a/etienne-labaume.jpg",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "If you read this blog on a regular basis, you probably use the little tool called SSH, especially its ubiquitous and most popular implementation OpenSSH.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2lZGcsc3yeXEHRXi0QmGCA/26e1acc0b1f256841cb2191c2c66d511/flexible-secure-ssh-with-dnssec.jpg",
		"featured": false,
		"html": "<p><b>UPDATE</b>: Corrected the paragraph about the permissions of the AuthorizedKeys file.</p><hr/><p>If you read this blog on a regular basis, you probably use the little tool called SSH, especially its ubiquitous and most popular implementation <a href=\"http://www.openssh.com/\">OpenSSH</a>.</p><p>Maybe you’re savvy enough to only use it with public/private keys, and therefore protect yourself from dictionary attacks. If you do then you know that in order to configure access to a new host, you need to make a copy of a public key available to that host (usually by writing it to its disk). Managing keys can be painful if you have many hosts, especially when you need to renew one of the keys. What if DNSSEC could help?</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5Ttkx9Cc5tKfk21Xl0kY5j/4fe2e99e246e69b65e01e5462a2f539a/3923470620_d64bde94dd_z_d-1.jpg\" alt=\"Managing keys can be painful\" class=\"kg-image\" width=\"640\" height=\"427\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://creativecommons.org/licenses/by/2.0/\">CC BY 2.0</a> <a href=\"https://www.flickr.com/photos/wneuheisel/3923470620\">image</a> by <a href=\"https://www.flickr.com/photos/wneuheisel\">William Neuheisel</a></p><p>With <a href=\"http://www.openssh.com/txt/release-6.2\">version 6.2</a> of OpenSSH came a feature that allows the remote host to retrieve a public key in a customised way, instead of the typical <code>authorized_keys</code> file in the <code>~/.ssh/</code> directory. For example, you can gather the keys of a group of users that require access to a number of machines on a single server (for example, an <a href=\"http://serverfault.com/questions/653792/ssh-key-authentication-using-ldap\">LDAP server</a>), and have all the hosts query that server when they need the public key of the user attempting to log in. This saves a lot of editing of <code>authorized_keys</code> files on each and every host. The downside is that it&#39;s necessary to trust the source these hosts retrieve public keys from. An LDAP server on a private network is probably trustworthy (when looked after properly) but for hosts running in the cloud, that’s not really practical.</p><p>DNSSEC is helpful here. That&#39;s right: now that we can verify responses from a DNS server, we can safely store public keys in DNS records!</p><p>So let&#39;s say we administer <code>example.com</code> and want to give Alice and Bob access to machines <code>foo</code>, <code>bar</code> and <code>baz</code> in that domain. We&#39;ll store their respective public keys in TXT<a href=\"#fn1\">[1]</a> records named <code>alice_pubkey.example.com</code> and <code>bob_pubkey.example.com</code>. To be entirely accurate, it doesn’t really matter which zone these records belong to, but I’ll consider here that we only have one domain. The requirements are:</p><ul><li><p>the machines need to run OpenSSH server version 6.2 or later</p></li><li><p>they also need a DNSSEC validating resolver (we&#39;ll use <code>unbound-host</code>)</p></li><li><p>Alice and Bob&#39;s keys need to be less than 256 characters long (ECDSA or Ed25519 keys will work)</p></li><li><p>DNSSEC needs to be correctly <a href=\"https://support.cloudflare.com/hc/en-us/articles/209114378\">set up</a> on the domain <code>example.com</code> (surprise!)</p></li></ul><p>Alice and Bob generate keys like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ ssh-keygen -t ecdsa</pre></code>\n            <p>or like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ ssh-keygen -t ed25519</pre></code>\n            <p>and then follow the instructions. They will of course <i>provide a non-empty passphrase</i>. Then they send us (or whoever administers the zone file for <code>example.com</code>) the public key file, which may look like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">ssh-ed25519 AAAAC3N...VY4A= alice@foo</pre></code>\n            <p>We can strip the comment <code>alice@foo</code> out of that file, and use the rest as the value to create a TXT record with the name <code>alice_pubkey</code> in the domain <code>example.com</code>. Then, retrieving the key is as easy as this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"> foo:~$ unbound-host -t TXT alice_pubkey.example.com\n alice_pubkey.example.com has TXT record “ssh-ed25519 AAAAC3N…”</pre></code>\n            <p>With <code>-v</code>, unbound-host will show us whether the signature has been verified</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ unbound-host -v -t TXT alice_pubkey.example.com\nalice_pubkey.example.com has TXT record “ssh-ed25519 AAAAC…” (insecure)</pre></code>\n            <p>With <code>-D</code>, it will actually check the signature:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ unbound-host -D -v -t TXT alice_pubkey.example.com\nalice_pubkey.example.com has TXT record “ssh-ed25519 AAAAC3N…” (secure)</pre></code>\n            <p>If no record exists, it will show this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ unbound-host -D -v -t TXT charlie_pubkey.example.com\ncharlie_pubkey.example.com has no TXT record (secure)</pre></code>\n            <p>Note that the absence of record is also labelled “secure”, thanks to <a href=\"https://www.dnssec-tools.org/wiki/index.php/NSEC\">NSEC</a>.</p><p>Let’s prepare to parse that output. The <a href=\"http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/sshd_config.5?query=sshd_config\">sshd_config man page</a> shows that sshd needs a specific user to run the program that will retrieve public keys. This is following the best practices of privilege separation. Let&#39;s call that user <code>pubkeygrab</code> and create an account on <code>foo</code>, <code>bar</code> and <code>baz</code>, giving it just the permissions it needs to work and <i>nothing more</i>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ useradd -m -d /var/empty -s /sbin/nologin pubkeygrab</pre></code>\n            <p>Then create the script <code>pubkeygrab.sh</code>, and store it on each of the machines. Obviously, we&#39;ll make sure only root can edit it:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">foo:~$ cat /usr/local/bin/pubkeygrab.sh\n#!/bin/sh\n\nUSER=$1\n\n/usr/sbin/unbound-host -v -D -t TXT ${USER}_pubkey.example.com \\\\\n     | /usr/bin/grep -v &quot;no TXT record&quot; \\\\\n     | /usr/bin/grep &#039; (secure)$&#039; \\\\\n     | /usr/bin/sed &#039;s/.* &quot;\\(.*\\)&quot; (secure)$/\\1/&#039;</pre></code>\n            <p>Now I&#39;m certain that a lot of readers will have something to say about the style or the efficiency of this shell script, I just wrote it that way to highlight what steps need to be taken:</p><ul><li><p>it retrieves a TXT record, and doesn&#39;t output anything if the record doesn&#39;t exist</p></li><li><p>if <code>unbound-host</code> has not confirmed that the record was correctly DNSSEC signed, it doesn&#39;t output anything</p></li><li><p>if the above is successful, it filters out the text to return only the public key</p></li><li><p>it doesn&#39;t try to do anything complex, because complexity is the enemy of security (or at least, that’s a point of view that I share with a few people)</p></li><li><p>it works with multiple records</p></li></ul><p>I&#39;m sure you will write your own program to do the above. Just make sure it works only when you want it to. It is critical to ensure that it <i>doesn&#39;t return anything</i> at least when:</p><ul><li><p>a record for the corresponding user doesn&#39;t exist</p></li><li><p>the records are not signed or not properly signed</p></li><li><p>the local copy of the root key (<code>/var/unbound/root.key</code>, here) is corrupted.</p></li></ul><p>Bonus points to you if you find more cases.</p><p>Now that you have read the warning above, add the following to <code>/etc/ssh/sshd_config</code> on <code>foo</code>, <code>bar</code> and <code>baz</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">AuthorizedKeysCommand /usr/local/bin/pubkeygrab.sh\nAuthorizedKeysCommandUser pubkeygrab</pre></code>\n            <p>and restart <code>sshd</code>. Check that the users <code>alice</code> and <code>bob</code> exist on each machine too. Note that the above change will also apply to all existing users. Now you can go to your CloudFlare account, select the domain <code>example.com</code>, and create the TXT records <code>alice_pubkey</code> and <code>bob_pubkey</code>. Paste their respective public keys in the value field. Soon after, Alice and Bob can log in. Ask Charlie to try too. If the above works for Alice and Bob, but fails for Charlie, congratulations, you have turned CloudFlare into a PKI for SSH.</p><p>If you remove the TXT records, Alice and Bob’s access should be revoked, and they should be unable to login, once the TTL of the TXT record is expired. However, note that when the output of <code>pubkeygrab.sh</code> is empty, <code>sshd</code> reverts to the usual <code>AuthorizedKeysFile</code> parameter to find a public key. If Alice and Bob are cheeky and want to keep their access after you removed their TXT records, they just need to copy their public key into that file any time before you ban them. If you don&#39;t want that, make sure the <code>AuthorizedKeysFile</code> parameter points to a place Alice and Bob can&#39;t write to.</p><p>I hope this is showing how interesting DNSSEC can be, and that we have more news on this topic soon.</p><hr/><ol><li><p>Yes, it would be better to have a dedicated record, instead of overloading TXT records. <a href=\"#fnref1\">↩︎</a></p></li></ol>",
		"id": "57Me2vjBS226E4c3ylZhGL",
		"localeList": {
			"name": "Flexible, secure SSH with DNSSEC Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2016-01-13T11:44:21.000+00:00",
		"slug": "flexible-secure-ssh-with-dnssec",
		"tags": [
			{
				"id": "5GwDZZTEDK1ZYAHNV31ygs",
				"name": "DNSSEC",
				"slug": "dnssec"
			},
			{
				"id": "5fZHv2k9HnJ7phOPmYexHw",
				"name": "DNS",
				"slug": "dns"
			},
			{
				"id": "6QVJOBzgKXUO9xAPEpqxvK",
				"name": "Reliability",
				"slug": "reliability"
			}
		],
		"title": "Flexible, secure SSH with DNSSEC",
		"updated_at": "2024-10-10T00:34:45.504Z",
		"url": "https://blog.cloudflare.com/flexible-secure-ssh-with-dnssec"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}