{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Arthur Fabre",
				"slug": "arthur",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1LaMJkf56elRlXGUuV71Vv/ecd0110ba031418e201804a6b69483df/arthur.png",
				"location": null,
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Efficient packet dropping is a key part of Cloudflare’s distributed denial of service (DDoS) attack mitigations. In this post, we introduce a new tool in our packet dropping arsenal: L4Drop.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/20UMkkzr5h6xfD28raqYh8/1fdb20815b7f1d7223019386d525635c/l4drop-xdp-ebpf-based-ddos-mitigations.jpg",
		"featured": false,
		"html": "<p>Efficient packet dropping is a key part of Cloudflare’s distributed denial of service (DDoS) attack mitigations. In this post, we introduce a new tool in our packet dropping arsenal: L4Drop.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1Md3ZoOlBITehVhbWnXZy0/01ff382d6c8a537f5f22a4617840a878/cover.jpg\" alt=\"\" class=\"kg-image\" width=\"2000\" height=\"1242\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://www.usa.gov/government-works\">Public domain</a> <a href=\"https://www.flickr.com/photos/usairforce/4293474325/in/photostream/\">image</a> by US Air Force</p><p>We&#39;ve written about our DDoS mitigation pipeline extensively in the past, covering:</p><ul><li><p><a href=\"/meet-gatebot-a-bot-that-allows-us-to-sleep/\">Gatebot</a>: analyzes traffic hitting our edge and deploys DDoS mitigations matching suspect traffic.</p></li><li><p><a href=\"/introducing-the-bpf-tools/\">bpftools</a>: generates Berkeley Packet Filter (BPF) bytecode that matches packets based on DNS queries, <a href=\"/introducing-the-p0f-bpf-compiler/\">p0F signatures</a>, or tcpdump filters.</p></li><li><p>Iptables: matches traffic against the BPF generated by bpftools using the <code>xt_bpf</code> module, and drops it.</p></li><li><p><a href=\"/kernel-bypass/\">Floodgate</a>: offloads work from iptables during big attacks that could otherwise overwhelm the kernel networking stack. Incoming traffic bypasses the kernel to go directly to a BPF interpreter in userspace, which efficiently drops packets matching the BPF rules produced by bpftools.</p></li></ul><p>Both iptables and Floodgate send samples of received traffic to Gatebot for analysis, and filter incoming packets using rules generated by bpftools. This ends up looking something like this:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/EhPnzNXl1KKxTnSIBx0ON/2e502b854d229bd811ece87f885c5656/floodgate.svg\" alt=\"\" class=\"kg-image\" width=\"975\" height=\"387\" loading=\"lazy\"/>\n            \n            </figure><p>Floodgate based DDoS mitigation pipeline</p><p>This pipeline has served us well, but a lot has changed since we implemented Floodgate. Our new <a href=\"/a-tour-inside-cloudflares-g9-servers/\">Gen9</a> and <a href=\"/arm-takes-wing/\">ARM</a> servers use different network interface cards (NIC) than our earlier servers. These new NICs aren’t compatible with Floodgate as it relies on a proprietary Solarflare technology to redirect traffic directly to userspace. Floodgate’s time was finally up.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"xdp-to-the-rescue\">XDP to the rescue</h3>\n      <a href=\"#xdp-to-the-rescue\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>A new alternative to the kernel bypass approach has been added to Linux: <a href=\"http://docs.cilium.io/en/latest/bpf/\">eXpress Data Path (XDP)</a>. XDP uses an extended version of the classic BPF instruction set, eBPF, to allow arbitrary code to run for each packet received by a network card driver. As <a href=\"/how-to-drop-10-million-packets/\">Marek demonstrated</a>, this enables high speed packet dropping! eBPF introduces a slew of new features, including:</p><ul><li><p>Maps, key-value data structures shared between the eBPF programs and userspace.</p></li><li><p>A Clang eBPF backend, allowing a sizeable subset of C to be compiled to eBPF.</p></li><li><p>A stringent kernel verifier that statically analyzes eBPF programs, ensuring run time performance and safety.</p></li></ul><p>Compared to our partial kernel bypass, XDP does not require busy polling for packets. This enables us to leave an XDP based solution “always on” instead of enabling it only when attack traffic exceeds a set threshold. XDP programs can also run on multiple CPUs, potentially allowing a higher number of packets to be processed than Floodgate, which was pinned to a single CPU to limit the impact of busy polling.</p><p>Updating our pipeline diagram with XDP yields:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4iszhBhHuL6NX7V4PhUznK/304a8e726b5c3fd63b31c06a65db5b29/xdp.svg\" alt=\"\" class=\"kg-image\" width=\"975\" height=\"387\" loading=\"lazy\"/>\n            \n            </figure><p>XDP based DDoS mitigation pipeline</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"introducing-l4drop\">Introducing L4Drop</h3>\n      <a href=\"#introducing-l4drop\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>All that remains is to convert our existing rules to eBPF! At first glance, it seems we should be able to store our rules in an eBPF map and have a single program that checks incoming packets against them. <a href=\"http://vger.kernel.org/lpc-networking.html#session-15__\">Facebook’s firewall</a> implements this strategy. This allows rules to be easily inserted or removed from userspace.</p><p>However, the filters created by bpftools rely heavily on matching arbitrary packet data, and performing arbitrary comparisons across headers. For example, a single p0f signature can check both IP &amp; TCP options. On top of this, the thorough static analysis performed by the kernel’s eBPF verifier currently disallows loops. This restriction helps ensure that a given eBPF program will always terminate in a set number of instructions. Coupled together, the arbitrary matching and lack of loops prevent us from storing our rules in maps.</p><p>Instead, we wrote a tool to compile the rules generated by Gatebot and bpftools to eBPF. This allows the generated eBPF to match against any packet data it needs, at the cost of:</p><ul><li><p>Having to recompile the program to add or remove rules</p></li><li><p>Possibly hitting eBPF code complexity limits enforced by the kernel with many rules</p></li></ul><p>A C program is generated from the rules built by Gatebot, and compiled to eBPF using Clang. All that’s left is to reimplement the iptables features we use.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"bpf-support\">BPF support</h4>\n      <a href=\"#bpf-support\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We have many different tools for generating BPF filters, and we need to be able to include these filters in the eBPF generated by L4Drop. While the name eBPF might suggest a minor extension to BPF, the instruction sets are not compatible. In fact, BPF instructions don&#39;t even have a one-to-one mapping to eBPF! This can be seen in the <a href=\"https://elixir.bootlin.com/linux/v4.19.3/source/net/core/filter.c#L752\">kernel&#39;s internal BPF to eBPF converter</a>, where a single BPF IP header length instruction maps to 6 eBPF instructions.</p><p>To simplify the conversion, we implemented a BPF to C compiler. This allows us to include any BPF program in the aforementioned C program generated by L4Drop. For example, if we generate a BPF program matching a DNS query to any subdomain of example.com using bpftools, we get:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ ./bpfgen dns -- &quot;*.example.com&quot;\n18,177 0 0 0,0 0 0 20,12 0 0 0,...</pre></code>\n            <p>Converted to C, we end up with:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">bool cbpf_0_0(uint8_t *data, uint8_t *data_end) {\n    __attribute__((unused))\n    uint32_t a, x, m[16];\n\n    if (data + 1 &gt; data_end) return false;\n    x = 4*(*(data + 0) &amp; 0xf);\n\n    ...\n}</pre></code>\n            <p>The BPF instructions each expand to a single C statement, and the BPF registers (<code>a</code>, <code>x</code> and <code>m</code>) are emulated as variables. This has the added benefit of allowing Clang to optimize the full program. The generated C includes the minimum number of guards required to prevent out of bounds packet accesses, as required by the kernel.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"packet-sampling\">Packet sampling</h4>\n      <a href=\"#packet-sampling\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Gatebot requires all traffic received by a server to be sampled at a given rate, and sent off for analysis. This includes dropped packets. Consequently, we have to sample before we drop anything. Thankfully, eBPF can call into the kernel using a restricted set of helper functions, and one of these, <code>bpf_xdp_event_output</code>, allows us to copy packets to a perf event ring buffer. A userspace daemon then reads from the perf buffer, obtaining the packets. Coupled with another helper, <code>bpf_get_prandom_u32()</code>, to generate random numbers, the C code to sample packets ends up something like:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">// Threshold may be &gt; UINT32_MAX\nuint64_t rnd = (uint64_t)get_prandom_u32();\n\nif (rnd &lt; threshold) {\n    // perf_event_output passes the number of bytes as a flags in the\n    // high 32 bits of the flags parameter.\n    uint64_t flags = len &lt;&lt; 32;\n\n    // Use the current CPU number as index to sampled_packets.\n    flags |= BPF_F_CURRENT_CPU;\n\n\n    // Write the packet in ctx to the perf buffer\n    if (xdp_event_output(ctx, &amp;sampled_packets, flags, &amp;len, sizeof(len))) {\n        return XDP_ABORTED;\n    }\n}</pre></code>\n            <p>The <a href=\"https://github.com/newtools/ebpf\">newtools/ebpf</a> library we use to load eBPF programs into the kernel has support for creating the required supporting eBPF map (sampled_packets in this example), and reading from the perf buffer in userspace.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"geo-rules\">Geo rules</h4>\n      <a href=\"#geo-rules\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With our <a href=\"https://www.cloudflare.com/network/\">large anycast network</a>, a truly distributed denial of service attack will impact many of our data centers. But not all attacks have this property. We sometimes require location specific rules.</p><p>To avoid having to build separate eBPF programs for every location, we want the ability to enable or disable rules before loading a program, but after compiling it.</p><p>One approach would be to store whether a rule is enabled or not in an eBPF map. Unfortunately, such map lookups can increase the code size. Due to the kernel’s strict code complexity limits for XDP code, this reduces the number of rules that fit in a single program. Instead, we modify the generated eBPF ELF before loading it into the kernel.</p><p>If, in the original C program, every rule is guarded by a conditional like so:</p>\n            <pre class=\"language-c\"><code class=\"language-c\">int xdp_test(struct xdp_md *ctx) {\n    unsigned long long enabled;\n\n    asm(&quot;%0 = 0 ll&quot; : &quot;=r&quot;(enabled));\n\n    if (enabled) {\n        // Check the packet against the rule\n        return XDP_DROP;\n    } else {\n        return XDP_PASS;\n    }\n}</pre></code>\n            <p><code>asm(&quot;%0 = 0 ll&quot; : &quot;=r&quot;(enabled))</code> will emit a single 64bit eBPF load instruction, loading <code>0</code> into the register holding the variable <code>enabled</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ llvm-objdump-6.0 -S test.o\n\ntest.o: file format ELF64-BPF\n\nDisassembly of section prog:\nxdp_test:\n       0:       18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00         r1 = 0 ll\n       2:       b7 00 00 00 02 00 00 00         r0 = 2\n       3:       15 01 01 00 00 00 00 00         if r1 == 0 goto +1 &lt;LBB0_2&gt;\n       4:       b7 00 00 00 01 00 00 00         r0 = 1\n\nLBB0_2:\n       5:       95 00 00 00 00 00 00 00         exit</pre></code>\n            <p>Modifying the ELF to change the load instruction to load <code>0</code> or <code>1</code> will change the value of <code>enabled</code>, enabling or disabling the rule. The kernel even <a href=\"https://elixir.bootlin.com/linux/v4.19.3/source/kernel/bpf/verifier.c#L3868\">trims conditionals against constants like these</a>.</p><p>Modifying the instructions requires the ability to differentiate these special loads against ones normally emitted by Clang. Changing the asm to load a symbol (<code>asm(&quot;%0 = RULE_0_ENABLED ll&quot; : &quot;=r&quot;(enabled))</code>) ensures it shows up in the ELF relocation info with that symbol name:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ llvm-readelf-6.0 -r test.o\n\nRelocation section &#039;.relprog&#039; at offset 0xf0 contains 1 entries:\n    Offset             Info             Type               Symbol&#039;s Value  Symbol&#039;s Name\n0000000000000000  0000000200000001 R_BPF_64_64            0000000000000000 RULE_0_ENABLED</pre></code>\n            <p>This enables the <a href=\"https://github.com/newtools/ebpf\">newtools/ebpf</a> loader to parse the ELF relocation info, and always find the correct load instruction that guards enabling or disabling a rule.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"production\"><b>Production</b></h3>\n      <a href=\"#production\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>L4Drop is running in production across all of our servers, and protecting us against DDoS attacks. For example, this server dropped over 8 million packets per second:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/596ZBycRpdqEzHLKxWI09H/f443840e5a74888b17a329eccc883ba9/combined-rx-narrow.png\" alt=\"\" class=\"kg-image\" width=\"1526\" height=\"789\" loading=\"lazy\"/>\n            \n            </figure><p>received, dropped and lost packets per second vs CPU usage on a server during a DDoS attack</p><p>The graph shows a sudden increase in received packets (red). Initially, the attack overwhelmed the kernel network stack, causing some packets to be lost on the network card (yellow). The overall CPU usage (magenta) rose sharply.</p><p>Gatebot detected the attack shortly thereafter, deploying a rule matching the attack traffic. L4Drop began dropping the relevant packets (green), reaching over 8 million dropped packets per second.</p><p>The amount of traffic dropped (green) closely followed the received traffic (red), and the amount of traffic passed through remains unchanged before, during, and after the attack. This highlights the effectiveness of the deployed rule. At one point the attack traffic changed slightly, leading to a gap between the dropped and received traffic until Gatebot could respond with a new rule.</p><p>During the brunt of the attack, the overall CPU usage (magenta) only rose by about 10%, demonstrating the efficiency of XDP.</p><p>The softirq CPU usage (blue) shows the CPU usage under which XDP / L4drop runs, but also includes other network related processing. It increased by slightly over a factor of 2, while the number of incoming packets per second increased by over a factor of 40!</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"conclusion\">Conclusion</h3>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>While we’re happy with the performance of L4Drop so far, our pipeline is in a constant state of improvement. We’re working on supporting a greater number of simultaneous rules in L4Drop through multiple, chained, eBPF programs. Another point of focus is increasing the efficiency of our generated programs, and supporting new eBPF features. Reducing our attack detection delay would also allow us to deploy rules quicker, leading to less lost packets at the onset of an attack.</p>",
		"id": "40D8ULOdPAsZwViKbE1SlP",
		"localeList": {
			"name": "L4Drop: XDP DDoS Mitigations Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-11-28T19:59:25.000+00:00",
		"slug": "l4drop-xdp-ebpf-based-ddos-mitigations",
		"tags": [
			{
				"id": "64g1G2mvZyb6PjJsisO09T",
				"name": "DDoS",
				"slug": "ddos"
			},
			{
				"id": "5kIxDMJCg3PXQxVINDL0Cw",
				"name": "Attacks",
				"slug": "attacks"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			}
		],
		"title": "L4Drop: XDP DDoS Mitigations",
		"updated_at": "2025-10-24T11:02:50.553Z",
		"url": "https://blog.cloudflare.com/l4drop-xdp-ebpf-based-ddos-mitigations"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}