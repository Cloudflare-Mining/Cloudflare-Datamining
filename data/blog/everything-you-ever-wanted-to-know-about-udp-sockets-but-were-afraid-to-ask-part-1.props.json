{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "5",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1JuU5qavgwVeqR8BAUrd6U/3a0d0445d41c9a3c42011046efe9c37b/marek-majkowski.jpeg",
				"location": null,
				"website": null,
				"twitter": "@majek04",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Historically Cloudflare's core competency was operating an HTTP reverse proxy. We've spent significant effort optimizing traditional HTTP/1.1 and HTTP/2 servers running on top of TCP.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/xiQwo1CJ88sxs2mJZKuyl/bfff6c00668fc5f49c1d4181a52ea891/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3WOLE3yKPbPvRX9rQLYZEA/180626d9b9d5fd202bfbc5854a1928ea/Spectrum-Data-Plane-Internals-1.png\" alt=\"Snippet from internal presentation about UDP inner workings in Spectrum. Who said UDP is simple!\" class=\"kg-image\" width=\"960\" height=\"540\" loading=\"lazy\"/>\n            \n            </figure><p>Snippet from internal presentation about UDP inner workings in Spectrum. Who said UDP is simple!</p><p>Historically Cloudflare&#39;s core competency was operating an <a href=\"https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/\">HTTP reverse proxy</a>. We&#39;ve spent significant effort optimizing traditional HTTP/1.1 and HTTP/2 servers running on top of TCP. Recently though, we started operating big scale stateful <a href=\"https://www.cloudflare.com/learning/ddos/glossary/user-datagram-protocol-udp/\">UDP</a> services.</p><p>Stateful UDP gains popularity for a number of reasons:</p><p>— <a href=\"/quic-version-1-is-live-on-cloudflare/\">QUIC</a> is a new transport protocol based on UDP, it powers HTTP/3. We see the adoption accelerating.</p><p>— <a href=\"/1111-warp-better-vpn/\">We operate WARP</a> — our Wireguard protocol based tunneling service — which uses UDP under the hood.</p><p>— We have a lot of generic UDP traffic going through <a href=\"https://www.cloudflare.com/products/cloudflare-spectrum/\">our Spectrum service</a>.</p><p>Although UDP is simple in principle, there is a lot of domain knowledge needed to run things at scale. In this blog post we&#39;ll cover the basics: all you need to know about UDP servers to get started.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"connected-vs-unconnected\">Connected vs unconnected</h3>\n            <a href=\"#connected-vs-unconnected\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>How do you &quot;accept&quot; connections on a UDP server? If you are using unconnected sockets, you generally don&#39;t.</p><p>But let&#39;s start with the basics. UDP sockets can be &quot;connected&quot; (or &quot;established&quot;) or &quot;unconnected&quot;. Connected sockets have a full 4-tuple associated {source ip, source port, destination ip, destination port}, unconnected sockets have 2-tuple {bind ip, bind port}.</p><p>Traditionally the connected sockets were mostly used for outgoing flows, while unconnected for inbound &quot;server&quot; side connections.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"udp-client\">UDP client</h3>\n            <a href=\"#udp-client\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>As we&#39;ll learn today, these can be mixed. It is possible to use connected sockets for ingress handling, and unconnected for egress. To illustrate the latter, consider these two snippets. They do the same thing — send a packet to the DNS resolver. First snippet is using a connected socket:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/nLimg1UkSX4TIIYTaxASJ/630c7f32c10868d6cccee7736d5c713c/image4-20.png\" alt=\"\" class=\"kg-image\" width=\"925\" height=\"125\" loading=\"lazy\"/>\n            \n            </figure><p>Second, using unconnected one:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1Iq69Z2Nrk00zNeTvJyrVU/6cb272253a0906191cb6aabf6b2e7b3d/image7-14.png\" alt=\"\" class=\"kg-image\" width=\"929\" height=\"126\" loading=\"lazy\"/>\n            \n            </figure><p>Which one is better? In the second case, when receiving, the programmer should verify the source IP of the packet. Otherwise, the program can get confused by some random inbound internet junk — like port scanning. It is tempting to reuse the socket descriptor and query another DNS server afterwards, but this would be a bad idea, particularly when dealing with DNS. For security, DNS assumes the client source port is unpredictable and short-lived.</p><p>Generally speaking for outbound traffic it&#39;s preferable to use connected UDP sockets.</p><p>Connected sockets can save route lookup on each packet by employing a clever optimization — Linux can save a route lookup result on <a href=\"https://elixir.bootlin.com/linux/v5.15.4/source/include/net/sock.h#L434\">a connection struct</a>. Depending on the specifics of the setup this might save some CPU cycles.</p><p>For completeness, it is possible to roll a new source port and reuse a socket descriptor with an obscure trick called &quot;dissolving of the socket association&quot;. It can be done with <code>connect(AF_UNSPEC)</code>, but this is rather advanced Linux magic.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"udp-server\">UDP server</h3>\n            <a href=\"#udp-server\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Traditionally on the server side UDP requires unconnected sockets. Using them requires a bit of finesse. To illustrate this, let&#39;s write an UDP echo server. In practice, you probably shouldn&#39;t write such a server, due to a risk of becoming a DoS reflection vector. <a href=\"/how-to-receive-a-million-packets/\">Among other protections</a>, like rate limiting, UDP services should always respond with a strictly smaller amount of data than was sent in the initial packet. But let&#39;s not digress, the naive UDP echo server might look like:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/se9nCWduF9hcK8K1XwiWW/9c9625acfd065d3a66a2b98b99e15708/image6-14.png\" alt=\"\" class=\"kg-image\" width=\"936\" height=\"208\" loading=\"lazy\"/>\n            \n            </figure><p>This code begs questions:</p><p>— Received packets can be longer than 2048 bytes. This can happen over loop back, when using jumbo frames or with help of IP fragmentation.</p><p>— It&#39;s totally possible for the received packet to have an empty payload.</p><p>— What about inbound ICMP errors?</p><p>These problems are specific to UDP, they don&#39;t happen in the TCP world. TCP can transparently deal with MTU / fragmentation and ICMP errors. Depending on the specific protocol, a UDP service might need to be more complex and pay extra care to such corner cases.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"sourcing-packets-from-a-wildcard-socket\">Sourcing packets from a wildcard socket</h3>\n            <a href=\"#sourcing-packets-from-a-wildcard-socket\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>There is a bigger problem with this code. It only works correctly when binding to a specific IP address, like <code>::1</code> or <code>127.0.0.1</code>. It won&#39;t always work when we bind to a wildcard. The issue lies in the <code>sendto()</code> line — we didn&#39;t explicitly set the outbound IP address! Linux doesn&#39;t know where we&#39;d like to source the packet from, and it will choose a default egress IP address. It might not be the IP the client communicated to. For example, let&#39;s say we added <code>::2</code> address to loop back interface and sent a packet to it, with src IP set to a valid <code>::1</code>:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">marek@mrprec:~$ sudo tcpdump -ni lo port 1234 -t\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes\nIP6 ::1.41879 &gt; ::2.1234: UDP, length 2\nIP6 ::1.1234 &gt; ::1.41879: UDP, length 2</pre></code>\n            <p>Here we can see the packet correctly flying from <code>::1</code> to <code>::2</code>, to our server. But then when the server responds, it sources the response from <code>::1</code> IP which in this case is wrong.</p><p>On the server side, when binding to a wildcard:</p><p>— we might receive packets destined to a number of IP addresses</p><p>— we must be very careful when responding and use appropriate source IP address</p><p>BSD Sockets API doesn&#39;t make it easy to understand where the received packet was destined to. On Linux and <a href=\"https://www.freebsd.org/cgi/man.cgi?query=ip6&sektion=4\">BSD</a> it is possible to request useful CMSG metadata with IP_RECVPKTINO and IPV6_RECVPKTINFO.</p><p>An improved server loop might look like:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/52toeTH5ZY1aD3bOSry6Do/88b7b0e90c7802ae513ef2f5f2ade5f5/image2-30.png\" alt=\"\" class=\"kg-image\" width=\"930\" height=\"191\" loading=\"lazy\"/>\n            \n            </figure><p>The <code>recvmsg</code> and <code>sendmsg</code> syscalls, as opposed to <code>recvfrom</code> / <code>sendto</code> allow the programmer to request and set extra CMSG metadata, which is very handy when dealing with UDP.</p><p>The IPV6_PKTINFO CMSG contains this data structure:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/JvR29xOL5YVQj4GvhudPL/c92277cd5b15270a2053663dc7412057/image1-71.png\" alt=\"\" class=\"kg-image\" width=\"924\" height=\"131\" loading=\"lazy\"/>\n            \n            </figure><p>We can find here the IP address and interface number of the packet target. Notice, there&#39;s no place for a port number.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"graceful-server-restart\">Graceful server restart</h3>\n            <a href=\"#graceful-server-restart\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Many traditional UDP protocols, like DNS, are request-response based. Since there is no state associated with a higher level &quot;connection&quot;, the server can restart, to upgrade or change configuration, without any problems. Ideally, sockets should be managed with the usual <a href=\"http://0pointer.de/blog/projects/socket-activation.html\">systemd socket activation</a> to avoid the short time window where the socket is down.</p><p>Modern protocols are often connection-based. For such servers, on restart, it&#39;s beneficial to keep the old connections directed to the old server process, while the new server instance is available for handling the new connections. The old connections will eventually die off, and the old server process will be able to terminate. This is a common and easy practice in the TCP world where each connection has its own file descriptor. The old server process stops accept()-ing new connections and just waits for the old connections to gradually go away. <a href=\"http://nginx.org/en/docs/control.html#upgrade\">NGINX has a good documentation</a> on the subject.</p><p>Sadly, in UDP you can&#39;t <code>accept()</code> new connections. Doing graceful server restarts for UDP is surprisingly hard.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"established-over-unconnected-technique\">Established-over-unconnected technique</h3>\n            <a href=\"#established-over-unconnected-technique\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>For some services we are using a technique which we call &quot;established-over-unconnected&quot;. This comes from a realization that on Linux it&#39;s possible to create a connected socket *over* an unconnected one. Consider this code:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/78wXvRtNNnQFwlqfS7EYd5/bf3224997d0169e26c402d909b1c2012/image3-37.png\" alt=\"\" class=\"kg-image\" width=\"928\" height=\"271\" loading=\"lazy\"/>\n            \n            </figure><p>Does this look hacky? Well, it should. What we do here is:</p><p>— We start a UDP unconnected socket.</p><p>— We wait for a client to come in.</p><p>— As soon as we receive the first packet from the client, we immediately create a new fully connected socket, *over* the unconnected socket! It shares the same local port and local IP.</p><p>This is how it might look in ss:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">marek@mrprec:~$ ss -panu sport = :1234 or dport = :1234 | cat\nState     Recv-Q    Send-Q       Local Address:Port        Peer Address:Port    Process                                                                         \nESTAB     0         0                    [::1]:1234               [::1]:44592    python3\nUNCONN    0         0                        *:1234                   *:*        python3\nESTAB     0         0                    [::1]:44592              [::1]:1234     nc</pre></code>\n            <p>Here you can see the two sockets managed in our python test server. Notice the established socket is sharing the unconnected socket port.</p><p>This trick is basically reproducing the &#39;accept()` behaviour in UDP, where each ingress connection gets its own dedicated socket descriptor.</p><p>While this trick is nice, it&#39;s not without drawbacks — it&#39;s racy in two places. First, it&#39;s possible that the client will send more than one packet to the unconnected socket before the connected socket is created. The application code should work around it — if a packet received from the server socket belongs to an already existing connected flow, it shall be handed over to the right place. Then, during the creation of the connected socket, in the short window after <code>bind()</code> before <code>connect()</code> we might receive unexpected packets belonging to the unconnected socket! We don&#39;t want these packets here. It is necessary to filter the source IP/port when receiving early packets on the connected socket.</p><p>Is this approach worth the extra complexity? It depends on the use case. For a relatively small number of long-lived flows, it might be ok. For a high number of short-lived flows (especially DNS or NTP) it&#39;s an overkill.</p><p>Keeping old flows stable during service restarts is particularly hard in UDP. The established-over-unconnected technique is just one of the simpler ways of handling it. We&#39;ll leave another technique, based on SO_REUSEPORT ebpf, for a future blog post.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"summary\">Summary</h3>\n            <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In this blog post we started by highlighting connected and unconnected UDP sockets. Then we discussed why binding UDP servers to a wildcard is hard, and how IP_PKTINFO CMSG can help to solve it. We discussed the UDP graceful restart problem, and hinted on an established-over-unconnected technique.</p><table><tr><td><p><b>Socket type</b></p></td><td><p><b>Created with</b></p></td><td><p><b>Appropriate syscalls</b></p></td></tr><tr><td><p>established</p></td><td><p>connect()</p></td><td><p>recv()/send()</p></td></tr><tr><td><p>established</p></td><td><p>bind() + connect()</p></td><td><p>recvfrom()/send(), watch out for the race after bind(), verify source of the packet</p></td></tr><tr><td><p>unconnected</p></td><td><p>bind(specific IP)</p></td><td><p>recvfrom()/sendto()</p></td></tr><tr><td><p>unconnected</p></td><td><p>bind(wildcard)</p></td><td><p>recvmsg()/sendmsg() with IP_PKTINFO CMSG</p></td></tr></table><p>Stay tuned, in future blog posts we might go even deeper into the curious world of production UDP servers.</p>",
		"id": "4Is8w5do12KTSyIAjAtpud",
		"localeList": {
			"name": "Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Historically Cloudflare's core competency was operating an HTTP reverse proxy. We've spent significant effort optimizing traditional HTTP/1.1 and HTTP/2 servers running on top of TCP. Recently though, we started operating big scale stateful UDP services.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-11-25T17:27:37.000+00:00",
		"slug": "everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1",
		"tags": [
			{
				"id": "1AngXfNV5gW3bR8pmkPLKi",
				"name": "UDP",
				"slug": "udp"
			}
		],
		"title": "Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1",
		"updated_at": "2024-12-12T18:51:20.482Z",
		"url": "https://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}