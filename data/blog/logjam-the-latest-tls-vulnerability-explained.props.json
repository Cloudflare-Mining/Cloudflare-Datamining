{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Filippo Valsorda",
				"slug": "filippo",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/46wTy3eKIkbnXRmuf2gsIt/3b2b4a5afc370ab87b3a189c0424f75c/filippo.jpg",
				"location": null,
				"website": null,
				"twitter": "@filosottile",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Yesterday, a group from INRIA, Microsoft Research, Johns Hopkins, the University of Michigan, and the University of Pennsylvania published a deep analysis of the Diffie-Hellman algorithm as used in TLS and other protocols. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7A0IB8WK6gCFT4WcxldqvI/0d0b6cd6974d248615ce09e3c3840683/logjam-the-latest-tls-vulnerability-explained.jpg",
		"featured": false,
		"html": "<p></p><p><i>Image: &quot;Logjam&quot; </i><a href=\"https://twitter.com/0xabad1dea/status/600874766527012865\"><i>as interpreted by @0xabad1dea</i></a></p><p>Yesterday, a group from INRIA, Microsoft Research, Johns Hopkins, the University of Michigan, and the University of Pennsylvania <a href=\"https://weakdh.org/imperfect-forward-secrecy.pdf\">published</a> a deep analysis of the Diffie-Hellman algorithm as used in TLS and other protocols. This analysis included a novel downgrade attack against the TLS protocol itself called <a href=\"https://weakdh.org/\"><b>Logjam</b></a>, which exploits EXPORT cryptography (just like <a href=\"/cloudflare-sites-are-protected-from-freak/\">FREAK</a>).</p><p>First, let me start by saying that <b>CloudFlare customers are not and were never affected</b>. We don’t support non-EC Diffie-Hellman ciphersuites on either the client or origin side. We also won&#39;t touch EXPORT-grade cryptography with a 20ft stick.</p><p>But why are CloudFlare customers safe, and how does Logjam work anyway?</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"diffie-hellman-and-tls\">Diffie-Hellman and TLS</h3>\n      <a href=\"#diffie-hellman-and-tls\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><i>This is a detailed technical introduction to how DH works and how it’s used in TLS—if you already know this and want to read about the attack, skip to “Enter export crypto, enter Logjam” below. If, instead, you are not interested in the nuts and bolts and want to know who’s at risk, skip to “So, what’s affected?”</i></p><p>To start a TLS connection, the two sides—client (the browser) and server (CloudFlare)—need to agree securely on a secret key. This process is called <b>Key Exchange</b> and it happens during the TLS Handshake: the exchange of messages that take place before encrypted data can be transmitted.</p><p>There is a detailed description of the TLS handshake in the first part of <a href=\"/keyless-ssl-the-nitty-gritty-technical-details/\">this previous blog post by Nick Sullivan</a>. In the following, I’ll only discuss the ideas you’ll need to understand the attack at hand.</p><p>There are many types of Key Exchanges: static RSA, Diffie-Hellman (DHE cipher suites), Elliptic Curve Diffie-Hellman (ECDHE cipher suites), and some less used methods.</p><p>An important property of DHE and ECDHE key exchanges is that they provide <a href=\"/staying-on-top-of-tls-attacks/#forwardsecrecy\">Forward Secrecy</a>. That is, even if the server key is compromised at some point, it can’t be used to decrypt past connections. It’s important to protect the information exchanged from future breakthroughs, and we’re proud to say that 94% of CloudFlare connections provide it.</p><p>This research—and this attack—applies to the normal non-EC <b>Diffie-Hellman key exchange (DHE)</b>. This is how it works at a high level (don’t worry, I’ll explain each part in more detail below):</p><ol><li><p>The client advertises support for DHE cipher suites when opening a connection (in what is called a Client Hello message)</p></li><li><p>The server picks the parameters and performs its half of the DH computation using those parameters</p></li><li><p>The server signs parameters and its DH share with its long-term certificate and sends the whole thing to the client</p></li><li><p>The client checks the signature, uses the parameters to perform its half of the computation and sends the result to the server</p></li><li><p>Both parts put everything together and derive a shared secret, which they will use as the key to secure the connection</p></li></ol><p>(For a more in depth analysis of each step see the link to Nick Sullivan’s blog post above, <a href=\"/keyless-ssl-the-nitty-gritty-technical-details/#ephemeraldiffiehellmanhandshake\">“Ephemeral Diffie-Hellman Handshake” section</a>.)</p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=http://staging.blog.mrk.cfdata.org/content/images/2015/05/ssl_handshake_diffie_hellman.jpg>\n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7cBRR2q8hqa1xKfoWLSFcl/73ac27fa495f52d5983d81b32d814fb4/ssl_handshake_diffie_hellman.jpg\" alt=\"Diffie-Hellman Handshake diagram\" class=\"kg-image\" width=\"1228\" height=\"857\" loading=\"lazy\"/>\n            </a>\n            </figure><p>Let’s explain some of the terms that just passed by your screen. “The client” is the browser and “the server” is the website (or CloudFlare’s edge serving the website).</p><p>“The parameters” (or <i>group</i>) are some big numbers that are used as base for the DH computations. <b>They can be, and often are, fixed. The security of the final secret depends on the size of these parameters.</b> This research deemed 512 and 768 bits to be weak, 1024 bits to be breakable by really powerful attackers like governments, and 2048 bits to be a safe size.</p><p>The certificate contains a public key and is what you (or CloudFlare for you) get issued from a CA for your website. The client makes sure it’s issued by a CA it trusts and that it’s valid for the visited website. The server uses the corresponding private key to cryptographically sign its share of the DH key exchange so that the client can be sure it’s agreeing on a connection key with the real owner of the website, not a MitM.</p><p>Finally, the DH computation: there’s a <a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Description\">beautiful explanation of this on Wikipedia which uses <i>paint</i></a>. The tl;dr is:</p><ol><li><p>The server picks a secret ‘a’</p></li><li><p>Then it computes—using some parameters as a base—a value ‘A’ from it and sends that to the client (not ‘a’!)</p></li><li><p>The client picks a secret ‘b’, takes the parameters from the server and likewise it computes a value ‘B’ that sends to the server</p></li><li><p>Both parts put together ‘a’ + ‘B’ or ‘b’ + ‘A’ to derive a shared, identical secret - which is impossible to compute from ‘A’ + ‘B’ which are the only things that travelled on the wire</p></li></ol><p>The security of all this depends on the strength/size of the parameters.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"enter-export-crypto-enter-logjam\">Enter export crypto, enter Logjam</h3>\n      <a href=\"#enter-export-crypto-enter-logjam\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So far, so good. Diffie-Hellman is nice, it provides Forward Secrecy, it’s secure if the parameters are big enough, and the parameters are picked and signed by the server. So what’s the problem?</p><p>Enter “export cryptography”! <b>Export cryptography</b> is a relic of the 90’s US restrictions on cryptography export. In order to support SSL in countries to where the U.S. had disallowed exporting &quot;strong cryptography&quot;, many implementations support weakened modes called EXPORT modes.</p><p>We’ve already seen an attack that succeeded because connections could be forced to use these modes even if they wouldn’t want to, this is what happened with the FREAK vulnerability. It’s telling that 20 years after these modes became useless we are still dealing with the outcome of the added complexity.</p><p>How it works with Diffie-Hellman is that the client requests a <code>DHE_EXPORT</code> ciphersuite instead of the corresponding <code>DHE</code> one. Seeing that, the server (if it supports DHE_EXPORT) <i>picks small, breakable 512-bits parameters</i> for the exchange, and carries on with a regular DHE key exchange. <b>The server doesn’t signal back securely to the client that it picked such small DH parameters because of the EXPORT ciphersuite</b>.</p><p>This is the protocol flaw at the heart of Logjam “downgrade attack”:</p><ul><li><p>A MitM attacker intercepts a client connection and replaces all the accepted ciphersuites with only the DHE_EXPORT ones</p></li><li><p>The server picks weak 512-bits parameters, does its half of the computation, and signs the parameters with the certificate’s private key. <b>Neither the Client Hello, the client ciphersuites, nor the chosen ciphersuite are signed by the server!</b></p></li><li><p>The client is led to believe that the server picked a DHE Key Exchange and just willingly decided for small parameters. From its point of view, it has have no way to know that the server was tricked by the MitM into doing so!</p></li><li><p>The attacker would then break one of the two weak DH shares, recover the connection key, and proceed with the TLS connection with the client</p></li></ul>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7bbVK9rknxBcXalLiCGfyk/952480fdee17b7a628e076139ef9b002/https-weakdh-org-imperfect-forward-secrecy-pdf-2015-05-21-01-19-48.png\" alt=\"Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice - Figure 2\" class=\"kg-image\" width=\"818\" height=\"492\" loading=\"lazy\"/>\n            \n            </figure><p><a href=\"https://weakdh.org/imperfect-forward-secrecy.pdf\"><i>Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice</i></a><i> - Figure 2</i></p><p>The client has no other way to protect itself besides drawing a line in the sand about how weak the DHE parameters can be (e.g. at least 1024 bits) and refuse to connect to servers that want to pick smaller ones. This is what all modern browsers are now doing, but it wasn’t done before because it causes breakage, and it was believed that there was no way to trick a server into choosing such weak parameters if it wouldn’t normally.</p><p>The servers can protect themselves by refusing EXPORT ciphersuites and never signing small parameters.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"about-parameters-size-and-reuse\">About parameters size and reuse</h3>\n      <a href=\"#about-parameters-size-and-reuse\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>But how small is too small for DH parameters? The Logjam paper analyzes this in depth also. The first thing to understand is that <b>parameters can be and often are reused</b>. 17.9% of the Top 1 Million Alexa Domains used the same 1024-bit parameters.</p><p><b>An attacker can perform the bulk of the computation having only the parameters</b>, and then break any DH exchange that uses them in minutes. So when many sites (or VPN servers, etc.) share the same parameters, the investment of time needed to “break” the parameters makes much more sense since it would then allow the attacker to break many connections with little extra effort.</p><p>The research team performed the precomputation on the most common 512-bit (EXPORT) parameters to demonstrate the impact of Logjam, but they express concerns that real, more powerful attackers might do the same with the common normal-DHE 1024-bit parameters.</p><p>Finally, in their Internet-wide scan they discovered that many servers will <b>provide vulnerable 512-bit parameters even for non-EXPORT DHE</b>, in order to support older TLS implementations (for example, old Java versions).</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"so-whats-affected\">So, what’s affected?</h3>\n      <a href=\"#so-whats-affected\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p><b>A client/browser is affected if it accepts small DHE parameters as part of any connection</b>, since it has no way to know that it’s being tricked into a weak EXPORT-level connection. Most major browsers at the time of this writing are vulnerable but <a href=\"https://groups.google.com/a/chromium.org/forum/#!msg/security-dev/WyGIpevBV1s\">are moving to restrict the size of DH parameters to 1024 bit</a>. You can check yours visiting <a href=\"https://weakdh.org\">weakdh.org</a>.</p><p><b>A server/website is vulnerable if it supports the DHE_EXPORT ciphersuites or if it uses small parameters for DHE.</b> You can find a test and instructions on how to fix this at <a href=\"https://weakdh.org/sysadmin.html\">https://weakdh.org/sysadmin.html</a>. 8.4% of Alexa Top Million HTTPS websites were initially vulnerable (with 82% and 10% of them using the same two parameters sets, making precomputation more viable). CloudFlare servers don’t accept either DHE_EXPORT or DHE. We offer ECDHE instead.</p><p>Some interesting related statistics: <b>94% of the TLS connections to CloudFlare customer sites uses ECDHE</b> (more precisely 90% of them being <code>ECDHE-RSA-AES</code> of some sort and 10% <a href=\"/do-the-chacha-better-mobile-performance-with-cryptography/\"><code>ECDHE-RSA-CHACHA20-POLY1305</code></a>) and provides Forward Secrecy. The rest use static RSA (5.5% with AES, 0.6% with 3DES).</p><p><i>Both the client and the server need to be vulnerable</i> in order for the attack to succeed because the server must accept to sign small DHE_EXPORT parameters, and the client must accept them as valid DHE parameters.</p><p>A closing note: <b>events like this are ultimately a good thing for the security industry and the web at large</b> since they mean that skilled people are looking at what we rely on to secure our connections and fix its flaws. They also put a spotlight on how the added complexity of supporting reduced-strength crypto and older devices endangers and adds difficulty to all of our security efforts.</p><p>If you’ve read to here, found it interesting, and would like to work on things like this, remember that we’re <a href=\"https://www.cloudflare.com/join-our-team\">hiring in London and San Francisco</a>!</p>",
		"id": "0ugl2V2Lvy7zDaehj24Rn",
		"localeList": {
			"name": "Logjam: the latest TLS vulnerability explained Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2015-05-21T00:52:53.000+01:00",
		"slug": "logjam-the-latest-tls-vulnerability-explained",
		"tags": [
			{
				"id": "56vA0Z6hqev6QaJBQmO2J8",
				"name": "TLS",
				"slug": "tls"
			},
			{
				"id": "2pFyOCtANFB5qS6nbtQbVp",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "Logjam: the latest TLS vulnerability explained",
		"updated_at": "2025-10-24T10:26:44.660Z",
		"url": "https://blog.cloudflare.com/logjam-the-latest-tls-vulnerability-explained"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}