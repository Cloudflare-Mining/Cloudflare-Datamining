{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "4",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"ja-jp"
	],
	"post": {
		"authors": [
			{
				"name": "Greg Brimble",
				"slug": "greg-brimble",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2IVF81ovNulb9EC9MDSCMl/baec7ccb7301d1c1a19c27285f04c5b8/greg-brimble.jpeg",
				"location": "London, UK",
				"website": null,
				"twitter": "@GregBrimble",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Obinna Ekwuno",
				"slug": "obinna",
				"bio": "Developer Advocate, Cloudflare. ",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1m99XQ237ABpoVn9SWWPSC/8bf4207cd804f8ec6548a671c57d540a/obinna.jpg",
				"location": null,
				"website": null,
				"twitter": "@Obinnaspeaks",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Full-stack support for Cloudflare Pages is now in open beta, and you can test it today with this example image-sharing project that integrates with KV, Durable Objects, Cloudflare Images and Cloudflare Access. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3sgSA4qVfu22ePeYTFEpZU/6d6d71a57f9df05d057379e36c9c977c/building-full-stack-with-pages.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7CB3SAMwEgqnuNUBRBeRSA/661df158b412ec77da66b99e649426c7/image4-13.png\" alt=\"Building a full-stack application with Cloudflare Pages\" class=\"kg-image\" width=\"1200\" height=\"675\" loading=\"lazy\"/>\n            \n            </figure><p>We were so excited to <a href=\"/cloudflare-pages-goes-full-stack\">announce support for full stack applications in Cloudflare Pages</a> that we knew we had to show it off in a big way. We&#39;ve built a sample image-sharing platform to demonstrate how you can add serverless functions right from within Pages with help from Cloudflare Workers. With just one new file to your project, you can add dynamic rendering, interact with other APIs, and persist data with KV and Durable Objects. The possibilities for full-stack applications, in combination with Pages&#39; quick development cycles and unlimited preview environments, gives you the power to create almost any application.</p><p>Today, we&#39;re walking through our example image-sharing platform. We want to be able to share pictures with friends while still also keeping some images private. We&#39;ll build a JSON API with Functions (storing data on KV and Durable Objects), integrate with Cloudflare Images and Cloudflare Access, and use React for our front end.</p><p>If you&#39;re wanting to dive right into the good stuff, <a href=\"https://images.pages.dev/\">our demo instance is published here</a>, and <a href=\"https://github.com/cloudflare/images.pages.dev\">the code is on GitHub</a>, but stick around for a more gentle approach.</p>\n            <figure class=\"kg-card kg-image-card kg-width-wide\">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6ONc6WtXvEqXxJXIVlwX4o/85109aa1b16e6a79fc0b1ed60eccf485/image2-17.png\" alt=\"\" class=\"kg-image\" width=\"1680\" height=\"994\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"building-serverless-functions-with-cloudflare-pages\">Building serverless functions with Cloudflare Pages</h2>\n      <a href=\"#building-serverless-functions-with-cloudflare-pages\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n    <div class=\"flex anchor relative\">\n      <h3 id=\"file-based-routing\">File-based routing</h3>\n      <a href=\"#file-based-routing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you&#39;re not already familiar, Cloudflare Pages <a href=\"https://developers.cloudflare.com/pages/get-started\">connects with your git provider</a> (GitHub and <a href=\"/cloudflare-pages-partners-with-gitlab\">GitLab</a>), and automates the deployment of your static site to Cloudflare&#39;s network. Functions lets you enhance these apps by sprinkling in dynamic data. If you haven&#39;t already, <a href=\"https://dash.cloudflare.com/sign-up/pages\">you can sign up here</a>.</p><p>In our project, let&#39;s create a new function:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// ./functions/time.js\n\n\nexport const onRequest = () =&gt; {\n  return new Response(new Date().toISOString())\n}</pre></code>\n            <p><code>git commit</code>-ing and pushing this file should trigger a build and deployment of your first Pages function. Any requests for <code>/time</code> will be served by this function, and all other requests will fall-back to the static assets of your project. Placing Functions files in directories works as you&#39;d expect: <code>./functions/api/time.js</code> would be available at <code>/api/time</code> and <code>./functions/some_directory/index.js</code> would be available at <code>/some_directory</code>.</p><p>We also support TypeScript (<code>./functions/time.ts</code> would work just the same), as well as parameterized files:</p><ul><li><p><code>./functions/todos/[id].js</code> with single square brackets will match all requests like <code>/todos/123</code>;</p></li><li><p>and <code>./functions/todos/[[path]].js</code> with double square brackets, will match requests for any number of path segments (e.g. <code>/todos/123/subtasks</code>).</p></li></ul><p>We declare a <code>PagesFunction</code> type in the <a href=\"https://github.com/cloudflare/workers-types\">@cloudflare/workers-types</a> library which you can use to type-check your Functions.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"dynamic-data\">Dynamic data</h3>\n      <a href=\"#dynamic-data\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>So, returning to our image-sharing app, let&#39;s assume we already have some images uploaded, and we want to display them on the homepage. We&#39;ll need an endpoint which will return a list of these images, which the front-end can call:</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">// ./functions/api/images.ts\n\nexport const jsonResponse = (value: any, init: ResponseInit = {}) =&gt;\n  new Response(JSON.stringify(value), {\n    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...init.headers },\n    ...init,\n  });\n\nconst generatePreviewURL = ({\n  previewURLBase,\n  imagesKey,\n  isPrivate,\n}: {\n  previewURLBase: string;\n  imagesKey: string;\n  isPrivate: boolean;\n}) =&gt; {\n  // If isPrivate, generates a signed URL for the &#039;preview&#039; variant\n  // Else, returns the &#039;blurred&#039; variant URL which never requires signed URLs\n  // https://developers.cloudflare.com/images/cloudflare-images/serve-images/serve-private-images-using-signed-url-tokens\n\n  return &quot;SIGNED_URL&quot;;\n};\n\nexport const onRequestGet: PagesFunction&lt;{\n  IMAGES: KVNamespace;\n}&gt; = async ({ env }) =&gt; {\n  const { imagesKey } = (await env.IMAGES.get(&quot;setup&quot;, &quot;json&quot;)) as Setup;\n\n  const kvImagesList = await env.IMAGES.list&lt;ImageMetadata&gt;({\n    prefix: `image:uploaded:`,\n  });\n\n  const images = kvImagesList.keys\n    .map((kvImage) =&gt; {\n      try {\n        const { id, previewURLBase, name, alt, uploaded, isPrivate } =\n          kvImage.metadata as ImageMetadata;\n\n        const previewURL = generatePreviewURL({\n          previewURLBase,\n          imagesKey,\n          isPrivate,\n        });\n\n        return {\n          id,\n          previewURL,\n          name,\n          alt,\n          uploaded,\n          isPrivate,\n        };\n      } catch {\n        return undefined;\n      }\n    })\n    .filter((image) =&gt; image !== undefined);\n\n  return jsonResponse({ images });\n};</pre></code>\n            <p>Eagle-eyed readers will notice we&#39;re exporting <code>onRequestGet</code> which lets us only respond to <code>GET</code> requests.</p><p>We&#39;re also using a KV namespace (accessed with <code>env.IMAGES</code>) to store information about images that have been uploaded. To create a binding in your Pages project, navigate to the &quot;Settings&quot; tab.</p><p>![](<a href=\"/content/images/2021/11/unnamed-15.png_REGULAR\">/content/images/2021/11/unnamed-15.png_REGULAR</a> &quot;Screenshot of the &quot;Functions&quot; page on the Pages project &quot;Settings&quot; tab in the Cloudflare dashboard&quot;)</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"interfacing-with-other-apis\">Interfacing with other APIs</h3>\n      <a href=\"#interfacing-with-other-apis\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare Images is an inexpensive, high-performance, and featureful service for hosting and transforming images. You can create multiple variants to render your images in different ways and control access with signed URLs. We&#39;ll add a function to interface with this service&#39;s API and upload incoming files to Cloudflare Images:</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">// ./functions/api/admin/upload.ts\n\nexport const onRequestPost: PagesFunction&lt;{\n  IMAGES: KVNamespace;\n}&gt; = async ({ request, env }) =&gt; {\n  const { apiToken, accountId } = (await env.IMAGES.get(\n    &quot;setup&quot;,\n    &quot;json&quot;\n  )) as Setup;\n\n  // Prepare the Cloudflare Images API request body\n  const formData = await request.formData();\n  formData.set(&quot;requireSignedURLs&quot;, &quot;true&quot;);\n  const alt = formData.get(&quot;alt&quot;) as string;\n  formData.delete(&quot;alt&quot;);\n  const isPrivate = formData.get(&quot;isPrivate&quot;) === &quot;on&quot;;\n  formData.delete(&quot;isPrivate&quot;);\n\n  // Upload the image to Cloudflare Images\n  const response = await fetch(\n    `https://api.cloudflare.com/client/v4/accounts/${accountId}/images/v1`,\n    {\n      method: &quot;POST&quot;,\n      body: formData,\n      headers: {\n        Authorization: `Bearer ${apiToken}`,\n      },\n    }\n  );\n\n  // Store the image metadata in KV\n  const {\n    result: {\n      id,\n      filename: name,\n      uploaded,\n      variants: [url],\n    },\n  } = await response.json&lt;{\n    result: {\n      id: string;\n      filename: string;\n      uploaded: string;\n      requireSignedURLs: boolean;\n      variants: string[];\n    };\n  }&gt;();\n\n  const metadata: ImageMetadata = {\n    id,\n    previewURLBase: url.split(&quot;/&quot;).slice(0, -1).join(&quot;/&quot;),\n    name,\n    alt,\n    uploaded,\n    isPrivate,\n  };\n\n  await env.IMAGES.put(\n    `image:uploaded:${uploaded}`,\n    &quot;Values stored in metadata.&quot;,\n    { metadata }\n  );\n  await env.IMAGES.put(`image:${id}`, JSON.stringify(metadata));\n\n  return jsonResponse(true);\n};</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"persisting-data\">Persisting data</h3>\n      <a href=\"#persisting-data\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We&#39;re already using KV to store information that is read often but rarely written to. What about features that require a bit more synchronicity?</p><p>Let&#39;s add a download counter to each of our images. We can create a <code>highres</code> variant in Cloudflare Images, and increment the counter every time a user requests a link. This requires a bit more setup, but unlocking the power of Durable Objects in your projects is absolutely worth it.</p><p>We&#39;ll need to create and publish the Durable Object class capable of maintaining this download count:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">// ./durable_objects/downloadCounter.js\nts#example---counter\n\nexport class DownloadCounter {\n  constructor(state) {\n    this.state = state;\n    // `blockConcurrencyWhile()` ensures no requests are delivered until initialization completes.\n    this.state.blockConcurrencyWhile(async () =&gt; {\n      let stored = await this.state.storage.get(&quot;value&quot;);\n      this.value = stored || 0;\n    });\n  }\n\n  async fetch(request) {\n    const url = new URL(request.url);\n    let currentValue = this.value;\n\n    if (url.pathname === &quot;/increment&quot;) {\n      currentValue = ++this.value;\n      await this.state.storage.put(&quot;value&quot;, currentValue);\n    }\n\n    return jsonResponse(currentValue);\n  }\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"middleware\">Middleware</h3>\n      <a href=\"#middleware\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you need to execute some code (such as authentication or logging) before you run your function, Pages offers easy-to-use middleware which can be applied at any level in your file-based routing. By creating a <code>_middleware.ts</code> file in a directory, we know to first run this file, and then execute your function when <code>next()</code> is called.</p><p>In our application, we want to prevent unauthorized users from uploading images (<code>/api/admin/upload</code>) or deleting images (<code>/api/admin/delete</code>). Cloudflare Access lets us apply <a href=\"https://www.cloudflare.com/learning/access-management/role-based-access-control-rbac/\">role-based access control</a> to all or part of our application, and you only need a single file to integrate it into our serverless functions. We create  <code>./functions/api/admin/_middleware.ts</code> which will apply to all incoming requests at <code>/api/admin/*</code>:</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">// ./functions/api/admin/_middleware.ts\n\nconst validateJWT = async (jwtAssertion: string | null, aud: string) =&gt; {\n  // If the JWT is valid, return the JWT payload\n  // Else, return false\n  // https://developers.cloudflare.com/cloudflare-one/identity/users/validating-json\n\n  return jwtPayload;\n};\n\nconst cloudflareAccessMiddleware: PagesFunction&lt;{ IMAGES: KVNamespace }&gt; =\n  async ({ request, env, next, data }) =&gt; {\n    const { aud } = (await env.IMAGES.get(&quot;setup&quot;, &quot;json&quot;)) as Setup;\n\n    const jwtPayload = await validateJWT(\n      request.headers.get(&quot;CF-Access-JWT-Assertion&quot;),\n      aud\n    );\n\n    if (jwtPayload === false)\n      return new Response(&quot;Access denied.&quot;, { status: 403 });\n\n    // We could also use the data object to pass information between middlewares\n    data.user = jwtPayload.email;\n\n    return await next();\n  };\n\nexport const onRequest = [cloudflareAccessMiddleware];</pre></code>\n            <p>Middleware is a powerful tool at your disposal allowing you to easily protect parts of your application with Cloudflare Access, or quickly integrate with observability and error logging platforms such as Honeycomb and Sentry.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"integrating-as-jamstack\">Integrating as Jamstack</h2>\n      <a href=\"#integrating-as-jamstack\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The &quot;Jam&quot; of &quot;Jamstack&quot; stands for JavaScript, API and Markup. Cloudflare Pages previously provided the &#39;J&#39; and &#39;M&#39;, and with Workers in the middle, you can truly go full-stack Jamstack.</p><p>We&#39;ve built the front end of this image sharing platform with <a href=\"https://create-react-app.dev/\">Create React App</a> as an approachable example, but <a href=\"https://developers.cloudflare.com/pages/platform/build-configuration#framework-presets\">Cloudflare Pages natively integrates with an ever-growing number of frameworks</a> (currently 23), and you can always <a href=\"https://developers.cloudflare.com/pages/platform/build-configuration#build-commands-and-directories\">configure your own entirely custom build command</a>.</p><p>Your front end simply needs to make a call to the Functions we&#39;ve already configured, and render out that data. We&#39;re using <a href=\"https://swr.vercel.app/\">SWR</a> to simplify things, but you could do this with entirely vanilla JavaScript <code>fetch</code>-es, if that&#39;s your preference.</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">// ./src/components/ImageGrid.tsx\n\nexport const ImageGrid = () =&gt; {\n  const { data, error } = useSWR&lt;{ images: Image[] }&gt;(&quot;/api/images&quot;);\n\n  if (error || data === undefined) {\n    return &lt;div&gt;An unexpected error has occurred when fetching the list of images. Please try again.&lt;/div&gt;;\n  }\n\n\n  return (\n    &lt;div&gt;\n      {data.images.map((image) =&gt; (\n        &lt;ImageCard image={image} key={image.id} /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h2 id=\"local-development\">Local development</h2>\n      <a href=\"#local-development\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>No matter how fast it is, iterating on a project like this can be painful if you have to push up every change in order to test how it works. We&#39;ve released a first-class integration with wrangler for local development of Pages projects, including full support for Functions, Workers, secrets, environment variables and KV. Durable Objects support is coming soon.</p><p>Install from npm:</p>\n            <pre class=\"language-sh\"><code class=\"language-sh\">npm install wrangler@beta</pre></code>\n            <p>and either serve a folder of static assets, or proxy your existing tooling:</p>\n            <pre class=\"language-sh\"><code class=\"language-sh\"># Serve a directory\nnpx wrangler pages dev ./public\n\n# or integrate with your other tools\nnpx wrangler pages dev -- npx react-scripts start</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h2 id=\"go-forth-and-build\">Go forth, and build!</h2>\n      <a href=\"#go-forth-and-build\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>If you like puppies, <a href=\"https://images.pages.dev/\">we&#39;ve deployed our image-sharing application here</a>, and if you like code, <a href=\"https://github.com/cloudflare/images.pages.dev\">that&#39;s over on GitHub</a>. Feel free to fork and deploy it yourself! There&#39;s a five-minute setup wizard, and you&#39;ll need Cloudflare Images, Access, Workers, and Durable Objects.</p><p>We are so excited about the future of the Pages platform, and we want to hear what you&#39;re building! Show off your full-stack applications in the <a href=\"https://discord.com/channels/595317990191398933/783765338692386886\">#what-i-built channel</a>, or get assistance in the <a href=\"https://discord.com/channels/595317990191398933/789155108529111069\">#pages-help channel</a> on <a href=\"https://discord.gg/cloudflaredev\">our Discord server</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3FMhGC7kxjUEspTnvUGjeQ/50a9a9bd201ed390f1f62c72bc9e2cb4/image1-37.png\" alt=\"\" class=\"kg-image\" width=\"1800\" height=\"578\" loading=\"lazy\"/>\n            \n            </figure>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"watch-on-cloudflare-tv\">Watch on Cloudflare TV</h3>\n      <a href=\"#watch-on-cloudflare-tv\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <!--kg-card-begin: html--><div style=\"position: relative; padding-top: 56.25%;\"><iframe src=\"https://iframe.videodelivery.net/828f64562ca22e4c9e0deb17a8a3df22?preload=true&poster=https%3A%2F%2Fvideodelivery.net%2F828f64562ca22e4c9e0deb17a8a3df22%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D0m5s%26height%3D600\" style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\" allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\" allowfullscreen=\"true\"></iframe></div><!--kg-card-end: html--><p></p>",
		"id": "48ToA8dVaTtXmVL58V9bJm",
		"localeList": {
			"name": "Building a full stack application with Cloudflare Pages Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Full-stack support for Cloudflare Pages is now in open beta, and you can test it today with this example image-sharing project that integrates with KV, Durable Objects, Cloudflare Images and Cloudflare Access. ",
		"metadata": {
			"title": "Building a full stack application with Cloudflare Pages",
			"description": "Full-stack support for Cloudflare Pages is now in open beta, and you can test it today with this example image-sharing project that integrates with KV, Durable Objects, Cloudflare Images and Cloudflare Access. ",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5HF2PYBTqNp4r4EfJ0nxnd/45099c9af6ae88c9c4c5aafed769ed4b/building-full-stack-with-pages-gd6LXR.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-11-17T13:58:53.000+00:00",
		"slug": "building-full-stack-with-pages",
		"tags": [
			{
				"id": "4Q1oXZOskZczYetWpWXIsl",
				"name": "Full Stack Week",
				"slug": "full-stack-week"
			},
			{
				"id": "3kr4meEhp1NrKwm01XXeqk",
				"name": "Cloudflare Pages",
				"slug": "cloudflare-pages"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "6Irshc0o9CUpLTphYWQ5mH",
				"name": "Full Stack",
				"slug": "full-stack"
			},
			{
				"id": "5rBdsRv4kKPXGL1ECAZu9a",
				"name": "Cloudflare Images",
				"slug": "cloudflare-images"
			},
			{
				"id": "6c9EM6c5poinGKIR6xldFo",
				"name": "Cloudflare Access",
				"slug": "cloudflare-access"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Building a full stack application with Cloudflare Pages",
		"updated_at": "2025-10-03T19:27:30.566Z",
		"url": "https://blog.cloudflare.com/building-full-stack-with-pages"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}