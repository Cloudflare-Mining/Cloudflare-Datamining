{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "6",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Oxana Kharitonova",
				"slug": "oxana",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3VMs5mLnM2JGDuB1x0sRSE/957ab30efef528d9fa8ccf73f1c20242/oxana.png",
				"location": "London",
				"website": null,
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "If you run your software on Linux, the Linux Kernel itself can satisfy all your cryptographic needs! In this post we will explore Linux Crypto API for user applications and try to understand its pros and cons",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6fDtCT19zWjmnK0VWxEToG/62cb0decee2c39c990c2a2c84f6ddef7/the-linux-crypto-api-for-user-applications.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6o7ZLXKVXmuq5yaRC7sdbe/cef8a48e2dead5815f187b829103622d/Screenshot_2024-08-26_at_6.21.48_PM.png\" alt=\"The Linux Crypto API for user applications.\" class=\"kg-image\" width=\"1512\" height=\"846\" loading=\"lazy\"/>\n            \n            </figure><p>In this post we will explore Linux Crypto API for user applications and try to understand its pros and cons.</p><p>The Linux Kernel Crypto API was introduced in <a href=\"https://lwn.net/Articles/14197/\">October 2002</a>. It was initially designed to satisfy internal needs, mostly for <a href=\"https://www.cloudflare.com/learning/network-layer/what-is-ipsec/\">IPsec</a>. However, in addition to the kernel itself, user space applications can benefit from it.</p><p>If we apply the basic definition of an <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api/\">API</a> to our case, we will have the kernel on one side and our application on the other. The application needs to send data, i.e. plaintext or ciphertext, and get encrypted/decrypted text in response from the kernel. To communicate with the kernel we need to make a system call. Also, before starting the data exchange, we need to agree on some cryptographic parameters, at least the selected crypto algorithm and key length. These constraints, along with all supported algorithms, can be found in the <code>/proc/crypto</code> virtual file.</p><p>Below is a short excerpt from my <code>/proc/crypto</code> looking at <code>ctr(aes)</code>. In the examples, we will use the AES cipher in CTR mode, further we will give more details about the algorithm itself.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">name         : ctr(aes)\ndriver       : ctr(aes-generic)\nmodule       : ctr\npriority     : 100\nrefcnt       : 1\nselftest     : passed\ninternal     : no\ntype         : skcipher\nasync        : no\nblocksize    : 1\nmin keysize  : 16\nmax keysize  : 32\nivsize       : 16\nchunksize    : 16\nwalksize     : 16\n\n\nname         : ctr(aes)\ndriver       : ctr(aes-aesni)\nmodule       : ctr\npriority     : 300\nrefcnt       : 1\nselftest     : passed\ninternal     : no\ntype         : skcipher\nasync        : no\nblocksize    : 1\nmin keysize  : 16\nmax keysize  : 32\nivsize       : 16\nchunksize    : 16\nwalksize     : 16\n\n\nname         : ctr(aes)\ndriver       : ctr-aes-aesni\nmodule       : aesni_intel\npriority     : 400\nrefcnt       : 1\nselftest     : passed\ninternal     : no\ntype         : skcipher\nasync        : yes\nblocksize    : 1\nmin keysize  : 16\nmax keysize  : 32\nivsize       : 16\nchunksize    : 16\nwalksize     : 16</pre></code>\n            <p>In the output above, there are three config blocks. The kernel may provide several implementations of the same algorithm depending on the CPU architecture, available hardware, presence of crypto accelerators etc.</p><p>We can pick the implementation based on the algorithm name or the driver name. The algorithm name is not unique, but the driver name is. If we use the algorithm name, the driver with the highest priority will be chosen for us, which in theory should provide the best cryptographic performance in this context. Let’s see the performance of different implementations of AES-CTR encryption. I use the <a href=\"https://github.com/smuellerDD/libkcapi\">libkcapi library</a>: it’s a lightweight wrapper for the kernel crypto API which also provides built-in speed tests. We will examine <a href=\"https://github.com/smuellerDD/libkcapi/blob/master/speed-test/cryptoperf-skcipher.c#L228-L238\">these tests</a>.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ kcapi-speed -c &quot;AES(G) CTR(G) 128&quot; -b 1024 -t 10\nAES(G) CTR(G) 128   \t|d|\t1024 bytes|          \t149.80 MB/s|153361 ops/s\nAES(G) CTR(G) 128   \t|e|\t1024 bytes|          \t159.76 MB/s|163567 ops/s\n \n$ kcapi-speed -c &quot;AES(AESNI) CTR(ASM) 128&quot; -b 1024 -t 10\nAES(AESNI) CTR(ASM) 128 |d|\t1024 bytes|          \t343.10 MB/s|351332 ops/s\nAES(AESNI) CTR(ASM) 128 |e|\t1024 bytes|         \t310.100 MB/s|318425 ops/s\n \n$ kcapi-speed -c &quot;AES(AESNI) CTR(G) 128&quot; -b 1024 -t 10\nAES(AESNI) CTR(G) 128   |d|\t1024 bytes|          \t155.37 MB/s|159088 ops/s\nAES(AESNI) CTR(G) 128   |e|\t1024 bytes|          \t172.94 MB/s|177054 ops/s</pre></code>\n            <p>Here and later ignore the absolute numbers, as they depend on the environment where the tests were running. Rather look at the relationship between the numbers.</p><p>The <a href=\"https://en.wikipedia.org/wiki/AES_instruction_set\">x86 AES instructions</a> showed the best results, twice as fast vs the generic portable C implementation. As expected, this implementation has the highest priority in the <code>/proc/crypto</code>. We will use only this one later.</p><p>This brief introduction can be rephrased as: “I can ask the kernel to encrypt or decrypt data from my application”. But, why do I need it?</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"why-do-i-need-it\">Why do I need it?</h2>\n      <a href=\"#why-do-i-need-it\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In our previous blog post <a href=\"/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application/\">Linux Kernel Key Retention Service</a> we talked a lot about cryptographic key protection. We concluded that the best Linux option is to store <a href=\"https://www.cloudflare.com/learning/ssl/what-is-a-cryptographic-key/\">cryptographic keys</a> in the kernel space and restrict the access to a limited number of applications. However, if all our cryptography is processed in user space, potentially damaging code still has access to the raw key material. We have to think wisely about using the key: what part of the code has access to it, don’t log it accidentally, how the open-source libraries manage it and if the memory is purged after using it. We may need to support a dedicated process to not have a key in network-facing code. Thus, many things need to be done for security, and for each application which works with cryptography. And even after all these precautionary measures, the best of the best are subject to bugs and vulnerabilities. <a href=\"https://en.wikipedia.org/wiki/OpenSSL\">OpenSSL</a>, the most known and widely used cryptographic library in user space, <a href=\"/cloudflare-is-not-affected-by-the-openssl-vulnerabilities-cve-2022-3602-and-cve-2022-37/\">has had a few problems in its security</a>.</p><p>Can we move all the cryptography to the kernel and help solve these problems? Looks like it! Our <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7984ceb134bf31aa9a597f10ed52d831d5aede14\">recent patch</a> to upstream extended the key types which can be used in symmetric encryption in the Crypto API directly from the Linux Kernel Key Retention Service.</p><p>But nothing is free. There will be some overhead for the system calls and data copying between user and kernel spaces. So, the next question is how fast it is.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"is-it-fast\">Is it fast?</h2>\n      <a href=\"#is-it-fast\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To answer this question we need to have some baseline to compare with. OpenSSL would be the best as it’s used all around the Internet. OpenSSL provides a good composite of toolkits, including C-functions, a console utility and various speed tests. For the sake of equality, we will ignore the built-in tests and write our own tests using OpenSSL C-functions. We want the same data to be processed and the same logic parts to be measured in both cases (Kernel versus OpenSSL).</p><p>So, the task: write a benchmark for AES-CTR-128 encrypting data split in chunks. Make implementations for the Kernel Crypto API and OpenSSL.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"about-aes-ctr-128\">About AES-CTR-128</h3>\n      <a href=\"#about-aes-ctr-128\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>AES stands for <a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">Advanced Encryption Standard</a>. It is a block cipher algorithm, which means the whole plaintext is split into blocks and two operations are applied: substitution and permutation. There are two parameters characterizing a block cipher: the block size and the key size. AES processes a block of 128 bits using a key of either 128, 192 or 256 bits. Each 128 bits or 16 bytes block is presented as a 4x4 two-dimensional array (matrix), where one element of the matrix presents one byte of the plaintext. To change the plaintext to ciphertext several rounds of transformation are applied: the bits of the block XORs with a key derived from the main key and substitution with permutation are applied to rows and columns of the matrix. There can be 10, 12 or 14 rounds depending on the key size (the key size determines how many keys can be derived from it).</p><p>AES is a secure cipher, but there is one nuance - the same plaintext/block of text will produce the same result. Look at <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_(ECB)\">Linux’s mascot Tux</a>. To avoid this, a <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\">mode of operation</a> (or just mode) has to be applied. It determines how the text changes, so the same input doesn&#39;t result in the same output. Tux was encrypted using ECB mode, there is no text transformation at all. Another mode example is CBC, where the ciphertext from the previously encrypted block is added to the next block, for the first block an initial value (IV) is added. This mode guarantees that for the same input and different IV the output will be different. However, this mode is slow as each block depends on the previous one and so encryption can’t be parallelized. CTR is a counter mode, instead of using previously encrypted blocks it uses a counter and a nonce. A counter is an integer which is incremented for each block. A nonce is just a random number similar to the IV. The nonce, and IV, should be different for each message and can be transferred openly with the encrypted text. So, the title AES-CTR-128 means AES used in CTR mode with the key size of 128 bits.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"implementing-aes-ctr-128-with-the-kernel-crypto-api\">Implementing AES-CTR-128 with the Kernel Crypto API</h3>\n      <a href=\"#implementing-aes-ctr-128-with-the-kernel-crypto-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The kernel and user spaces are isolated for security reasons and each time data needs to be transferred between them, it’s copied. In our case, it would add a significant overhead - copying a big bunch of plain or encrypted text to the kernel and back. However, the crypto API supports a zero-copy interface. Instead of transferring the actual data, a file descriptor is passed. But it has a limitation - the maximum size is only <a href=\"https://www.kernel.org/doc/html/latest/crypto/userspace-if.html#zero-copy-interface\">16 pages</a>. So for our tests we picked the number closest to the maximum limit - 63KB (16 pages of 4KB minus 1KB to avoid any potential edge cases).</p><p>The code below is the exact implementation of what is written in the <a href=\"https://www.kernel.org/doc/html/latest/crypto/userspace-if.html\">kernel documentation</a>. Firstly we created a socket of AF_ALG type. The <code>salg_type</code> and <code>salg_name</code> parameters can be taken from the <code>/proc/crypto</code> file. Instead of a generic name we used the driver name <code>ctr-aes-aesni</code>. We might put just a name <code>ctr(aes)</code> and the driver with the highest priority (<code>ctr-aes-aesni</code> in our context) will be picked for us by the Kernel. Further we put the key length and accepted the socket. The IV size is provided before the payload as ancillary data. Constraints of the key and IV sizes can be found in <code>/proc/crypto</code> too.</p><p>Now we are ready to start communication. We excluded all pre-set up steps from the measurements. In a loop we send plaintext for encryption with the flag <code>SPLICE_F_MORE</code> to inform the kernel that more data will be provided. And here in the loop we <code>read</code> the cipher text from the kernel. The last plaintext should be sent without the flag thus saying that we are done, and the kernel can finalize the encryption.</p><p>In favor of brevity, error handling is omitted in both examples.</p><p>kernel.c</p>\n            <pre class=\"language-cpp\"><code class=\"language-cpp\">#define _GNU_SOURCE\n\n#include &lt;stdint.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n\n#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;time.h&gt;\n#include &lt;sys/random.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;linux/if_alg.h&gt;\n\n#define PT_LEN (63 * 1024)\n#define CT_LEN PT_LEN\n#define IV_LEN 16\n#define KEY_LEN 16\n#define ITER_COUNT 100000\n\nstatic uint8_t pt[PT_LEN];\nstatic uint8_t ct[CT_LEN];\nstatic uint8_t key[KEY_LEN];\nstatic uint8_t iv[IV_LEN];\n\nstatic void time_diff(struct timespec *res, const struct timespec *start, const struct timespec *end)\n{\n    res-&gt;tv_sec = end-&gt;tv_sec - start-&gt;tv_sec;\n    res-&gt;tv_nsec = end-&gt;tv_nsec - start-&gt;tv_nsec;\n    if (res-&gt;tv_nsec &lt; 0) {\n        res-&gt;tv_sec--;\n        res-&gt;tv_nsec += 1000000000;\n    }\n}\n\nint main(void)\n{\n    // Fill the test data\n    getrandom(key, sizeof(key), GRND_NONBLOCK);\n    getrandom(iv, sizeof(iv), GRND_NONBLOCK);\n    getrandom(pt, sizeof(pt), GRND_NONBLOCK);\n\n    // Set up AF_ALG socket\n    int alg_s, aes_ctr;\n    struct sockaddr_alg sa = { .salg_family = AF_ALG };\n    strcpy(sa.salg_type, &quot;skcipher&quot;);\n    strcpy(sa.salg_name, &quot;ctr-aes-aesni&quot;);\n\n    alg_s = socket(AF_ALG, SOCK_SEQPACKET, 0);\n    bind(alg_s, (const struct sockaddr *)&amp;sa, sizeof(sa));\n    setsockopt(alg_s, SOL_ALG, ALG_SET_KEY, key, KEY_LEN);\n    aes_ctr = accept(alg_s, NULL, NULL);\n    close(alg_s);\n\n    // Set up IV\n    uint8_t cmsg_buf[CMSG_SPACE(sizeof(uint32_t)) + CMSG_SPACE(sizeof(struct af_alg_iv) + IV_LEN)] = {0};\n    struct msghdr msg = {\n\t.msg_control = cmsg_buf,\n\t.msg_controllen = sizeof(cmsg_buf)\n    };\n\n    struct cmsghdr *cmsg = CMSG_FIRSTHDR(&amp;msg);\n    cmsg-&gt;cmsg_len = CMSG_LEN(sizeof(uint32_t));\n    cmsg-&gt;cmsg_level = SOL_ALG;\n    cmsg-&gt;cmsg_type = ALG_SET_OP;\n    *((uint32_t *)CMSG_DATA(cmsg)) = ALG_OP_ENCRYPT;\n    \n    cmsg = CMSG_NXTHDR(&amp;msg, cmsg);\n    cmsg-&gt;cmsg_len = CMSG_LEN(sizeof(struct af_alg_iv) + IV_LEN);\n    cmsg-&gt;cmsg_level = SOL_ALG;\n    cmsg-&gt;cmsg_type = ALG_SET_IV;\n    ((struct af_alg_iv *)CMSG_DATA(cmsg))-&gt;ivlen = IV_LEN;\n    memcpy(((struct af_alg_iv *)CMSG_DATA(cmsg))-&gt;iv, iv, IV_LEN);\n    sendmsg(aes_ctr, &amp;msg, 0);\n\n    // Set up pipes for using zero-copying interface\n    int pipes[2];\n    pipe(pipes);\n\n    struct iovec pt_iov = {\n        .iov_base = pt,\n        .iov_len = sizeof(pt)\n    };\n\n    struct timespec start, end;\n    clock_gettime(CLOCK_MONOTONIC, &amp;start);\n    \n    int i;\n    for (i = 0; i &lt; ITER_COUNT; i++) {\n        vmsplice(pipes[1], &amp;pt_iov, 1, SPLICE_F_GIFT);\n        // SPLICE_F_MORE means more data will be coming\n        splice(pipes[0], NULL, aes_ctr, NULL, sizeof(pt), SPLICE_F_MORE);\n        read(aes_ctr, ct, sizeof(ct));\n    }\n    vmsplice(pipes[1], &amp;pt_iov, 1, SPLICE_F_GIFT);\n    // A final call without SPLICE_F_MORE\n    splice(pipes[0], NULL, aes_ctr, NULL, sizeof(pt), 0);\n    read(aes_ctr, ct, sizeof(ct));\n    \n    clock_gettime(CLOCK_MONOTONIC, &amp;end);\n\n    close(pipes[0]);\n    close(pipes[1]);\n    close(aes_ctr);\n\n    struct timespec diff;\n    time_diff(&amp;diff, &amp;start, &amp;end);\n    double tput_krn = ((double)ITER_COUNT * PT_LEN) / (diff.tv_sec + (diff.tv_nsec * 0.000000001 ));\n    printf(&quot;Kernel: %.02f Mb/s\\n&quot;, tput_krn / (1024 * 1024));\n    \n    return 0;\n}</pre></code>\n            <p>Compile and run:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ gcc -o kernel kernel.c\n$ ./kernel\nKernel: 2112.49 Mb/s</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"implementing-aes-ctr-128-with-openssl\">Implementing AES-CTR-128 with OpenSSL</h3>\n      <a href=\"#implementing-aes-ctr-128-with-openssl\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With OpenSSL everything is straight forward, we just repeated an example from the <a href=\"https://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption#Encrypting_the_message\">official documentation</a>.</p><p>openssl.c</p>\n            <pre class=\"language-cpp\"><code class=\"language-cpp\">#include &lt;time.h&gt;\n#include &lt;sys/random.h&gt;\n#include &lt;openssl/evp.h&gt;\n\n#define PT_LEN (63 * 1024)\n#define CT_LEN PT_LEN\n#define IV_LEN 16\n#define KEY_LEN 16\n#define ITER_COUNT 100000\n\nstatic uint8_t pt[PT_LEN];\nstatic uint8_t ct[CT_LEN];\nstatic uint8_t key[KEY_LEN];\nstatic uint8_t iv[IV_LEN];\n\nstatic void time_diff(struct timespec *res, const struct timespec *start, const struct timespec *end)\n{\n    res-&gt;tv_sec = end-&gt;tv_sec - start-&gt;tv_sec;\n    res-&gt;tv_nsec = end-&gt;tv_nsec - start-&gt;tv_nsec;\n    if (res-&gt;tv_nsec &lt; 0) {\n        res-&gt;tv_sec--;\n        res-&gt;tv_nsec += 1000000000;\n    }\n}\n\nint main(void)\n{\n    // Fill the test data\n    getrandom(key, sizeof(key), GRND_NONBLOCK);\n    getrandom(iv, sizeof(iv), GRND_NONBLOCK);\n    getrandom(pt, sizeof(pt), GRND_NONBLOCK);\n\n    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();\n    EVP_EncryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, key, iv);\n\n    int outl = sizeof(ct);\n    \n    struct timespec start, end;\n    clock_gettime(CLOCK_MONOTONIC, &amp;start);\n\n    int i;\n    for (i = 0; i &lt; ITER_COUNT; i++) {\n        EVP_EncryptUpdate(ctx, ct, &amp;outl, pt, sizeof(pt));\n    }\n    uint8_t *ct_final = ct + outl;\n    outl = sizeof(ct) - outl;\n    EVP_EncryptFinal_ex(ctx, ct_final, &amp;outl);\n\n    clock_gettime(CLOCK_MONOTONIC, &amp;end);\n\n    EVP_CIPHER_CTX_free(ctx);\n\n    struct timespec diff;\n    time_diff(&amp;diff, &amp;start, &amp;end);\n    double tput_ossl = ((double)ITER_COUNT * PT_LEN) / (diff.tv_sec + (diff.tv_nsec * 0.000000001 ));\n    printf(&quot;OpenSSL: %.02f Mb/s\\n&quot;, tput_ossl / (1024 * 1024));\n\n    return 0;\n}</pre></code>\n            <p>Compile and run:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ gcc -o openssl openssl.c -lcrypto\n$ ./openssl\nOpenSSL: 3758.60 Mb/s</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"results-of-openssl-vs-crypto-api\">Results of OpenSSL vs Crypto API</h3>\n      <a href=\"#results-of-openssl-vs-crypto-api\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n            <pre class=\"language-bash\"><code class=\"language-bash\">OpenSSL: 3758.60 Mb/s\nKernel: 2112.49 Mb/s</pre></code>\n            <p>Don’t pay attention to the absolute values, look at the relationship.</p><p>The numbers look pessimistic. But why? Can&#39;t the kernel implement AES-CTR similar to OpenSSL? We used <a href=\"https://github.com/iovisor/bpftrace/blob/master/docs/tutorial_one_liners.md\">bpftrace</a> to understand this better. The encryption function is called on the <code>read()</code> system call. Trying to be as close to the encryption code as possible, we put a probe on the <a href=\"https://elixir.bootlin.com/linux/v5.15.90/source/arch/x86/crypto/aesni-intel_glue.c#L1027\">ctr_crypt function</a> instead of the whole <code>read</code> call.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ sudo bpftrace -e &#039;kprobe:ctr_crypt { @start=nsecs; @count+=1; } kretprobe:ctr_crypt /@start!=0/ { @total+=nsecs-@start; }&#039;</pre></code>\n            <p>We took the same plaintext, encrypted it in chunks of 63KB and measured how much time it took for both cases to encrypt it with <code>bpftrace</code> attached to the kernel:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">OpenSSL: 1 sec 650532178 nsec\nKernel: 3 sec 120442931 nsec // 3120442931 ns\nOpenSSL: 3727.49 Mb/s\nKernel: 1971.63 Mb/s\n\n@total: 2031169756     //  2031169756 / 3120442931 = 0.6509235390339526</pre></code>\n            <p>The <code>@total</code> number is output from bpftrace, which tells us how much time the kernel spent in the encryption function. To compare plain kernel encryption vs OpenSSL we need to say how many Mb/s kernel would have done if only encryption had been involved (excluding all system calls and data copy/ manipulation). We need to apply some math:</p><ol><li><p>The correlation between the total time and the time which the kernel spent in the encryption is <code>2031169756 / 3120442931 = 0.6509235390339526</code> or 65%.</p></li><li><p>So throughput would be <code>1971.63 / 0.650923539033952</code> - 3028.97 Mb/s. Comparing this to OpenSSL Mb/s we get <code>3028.97 / 3727.49</code>, so around 81%.</p></li></ol><p>It would be fair to say that <code>bpftrace</code> adds some overhead and our numbers for the kernel are less than they could be. So, we can safely say that while the Kernel Crypto API is two times slower than OpenSSL, the crypto part itself is almost equal.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"conclusion\">Conclusion</h2>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>In this post we reviewed the Linux Kernel Crypto API and its user space interface. We reiterated some security benefits of doing encryption through the Kernel vs using some sort of cryptographic library. We also measured the performance overhead of doing data encryption/decryption through the Kernel Crypto API, confirmed that in-kernel crypto is likely as good as in OpenSSL, but a better user space interface is needed to make Kernel Crypto API as fast as using a cryptographic library. Using Crypto API is a subjective decision depending on your circumstances, it’s a trade-off in speed vs. security.</p>",
		"id": "TZcwKRTxODYQJEEXgDegx",
		"localeList": {
			"name": "The Linux Crypto API for user applications Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "If you run your software on Linux, the Linux Kernel itself can satisfy all your cryptographic needs! In this post we will explore Linux Crypto API for user applications and try to understand its pros and cons.",
		"metadata": {
			"title": "The Linux Crypto API for user applications",
			"description": "If you run your software on Linux, the Linux Kernel itself can satisfy all your cryptographic needs! In this post we will explore Linux Crypto API for user applications and try to understand its pros and cons.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5GlBHRbrEexpPmlolFr392/1e12515fe264496a2c46e87ef68d3485/the-linux-crypto-api-for-user-applications-cgkVyY.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2023-05-11T14:00:58.000+01:00",
		"slug": "the-linux-crypto-api-for-user-applications",
		"tags": [
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "73alK6sbtKLS6uB7ZrYrjj",
				"name": "Kernel",
				"slug": "kernel"
			}
		],
		"title": "The Linux Crypto API for user applications",
		"updated_at": "2025-10-03T19:00:48.439Z",
		"url": "https://blog.cloudflare.com/the-linux-crypto-api-for-user-applications"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}