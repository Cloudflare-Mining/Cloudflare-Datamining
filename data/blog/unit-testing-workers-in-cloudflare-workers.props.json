{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "2",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Tim Obezuk",
				"slug": "tim-obezuk",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7zW9KVuP70DT82EdTzDZcd/29217c1a0519e99fa093296815d27bd7/tim-obezuk.jpeg",
				"location": null,
				"website": null,
				"twitter": "@obezuk",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "We recently wrote about unit testing Cloudflare Workers within a mock environment using CloudWorker (a Node.js based mock Cloudflare Worker environment created by Dollar Shave Club's engineering team). See Unit Testing Worker Functions.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/69nNlP5KONrdn9Agy4zcYS/bd633c2b1c06ee898782fcb192cb82b6/unit-testing-workers-in-cloudflare-workers.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/V9gw5j3U7OqRNSvpw10sX/ce740ff0fdcf531a8242be039d699329/terminal-worker-1.png\" alt=\"\" class=\"kg-image\" width=\"1198\" height=\"750\" loading=\"lazy\"/>\n            \n            </figure><p>We recently wrote about unit testing Cloudflare Workers within a mock environment using CloudWorker (a Node.js based mock Cloudflare Worker environment created by Dollar Shave Club&#39;s engineering team). <a href=\"/unit-testing-worker-functions/\">See Unit Testing Worker Functions.</a></p><p>Even though Cloudflare Workers deploy globally within seconds, software developers often choose to use local mock environments to have the fastest possible feedback loop while developing on their local machines. CloudWorker is perfect for this use case but as it is still a mock environment it does not guarantee an identical runtime or environment with all Cloudflare Worker APIs and features. This gap can make developers uneasy as they do not have 100% certainty that their tests will succeed in the production environment.</p><p>In this post, we&#39;re going to demonstrate how to generate a Cloudflare Worker compatible test harness which can execute mocha unit tests directly in the production Cloudflare environment.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"directory-setup\">Directory Setup</h2>\n            <a href=\"#directory-setup\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>Create a new folder for your project, change it to your working directory and run <code>npm init</code> to initialise the <code>package.json</code> file.</p><p>Run <code>mkdir -p src &amp;&amp; mkdir -p test/lib &amp;&amp; mkdir dist</code> to create folders used by the next steps. Your folder should look like this:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">.\n./dist\n./src/worker.js\n./test\n./test/lib\n./package.json</pre></code>\n            <p><code>npm install --save-dev mocha exports-loader webpack webpack-cli</code></p><p>This will install Mocha (the unit testing framework), Webpack (a tool used to package the code into a single Worker script) and Exports Loader (a tool used by Webpack to import the Worker script into the Worker based Mocha environment.</p><p><code>npm install --save-dev git+https://github.com/obezuk/mocha-loader.git</code></p><p>This will install a modified version of Webpack&#39;s mocha loader. It has been modified to support the Web Worker environment type. We are excited to see Web Worker support merged into Mocha Loader so please vote for our pull request here: <a href=\"https://github.com/webpack-contrib/mocha-loader/pull/77\">https://github.com/webpack-contrib/mocha-loader/pull/77</a></p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"example-script\"><b>Example Script</b></h3>\n            <a href=\"#example-script\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Create your Worker script in <code>./src/worker.js</code>:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener(&#039;fetch&#039;, event =&gt; {\n event.respondWith(handleRequest(event.request))\n})\n\nasync function addition(a, b) {\n  return a + b\n}\n\nasync function handleRequest(request) {\n  const added = await addition(1,3)\n  return new Response(`The Sum is ${added}!`)\n}</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"add-tests\">Add Tests</h3>\n            <a href=\"#add-tests\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Create your unit tests in <code>./test/test.test.js</code>:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const assert = require(&#039;assert&#039;)\n\ndescribe(&#039;Worker Test&#039;, function() {\n\n    it(&#039;returns a body that says The Sum is 4&#039;, async function () {\n        let url = new URL(&#039;https://worker.example.com&#039;)\n        let req = new Request(url)\n        let res = await handleRequest(req)\n        let body = await res.text()\n        assert.equal(body, &#039;The Sum is 4!&#039;)\n    })\n\n    it(&#039;does addition properly&#039;, async function() {\n        let res = await addition(1, 1)\n        assert.equal(res, 2)\n    })\n\n})</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h2 id=\"mocha-in-worker-test-harness\">Mocha in Worker Test Harness</h2>\n            <a href=\"#mocha-in-worker-test-harness\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>In order to execute mocha and unit tests within Cloudflare Workers we are going to build a Test Harness. The Test Harness script looks a lot like a normal Worker script but integrates your <code>./src/worker.js</code> and <code>./test/test.test.js</code> into a script which is capable of executing the Mocha unit tests within the Cloudflare Worker runtime.</p><p>Create the below script in <code>./test/lib/serviceworker-mocha-harness.js</code>.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import &#039;mocha&#039;;\n\nimport &#039;mocha-loader!../test.test.js&#039;;\n\nvar testResults;\n\nasync function mochaRun() {\n    return new Promise(function (accept, reject) {\n        var runner = mocha.run(function () {\n            testResults = runner.testResults;\n            accept();\n        });\n    });\n}\n\naddEventListener(&#039;fetch&#039;, event =&gt; {\n    event.respondWith(handleMochaRequest(event.request))\n});\n\nasync function handleMochaRequest(request) {\n\n    if (!testResults) {\n        await mochaRun();\n    }\n\n    var headers = new Headers({\n        &quot;content-type&quot;: &quot;application/json&quot;\n    })\n\n    var statusCode = 200;\n\n    if (testResults.failures != 0) {\n        statusCode = 500;\n    }\n\n    return new Response(JSON.stringify(testResults), {\n        &quot;status&quot;: statusCode,\n        &quot;headers&quot;: headers\n    });\n\n}\n\nObject.assign(global, require(&#039;exports-loader?handleRequest,addition!../../src/worker.js&#039;));\n</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"mocha-webpack-configuration\">Mocha Webpack Configuration</h3>\n            <a href=\"#mocha-webpack-configuration\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Create a new file in the project root directory called: <code>./webpack.mocha.config.js</code>. This file is used by Webpack to bundle the test harness, worker script and unit tests into a single script that can be deployed to Cloudflare.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">module.exports = {\n  target: &#039;webworker&#039;,\n  entry: &quot;./test/lib/serviceworker-mocha-harness.js&quot;,\n  mode: &quot;development&quot;,\n  optimization: {\n    minimize: false\n  },\n  performance: {\n    hints: false\n  },\n  node: {\n    fs: &#039;empty&#039;\n  },\n  module: {\n    exprContextCritical: false\n  },\n  output: {\n    path: __dirname + &quot;/dist&quot;,\n    publicPath: &quot;dist&quot;,\n    filename: &quot;worker-mocha-harness.js&quot;\n  }\n};\n</pre></code>\n            <p>Your file structure should look like (excluding node_modules):</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">.\n./dist\n./src/worker.js\n./test/test.test.js\n./test/lib/serviceworker-mocha-harness.js\n./package.json\n./package-lock.json\n./webpack.mocha.config.js</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"customising-the-test-harness\"><b>Customising the test harness.</b></h3>\n            <a href=\"#customising-the-test-harness\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>If you wish to extend the test harness to support your own test files you will need to add additional test imports to the top of the script:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import &#039;mocha-loader!/* TEST FILE NAME HERE */&#039;</pre></code>\n            <p>If you wish to import additional functions from your Worker script into the test harness environment you will need to add them comma separated into the last line:</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">Object.assign(global, require(&#039;exports-loader?/* COMMA SEPARATED FUNCTION NAMES HERE */!../../src/worker.js&#039;));</pre></code>\n            <h1><b>Running the test harness</b></h1><p>Deploying and running the test harness is identical to deploying any other Worker script with Webpack.</p><p>Modify the scripts section of package.json to include the build-harness command.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">&quot;scripts&quot;: {\n  &quot;build-harness&quot;: &quot;webpack --config webpack.mocha.config.js -p --progress --colors&quot;\n}</pre></code>\n            <p>In the project root directory run the command <code>npm run build-harness</code> to generate and bundle your Worker script, Mocha and your unit tests into <code>./dist/worker-mocha-harness.js</code>.</p><p>Upload this script to a test Cloudflare workers route and run <code>curl --fail https://test.example.org</code>. If the unit tests are successful it will return a <code>200</code> response, and if the unit tests fail a <code>500</code> response.</p>\n          <div class=\"flex anchor relative\">\n            <h2 id=\"integrating-into-an-existing-ci-cd-pipeline\"><b>Integrating into an existing CI/CD pipeline</b></h2>\n            <a href=\"#integrating-into-an-existing-ci-cd-pipeline\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n          <p>You can integrate Cloudflare Workers and the test harness into your existing CI/CD pipeline by using our API: <a href=\"https://developers.cloudflare.com/workers/api/\">https://developers.cloudflare.com/workers/api/</a>.</p><p>The test harness returns detailed test reports in JSON format:</p><p><b>Example Success Response</b></p>\n            <pre class=\"language-json\"><code class=\"language-json\">{\n  &quot;stats&quot;: {\n    &quot;suites&quot;: 1,\n    &quot;tests&quot;: 2,\n    &quot;passes&quot;: 2,\n    &quot;pending&quot;: 0,\n    &quot;failures&quot;: 0,\n    &quot;start&quot;: &quot;2019-04-23T06:24:33.492Z&quot;,\n    &quot;end&quot;: &quot;2019-04-23T06:24:33.590Z&quot;,\n    &quot;duration&quot;: 98\n  },\n  &quot;tests&quot;: [\n    {\n      &quot;title&quot;: &quot;returns a body that says The Sum is 4&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test returns a body that says The Sum is 4&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {}\n    },\n    {\n      &quot;title&quot;: &quot;does addition properly&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test does addition properly&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {}\n    }\n  ],\n  &quot;pending&quot;: [],\n  &quot;failures&quot;: [],\n  &quot;passes&quot;: [\n    {\n      &quot;title&quot;: &quot;returns a body that says The Sum is 4&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test returns a body that says The Sum is 4&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {}\n    },\n    {\n      &quot;title&quot;: &quot;does addition properly&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test does addition properly&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {}\n    }\n  ]\n}\n</pre></code>\n            <p><b>Example Failure Response</b></p>\n            <pre class=\"language-json\"><code class=\"language-json\">{\n  &quot;stats&quot;: {\n    &quot;suites&quot;: 1,\n    &quot;tests&quot;: 2,\n    &quot;passes&quot;: 0,\n    &quot;pending&quot;: 0,\n    &quot;failures&quot;: 2,\n    &quot;start&quot;: &quot;2019-04-23T06:25:52.100Z&quot;,\n    &quot;end&quot;: &quot;2019-04-23T06:25:52.170Z&quot;,\n    &quot;duration&quot;: 70\n  },\n  &quot;tests&quot;: [\n    {\n      &quot;title&quot;: &quot;returns a body that says The Sum is 4&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test returns a body that says The Sum is 4&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {\n        &quot;name&quot;: &quot;AssertionError&quot;,\n        &quot;actual&quot;: &quot;The Sum is 5!&quot;,\n        &quot;expected&quot;: &quot;The Sum is 4!&quot;,\n        &quot;operator&quot;: &quot;==&quot;,\n        &quot;message&quot;: &quot;&#039;The Sum is 5!&#039; == &#039;The Sum is 4!&#039;&quot;,\n        &quot;generatedMessage&quot;: true,\n        &quot;stack&quot;: &quot;AssertionError: &#039;The Sum is 5!&#039; == &#039;The Sum is 4!&#039;\\n    at Context.&lt;anonymous&gt; (worker.js:19152:16)&quot;\n      }\n    },\n    {\n      &quot;title&quot;: &quot;does addition properly&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test does addition properly&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {\n        &quot;name&quot;: &quot;AssertionError&quot;,\n        &quot;actual&quot;: &quot;3&quot;,\n        &quot;expected&quot;: &quot;2&quot;,\n        &quot;operator&quot;: &quot;==&quot;,\n        &quot;message&quot;: &quot;3 == 2&quot;,\n        &quot;generatedMessage&quot;: true,\n        &quot;stack&quot;: &quot;AssertionError: 3 == 2\\n    at Context.&lt;anonymous&gt; (worker.js:19157:16)&quot;\n      }\n    }\n  ],\n  &quot;pending&quot;: [],\n  &quot;failures&quot;: [\n    {\n      &quot;title&quot;: &quot;returns a body that says The Sum is 4&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test returns a body that says The Sum is 4&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {\n        &quot;name&quot;: &quot;AssertionError&quot;,\n        &quot;actual&quot;: &quot;The Sum is 5!&quot;,\n        &quot;expected&quot;: &quot;The Sum is 4!&quot;,\n        &quot;operator&quot;: &quot;==&quot;,\n        &quot;message&quot;: &quot;&#039;The Sum is 5!&#039; == &#039;The Sum is 4!&#039;&quot;,\n        &quot;generatedMessage&quot;: true,\n        &quot;stack&quot;: &quot;AssertionError: &#039;The Sum is 5!&#039; == &#039;The Sum is 4!&#039;\\n    at Context.&lt;anonymous&gt; (worker.js:19152:16)&quot;\n      }\n    },\n    {\n      &quot;title&quot;: &quot;does addition properly&quot;,\n      &quot;fullTitle&quot;: &quot;Worker Test does addition properly&quot;,\n      &quot;duration&quot;: 0,\n      &quot;currentRetry&quot;: 0,\n      &quot;err&quot;: {\n        &quot;name&quot;: &quot;AssertionError&quot;,\n        &quot;actual&quot;: &quot;3&quot;,\n        &quot;expected&quot;: &quot;2&quot;,\n        &quot;operator&quot;: &quot;==&quot;,\n        &quot;message&quot;: &quot;3 == 2&quot;,\n        &quot;generatedMessage&quot;: true,\n        &quot;stack&quot;: &quot;AssertionError: 3 == 2\\n    at Context.&lt;anonymous&gt; (worker.js:19157:16)&quot;\n      }\n    }\n  ],\n  &quot;passes&quot;: []\n}\n</pre></code>\n            <p>This is really powerful and can allow you to execute your unit tests directly in the Cloudflare runtime, giving you more confidence before releasing your code into production. We hope this was useful and welcome any feedback.</p>",
		"id": "4GyP7beBrpQnvlAr5h8OWn",
		"localeList": {
			"name": "Unit Testing Workers, in Cloudflare Workers Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2019-05-02T14:00:00.000+01:00",
		"slug": "unit-testing-workers-in-cloudflare-workers",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "78aSAeMjGNmCuetQ7B4OgU",
				"name": "JavaScript",
				"slug": "javascript"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Unit Testing Workers, in Cloudflare Workers",
		"updated_at": "2024-10-10T00:32:08.204Z",
		"url": "https://blog.cloudflare.com/unit-testing-workers-in-cloudflare-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}