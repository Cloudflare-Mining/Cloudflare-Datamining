{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "3",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"ja-jp"
	],
	"post": {
		"authors": [
			{
				"name": "Jonathan Kuperman",
				"slug": "jkup",
				"bio": "Developer advocate on the Cloudflare Workers team.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3rPNVsZg5l91raXjDO0J1H/ce6d1dd9ceaf62c3c851e712c7f292d0/jkup.jpeg",
				"location": null,
				"website": "https://jonkuperman.com/",
				"twitter": "@jkup",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Adam Janiš",
				"slug": "adam-janis",
				"bio": "Developer advocate on the Cloudflare Workers team.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/34xEtqcDNnfW4O2wKNecjh/c8847863c1a36797577e5fb2bbcf85aa/adam-janis.png",
				"location": "Lisbon",
				"website": null,
				"twitter": "@adam_janis",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Today, we’re going to build a video application inspired by Cloudflare TV. We’ll have user authentication and the ability for administrators to upload recorded videos or livestream new content. Think about being able to build your own YouTube or Twitch using Cloudflare services!",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4ECxFct5Eh0ugIeFbFjuow/95ffd07798b70cd145c24dc77c3f6ad5/build-video-applications-cloudflare.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/66LTbo5Mv7BV32w4Zxx4tR/0c4a62293ba70daeec2145d234f354b9/rtr3vWNrtk3X2HSUuSSIHvNud8K6WeNHokdbx231vi9-TIC87GeD6QJ6dMR0vlSJF4qFzv-heJHGXFzhVDygIdHsm3Jh0kGw47QyVx8vtmxPVShb8YsE7CqBRaWJ.png\" alt=\"Build your next video application on Cloudflare\" class=\"kg-image\" width=\"1200\" height=\"675\" loading=\"lazy\"/>\n            \n            </figure><p>Historically, building video applications has been very difficult. There&#39;s a lot of complicated tech behind recording, encoding, and playing videos. Luckily, <a href=\"https://www.cloudflare.com/products/cloudflare-stream/\">Cloudflare Stream</a> abstracts all the difficult parts away, so you can build custom video and streaming applications easily. Let&#39;s look at how we can combine Cloudflare Stream, Access, Pages, and Workers to create a high-performance video application with very little code.</p><p>Today, we’re going to build a video application inspired by <a href=\"https://cloudflare.tv/live\">Cloudflare TV</a>. We’ll have user authentication and the ability for administrators to upload recorded videos or livestream new content. Think about being able to build your own YouTube or Twitch using Cloudflare services!</p><!--kg-card-begin: html--><div style=\"position: relative; padding-top: 36.09550561797753%;\"><iframe src=\"https://iframe.videodelivery.net/116d621e621e7884791a88307c8bcc7e?preload=true&poster=https%3A%2F%2Fvideodelivery.net%2F116d621e621e7884791a88307c8bcc7e%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600\" style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\" allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\" allowfullscreen=\"true\"></iframe></div><!--kg-card-end: html-->\n    <div class=\"flex anchor relative\">\n      <h3 id=\"fetching-a-list-of-videos\">Fetching a list of videos</h3>\n      <a href=\"#fetching-a-list-of-videos\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>On the main page of our application, we want to display a list of all videos. The videos are uploaded and stored with Cloudflare Stream, but more on that later! This code could be changed to display only the &quot;trending&quot; videos or a selection of videos chosen for each user. For now, we&#39;ll use the search API and pass in an empty string to return all.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">import { getSignedStreamId } from &quot;../../src/cfStream&quot;\n\nexport async function onRequestGet(context) {\n    const {\n        request,\n        env,\n        params,\n    } = context\n\n    const { id } = params\n\n    if (id) {\n        const res = await fetch(`https://api.cloudflare.com/client/v4/accounts/${env.CF_ACCOUNT_ID}/stream/${id}`, {\n            method: &quot;GET&quot;,\n            headers: {\n                &quot;Authorization&quot;: `Bearer ${env.CF_API_TOKEN_STREAM}`\n            }\n        })\n\n        const video = (await res.json()).result\n\n        if (video.meta.visibility !== &quot;public&quot;) {\n            return new Response(null, {status: 401})\n        }\n\n        const signedId = await getSignedStreamId(id, env.CF_STREAM_SIGNING_KEY)\n\n        return new Response(JSON.stringify({\n            signedId: `${signedId}`\n        }), {\n            headers: {\n                &quot;content-type&quot;: &quot;application/json&quot;\n            }\n        })\n    } else {\n        const url = new URL(request.url)\n        const res = await (await fetch(`https://api.cloudflare.com/client/v4/accounts/${env.CF_ACCOUNT_ID}/stream?search=${url.searchParams.get(&quot;search&quot;) || &quot;&quot;}`, {\n            headers: {\n                &quot;Authorization&quot;: `Bearer ${env.CF_API_TOKEN_STREAM}`\n            }\n        })).json()\n\n        const filteredVideos = res.result.filter(x =&gt; x.meta.visibility === &quot;public&quot;) \n        const videos = await Promise.all(filteredVideos.map(async x =&gt; {\n            const signedId = await getSignedStreamId(x.uid, env.CF_STREAM_SIGNING_KEY)\n            return {\n                uid: x.uid,\n                status: x.status,\n                thumbnail: `https://videodelivery.net/${signedId}/thumbnails/thumbnail.jpg`,\n                meta: {\n                    name: x.meta.name\n                },\n                created: x.created,\n                modified: x.modified,\n                duration: x.duration,\n            }\n        }))\n        return new Response(JSON.stringify(videos), {headers: {&quot;content-type&quot;: &quot;application/json&quot;}})\n    }\n}</pre></code>\n            <p>We&#39;ll go through each video, filter out any private videos, and pull out the metadata we need, such as the thumbnail URL, ID, and created date.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"playing-the-videos\">Playing the videos</h3>\n      <a href=\"#playing-the-videos\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>To allow users to play videos from your application, they need to be public, or you&#39;ll have to sign each request. Marking your videos as public makes this process easier. However, there are many reasons you might want to control access to your videos. If you want users to log in before they play them or the ability to limit access in any way, mark them as private and use signed URLs to control access. You can find more information about securing your videos <a href=\"https://developers.cloudflare.com/stream/viewing-videos/securing-your-stream\">here</a>.</p><p>If you are testing your application locally or expect to have fewer than 10,000 requests per day, you can call the /token endpoint to generate a signed token. If you expect more than 10,000 requests per day, sign your own tokens as we do here using <a href=\"https://jwt.io/\">JSON Web Tokens</a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"allowing-users-to-upload-videos\">Allowing users to upload videos</h3>\n      <a href=\"#allowing-users-to-upload-videos\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The next step is to build out an admin page where users can upload their videos. You can find documentation on allowing user uploads <a href=\"https://developers.cloudflare.com/stream/uploading-videos/direct-creator-uploads\">here</a>.</p><p>This process is made easy with the Cloudflare Stream API. You use your <a href=\"https://developers.cloudflare.com/api/tokens/create\">API token</a> and account ID to generate a unique, one-time upload URL. Just make sure your token has the Stream:Edit permission. We hook into all POST requests from our application and return the generated upload URL.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">export const cfTeamsAccessAuthMiddleware = async ({request, data, env, next}) =&gt; {\n    try {\n        const userEmail = request.headers.get(&quot;cf-access-authenticated-user-email&quot;)\n\n        if (!userEmail) {\n            throw new Error(&quot;User not found, make sure application is behind Cloudflare Access&quot;)\n        }\n  \n        // Pass user info to next handlers\n        data.user = {\n            email: userEmail\n        }\n  \n        return next()\n    } catch (e) {\n        return new Response(e.toString(), {status: 401})\n    }\n}\n\nexport const onRequest = [\n    cfTeamsAccessAuthMiddleware\n]</pre></code>\n            <p>The admin page contains a form allowing users to drag and drop or upload videos from their computers. When a logged-in user hits submit on the upload form, the application generates a unique URL and then posts the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a> to it. This code would work well for building a video sharing site or with any application that allows user-generated content.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">async function getOneTimeUploadUrl() {\n    const res = await fetch(&#039;/api/admin/videos&#039;, {method: &#039;POST&#039;, headers: {&#039;accept&#039;: &#039;application/json&#039;}})\n    const upload = await res.json()\n    return upload.uploadURL\n}\n\nasync function uploadVideo() {\n    const videoInput = document.getElementById(&quot;video&quot;);\n\n    const oneTimeUploadUrl = await getOneTimeUploadUrl();\n    const video = videoInput.files[0];\n    const formData = new FormData();\n    formData.append(&quot;file&quot;, video);\n\n    const uploadResult = await fetch(oneTimeUploadUrl, {\n        method: &quot;POST&quot;,\n        body: formData,\n    })\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"adding-real-time-video-with-stream-live\">Adding real time video with Stream Live</h3>\n      <a href=\"#adding-real-time-video-with-stream-live\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>You can add a <a href=\"https://www.cloudflare.com/developer-platform/solutions/live-streaming/\">livestreaming</a> section to your application as well, using <a href=\"/stream-live/\">Stream Live</a> in conjunction with the techniques we&#39;ve already covered.  You could allow logged-in users to start a broadcast and then allow other logged-in users, or even the public, to watch it in real-time! The streams will automatically save to your account, so they can be viewed immediately after the broadcast finishes in the main section of your application.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"securing-our-app-with-middleware\">Securing our app with middleware</h3>\n      <a href=\"#securing-our-app-with-middleware\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We put all authenticated pages behind this middleware function. It checks the request headers to make sure the user is sending a valid authenticated user email.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">export const cfTeamsAccessAuthMiddleware = async ({request, data, env, next}) =&gt; {\n    try {\n        const userEmail = request.headers.get(&quot;cf-access-authenticated-user-email&quot;)\n\n        if (!userEmail) {\n            throw new Error(&quot;User not found, make sure application is behind Cloudflare Access&quot;)\n        }\n  \n        // Pass user info to next handlers\n        data.user = {\n            email: userEmail\n        }\n  \n        return next()\n    } catch (e) {\n        return new Response(e.toString(), {status: 401})\n    }\n}\n\nexport const onRequest = [\n    cfTeamsAccessAuthMiddleware\n]</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"putting-it-all-together-with-pages\">Putting it all together with Pages</h3>\n      <a href=\"#putting-it-all-together-with-pages\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We have Cloudflare Access controlling our log-in flow. We use the Stream APIs to manage uploading, displaying, and watching videos. We use <a href=\"https://workers.cloudflare.com/\">Workers</a> for managing fetch requests and handling API calls. Now it’s time to tie it all together using <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a>!</p><p>Pages provides an easy way to deploy and host static websites. But now, Pages seamlessly integrates with the Workers platform (link to announcement post). With this new integration, we can deploy this entire application with a single, readable repository.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"controlling-access\">Controlling access</h3>\n      <a href=\"#controlling-access\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Some applications are better public; others contain sensitive data and should be restricted to specific users. The main page is public for this application, and we&#39;ve used <a href=\"https://www.cloudflare.com/teams/access/\">Cloudflare Access</a> to limit the admin page to employees. You could just as easily use Access to protect the entire application if you’re building an internal learning service or even if you want to beta launch a new site!</p><p>When a user clicks the admin link on our <a href=\"https://cf-pages-stream.pages.dev/\">demo site</a>, they will be prompted for an email address. If they enter a valid Cloudflare email, the application will send them an access code. Otherwise, they won&#39;t be able to access that page.</p><p>Check out the <a href=\"https://github.com/cloudflare/pages-stream-demo\">source code</a> and get started building your own video application today!</p>",
		"id": "6crZId6sbMVFWUz7qedA31",
		"localeList": {
			"name": "Build your next video application on Cloudflare Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "Translated for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Today, we’re going to build a video application inspired by Cloudflare TV. We’ll have user authentication and the ability for administrators to upload recorded videos or livestream new content. Think about being able to build your own YouTube or Twitch using Cloudflare services!",
		"metadata": {
			"title": "Build your next video application on Cloudflare",
			"description": "Today, we’re going to build a video application inspired by Cloudflare TV. We’ll have user authentication and the ability for administrators to upload recorded videos or livestream new content. Think about being able to build your own YouTube or Twitch using Cloudflare services!",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6K5Z9NmY9DoMrGO9SHbmwF/aca9a6a038954614ebef027435c347d4/build-video-applications-cloudflare-dN4Psq.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2021-11-19T13:59:21.000+00:00",
		"slug": "build-video-applications-cloudflare",
		"tags": [
			{
				"id": "4Q1oXZOskZczYetWpWXIsl",
				"name": "Full Stack Week",
				"slug": "full-stack-week"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "3kr4meEhp1NrKwm01XXeqk",
				"name": "Cloudflare Pages",
				"slug": "cloudflare-pages"
			},
			{
				"id": "6c9EM6c5poinGKIR6xldFo",
				"name": "Cloudflare Access",
				"slug": "cloudflare-access"
			},
			{
				"id": "7mVMfcxp4tMqKil9jj8BJa",
				"name": "Cloudflare Stream",
				"slug": "cloudflare-stream"
			},
			{
				"id": "4m0TnPrRHWtb7J6Ht4M4oj",
				"name": "Video",
				"slug": "video"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Build your next video application on Cloudflare",
		"updated_at": "2025-10-03T19:26:56.262Z",
		"url": "https://blog.cloudflare.com/build-video-applications-cloudflare"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}