{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "12",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Mike Nomitch",
				"slug": "mike-nomitch",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3Ub221L51x1p3FZJbnblyn/23b50473b99404db0baf42921edd269c/_tmp_mini_magick20240415-2-6izqhi.jpg",
				"publiclyIndex": true
			},
			{
				"name": "Gabi Villalonga Simón",
				"slug": "gabi-villalonga-simon",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6a01J30elPuBGS4GN5zVeG/e9438d9ae5c2abf7ba37544e9f047c2f/Gabi_Villalonga_Sim%C3%B3n.jpg",
				"publiclyIndex": true
			}
		],
		"excerpt": "Cloudflare Containers are coming this June. Run new types of workloads on our network with an experience that is simple, scalable, global and deeply integrated with Workers.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4NhWmuxpd8JCJR7FL2UlvH/c754fcd867187fc7589e47fe84052164/Feature_Image.png",
		"featured": false,
		"html": "<p>It is almost the end of Developer Week and we haven’t talked about containers: until now. As some of you <a href=\"https://blog.cloudflare.com/container-platform-preview/\"><u>may know</u></a>, we’ve been working on a container platform behind the scenes for some time.</p><p>In late June, we plan to release Containers in open beta, and today we’ll give you a sneak peek at what makes it unique.</p><p>Workers are the simplest way to ship software around the world with little overhead. But sometimes you need to do more. You might want to:</p><ul><li><p>Run user-generated code in any language</p></li><li><p>Execute a CLI tool that needs a full Linux environment</p></li><li><p>Use several gigabytes of memory or multiple CPU cores</p></li><li><p>Port an existing application from AWS, GCP, or Azure without a major rewrite</p></li></ul><p>Cloudflare Containers let you do all of that while being simple, scalable, and global.</p><p>Through a deep integration with <a href=\"https://www.cloudflare.com/developer-platform/products/workers/\">Workers</a> and an architecture built on <a href=\"https://www.cloudflare.com/developer-platform/products/durable-objects/\">Durable Objects</a>, Workers can be your:</p><ul><li><p><b>API Gateway</b>: Letting you control routing, authentication, caching, and rate-limiting before requests reach a container</p></li><li><p><b>Service Mesh</b>: Creating private connections between containers with a programmable routing layer</p></li><li><p><b>Orchestrator</b>: Allowing you to write custom scheduling, scaling, and health checking logic for your containers</p></li></ul><p>Instead of having to deploy new services, write custom Kubernetes operators, or wade through control plane configuration to extend the platform, you just write code.</p><p>Let’s see what it looks like.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"deploying-different-application-types\">Deploying different application types</h2>\n      <a href=\"#deploying-different-application-types\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n    <div class=\"flex anchor relative\">\n      <h3 id=\"a-stateful-workload-executing-ai-generated-code\">A stateful workload: executing AI-generated code</h3>\n      <a href=\"#a-stateful-workload-executing-ai-generated-code\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>First, let’s take a look at a stateful example.</p><p>Imagine you are building a platform where end-users can run code generated by an <a href=\"https://www.cloudflare.com/learning/ai/what-is-large-language-model/\">LLM</a>. This code is untrusted, so each user needs their own secure sandbox. Additionally, you want users to be able to run multiple requests in sequence, potentially writing to local files or saving in-memory state.</p><p>To do this, you need to create a container on-demand for each user session, then route subsequent requests to that container. Here’s how you can accomplish this:</p><p>First, you write some <a href=\"https://github.com/cloudflare/containers-demos/blob/main/ai/wrangler.jsonc#L6\"><u>basic Wrangler config</u></a>, then you route requests to containers via your Worker:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Container } from &quot;cloudflare:workers&quot;;\n\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n\n    if (url.pathname.startsWith(&quot;/execute-code&quot;)) {\n      const { sessionId, messages } = await request.json();\n      // pass in prompt to get the code from Llama 4\n      const codeToExecute = await env.AI.run(&quot;@cf/meta/llama-4-scout-17b-16e-instruct&quot;, { messages });\n\n      // get a different container for each user session\n      const id = env.CODE_EXECUTOR.idFromName(sessionId);\n      const sandbox = env.CODE_EXECUTOR.get(id);\n\n      // execute a request on the container\n      return sandbox.fetch(&quot;/execute-code&quot;, { method: &quot;POST&quot;, body: codeToExecute });\n    }\n\n    // ... rest of Worker ...\n  },\n};\n\n// define your container using the Container class from cloudflare:workers\nexport class CodeExecutor extends Container {\n  defaultPort = 8080;\n  sleepAfter = &quot;1m&quot;;\n}</pre></code>\n            <p>Then, deploy your code with a single command: <code>wrangler deploy</code>. This builds your container image, pushes it to Cloudflare’s registry, readies containers to boot quickly across the globe, and deploys your Worker.</p>\n            <pre class=\"language-Rust\"><code class=\"language-Rust\">$ wrangler deploy</pre></code>\n            <p>That’s it.</p><p>How does it work?</p><p>Your Worker creates and starts up containers on-demand. Each time you call <code>env.CODE_EXECUTOR.get(id)</code> with a unique ID, it sends requests to a unique container instance. The container will automatically boot on the first <code>fetch</code>, then put itself to sleep after a configurable timeout, in this case 1 minute. You only pay for the time that the container is actively running.</p><p>When you request a new container, we boot one in a Cloudflare location near the incoming request. This means that low-latency workloads are well-served no matter the region. Cloudflare takes care of all the pre-warming and caching so you don’t have to think about it.</p><p>This allows each user to run code in their own secure environment.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"stateless-and-global-ffmpeg-everywhere\">Stateless and global: FFmpeg everywhere</h3>\n      <a href=\"#stateless-and-global-ffmpeg-everywhere\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Stateless and autoscaling applications work equally well on Cloudflare Containers.</p><p>Imagine you want to run a container that takes a video file and turns it into an animated GIF using <a href=\"https://www.ffmpeg.org/\"><u>FFmpeg</u></a>. Unlike the previous example, any container can serve any request, but you still don’t want to send bytes across an ocean and back unnecessarily. So, ideally the app can be deployed everywhere.</p><p>To do this, you declare a container in Wrangler config and turn on <code>autoscaling</code>. This specific configuration ensures that one instance is always running and if CPU usage increases beyond 75% of capacity, additional instances are added:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">&quot;containers&quot;: [\n  {\n    &quot;class_name&quot;: &quot;GifMaker&quot;,\n    &quot;image&quot;: &quot;./Dockerfile&quot;, // container source code can be alongside Worker code\n    &quot;instance_type&quot;: &quot;basic&quot;,\n    &quot;autoscaling&quot;: {\n      &quot;minimum_instances&quot;: 1,\n      &quot;cpu_target&quot;: 75,\n    }\n  }\n],\n// ...rest of wrangler.jsonc...</pre></code>\n            <p>To route requests, you just call <code>env.GIF_MAKER.fetch</code> and requests are automatically sent to the closest container:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Container } from &quot;cloudflare:workers&quot;;\n\nexport class GifMaker extends Container {\n  defaultPort: 1337,\n}\n\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n\n    if (url.pathname === &quot;/make-gif&quot;) {\n      return env.GIF_MAKER.fetch(request)\n    }\n\n    // ... rest of Worker ...\n  },\n};</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"going-beyond-the-basics\">Going beyond the basics</h3>\n      <a href=\"#going-beyond-the-basics\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>From the examples above, you can see that getting a basic container service running on Workers just takes a few lines of config and a little Workers code. There’s no need to worry about capacity, artifact registries, regions, or scaling.</p><p>For more advanced use, we’ve designed Cloudflare Containers to run on top of Durable Objects and work in tandem with Workers. Let’s take a look at the underlying architecture and see some of the advanced use cases it enables.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"durable-objects-as-programmable-sidecars\">Durable Objects as programmable sidecars</h2>\n      <a href=\"#durable-objects-as-programmable-sidecars\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Routing to containers is enabled using <a href=\"https://developers.cloudflare.com/durable-objects/\"><u>Durable Objects</u></a> under the hood. In the examples above, the <code>Container</code> class from <code>cloudflare:workers</code> just wraps a container-enabled Durable Object and provides helper methods for common patterns. In the rest of this post, we’ll look at examples using Durable Objects directly, as this should shed light on the platform’s underlying design.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/tEAz34lNlHaJtLQVp1qia/734fc01c90e2aca8e5d75c060f09be9e/1.png\" alt=\"\" class=\"kg-image\" width=\"1720\" height=\"860\" loading=\"lazy\"/>\n          </figure><p>Each Durable Object acts as a programmable sidecar that can proxy requests to the container and manages its lifecycle. This allows you to control and extend your containers in ways that are hard on other platforms. </p><p>You can manually start, stop, and execute commands on a specific container by calling RPC methods on its Durable Object, which now has a new object at <code>this.ctx.container</code>:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">class MyContainer extends DurableObject {\n  // these RPC methods are callable from a Worker\n  async customBoot(entrypoint, envVars) {\n    this.ctx.container.start({ entrypoint, env: envVars });\n  }\n\n  async stopContainer() {\n    const SIGTERM = 15;\n    this.ctx.container.signal(SIGTERM);\n  }\n\n  async startBackupScript() {\n    await this.ctx.container.exec([&quot;./backup&quot;]);\n  }\n}</pre></code>\n            <p>You can also monitor your container and run hooks in response to Container status changes.</p><p>For instance, say you have a CI job that runs builds in a Container. You want to post a message to a <a href=\"https://developers.cloudflare.com/queues/\"><u>Queue</u></a> based on the exit status. You can easily program this behavior:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">class BuilderContainer extends DurableObject {\n  constructor(ctx, env) {\n    super(ctx, env)\n    async function onContainerExit() {\n      await this.env.QUEUE.send({ status: &quot;success&quot;, message: &quot;Build Complete&quot; });\n    }\n\n    async function onContainerError(err) {\n      await this.env.QUEUE.send({ status: &quot;error&quot;, message: err});\n    }\n\n    this.ctx.container.start();\n    this.ctx.container.monitor().then(onContainerExit).catch(onContainerError); \n  }\n\n  async isRunning() { return this.ctx.container.running; }\n}</pre></code>\n            <p>And lastly, if you have state that needs to be loaded into a container each time it runs, you can use status hooks to persist state from the container before it sleeps and to reload state into the container after it starts:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { startAndWaitForPort } from &quot;./helpers&quot;\n\nclass MyContainer extends DurableObject {\n  constructor(ctx, env) {\n    super(ctx, env)\n    this.ctx.blockConcurrencyWhile(async () =&gt; {\n      this.ctx.storage.sql.exec(&#039;CREATE TABLE IF NOT EXISTS state (value TEXT)&#039;);\n      this.ctx.storage.sql.exec(&quot;INSERT INTO state (value) SELECT &#039;&#039; WHERE NOT EXISTS \n(SELECT * FROM state)&quot;);\n      await startAndWaitForPort(this.ctx.container, 8080);\n      await this.setupContainer();\n      this.ctx.container.monitor().then(this.onContainerExit); \n    });\n  }\n\n  async setupContainer() {\n    const initialState = this.ctx.storage.sql.exec(&#039;SELECT * FROM state LIMIT 1&#039;).one().value;\n    return this.ctx.container\n      .getTcpPort(8080)\n      .fetch(&quot;http://container/state&quot;, { body: initialState, method: &#039;POST&#039; });\n  }\n\n  async onContainerExit() {\n    const response = await this.ctx.container\n      .getTcpPort(8080)\n      .fetch(&#039;http://container/state&#039;);\n    const newState = await response.text();\n    this.ctx.storage.sql.exec(&#039;UPDATE state SET value = ?&#039;, newState);\n  }\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h2 id=\"building-around-your-containers-with-workers\">Building around your Containers with Workers</h2>\n      <a href=\"#building-around-your-containers-with-workers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Not only do Durable Objects allow you to have fine-grained control over the Container lifecycle, the whole Workers platform allows you to extend routing and scheduling behavior as you see fit.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-workers-as-an-api-gateway\">Using Workers as an API gateway</h3>\n      <a href=\"#using-workers-as-an-api-gateway\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Workers provide programmable ingress logic from <a href=\"https://www.cloudflare.com/network/\"><u>over 300 locations</u></a> around the world. In this sense, they provide similar functionality to an <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api-gateway/\">API gateway</a>.</p><p>For instance, let’s say you want to route requests to a different version of a container based on information in a header. This is accomplished in a few lines of code:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export default {\n  async fetch(request, env) {\n    const isExperimental = request.headers.get(&quot;x-version&quot;) === &quot;experimental&quot;;\n    \n    if (isExperimental) {\n      return env.MY_SERVICE_EXPERIMENTAL.fetch(request);\n    } else {\n      return env.MY_SERVICE_STANDARD.fetch(request);\n    }\n  },\n};</pre></code>\n            <p>Or you want to rate limit and authenticate requests to the container:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">async fetch(request, env) {\n  const url = new URL(request.url);\n\n  if (url.pathname.startsWith(&#039;/api/&#039;)) {\n    const token = request.headers.get(&quot;token&quot;);\n\n    const isAuthenticated = await authenticateRequest(token);\n    if (!isAuthenticated) {\n      return new Response(&quot;Not authenticated&quot;, { status: 401 });\n    }\n\n    const { withinRateLimit } = await env.MY_RATE_LIMITER.limit({ key: token });\n    if (!withinRateLimit) {\n      return new Response(&quot;Rate limit exceeded for token&quot;, { status: 429 });\n    }\n\n    return env.MY_APP.fetch(request);\n  }\n  // ...\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-workers-as-a-service-mesh\">Using Workers as a service mesh</h3>\n      <a href=\"#using-workers-as-a-service-mesh\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    \n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/56gJk7HEDJs4dsNXDkBX1x/7c9d6be661d0cd6baea13caeedf478c0/2.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1000\" loading=\"lazy\"/>\n          </figure><p>By default, Containers are private and can only be accessed via Workers, which can connect to one of many container ports. From within the container, you can expose a plain HTTP port, but requests will still be encrypted from the end user to the moment we send the data to the container’s TCP port in the host. Due to the communication being relayed through the Cloudflare network, the container does not need to set up <a href=\"https://www.cloudflare.com/application-services/products/ssl/\">TLS certificates</a> to have secure connections in its open ports.</p><p>You can connect to the container through a WebSocket from the client too. See <a href=\"https://github.com/cloudflare/containers-demos/tree/main/websockets\"><u>this repository</u></a> for a full example of using Websockets.</p><p>Just as the Durable Object can act as proxy <i>to the container</i>, it can act as a proxy <i>from the container </i>as well. When setting up a container, you can toggle Internet access off and ensure that outgoing requests pass through Workers.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// ... when starting the container...\nthis.ctx.container.start({ \n  workersAddress: &#039;10.0.0.2:8080&#039;,\n  enableInternet: false, // &#039;enableInternet&#039; is false by default\n});\n\n// ... container requests to &#039;10.0.0.2:8080&#039; securely route to a different service...\noverride async onContainerRequest(request: Request) {\n  const containerId = this.env.SUB_SERVICE.idFromName(request.headers[&#039;X-Account-Id&#039;]);\n  return this.env.SUB_SERVICE.get(containerId).fetch(request);\n}</pre></code>\n            <p>You can ensure all traffic in and out of your container is secured and encrypted end to end without having to deal with networking yourself.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/9PzlxveRZ6NNBiNeZTiWs/c70e5db9cc7d63c02a21f21769801bc4/3.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1000\" loading=\"lazy\"/>\n          </figure><p>This allows you to protect and connect containers within Cloudflare’s network… or even when connecting to <a href=\"https://blog.cloudflare.com/workers-virtual-private-cloud\"><u>external private networks</u></a>.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"using-workers-as-an-orchestrator\">Using Workers as an orchestrator</h3>\n      <a href=\"#using-workers-as-an-orchestrator\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>You might require custom scheduling and scaling logic that goes beyond what Cloudflare provides out of the box.</p><p>We don’t want you having to manage complex chains of API calls or writing an <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\"><u>operator</u></a> to get the logic you need. Just write some Worker code.</p><p>For instance, imagine your containers have a long startup period that involves loading data from an external source. You need to pre-warm containers manually, and need control over the specific region to prewarm. Additionally, you need to set up manual health checks that are accessible via Workers. You’re able to achieve this fairly simply with Workers and Durable Objects.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">import { Container, DurableObject } from &quot;cloudflare:workers&quot;;\n\n// A singleton Durable Object to manage and scale containers\n\nclass ContainerManager extends DurableObject {\n  scale(region, instanceCount) {\n    for (let i = 0; i &lt; instanceCount; i++) {\n      const containerId = env.CONTAINER.idFromName(`instance-${region}-${i}`);\n      // spawns a new container with a location hint\n      await env.CONTAINER.get(containerId, { locationHint: region }).start();\n    }\n  }\n\n  async setHealthy(containerId, isHealthy) {\n    await this.ctx.storage.put(containerId, isHealthy);\n  }\n}\n\n// A Container class for the underlying compute\n\nclass MyContainer extends Container {\n  defaultPort = 8080;\n\n  async onContainerStart() {\n    // run healthcheck every 500ms\n    await this.scheduleEvery(0.5, &#039;healthcheck&#039;);\n  }\n\n  async healthcheck() {\n    const manager = this.env.MANAGER.get(\n      this.env.MANAGER.idFromName(&quot;manager&quot;)\n    );\n    const id = this.ctx.id.toString();\n\n    await this.container.fetch(&quot;/_health&quot;)\n      .then(() =&gt; manager.setHealthy(id, true))\n      .catch(() =&gt; manager.setHealthy(id, false));\n  }\n}</pre></code>\n            <p>The <code>ContainerManager </code>Durable Object exposes the <code>scale</code> RPC call, which you can call as needed with a <code>region</code> and <code>instanceCount</code> which scales up the number of active Container instances in a given region <a href=\"https://developers.cloudflare.com/durable-objects/reference/data-location/#provide-a-location-hint\"><u>using a location hint</u></a>. The <code>this.schedule</code> code executes a manually defined <code>healthcheck</code> method on the Container and tracks its state in the Manager for use by other logic in your system.</p><p>These building blocks let users handle complex scheduling logic themselves. For a more detailed example using standard Durable Objects, see <a href=\"https://github.com/cloudflare/containers-demos/tree/main/load-balancer\"><u>this repository</u></a>.</p><p>We are excited to see the patterns you come up with when orchestrating complex applications built with containers, and trust that between Workers and Durable Objects, you’ll have the tools you need.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"integrating-with-more-of-cloudflares-developer-platform\">Integrating with more of Cloudflare’s Developer Platform</h2>\n      <a href=\"#integrating-with-more-of-cloudflares-developer-platform\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Since it is <a href=\"https://blog.cloudflare.com/welcome-to-developer-week-2025/\"><u>Developer Week 2025</u></a>, we would be remiss to not talk about <a href=\"https://developers.cloudflare.com/workflows/\"><u>Workflows</u></a>, which <a href=\"https://blog.cloudflare.com/workflows-ga-production-ready-durable-execution/\"><u>just went GA</u></a>, and <a href=\"https://agents.cloudflare.com/\"><u>Agents</u></a>, which <a href=\"https://blog.cloudflare.com/building-ai-agents-with-mcp-authn-authz-and-durable-objects/\"><u>just got even better</u></a>.</p><p>Let’s finish up by taking a quick look at how you can integrate Containers with these two tools.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"running-a-short-lived-job-with-workflows-r2\">Running a short-lived job with Workflows &amp; R2</h3>\n      <a href=\"#running-a-short-lived-job-with-workflows-r2\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>You need to download a large file from <a href=\"https://developers.cloudflare.com/r2/\"><u>R2</u></a>, compress it, and upload it. You want to ensure that this succeeds, but don’t want to write retry logic and error handling yourself. Additionally, you don’t want to deal with rotating R2 API tokens or worry about network connections — it should be secure by default.</p><p>This is a perfect opportunity for a <a href=\"https://developers.cloudflare.com/workflows/\"><u>Workflow</u></a> using Containers. The container can do the heavy lifting of compressing files, Workers can stream the data to and from R2, and the Workflow can ensure durable execution.</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">export class EncoderWorkflow extends WorkflowEntrypoint&lt;Env, Params&gt; {\n  async run(event: WorkflowEvent&lt;Params&gt;, step: WorkflowStep) {\n    const id = this.env.ENCODER.idFromName(event.instanceId);\n    const container = this.env.ENCODER.get(id);\n\n    await step.do(&#039;init container&#039;, async () =&gt; {\n      await container.init();\n    });\n\n    await step.do(&#039;compress the object with zstd&#039;, async () =&gt; {\n      await container.ensureHealthy();\n      const object = await this.env.ARTIFACTS.get(event.payload.r2Path);\n      const result = await container.fetch(&#039;http://encoder/zstd&#039;, {\n        method: &#039;POST&#039;, body: object.body \n      });\n      await this.env.ARTIFACTS.put(`results${event.payload.r2Path}`, result.body);\n    });\n\n    await step.do(&#039;cleanup container&#039;, async () =&gt; {\n      await container.destroy();\n    });\n  }\n}</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"calling-a-container-from-an-agent\">Calling a Container from an Agent</h3>\n      <a href=\"#calling-a-container-from-an-agent\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Lastly, imagine you have an AI agent that needs to spin up cloud infrastructure (you like to live dangerously). To do this, you want to use <a href=\"https://github.com/hashicorp/terraform\"><u>Terraform</u></a>, but since it’s run from the command line, you can’t run it on Workers.</p><p>By defining a <a href=\"https://developers.cloudflare.com/agents/concepts/tools/\"><u>tool</u></a>, you can enable your Agent to run the shell commands from a container:</p>\n            <pre class=\"language-JavaScript\"><code class=\"language-JavaScript\">// Make tools that call to a container from an agent\n\nconst createExternalResources = tool({\n  description: &quot;runs Terraform in a container to create resources&quot;,\n  parameters: z.object({ sessionId: z.number(), config: z.string() }),\n  execute: async ({ sessionId, config }) =&gt; {\n    return this.env.TERRAFORM_RUNNER.get(sessionId).applyConfig(config);\n  },\n});\n\n// Expose RPC Methods that call to the container\n\nclass TerraformRunner extends DurableObject {\n  async applyConfig(config) {\n    await this.ctx.container.getTcpPort(8080).fetch(APPLY_URL, {\n      method: &#039;POST&#039;,\n      body: JSON.stringify({ config }),\n    });\n  }\n\n  // ...rest of DO...\n}</pre></code>\n            <p>Containers are so much more powerful when combined with other tools. Workers make it easy to do so in a secure and simple way.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"pay-for-what-you-use-and-use-the-right-tool\">Pay for what you use and use the right tool</h2>\n      <a href=\"#pay-for-what-you-use-and-use-the-right-tool\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The deep integration between Workers and Containers also makes it easy to pick the right tool for the job with regards to cost.</p><p>With Cloudflare Containers, you only pay for what you use. Charges start when a request is sent to the container or it is manually started. Charges stop after the container goes to sleep, which can happen automatically after a configurable timeout. This makes it easy to scale to zero, and allows you to get high utilization even with highly-variable traffic.</p><p>Containers are billed for every 10ms that they are actively running at the following rates:</p><ul><li><p>Memory: $0.0000025 per GB-second</p></li><li><p>CPU: $0.000020 per vCPU-second</p></li><li><p>Disk $0.00000007 per GB-second\n</p></li></ul><p>After 1 TB of free data transfer per month, egress from a Container will be priced per-region. We&#39;ll be working out the details between now and the beta, and will be launching with clear, transparent pricing across all dimensions so you know where you stand.</p><p>Workers are lighter weight than containers and <a href=\"https://blog.cloudflare.com/workers-pricing-scale-to-zero\"><u>save you money by not charging when waiting on I/O</u></a>. This means that if you can, running on a Worker helps you save on cost. Luckily, on Cloudflare it is easy to route requests to the right tool.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"cost-comparison\">Cost comparison</h3>\n      <a href=\"#cost-comparison\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Comparing containers and functions services on paper is always going to be an apples to oranges exercise, and results can vary so much depending on use case. But to share a real example of our own, a year ago when Cloudflare acquired Baselime, Baselime was a heavy user of AWS Lambda. By moving to Cloudflare, <a href=\"https://blog.cloudflare.com/80-percent-lower-cloud-cost-how-baselime-moved-from-aws-to-cloudflare/\"><u>they lowered their cloud compute bill by 80%</u></a>.</p><p>Below we wanted to share one representative example that compares costs for an application that uses both containers and serverless functions together. It’d be easy for us to come up with a contrived example that uses containers sub-optimally on another platform, for the wrong types of workloads. We won’t do that here. We know that navigating cloud costs can be challenging, and that cost is a critical part of deciding what type of compute to use for which pieces of your application.</p><p>In the example below, we’ll compare Cloudflare Containers + Workers against Google Cloud Run, a very well-regarded container platform that we’ve been impressed by.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"example-application\">Example application</h4>\n      <a href=\"#example-application\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Imagine that you run an application that serves 50 million requests per month, and each request consumes an average 500 ms of wall-time. Requests to this application are not all the same though — half the requests require a container, and the other half can be served just using serverless functions.</p><table><tr><td><p>Requests per month</p></td><td><p>Wall-time (duration)</p></td><td><p>Compute required</p></td><td><p>Cloudflare</p></td><td><p>Google Cloud</p></td></tr><tr><td><p>25 million</p></td><td><p>500ms</p></td><td><p>Container + serverless functions</p></td><td><p>Containers + Workers</p></td><td><p>Google Cloud Run + Google Cloud Run Functions</p></td></tr><tr><td><p>25 million</p></td><td><p>500ms</p></td><td><p>Serverless functions</p></td><td><p>Workers</p></td><td><p>Google Cloud Run Functions</p></td></tr></table>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"container-pricing\">Container pricing</h4>\n      <a href=\"#container-pricing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>On both Cloud Run and Cloudflare Containers, a container can serve multiple requests. On some platforms, such as AWS Lambda, each container instance is limited to a single request, pushing cost up significantly as request count grows. In this scenario, 50 requests can run simultaneously on a container with 4 GB memory and half of a vCPU. This means that to serve 25 million requests of 500ms each, we need 625,000 seconds worth of compute</p><p>In this example, traffic is bursty and we want to avoid paying for idle-time, so we’ll use Cloud Run’s request-based pricing.</p><table><tr><td><p>\n</p></td><td><p>Price per vCPU second</p></td><td><p>Price per GB-second of memory</p></td><td><p>Price per 1m requests</p></td><td><p>Monthly Price for Compute + Requests</p></td></tr><tr><td><p>Cloudflare Containers</p></td><td><p>$0.000020</p></td><td><p>$0.0000025</p></td><td><p>$0.30</p></td><td><p>$20.00</p></td></tr><tr><td><p>Google Cloud Run</p></td><td><p>$0.000024</p></td><td><p>$0.0000025</p></td><td><p>$0.40</p></td><td><p>$23.75</p></td></tr></table><p><sup><i>* Comparison does not include free tiers for either provider and uses a single Tier 1 GCP region</i></sup></p><p>Compute pricing for both platforms are comparable. But as we showed earlier in this post, Containers on Cloudflare run anywhere, on-demand, without configuring and managing regions. Each container has a programmable sidecar with its own database, backed by Durable Objects. It’s the depth of integration with the rest of the platform that makes containers on Cloudflare uniquely programmable.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"function-pricing\">Function pricing</h4>\n      <a href=\"#function-pricing\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The other requests can be served with less compute, and code written in <a href=\"https://developers.cloudflare.com/workers/languages/javascript/\"><u>JavaScript</u></a>, <a href=\"https://developers.cloudflare.com/workers/languages/typescript/\"><u>TypeScript</u></a>, <a href=\"https://developers.cloudflare.com/workers/languages/python/\"><u>Python</u></a> or <a href=\"https://developers.cloudflare.com/workers/languages/rust/\"><u>Rust</u></a>, so we’ll use Workers and Cloud Run Functions.</p><p>These 25 million requests also run for 500 ms each, and each request spends 480 ms waiting on I/O. This means that Workers will <a href=\"https://blog.cloudflare.com/workers-pricing-scale-to-zero/\"><u>only charge for 20 ms of “CPU-time”</u></a>, the time that the Worker actually spends using compute. This ratio of low CPU time to high wall time is extremely common when building AI apps that make inference requests, or even when just building REST APIs and other business logic. Most time is spent waiting on I/O. Based on our data, we typically see Workers use less than 5 ms of CPU time per request vs seconds of wall time (waiting on APIs or I/O).</p><p>The Cloud Run Function will use an instance with 0.083 vCPU and 128 MB memory and charge on both CPU-s and GiB-s for the full 500 ms of wall-time.</p><table><tr><td><p>\n</p></td><td><p>Total Price for “wall-time”</p></td><td><p>Total Price for “CPU-time”</p></td><td><p>Total Price for Compute + Requests</p></td></tr><tr><td><p>Cloudflare Workers</p></td><td><p>N/A</p></td><td><p>$0.83</p></td><td><p>$8.33</p></td></tr><tr><td><p>Google Cloud Run Functions</p></td><td><p>$1.44</p></td><td><p>N/A</p></td><td><p>$11.44</p></td></tr></table><p><sup><i>* Comparison does not include free tiers and uses a single Tier 1 GCP region.</i></sup></p><p>This comparison assumes you have configured Google Cloud Run Functions with a max of 20 concurrent requests per instance. On Google Cloud Run Functions, the maximum number of concurrent requests an instance can handle varies based on the efficiency of your function, and your own tolerance for tail latency that can be introduced by traffic spikes. </p><p>Workers automatically scale horizontally, don’t require you to configure concurrency settings (and hope to get it right), and can run in <a href=\"https://www.cloudflare.com/en-gb/network/\"><u>over 300 locations</u></a>.</p>\n    <div class=\"flex anchor relative\">\n      <h4 id=\"a-holistic-view-of-costs\">A holistic view of costs</h4>\n      <a href=\"#a-holistic-view-of-costs\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The most important cost metric is the total cost of developing and running an application. And the only way to get the best results is to use the right compute for the job. So the question boils down to friction and integration. How easily can you integrate the ideal building blocks together?</p><p>As more and more software makes use of <a href=\"https://www.cloudflare.com/learning/ai/what-is-generative-ai/\">generative AI</a>, and makes inference requests to LLMs, modern applications must communicate and integrate with a myriad of services. Most systems are increasingly real-time and chatty, often holding open long-lived connections, performing tasks in parallel. Running an instance of an application in a VM or container and calling it a day might have worked 10 years ago, but when we talk to developers in 2025, they are most often bringing many forms of compute to the table for particular use cases.</p><p>This shows the importance of picking a platform where you can seamlessly shift traffic from one source of compute to another. If you want to <a href=\"https://developers.cloudflare.com/workers/runtime-apis/bindings/rate-limit/\"><u>rate-limit</u></a>, <a href=\"https://blog.cloudflare.com/full-stack-development-on-cloudflare-workers/\"><u>serve server-side rendered pages, API responses and static assets</u></a>, handle authentication and authorization, make<a href=\"https://developers.cloudflare.com/workers-ai/\"><u> inference requests to AI models</u></a>, run core business logic via <a href=\"https://blog.cloudflare.com/workflows-ga-production-ready-durable-execution/\"><u>Workflows</u></a>, or <a href=\"https://blog.cloudflare.com/cloudflare-acquires-arroyo-pipelines-streaming-ingestion-beta/\"><u>ingest streaming data</u></a>, just handle the request in Workers. Save the heavier compute only for where it is actually the only option. With Cloudflare Workers and Containers, this is as simple as an if-else statement in your Worker. This makes it easy to pick the right tool for the job.</p>\n    <div class=\"flex anchor relative\">\n      <h2 id=\"coming-june-2025\">Coming June 2025</h2>\n      <a href=\"#coming-june-2025\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>We are collecting feedback and putting the finishing touches on our APIs now, and will release the open beta to the public in late June 2025.</p><p>From day one of building Cloudflare Workers, it’s been our goal to build an integrated platform, where Cloudflare products work together as a system, rather than just as a collection of separate products. We’ve taken this same approach with Containers, and aim to make Cloudflare not only the best place to deploy containers across the globe, but the best place to deploy the types of complete applications that developers are building, that use containers in tandem with serverless functions, <a href=\"http://developers.cloudflare.com/workflows\"><u>Workflows</u></a>, <a href=\"https://agents.cloudflare.com/\"><u>Agents</u></a>, and <a href=\"https://developers.cloudflare.com/\"><u>much more</u></a>.</p><p>We’re excited to get this into your hands soon. Stay on the lookout this summer.</p>\n          <figure class=\"kg-card kg-image-card\">\n          <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6tb0K0eJoK6L4QrUCTWISx/4346edb7593b47768cebcb48369cfa35/4.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"550\" loading=\"lazy\"/>\n          </figure><p></p>",
		"id": "7yspClA37lzZVogRwQzn5F",
		"localeList": {
			"name": "blog-english-only",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Cloudflare Containers are coming this June. Run new types of workloads on our network with an experience that is simple, scalable, global and deeply integrated with Workers.\n",
		"metadata": {
			"title": "Simple, scalable, and global: Containers are coming to Cloudflare Workers in June 2025",
			"description": "Cloudflare Containers are coming this June. Run new types of workloads on our network with an experience that is simple, scalable, global and deeply integrated with Workers.\n",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4WO0LhhPIXNPr1ntAHn9nA/67d58582b2be2731fc7f3a859316d7b8/OG_Share_2024__49_.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2025-04-11T14:00+00:00",
		"slug": "cloudflare-containers-coming-2025",
		"tags": [
			{
				"id": "2xCnBweKwOI3VXdYsGVbMe",
				"name": "Developer Week",
				"slug": "developer-week"
			},
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "hJLGIf33KwYarAXU7tTB2",
				"name": "Containers",
				"slug": "containers"
			}
		],
		"title": "Simple, scalable, and global: Containers are coming to Cloudflare Workers in June 2025",
		"updated_at": "2025-04-16T15:42:51.435Z",
		"url": "https://blog.cloudflare.com/cloudflare-containers-coming-2025"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}