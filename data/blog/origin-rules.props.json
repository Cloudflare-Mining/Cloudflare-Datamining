{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "7",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Matt Bullock",
				"slug": "matt-bullock",
				"bio": "Product at Cloudflare.",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3fEkxzMVixG4qTwCCMFlbP/50e9297df6fdc184e4cda6d4e935db69/matt-bullock.jpeg",
				"location": "London, England",
				"website": null,
				"twitter": "@mibullock",
				"facebook": null,
				"publiclyIndex": true
			},
			{
				"name": "Sam Marsh",
				"slug": "sam-marsh",
				"bio": "Director of Product Management, Cloudflare. Responsible for CDN and Web Performance",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5kVXxWDGGrehLTLG30sCWm/3cdd7066d4f607106e82444d7e9096ad/Sam-Marsh.jpeg",
				"location": "England, United Kingdom",
				"website": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "Origin Rules is a dedicated product for ‘where does this traffic go where it leaves Cloudflare.’ Customers are able to match on an HTTP request using filters and override the host, port, SNI, and the origin a request resolves to.",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3QfNKmXxy8K7IveCCIBUe3/89f1131805db15000ec221f63fe3b447/origin-rules.png",
		"featured": false,
		"html": "<p></p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"host-headers-are-key\">Host headers are key</h3>\n      <a href=\"#host-headers-are-key\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The <code>host</code> header of an HTTP request tells the receiving server (‘origin’) which website or application a client wants to access.</p><p>When an origin receives an HTTP request, it checks the value of this ‘host’ header to see if it is responsible for that traffic. If it finds a match the request will be routed appropriately and the correct data will be returned to the visitor. If it doesn&#39;t find a match, it will return an error telling the visitor it doesn’t have an application or website that matches what they are asking for.</p><p>In simple setups this is often not an issue. All requests for <code>example.com</code> are sent to the same origin, which sees the host header <code>example.com</code> and returns the relevant files. However, not all setups are as straightforward. SaaS (Software-as-a-Service) platforms use host headers to route visitors to the correct instance or <a href=\"https://www.cloudflare.com/developer-platform/solutions/s3-compatible-object-storage/\">S3-compatible</a> bucket.</p><p>To ensure the correct content is still loaded, the host header must equal the name of this instance or bucket to allow the receiving origin to route it correctly. This means at some point in the traffic flow, the host header must be changed to match the instance or bucket name, before being sent to the SaaS platform.</p><p>Another common issue is when web applications on an origin are listening on a non-standard port, e.g. 8001.  Requests sent via HTTPS will by default arrive on port 443. To ensure the traffic isn&#39;t subsequently sent to port 443 on the origin the traffic must be intercepted and have the destination port changed to 8001. This ensures the origin is receiving traffic where it expects it. Previously this would be done as a Cloudflare Worker, Cloudflare Spectrum application or by running a dedicated application on the origin.</p><p>Both of these scenarios require customers to write and maintain code to intercept HTTP requests and parse them to ensure they go to the correct origin location, the correct port on that origin, and with the correct host header. This is a burden for administrators to maintain, particularly as legacy applications are migrated away from on-premise and into SaaS.</p><p>Cloudflare users want more control on where their traffic goes to - when it goes there - and what it looks like when it arrives. And they want this to be simple to set up and maintain.</p><p>To meet those demands we are today announcing <b>Origin Rules</b>, a new product which allows for overriding the host header, the Server Name Indication (SNI), destination port and <a href=\"https://www.cloudflare.com/learning/dns/what-is-dns/\">DNS resolution</a> of matching HTTP requests.</p><p>Origin Rules is now the one-stop destination for users who want to change which origin traffic goes to, when this should happen, and what that traffic looks like when it arrives - all without ever having to write a single line of code.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"one-hostname-many-origins\">One hostname, many origins</h3>\n      <a href=\"#one-hostname-many-origins\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Setting up your service on Cloudflare is very simple. You tell us your domain name, <code>example.com</code>, and where traffic should be sent to when we receive requests that match it. Often this is an IP address. You can also create subdomains, e.g. <code>shop.example.com</code>, and follow the same pattern.</p><p>This allows for the web server running <code>www.example.com</code> to live on the IP address 98.51.100.12, and the web server responsible for running <code>shop.example.com</code> to live on a different IP address, e.g. 203.0.113.34. When Cloudflare receives a request for <code>shop.example.com</code>, we send that traffic to the web server at <code>203.0.113.34</code> with the <b>host header</b> <code>shop.example.com</code>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4QtPCUPsB2vqa9Qy18YH87/15d7dd8e90f7d09d24e2ceee3a8f5d63/image6-10.png\" alt=\"\" class=\"kg-image\" width=\"905\" height=\"409\" loading=\"lazy\"/>\n            \n            </figure><p>As most web servers commonly serve multiple websites, this host header is used to ensure the correct content is loaded. The web server looks at the request it receives, checks the host header, and tries to match it against websites it&#39;s been told to serve. If it finds a match, it will route this request to the corresponding website&#39;s configuration and the correct files are returned to the visitor.</p><p>This has been a foundational principle of the Internet for many years now. Unsurprisingly however, new solutions emerge and user needs evolve.</p><p>We have heard from users who want to be able to send different URLs to different origins, such as a SaaS provider for their <a href=\"https://www.cloudflare.com/ecommerce/\">ecommerce</a> platform and a SaaS provider for their support desk. To achieve this, user’s could, and do, decide to run and manage their own reverse proxy running at this IP address to act as a router. This allows a user to send all traffic for <code>example.com</code> to a single IP address, and let the reverse proxy determine where it goes next:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">    location ~ ^/shop { \n        proxy_set_header   Host $http_host;\n        proxy_pass         &quot;https://203.0.113.34/$1&quot;;\n    }</pre></code>\n            <p>This reverse proxy would detect the traffic sent with the host header <code>example.com</code> with a URI path starting with /shop, and send those matching HTTP requests to the correct SaaS application.</p><p>This is potentially a complex system to maintain, however, and as it is an ‘extra hop’, there is an increase in latency as requests first go through Cloudflare, to the origin server, then back to the SaaS provider - who may also be on Cloudflare. In a world rapidly migrating away from on-premise software to SaaS platforms, running your own server to do this specific function goes against the grain.</p><p>Users therefore want a way to tell Cloudflare - ‘for all traffic to <a href=\"http://www.example.com\">www.example.com</a>, send it to 98.51.100.12. BUT, if you see any traffic to <a href=\"http://www.example.com/shop\">www.example.com/shop</a>, send it to 203.0.113.34’. This is what we call a <b>resolve override</b>. It is essentially a DNS override.</p><p>With a resolve override in place, HTTP requests to <code>www.example.com/shop</code> are now correctly sent by Cloudflare to 203.0.113.34 as requested. And they fail. The web server says it doesn’t know what to do with the HTTP request. This is because the <code>host</code> header is still <code>www.example.com</code>, and the web server does not have any knowledge of that website.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1SrXZvJ7n4QlU19sqk81Wk/3f7ca877859ef306b0449dea32a8e2ff/image4-19.png\" alt=\"\" class=\"kg-image\" width=\"905\" height=\"441\" loading=\"lazy\"/>\n            \n            </figure><p>To fix this, we need to make sure these requests are sent to 203.0.113.34 with a host header of <code>shop.example.com</code>. This is what is known as a <b>host header override.</b> Now, requests to <code>www.example.com/shop</code> are not only correctly routed to 203.0.113.34, but the host header is changed to one that the ecommerce software is expecting - and thus the request is correctly routed, and the visitors sees the correct content.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3rPXzJ1UgVPGrHyI4nd68t/da84f9efcae86b2b1cac10fb7cb1fad5/image7-7.png\" alt=\"\" class=\"kg-image\" width=\"905\" height=\"441\" loading=\"lazy\"/>\n            \n            </figure><p>The management of these selective overrides, and other overrides, is achieved via <b>Origin Rules</b>.</p><p>Origin Rules allow users to route HTTP traffic to different destinations and override certain request characteristics based on a number of criteria such as the visitor&#39;s country, IP address or HTTP request headers.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"route-on-more-than-a-url\">Route on more than a URL</h3>\n      <a href=\"#route-on-more-than-a-url\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Origin Rules is built on top of our <a href=\"https://developers.cloudflare.com/ruleset-engine/\">ruleset engine</a>. This gives users the ability to perform routing decisions based on many fields including the requested URL, and also the visitors country, specific request headers, and more.</p><p>Using a combination of one or more of these available <a href=\"https://developers.cloudflare.com/ruleset-engine/rules-language/fields\">fields</a>, users can ensure traffic is routed to specific backends, only when specific criteria are met such as host, URI path, visitor’s country, and HTTP request headers.</p><p>Historically, host header override and resolve override were achieved with the setting of a <a href=\"https://support.cloudflare.com/hc/en-us/articles/218411427-Understanding-and-configuring-Cloudflare-Page-Rules-Page-Rules-Tutorial-\">Page Rule</a>.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4ls9SG1BSKQJvYXkZ60Y8Q/70ca974801df2c918ad2c138f6d1598b/image5-19.png\" alt=\"\" class=\"kg-image\" width=\"1772\" height=\"984\" loading=\"lazy\"/>\n            \n            </figure><p>Page Rules is the ‘If This Then That’ of Cloudflare. Where the ‘If…’ is a URL, and the ‘Then That’ is changing how we handle traffic to specific parts of a ‘zone’. It allows users to selectively change how traffic is handled, or in this case, where traffic is sent. It is very well adopted, with over one million Page Rules in the past three months alone.</p><p>Page Rules, however, are limited to performing actions based upon the requested URL. This means if users want to change the backend a HTTP request goes to, they need to make that decision based on the URL alone. This can be challenging for users who may want to perform this decision-making on more nuanced aspects, like the user agent of the visitor or on the presence of a specific cookie.</p><p>With Origin Rules, users can perform host header override, resolve override, destination port override and SNI overrides - based on any number of criteria - not only the requested URL. This unlocks a number of interesting use cases.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"example-use-case-integration-with-cloud-storage-endpoints\">Example use case: integration with cloud storage endpoints</h3>\n      <a href=\"#example-use-case-integration-with-cloud-storage-endpoints\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>One such use case is using a cloud storage provider as a backend for static assets, such as images. Enterprise zones can use a combination of host header override and resolve override actions to override the destination of outgoing HTTP requests. This allows for all traffic to <code>example.net</code> to be sent to <code>98.51.100.12</code>, but requests to <code>example.net/*.jpg</code> be sent to a publicly accessible S3-compatible bucket.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/swQTQskk9TNp4Ghc6EmeP/54fdc46baa87a3a3d1af0bec66b031ca/image1-61.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"453\" loading=\"lazy\"/>\n            \n            </figure><p>To do this, the user would create an Origin Rule setting the resolve override value to be a DNS record on their own zone, pointing to the S3 provider’s URL. This ensures that requests matching the pattern are routed to the S3 URL. However, when the cloud storage provider receives the request it will drop it - as it does not know how to route requests for the host <code>example.net</code>. Therefore, users also need to deploy a host header override, changing this value to match the bucket name - e.g. <code>bucket.example.net</code>.</p><p>Combined, this ensures requests matching the pattern correctly reach the cloud storage provider - with a host header it can use to correctly route the request to the correct bucket.</p><p>Origin Rules also enable new use cases. For example, a user can use Origin Rules to A/B test different cloud providers prior to a cut over. This is possible by using the field <code>http.request.cookies</code> and routing traffic to a new, test bucket or cloud provider based on the presence of a specific cookie on the request.</p><p>Users with multiple storage regions can also use the <code>ip.geoip.country</code> field within a filter expression to route users to the closest storage instance, reducing latency and time to load for these requests.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"destination-port-override\">Destination port override</h3>\n      <a href=\"#destination-port-override\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Cloudflare listens on 13 <a href=\"https://developers.cloudflare.com/fundamentals/get-started/reference/network-ports/\">ports</a>; seven ports for HTTP, six ports for HTTPS. This means if a request is sent to a URL with the destination port of 443, as is standard for HTTPS, it will be sent to the origin server with a destination port of 443. The same 1:1 mapping applies to the other twelve ports.</p><p>But what if a user wanted to change that mapping? For example, when the backend origin server is listening on port 8001. In this scenario, an intermediate service is required to listen for requests on port 443 and create a sub-request with the destination port set to 8001.</p><p>Historically this was done on the origin server itself - with a reverse proxy server listening for requests on 443 and other ports and proxying those requests to another port.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">Apache\n &lt;VirtualHost *:*&gt;\n        ProxyPreserveHost On\n        ProxyPass / http://0.0.0.0:8001/\n        ProxyPassReverse / http://0.0.0.0:8001/\n        ServerName example.com\n    &lt;/VirtualHost&gt;\n\nNGINX\nserver {\n  listen 443;\n  server_name example.com;\n    location / {\n      proxy_pass http://0.0.0.0:8001;\n    }\n}</pre></code>\n            <p>More recently, users have deployed <a href=\"https://workers.cloudflare.com/\">Cloudflare Workers</a> to perform this service, modifying the destination port before HTTP requests ever reach their servers.</p><p>Origin Rules simplifies destination port modifications, letting users change the destination port via a simple rules experience without ever having to write a single line of code or configuration:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/NZLYSIrxlREcyXmAmdlpJ/9c1773381c3a2312275e1fab51e073c2/image2-52.png\" alt=\"\" class=\"kg-image\" width=\"1914\" height=\"384\" loading=\"lazy\"/>\n            \n            </figure><p>This destination port modification can also be triggered on almost any <a href=\"https://developers.cloudflare.com/ruleset-engine/rules-language/fields\">field</a> available in the ruleset engine, also, allowing users to change which port to send requests to based on URL, URI path, the presence of HTTP request header and more.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"server-name-indication\">Server Name Indication</h3>\n      <a href=\"#server-name-indication\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Server Name Indication (SNI) is an addition to the TLS encryption protocol. It enables a client device to specify the domain name it is trying to reach in the first step of the TLS handshake, preventing common “name mismatch” errors. Customers using Cloudflare for SaaS may have millions of hostnames pointing to Cloudflare. However, the origin that these requests are sent to may not have an individual certificate for each of the hostnames.</p><p>Users today have the option of doing this on a per custom hostname basis using <a href=\"https://developers.cloudflare.com/cloudflare-for-saas/start/advanced-settings/custom-origin/\"><i>custom origins</i></a> in SSL for SaaS, however for Enterprise customers not using this setup it was an impossible task.</p><p>Enterprise users can use Origin Rules to override the value of the SNI, providing it matches any other zone in their account. This removes the need for users to manage multiple certificates on the origin or choose not to encrypt connections from Cloudflare to the origin.</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"try-it-now\">Try it now</h3>\n      <a href=\"#try-it-now\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>Origin Rules are available to use <a href=\"https://dash.cloudflare.com/?to=/:account/:zone/rules/\">now</a> via API, Terraform, and our dashboard. Further details can be found on our <a href=\"https://developers.cloudflare.com/rules/origin-rules/\">Developers Docs</a>. Currently, destination port rewriting is available for all our customers as part of Origin Rules. Resolve Override, Host Header Override and SNI overrides are available to our Enterprise users.</p>",
		"id": "5kYzEPiCft3JzD9lyJJ7lV",
		"localeList": {
			"name": "Where to? Introducing Origin Rules Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Origin Rules is a dedicated product for ‘where does this traffic go where it leaves Cloudflare.’ Customers are able to match on an HTTP request using filters and override the host, port, SNI, and the origin a request resolves to.",
		"metadata": {
			"title": "Where to? Introducing Origin Rules",
			"description": "Origin Rules is a dedicated product for ‘where does this traffic go where it leaves Cloudflare.’ Customers are able to match on an HTTP request using filters and override the host, port, SNI, and the origin a request resolves to.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6Sx4Q6BnG72aqmaB7qz62j/d024049bd7c0405dfb193037a2d09e9c/origin-rules-6J6Tjm.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2022-09-27T14:00:00.000+01:00",
		"slug": "origin-rules",
		"tags": [
			{
				"id": "1Cv5JjXzKWKEA10JdYbXu1",
				"name": "Birthday Week",
				"slug": "birthday-week"
			},
			{
				"id": "1tcPzttks7H5EFXi5EiNgL",
				"name": "Origin Rules",
				"slug": "origin-rules"
			},
			{
				"id": "6QktrXeEFcl4e2dZUTZVGl",
				"name": "Product News",
				"slug": "product-news"
			},
			{
				"id": "6Mp7ouACN2rT3YjL1xaXJx",
				"name": "Security",
				"slug": "security"
			}
		],
		"title": "Where to? Introducing Origin Rules",
		"updated_at": "2025-10-24T10:57:00.066Z",
		"url": "https://blog.cloudflare.com/origin-rules"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}