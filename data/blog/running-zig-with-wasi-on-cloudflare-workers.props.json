{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "2",
	"locale": "en-us",
	"localesAvailable": [
		"zh-cn",
		"zh-tw"
	],
	"post": {
		"authors": [
			{
				"name": "Daniel Harper",
				"slug": "daniel-harper",
				"bio": "Systems Engineer",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/719D0JWq1bQvAXDtI0Aex9/0ba373c33bf13c4612d6312b7ac6e714/daniel-harper.jpg",
				"location": "United Kingdom",
				"website": "https://djharper.dev",
				"twitter": null,
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "After the recent announcement regarding WASI support in Workers I decided to see what it would take to get code written in Zig to run as a Worker, and it turned out to be pretty trivial. This post documents the process I followed",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1dwbRYEZNLwufUY4kUq6Ok/f4d900fc4b54dbeffd20dac3b7607108/running-zig-with-wasi-on-cloudflare-workers.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6IYT1Gc6y5cogG4X4H9skK/583baf4700006967596b41b2dbff7908/image1-4.png\" alt=\"Running Zig with WASI on Cloudflare Workers\" class=\"kg-image\" width=\"1801\" height=\"1013\" loading=\"lazy\"/>\n            \n            </figure><p>After the recent announcement regarding <a href=\"/announcing-wasi-on-workers/\">WASI support in Workers</a>, I decided to see what it would take to get code written in <a href=\"https://ziglang.org/\">Zig</a> to run as a Worker, and it turned out to be trivial. This post documents the process I followed as a new user of Zig. It’s so exciting to see how Cloudflare Workers is a polyglot platform allowing you to write programs in the language you love, or the language you’re learning!</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"hello-world\">Hello, World!</h3>\n      <a href=\"#hello-world\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>I’m not a Zig expert by any means, and to keep things entirely honest I’ve only just started looking into the language, but we all have to start somewhere. So, if my Zig code isn’t perfect please bear with me. My goal was to build a real, small program using Zig and deploy it on Cloudflare Workers. And to see how fast I can go from a blank screen to production code.</p><p>My goal for this wasn’t ambitious, just read some text from stdin and print it to stdout with line numbers, like running <code>cat -n</code>. But it does show just how easy the Workers paradigm is. This Zig program works identically on the command-line on my laptop and as an HTTP API deployed on Cloudflare Workers.</p><p>Here’s my code. It reads a line from stdin and outputs the same line prefixed with a line number. It terminates when there’s no more input.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">const std = @import(&quot;std&quot;);\n\npub fn main() anyerror!void {\n\t// setup allocator\n\tvar gpa = std.heap.GeneralPurposeAllocator(.{}){};\n\tdefer std.debug.assert(!gpa.deinit());\n\tconst allocator = gpa.allocator();\n\n\t// setup streams\n\tconst stdout = std.io.getStdOut().writer();\n\tconst in = std.io.getStdIn();\n\tvar reader = std.io.bufferedReader(in.reader()).reader();\n\n\tvar counter: u32 = 1;\n\n\t// read input line by line\n\twhile (try reader.readUntilDelimiterOrEofAlloc(allocator, &#039;\\n&#039;, std.math.maxInt(usize))) |line| {\n    \t    defer allocator.free(line);\n    \t    try stdout.print(&quot;{d}\\t{s}\\n&quot;, .{counter, line});\n    \t    counter = counter + 1;\n\t}\n}</pre></code>\n            <p>To build Zig code, you create a <code>build.zig</code> file that defines how to build your project. For this trivial case I just opted to build an executable from the sources</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">const std = @import(&quot;std&quot;);\n\npub fn build(b: *std.build.Builder) void {\n\tconst target = b.standardTargetOptions(.{});\n\tconst mode = b.standardReleaseOptions();\n\n\tconst exe = b.addExecutable(&quot;print-with-line-numbers&quot;, &quot;src/main.zig&quot;);\n\texe.setTarget(target);\n\texe.setBuildMode(mode);\n\texe.install();\n}</pre></code>\n            <p>By running <code>zig build</code> the compiler will run and output a binary under <code>zig-out/bin</code></p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ zig build\n\n$ ls zig-out/bin\nprint-with-line-numbers\n\n$ echo &quot;Hello\\nWorld&quot; | ./zig-out/bin/print-with-line-numbers\n1    Hello\n2    World</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"wasi\">WASI</h3>\n      <a href=\"#wasi\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>The next step is to get this running on Workers, but first I need to compile it into WASM with WASI support.</p><p>Thankfully, this comes out of the box with recent versions of Zig, so you can just tell the compiler to build your executable using the <code>wasm32-wasi</code> target, which will produce a file that can be run on any WASI-compatible WebAssembly runtime, such as <a href=\"https://wasmtime.dev/\">wasmtime</a>.</p><p>This same .wasm file can be run in wasmtime and deployed directly to Cloudflare Workers. This makes building, testing and deploying seamless.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ zig build -Dtarget=wasm32-wasi\n\n$ ls zig-out/bin\nprint-with-line-numbers.wasm\n\n$ echo &quot;Hello\\nWorld&quot; | wasmtime ./zig-out/bin/print-with-line-numbers.wasm\n1    Hello\n2    World</pre></code>\n            \n    <div class=\"flex anchor relative\">\n      <h3 id=\"zig-on-workers\">Zig on Workers</h3>\n      <a href=\"#zig-on-workers\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>With our binary ready to go, the last piece is to get it running on Cloudflare Workers using <a href=\"/wrangler-v2-beta/\">wrangler2</a>. That is as simple as publishing the .wasm file on workers.dev. If you don’t have a <a href=\"https://workers.dev\">workers.dev</a> account, you can follow the tutorial on our <a href=\"https://developers.cloudflare.com/workers/get-started/guide/\">getting started guide</a> that will get you from code to deployment within minutes!</p><p>In fact, once I signed up for my account, all I needed to do was complete the first two steps, install wrangler and login.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ npx wrangler@wasm login\nAttempting to login via OAuth...\nOpening a link in your default browser: https://dash.cloudflare.com/oauth2/auth\nSuccessfully logged in.</pre></code>\n            <p>Then, I ran the following command to publish my worker:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ npx wrangler@wasm publish --name print-with-line-numbers --compatibility-date=2022-07-07 zig-out/bin/print-with-line-numbers.wasm\nUploaded print-with-line-numbers (3.04 sec)\nPublished print-with-line-numbers (6.28 sec)\n  print-with-line-numbers.workers.dev</pre></code>\n            <p>With that step completed, the worker is ready to run and can be invoked by calling the URL printed from the output above.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">echo &quot;Hello\\nWorld&quot; | curl https://print-with-line-numbers.workers.dev -X POST --data-binary @-\n1    Hello\n2    World</pre></code>\n            <p>Success!</p>\n    <div class=\"flex anchor relative\">\n      <h3 id=\"conclusion\">Conclusion</h3>\n      <a href=\"#conclusion\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n      </a>\n    </div>\n    <p>What impressed me the most here was just how easy this process was.</p><p>First, I had a binary compiled for the architecture of my laptop, then I compiled the code into WebAssembly by just passing a flag to the compiler, and finally I had this running on workers <b>without having to change any code.</b></p><p>Granted, this program was not very complicated and does not do anything other than read from STDIN and write to STDOUT, but it gives me confidence of what is possible, especially as technology like WASI matures.</p>",
		"id": "5Xy5uTuM3ghJ0CV01dfsLi",
		"localeList": {
			"name": "Running Zig with WASI on Cloudflare Workers Config",
			"enUS": "English for Locale",
			"zhCN": "Translated for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "Translated for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "After the recent announcement regarding WASI support in Workers I decided to see what it would take to get code written in Zig to run as a Worker, and it turned out to be pretty trivial. This post documents the process I followed",
		"metadata": {
			"title": "Running Zig with WASI on Cloudflare Workers",
			"description": "After the recent announcement regarding WASI support in Workers I decided to see what it would take to get code written in Zig to run as a Worker, and it turned out to be pretty trivial. This post documents the process I followed",
			"imgPreview": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2lM9mydTrQbZ2piGtokC1I/2b306b4103386d0ff4aef2da9e2ff1f8/running-zig-with-wasi-on-cloudflare-workers-Tmv5dN.png"
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2022-08-01T15:12:26.000+01:00",
		"slug": "running-zig-with-wasi-on-cloudflare-workers",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "5ghWZAL0nNGxrphuhWW6G0",
				"name": "WebAssembly",
				"slug": "webassembly"
			},
			{
				"id": "4hhzQ9V5KQE5wXF4VtEcoG",
				"name": "WASM",
				"slug": "wasm"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Running Zig with WASI on Cloudflare Workers",
		"updated_at": "2024-10-09T23:19:41.828Z",
		"url": "https://blog.cloudflare.com/running-zig-with-wasi-on-cloudflare-workers"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}