{
	"footerBlurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
	"initialReadingTime": "2",
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Steven Pack",
				"slug": "stevenpack",
				"bio": "Partner Engineering Director",
				"profile_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5KBJRA6GGkWLzkmUgwTrMs/82479e6c25be69362e444cdcad205625/stevenpack.png",
				"location": "San Francisco Bay Area, California",
				"website": null,
				"twitter": "@steven_pack",
				"facebook": null,
				"publiclyIndex": true
			}
		],
		"excerpt": "The Workers team have already done an amazing job of creating a functional, familiar edit and debug tooling experience in the Workers IDE. It's Chrome Developer Tools fully integrated to Workers. `console.log` in your Worker goes straight to the console, just as if you were debugging locally!",
		"feature_image": "https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4SRkW7jUzmBG8F8Sjwh5BA/a6a4ce3603a372acbc6cbdee351778b9/debugging-serverless-apps.gif",
		"featured": false,
		"html": "<p>The Workers team have already done an amazing job of creating a functional, familiar edit and debug tooling experience in the Workers IDE. It&#39;s Chrome Developer Tools fully integrated to Workers.</p><p><code>console.log</code> in your Worker goes straight to the console, just as if you were debugging locally! Furthermore, errors and even log lines come complete with call-site info, so you click and navigate straight to the relevant line.In this blog post I’m going to show a small and powerful technique I use to make debugging serverless apps simple and quick.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1SFQMJY48ruzXTvK0EcG7p/8e4d2bcf77cda6a6ff2b360a8ad778f8/workers-ide-console.gif\" alt=\"Integrated Chrome Dev Tools\" class=\"kg-image\" width=\"1320\" height=\"791\" loading=\"lazy\"/>\n            \n            </figure><p>There is a <a href=\"https://developers.cloudflare.com/workers/writing-workers/debugging-tips/\">comprehensive guide</a> to common debugging approaches and I&#39;m going to focus on returning debug information in a header. This is a great tip and one that I use to capture debug information when I&#39;m using curl or Postman, or integration tests. It was a little finicky to get right the first time, so let me save you some trouble.</p><p>If you&#39;ve followed <a href=\"/p/607ad519-5652-4688-9fff-33fbb1fc9d3f/\">part 1</a> or <a href=\"/p/5cd5d990-7b88-4e62-9615-9c51d33daae8/\">part 2</a> of my Workers series, you&#39;ll know I&#39;m using Typescript, but the approach would equally apply to Javascript. In the rest of this example, I’ll be using the routing framework I created in part 2.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"requesting-debug-info\">Requesting Debug Info</h3>\n            <a href=\"#requesting-debug-info\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>I want my Worker to return debugging information whenever:</p><ul><li><p>An X-Debug header is present or</p></li><li><p>a ?debug query parameter is present.</p></li></ul><p>Exercise for the reader: You may also like to require a shared secret key (so that you control who can enable debugging information) and pass a log level.</p><p>I&#39;d like my debug info to be the same that I&#39;d see in the Workers IDE. That is, all the log lines and any exception info from the execution of my Worker.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"architecture\">Architecture</h3>\n            <a href=\"#architecture\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>Logging is orthogonal to the main request flow, so let&#39;s try keep it abstracted. Different frameworks use different terms for this abstraction. I’ll use the term <a href=\"https://en.wikipedia.org/wiki/Interceptor_pattern\">interceptor</a>.</p><p>Let&#39;s define an interceptor as something that runs pre and/or post the main request flow.</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">/**\n * Intercepts requests before handlers and responses after handlers\n */\nexport interface IInterceptor {\n  preProcess(req: RequestContextBase): void;\n  postProcess(req: RequestContextBase, res: Response): void;\n}</pre></code>\n            <p>And then run pre and post processing before and after the handler has executed.</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">public async handle(request: Request): Promise&lt;Response&gt; {\n\tthis.preProcess(req);\n\tconst handler = this.route(req);\n\tconst res = await handler.handle(req);\n\tthis.postProcess(req, res);\n\treturn res;\n}\n\nprivate preProcess(req: RequestContextBase) {\n\tfor (const interceptor of this.interceptors) {\n\t  interceptor.preProcess(req);\n\t}\n}\n\nprivate postProcess(req: RequestContextBase, res: Response) {\n\tfor (const interceptor of this.interceptors) {\n\t  interceptor.postProcess(req, res);\n\t}\n}</pre></code>\n            <p>OK, so with a generalized pattern to execute code before and after a request, let&#39;s add our first Interceptor:</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"loginterceptor\">LogInterceptor</h3>\n            <a href=\"#loginterceptor\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>First we&#39;ll need a logger. This logger just redirects to console, but also keeps track of the log lines so the interceptor can retrieve them later.</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">export class Logger implements ILogger {\n  public logLines: string[] = [];\n\n  public debug(logLine: string): void {\n    this.log(`DEBUG: ${logLine}`);\n  }\n\n  public info(logLine: string): void {\n    this.log(`INFO: ${logLine}`);\n  }\n\n  public warn(logLine: string): void {\n    this.log(`WARN: ${logLine}`);\n  }\n\n  public error(logLine: string): void {\n    this.log(`ERROR: ${logLine}`);\n  }\n\n  public getLines(): string[] {\n    return this.logLines;\n  }\n\n  public clear(): void {\n    this.logLines = [];\n  }\n\n  private log(logLine: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(logLine);\n    this.logLines.push(logLine);\n  }\n}</pre></code>\n            <p>The <code>LogInterceptor</code> is simple enough in post processing, if it detects the X-Debug header or debug query param, it adds all the log lines to the X-Debug response header as a URL-encoded string.</p>\n            <pre class=\"language-typescript\"><code class=\"language-typescript\">const logger = new Logger();\n\nexport class LogInterceptor implements IInterceptor {\n  public preProcess(req: RequestContextBase) {\n    return;\n  }\n\n  public postProcess(req: RequestContextBase, res: Response) {\n    logger.debug(&#039;Evaluating request for logging&#039;);\n    const debugHeader = &#039;X-Debug&#039;;\n    if (\n      req.url.searchParams.get(&#039;debug&#039;) !== &#039;true&#039; &amp;&amp;\n      req.request.headers.get(debugHeader) !== &#039;true&#039;\n    ) {\n      return;\n    }\n    logger.debug(&#039;Executing log interceptor&#039;);\n    const lines = logger.getLines();\n    const logStr = encodeURIComponent(lines.join(&#039;\\n&#039;));\n\n    logger.debug(`Adding to ${debugHeader} header ${logStr.length} chars`);\n    res.headers.append(debugHeader, logStr);\n  }\n}</pre></code>\n            <p>Now it&#39;s up to the client to display.</p>\n          <div class=\"flex anchor relative\">\n            <h3 id=\"decoding-the-result\">Decoding the result</h3>\n            <a href=\"#decoding-the-result\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>urldecode isn&#39;t native on most operating systems. There are Perl and Python implementations, but here&#39;s a Bash only function:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ urldecode() { : &quot;${*//+/ }&quot;; echo -e &quot;${_//%/\\\\x}&quot;; }</pre></code>\n            <p>Source: <a href=\"https://stackoverflow.com/questions/6250698/how-to-decode-url-encoded-string-in-shell\">StackOverflow</a></p><p>Using that, we can call curl, extract the headers, grep for our X-Debug header and then invoke the urldecode function.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ urldecode `curl -sD - -o /dev/null https://cryptoserviceworker.com/api/all/spot/btc-usd -H &quot;X-Debug:true&quot; | grep x-debug`\nx-debug: INFO: Handling: https://cryptoserviceworker.com/api/all/spot/btc-usd\nDEBUG: No handlers, getting from factory\nDEBUG: Found handler for /api/all/spot/btc-usd\nDEBUG: [&quot;spot&quot;,&quot;btc-usd&quot;]\nDEBUG: Getting spot from https://api.gdax.com/products/btc-usd/ticker\nDEBUG: [&quot;spot&quot;,&quot;btc-usd&quot;]\nDEBUG: Parsing spot...\nINFO: GDAX response {&quot;trade_id&quot;:45329353,&quot;price&quot;:&quot;6287.01000000&quot;,&quot;size&quot;:&quot;0.03440000&quot;,&quot;bid&quot;:&quot;6287&quot;,&quot;ask&quot;:&quot;6287.01&quot;,&quot;volume&quot;:&quot;9845.51680796&quot;,&quot;time&quot;:&quot;2018-06-25T18:12:48.282000Z&quot;}\nINFO: Bitfinex response {&quot;mid&quot;:&quot;6283.45&quot;,&quot;bid&quot;:&quot;6283.4&quot;,&quot;ask&quot;:&quot;6283.5&quot;,&quot;last_price&quot;:&quot;6283.5&quot;,&quot;low&quot;:&quot;6068.5&quot;,&quot;high&quot;:&quot;6341.0&quot;,&quot;volume&quot;:&quot;28642.882017660013&quot;,&quot;timestamp&quot;:&quot;1529950365.0694907&quot;}\nDEBUG: Evaluating request for logging\nDEBUG: Executing log interceptor</pre></code>\n            <p>Boom. Decoded debug info right there in the console. Ship it.</p><p>If you log stack traces in your worker with <code>logger.error(e.stack)</code>, that will also format nicely:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">$ urldecode `curl -sD - -o /dev/null https://cryptoserviceworker.com/api/all/spot/btc-usd -H &quot;X-Debug:true&quot; | grep x-debug`\nx-debug: INFO: Handling: https://cryptoserviceworker.com/api/all/spot/btc-usd\nERROR: Error: boom\n    at Router.&lt;anonymous&gt; (worker.js:118:35)\n    at step (worker.js:32:23)\n    at Object.next (worker.js:13:53)\n    at worker.js:7:71\n    at new Promise (&lt;anonymous&gt;)\n    at __awaiter (worker.js:3:12)\n    at Router.handle (worker.js:111:16)\n    at worker.js:48:42\n    at step (worker.js:32:23)\n    at Object.next (worker.js:13:53)\nDEBUG: Evaluating request for logging\nDEBUG: Executing log interceptor</pre></code>\n            \n          <div class=\"flex anchor relative\">\n            <h3 id=\"summary\">Summary</h3>\n            <a href=\"#summary\" aria-hidden=\"true\" class=\"relative sm:absolute sm:-left-5\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg>\n            </a>\n          </div>\n        <p>In this post we:</p><ul><li><p>Defined a pre- and post-processing framework using Interceptors</p></li><li><p>Implemented a LogInterceptor to return logs generated as we were processing in the X-Debug header</p></li><li><p>Decoded them in bash</p></li></ul><p>May the logs be with you.</p>",
		"id": "1f1WHkIOBPw08d4ch1vGPR",
		"localeList": {
			"name": "Debugging Serverless Apps Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"publicly_index": true,
		"published_at": "2018-07-05T14:00:00.000+01:00",
		"slug": "debugging-serverless-apps",
		"tags": [
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			}
		],
		"title": "Debugging Serverless Apps",
		"updated_at": "2024-10-10T00:42:44.579Z",
		"url": "https://blog.cloudflare.com/debugging-serverless-apps"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"search.clear": "Clear",
		"search.filter": "Filter",
		"search.source": "Source",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"search.filters": "Filters",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"search.language": "Language",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"search.result_stat": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong> for <strong>{search_keyword}</strong>",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"search.icon_aria_label": "Search",
		"search.source_location": "Source/Location",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"search.result_stat_empty": "Results <strong>{search_range}</strong> of <strong>{search_total}</strong>",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"search.autocomplete_title": "Insert a query. Press enter to send",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}