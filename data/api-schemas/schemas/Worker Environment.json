{
	"GET /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/content": {
		"description": "Get script content from a worker with an environment.",
		"operationId": "worker-environment-get-script-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "service_name",
				"required": true,
				"schema": {
					"description": "Name of Worker to bind to.",
					"example": "my-worker",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "environment_name",
				"required": true,
				"schema": {
					"description": "Optional environment if the Worker utilizes one.",
					"example": "production",
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"string": {
						"schema": {
							"example": "export default {\n  async fetch(request, env, ctx) {\n    return new Response(\"Hello, world!\");\n  }\n};\n",
							"type": "string"
						}
					}
				},
				"description": "Get script content."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get script content failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get script content",
		"tags": [
			"Worker Environment"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/settings": {
		"description": "Get script settings from a worker with an environment.",
		"operationId": "worker-script-environment-get-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "service_name",
				"required": true,
				"schema": {
					"description": "Name of Worker to bind to.",
					"example": "my-worker",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "environment_name",
				"required": true,
				"schema": {
					"description": "Optional environment if the Worker utilizes one.",
					"example": "production",
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"logpush": {
													"default": false,
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean",
													"x-auditable": true
												},
												"observability": {
													"allOf": [
														{
															"description": "Observability settings for the Worker.",
															"properties": {
																"enabled": {
																	"description": "Whether observability is enabled for the Worker.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"head_sampling_rate": {
																	"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																	"example": 0.1,
																	"nullable": true,
																	"type": "number",
																	"x-auditable": true
																},
																"logs": {
																	"description": "Log settings for the Worker.",
																	"nullable": true,
																	"properties": {
																		"enabled": {
																			"description": "Whether logs are enabled for the Worker.",
																			"example": true,
																			"type": "boolean",
																			"x-auditable": true
																		},
																		"head_sampling_rate": {
																			"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																			"example": 0.1,
																			"nullable": true,
																			"type": "number",
																			"x-auditable": true
																		},
																		"invocation_logs": {
																			"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																			"example": true,
																			"type": "boolean",
																			"x-auditable": true
																		}
																	},
																	"required": [
																		"enabled",
																		"invocation_logs"
																	],
																	"type": "object"
																}
															},
															"required": [
																"enabled"
															],
															"type": "object"
														},
														{
															"nullable": true,
															"type": "object",
															"x-auditable": true
														}
													]
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string",
																"x-auditable": true
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string",
																"x-auditable": true
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"nullable": true,
													"type": "array",
													"x-stainless-collection-type": "set"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Fetch script settings."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script settings failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Settings",
		"tags": [
			"Worker Environment"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"PATCH /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/settings": {
		"description": "Patch script metadata, such as bindings.",
		"operationId": "worker-script-environment-patch-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "service_name",
				"required": true,
				"schema": {
					"description": "Name of Worker to bind to.",
					"example": "my-worker",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "environment_name",
				"required": true,
				"schema": {
					"description": "Optional environment if the Worker utilizes one.",
					"example": "production",
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"allOf": [
							{
								"properties": {
									"errors": {
										"example": [],
										"items": {
											"properties": {
												"code": {
													"minimum": 1000,
													"type": "integer"
												},
												"documentation_url": {
													"type": "string"
												},
												"message": {
													"type": "string"
												},
												"source": {
													"properties": {
														"pointer": {
															"type": "string"
														}
													},
													"type": "object"
												}
											},
											"required": [
												"code",
												"message"
											],
											"type": "object",
											"uniqueItems": true
										},
										"type": "array"
									},
									"messages": {
										"example": [],
										"items": {
											"properties": {
												"code": {
													"minimum": 1000,
													"type": "integer"
												},
												"documentation_url": {
													"type": "string"
												},
												"message": {
													"type": "string"
												},
												"source": {
													"properties": {
														"pointer": {
															"type": "string"
														}
													},
													"type": "object"
												}
											},
											"required": [
												"code",
												"message"
											],
											"type": "object",
											"uniqueItems": true
										},
										"type": "array"
									},
									"success": {
										"description": "Whether the API call was successful.",
										"enum": [
											true
										],
										"example": true,
										"type": "boolean"
									}
								},
								"required": [
									"success",
									"errors",
									"messages"
								],
								"type": "object"
							},
							{
								"properties": {
									"result": {
										"properties": {
											"logpush": {
												"default": false,
												"description": "Whether Logpush is turned on for the Worker.",
												"example": false,
												"type": "boolean",
												"x-auditable": true
											},
											"observability": {
												"allOf": [
													{
														"description": "Observability settings for the Worker.",
														"properties": {
															"enabled": {
																"description": "Whether observability is enabled for the Worker.",
																"example": true,
																"type": "boolean",
																"x-auditable": true
															},
															"head_sampling_rate": {
																"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																"example": 0.1,
																"nullable": true,
																"type": "number",
																"x-auditable": true
															},
															"logs": {
																"description": "Log settings for the Worker.",
																"nullable": true,
																"properties": {
																	"enabled": {
																		"description": "Whether logs are enabled for the Worker.",
																		"example": true,
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"head_sampling_rate": {
																		"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																		"example": 0.1,
																		"nullable": true,
																		"type": "number",
																		"x-auditable": true
																	},
																	"invocation_logs": {
																		"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																		"example": true,
																		"type": "boolean",
																		"x-auditable": true
																	}
																},
																"required": [
																	"enabled",
																	"invocation_logs"
																],
																"type": "object"
															}
														},
														"required": [
															"enabled"
														],
														"type": "object"
													},
													{
														"nullable": true,
														"type": "object",
														"x-auditable": true
													}
												]
											},
											"tail_consumers": {
												"description": "List of Workers that will consume logs from the attached Worker.",
												"items": {
													"description": "A reference to a script that will consume logs from the attached Worker.",
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string",
															"x-auditable": true
														},
														"namespace": {
															"description": "Optional dispatch namespace the script belongs to.",
															"example": "my-namespace",
															"type": "string",
															"x-auditable": true
														},
														"service": {
															"description": "Name of Worker that is to be the consumer.",
															"example": "my-log-consumer",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"service"
													],
													"type": "object"
												},
												"nullable": true,
												"type": "array",
												"x-stainless-collection-type": "set"
											}
										},
										"type": "object"
									}
								},
								"required": [
									"result"
								],
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"logpush": {
													"default": false,
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean",
													"x-auditable": true
												},
												"observability": {
													"allOf": [
														{
															"description": "Observability settings for the Worker.",
															"properties": {
																"enabled": {
																	"description": "Whether observability is enabled for the Worker.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"head_sampling_rate": {
																	"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																	"example": 0.1,
																	"nullable": true,
																	"type": "number",
																	"x-auditable": true
																},
																"logs": {
																	"description": "Log settings for the Worker.",
																	"nullable": true,
																	"properties": {
																		"enabled": {
																			"description": "Whether logs are enabled for the Worker.",
																			"example": true,
																			"type": "boolean",
																			"x-auditable": true
																		},
																		"head_sampling_rate": {
																			"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																			"example": 0.1,
																			"nullable": true,
																			"type": "number",
																			"x-auditable": true
																		},
																		"invocation_logs": {
																			"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																			"example": true,
																			"type": "boolean",
																			"x-auditable": true
																		}
																	},
																	"required": [
																		"enabled",
																		"invocation_logs"
																	],
																	"type": "object"
																}
															},
															"required": [
																"enabled"
															],
															"type": "object"
														},
														{
															"nullable": true,
															"type": "object",
															"x-auditable": true
														}
													]
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string",
																"x-auditable": true
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string",
																"x-auditable": true
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"nullable": true,
													"type": "array",
													"x-stainless-collection-type": "set"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch script settings."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch script settings failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Script Settings",
		"tags": [
			"Worker Environment"
		]
	},
	"PUT /accounts/{account_id}/workers/services/{service_name}/environments/{environment_name}/content": {
		"description": "Put script content from a worker with an environment.",
		"operationId": "worker-environment-put-script-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "service_name",
				"required": true,
				"schema": {
					"description": "Name of Worker to bind to.",
					"example": "my-worker",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "environment_name",
				"required": true,
				"schema": {
					"description": "Optional environment if the Worker utilizes one.",
					"example": "production",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-BODY-PART",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-MAIN-MODULE-PART",
				"schema": {
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"encoding": {
						"files": {
							"contentType": "application/javascript+module, text/javascript+module, application/javascript, text/javascript, text/x-python, text/x-python-requirement, application/wasm, text/plain, application/octet-stream, application/source-map"
						},
						"metadata": {
							"contentType": "application/json"
						}
					},
					"schema": {
						"properties": {
							"files": {
								"description": "An array of modules (often JavaScript files) comprising a Worker script. At least one module must be present and referenced in the metadata as `main_module` or `body_part` by filename.<br/>Possible Content-Type(s) are: `application/javascript+module`, `text/javascript+module`, `application/javascript`, `text/javascript`, `text/x-python`, `text/x-python-requirement`, `application/wasm`, `text/plain`, `application/octet-stream`, `application/source-map`.",
								"items": {
									"format": "binary",
									"type": "string"
								},
								"type": "array",
								"x-stainless-collection-type": "set"
							},
							"metadata": {
								"description": "JSON-encoded metadata about the uploaded parts and Worker configuration.",
								"oneOf": [
									{
										"properties": {
											"main_module": {
												"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
												"example": "worker.js",
												"type": "string"
											}
										},
										"required": [
											"main_module"
										]
									},
									{
										"properties": {
											"body_part": {
												"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
												"example": "worker.js",
												"type": "string"
											}
										},
										"required": [
											"body_part"
										]
									}
								],
								"type": "object"
							}
						},
						"required": [
							"metadata"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"etag": {
													"description": "Hashed script content, can be used in a If-None-Match header when updating.",
													"example": "ea95132c15732412d22c1476fa83f27a",
													"readOnly": true,
													"type": "string"
												},
												"has_assets": {
													"description": "Whether a Worker contains assets.",
													"example": false,
													"type": "boolean",
													"x-auditable": true
												},
												"has_modules": {
													"description": "Whether a Worker contains modules.",
													"example": false,
													"type": "boolean",
													"x-auditable": true
												},
												"id": {
													"description": "The id of the script in the Workers system. Usually the script name.",
													"example": "my-workers-script",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"logpush": {
													"default": false,
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean",
													"x-auditable": true
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"placement": {
													"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
													"properties": {
														"last_analyzed_at": {
															"description": "The last time the script was analyzed for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"example": "2025-01-01T00:00:00Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"mode": {
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"smart"
															],
															"type": "string",
															"x-auditable": true
														},
														"status": {
															"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"SUCCESS",
																"UNSUPPORTED_APPLICATION",
																"INSUFFICIENT_INVOCATIONS"
															],
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"placement_mode": {
													"allOf": [
														{
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"smart"
															],
															"type": "string",
															"x-auditable": true
														},
														{
															"deprecated": true,
															"type": "string"
														}
													]
												},
												"placement_status": {
													"allOf": [
														{
															"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"SUCCESS",
																"UNSUPPORTED_APPLICATION",
																"INSUFFICIENT_INVOCATIONS"
															],
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														{
															"deprecated": true,
															"type": "string"
														}
													]
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string",
																"x-auditable": true
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string",
																"x-auditable": true
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array",
													"x-stainless-collection-type": "set"
												},
												"usage_model": {
													"default": "standard",
													"description": "Usage model for the Worker invocations.",
													"enum": [
														"standard"
													],
													"example": "standard",
													"type": "string",
													"x-auditable": true
												}
											}
										}
									},
									"required": [
										"result"
									],
									"type": "object",
									"x-cfLinkErrors": {
										"10001": "Unsupported or unexpected Content Type",
										"10002": "Unexpected internal server error",
										"10003": "Missing required URL parameter",
										"10004": "Malformed URL parameter",
										"10006": "Unparseable script body",
										"10007": "Resource not found (similar to HTTP 404)",
										"10014": "Internal error while attempting authorization checks",
										"10015": "The current account is not authorized to use workers",
										"10018": "Attempted to update a script where the e-tag does not match",
										"10021": "Script content failed validation checks, but was otherwise parseable",
										"10023": "Unauthorized access attempt",
										"10027": "Script body was too large",
										"10075": "Requires a Workers Paid plan"
									}
								}
							]
						}
					}
				},
				"description": "Put script content."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Put script content failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put script content",
		"tags": [
			"Worker Environment"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	}
}