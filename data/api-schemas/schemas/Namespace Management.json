{
	"GET /accounts/{account_id}/r2-catalog/{bucket_name}/namespaces": {
		"description": "Returns a list of namespaces in the specified R2 catalog.\nSupports hierarchical filtering and pagination for efficient traversal\nof large namespace hierarchies.\n",
		"operationId": "list-namespaces",
		"parameters": [
			{
				"description": "Identifies the account.",
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Use this to identify the account.",
					"example": "0123456789abcdef0123456789abcdef",
					"pattern": "^[a-fA-F0-9]{32}$",
					"type": "string"
				}
			},
			{
				"description": "Specifies the R2 bucket name.",
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Specifies the R2 bucket name.",
					"example": "my-data-bucket",
					"maxLength": 63,
					"minLength": 3,
					"pattern": "^[a-z0-9]([a-z0-9\\-]*[a-z0-9])?$",
					"type": "string"
				}
			},
			{
				"description": "Opaque pagination token from a previous response.\nUse this to fetch the next page of results.\n",
				"example": "MSYxNzU5NzU1NTc4NTA0MTk0JjAxOTliOTliLTJjODgtNzNiMy04ZGJiLTQyMWUwZThmMjc1Nw",
				"in": "query",
				"name": "page_token",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "Maximum number of namespaces to return per page.\nDefaults to 100, maximum 1000.\n",
				"example": 100,
				"in": "query",
				"name": "page_size",
				"schema": {
					"default": 100,
					"maximum": 1000,
					"minimum": 1,
					"type": "integer"
				}
			},
			{
				"description": "Parent namespace to filter by. Only returns direct children of this namespace.\nFor nested namespaces, use %1F as separator (e.g., \"bronze%1Fanalytics\").\nOmit this parameter to list top-level namespaces.\n",
				"example": "bronze",
				"in": "query",
				"name": "parent",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "Whether to include namespace UUIDs in the response.\nSet to true to receive the namespace_uuids array.\n",
				"example": true,
				"in": "query",
				"name": "return_uuids",
				"schema": {
					"default": false,
					"type": "boolean"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"example": {
							"errors": [],
							"messages": [],
							"result": {
								"namespace_uuids": [
									"0199b999-6869-7383-bb1f-d30e059d5326",
									"0199b99b-2c88-73b3-8dbb-421e0e8f2757",
									"0199b99c-3d99-73c4-9dcc-532f1f9g3868"
								],
								"namespaces": [
									[
										"bronze"
									],
									[
										"silver"
									],
									[
										"gold"
									]
								],
								"next_page_token": null
							},
							"success": true
						},
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"description": "Contains errors if the API call was unsuccessful.",
											"items": {
												"properties": {
													"code": {
														"description": "Specifies the error code.",
														"type": "integer"
													},
													"message": {
														"description": "Describes the error.",
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array"
										},
										"messages": {
											"description": "Contains informational messages.",
											"items": {
												"properties": {
													"code": {
														"description": "Specifies the message code.",
														"type": "integer"
													},
													"message": {
														"description": "Contains the message text.",
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array"
										},
										"success": {
											"description": "Indicates whether the API call was successful.",
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "Contains the list of namespaces with optional pagination.",
											"properties": {
												"namespace_uuids": {
													"description": "Contains UUIDs for each namespace when return_uuids is true.\nThe order corresponds to the namespaces array.\n",
													"example": [
														"0199b999-6869-7383-bb1f-d30e059d5326",
														"0199b99b-2c88-73b3-8dbb-421e0e8f2757"
													],
													"items": {
														"format": "uuid",
														"type": "string"
													},
													"nullable": true,
													"type": "array"
												},
												"namespaces": {
													"description": "Lists namespaces in the catalog.",
													"items": {
														"description": "Specifies the hierarchical namespace parts as an array of strings.\nFor example, [\"bronze\", \"analytics\"] represents the namespace \"bronze.analytics\".\n",
														"example": [
															"bronze",
															"analytics"
														],
														"items": {
															"type": "string"
														},
														"maxItems": 16,
														"minItems": 1,
														"type": "array"
													},
													"type": "array"
												},
												"next_page_token": {
													"description": "Use this opaque token to fetch the next page of results.\nA null or absent value indicates the last page.\n",
													"example": "MSYxNzU5NzU1NTc4NTA0MTk0JjAxOTliOTliLTJjODgtNzNiMy04ZGJiLTQyMWUwZThmMjc1Nw",
													"nullable": true,
													"type": "string"
												}
											},
											"required": [
												"namespaces"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List of namespaces retrieved successfully."
			},
			"400": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"type": "object"
									},
									"minItems": 1,
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "object"
									},
									"type": "array"
								},
								"success": {
									"enum": [
										false
									],
									"type": "boolean"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Bad request (e.g., invalid page_size, malformed parent namespace)."
			},
			"401": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"type": "object"
									},
									"minItems": 1,
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "object"
									},
									"type": "array"
								},
								"success": {
									"enum": [
										false
									],
									"type": "boolean"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Authentication failed."
			},
			"403": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"type": "object"
									},
									"minItems": 1,
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "object"
									},
									"type": "array"
								},
								"success": {
									"enum": [
										false
									],
									"type": "boolean"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Forbidden."
			},
			"404": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"type": "object"
									},
									"minItems": 1,
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "object"
									},
									"type": "array"
								},
								"success": {
									"enum": [
										false
									],
									"type": "boolean"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Catalog not found."
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"type": "object"
									},
									"minItems": 1,
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "object"
									},
									"type": "array"
								},
								"success": {
									"enum": [
										false
									],
									"type": "boolean"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Internal server error."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List namespaces in catalog",
		"tags": [
			"Namespace Management"
		],
		"x-api-token-group": [
			"Workers R2 Data Catalog Write",
			"Workers R2 Data Catalog Read"
		]
	}
}