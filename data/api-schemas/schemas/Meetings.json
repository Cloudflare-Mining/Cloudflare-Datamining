{
	"DELETE /accounts/{account_id}/realtimekit/meetings/{meeting_id}/participants/{participant_id}": {
		"description": "Deletes a participant for the given meeting and participant ID.",
		"operationId": "delete_meeting_participant",
		"parameters": [
			{
				"description": "ID of the meeting. You can fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			},
			{
				"description": "ID of the participant. You can fetch the participant ID using the add a participant API.",
				"in": "path",
				"name": "participant_id",
				"required": true,
				"schema": {
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"properties": {
												"created_at": {
													"description": "Timestamp this object was created at. The time is returned in ISO format.",
													"format": "date-time",
													"type": "string"
												},
												"custom_participant_id": {
													"description": "A unique participant ID generated by the client.",
													"type": "string"
												},
												"preset_id": {
													"description": "ID of the preset applied to this participant.",
													"format": "uuid",
													"type": "string"
												},
												"updated_at": {
													"description": "Timestamp this object was updated at. The time is returned in ISO format.",
													"format": "date-time",
													"type": "string"
												}
											},
											"required": [
												"custom_participant_id",
												"preset_id",
												"created_at",
												"updated_at"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Delete a participant",
		"tags": [
			"Meetings"
		]
	},
	"GET /accounts/{account_id}/realtimekit/meetings": {
		"description": "Returns all meetings for the given organization ID.",
		"operationId": "get_all_meetings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"allowEmptyValue": true,
				"description": "The page number from which you want your page search results to be displayed.",
				"in": "query",
				"name": "page_no",
				"schema": {
					"minimum": 0,
					"type": "number"
				}
			},
			{
				"allowEmptyValue": true,
				"description": "Number of results per page",
				"in": "query",
				"name": "per_page",
				"schema": {
					"minimum": 0,
					"type": "number"
				}
			},
			{
				"description": "The start time range for which you want to retrieve the meetings. The time must be specified in ISO format.",
				"in": "query",
				"name": "start_time",
				"schema": {
					"format": "date-time",
					"type": "string"
				}
			},
			{
				"description": "The end time range for which you want to retrieve the meetings. The time must be specified in ISO format.",
				"in": "query",
				"name": "end_time",
				"schema": {
					"format": "date-time",
					"type": "string"
				}
			},
			{
				"description": "The search query string. You can search using the meeting ID or title.",
				"in": "query",
				"name": "search",
				"schema": {
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"items": {
												"type": "object"
											},
											"type": "array"
										},
										"paging": {
											"properties": {
												"end_offset": {
													"example": 30,
													"type": "number"
												},
												"start_offset": {
													"example": 1,
													"type": "number"
												},
												"total_count": {
													"example": 30,
													"minimum": 0,
													"type": "number"
												}
											},
											"required": [
												"total_count",
												"start_offset",
												"end_offset"
											],
											"type": "object"
										},
										"success": {
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"data",
										"paging"
									],
									"title": "PagingResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"items": {
												"properties": {
													"created_at": {
														"description": "Timestamp the object was created at. The time is returned in ISO format.",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"id": {
														"description": "ID of the meeting.",
														"format": "uuid",
														"readOnly": true,
														"type": "string"
													},
													"live_stream_on_start": {
														"description": "Specifies if the meeting should start getting livestreamed on start.",
														"type": "boolean"
													},
													"persist_chat": {
														"description": "Specifies if Chat within a meeting should persist for a week.",
														"type": "boolean"
													},
													"preferred_region": {
														"description": "The region in which this meeting should be created.",
														"enum": [
															"ap-south-1",
															"ap-southeast-1",
															"us-east-1",
															"eu-central-1",
															null
														],
														"nullable": true,
														"type": "string"
													},
													"record_on_start": {
														"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
														"type": "boolean"
													},
													"session_keep_alive_time_in_secs": {
														"default": 60,
														"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
														"maximum": 600,
														"minimum": 60,
														"type": "number"
													},
													"status": {
														"description": "Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.",
														"enum": [
															"ACTIVE",
															"INACTIVE"
														],
														"type": "string"
													},
													"summarize_on_end": {
														"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
														"type": "boolean"
													},
													"title": {
														"description": "Title of the meeting.",
														"type": "string"
													},
													"updated_at": {
														"description": "Timestamp the object was updated at. The time is returned in ISO format.",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													}
												},
												"required": [
													"id",
													"created_at",
													"updated_at"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Fetch all meetings for an organization",
		"tags": [
			"Meetings"
		]
	},
	"GET /accounts/{account_id}/realtimekit/meetings/{meeting_id}": {
		"description": "Returns a meeting details in an organization for the given meeting ID.",
		"operationId": "get_meeting",
		"parameters": [
			{
				"in": "query",
				"name": "name",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "ID of the meeting. Fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"allOf": [
										{
											"properties": {
												"data": {
													"properties": {
														"created_at": {
															"description": "Timestamp the object was created at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"id": {
															"description": "ID of the meeting.",
															"format": "uuid",
															"readOnly": true,
															"type": "string"
														},
														"live_stream_on_start": {
															"description": "Specifies if the meeting should start getting livestreamed on start.",
															"type": "boolean"
														},
														"persist_chat": {
															"description": "Specifies if Chat within a meeting should persist for a week.",
															"type": "boolean"
														},
														"preferred_region": {
															"description": "The region in which this meeting should be created.",
															"enum": [
																"ap-south-1",
																"ap-southeast-1",
																"us-east-1",
																"eu-central-1",
																null
															],
															"nullable": true,
															"type": "string"
														},
														"record_on_start": {
															"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
															"type": "boolean"
														},
														"session_keep_alive_time_in_secs": {
															"default": 60,
															"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
															"maximum": 600,
															"minimum": 60,
															"type": "number"
														},
														"status": {
															"description": "Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.",
															"enum": [
																"ACTIVE",
																"INACTIVE"
															],
															"type": "string"
														},
														"summarize_on_end": {
															"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
															"type": "boolean"
														},
														"title": {
															"description": "Title of the meeting.",
															"type": "string"
														},
														"updated_at": {
															"description": "Timestamp the object was updated at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														}
													},
													"required": [
														"id",
														"created_at",
														"updated_at"
													],
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"recording_config": {
															"description": "Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.\n",
															"properties": {
																"audio_config": {
																	"description": "Object containing configuration regarding the audio that is being recorded.",
																	"properties": {
																		"channel": {
																			"default": "stereo",
																			"description": "Audio signal pathway within an audio file that carries a specific sound source.",
																			"enum": [
																				"mono",
																				"stereo"
																			],
																			"type": "string"
																		},
																		"codec": {
																			"default": "AAC",
																			"description": "Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.",
																			"enum": [
																				"MP3",
																				"AAC"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export audio file seperately",
																			"type": "boolean"
																		}
																	},
																	"title": "AudioConfig",
																	"type": "object"
																},
																"file_name_prefix": {
																	"description": "Adds a prefix to the beginning of the file name of the recording.",
																	"type": "string"
																},
																"live_streaming_config": {
																	"properties": {
																		"rtmp_url": {
																			"description": "RTMP URL to stream to",
																			"example": "rtmp://a.rtmp.youtube.com/live2",
																			"format": "uri",
																			"type": "string"
																		}
																	},
																	"title": "LivestreamingConfig",
																	"type": "object"
																},
																"max_seconds": {
																	"description": "Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.",
																	"maximum": 86400,
																	"minimum": 60,
																	"type": "number"
																},
																"realtimekit_bucket_config": {
																	"properties": {
																		"enabled": {
																			"description": "Controls whether recordings are uploaded to RealtimeKit's bucket. If set to false, `download_url`, `audio_download_url`, `download_url_expiry` won't be generated for a recording.",
																			"type": "boolean"
																		}
																	},
																	"required": [
																		"enabled"
																	],
																	"title": "realtimekitBucketConfig",
																	"type": "object"
																},
																"storage_config": {
																	"nullable": true,
																	"properties": {
																		"access_key": {
																			"description": "Access key of the storage medium. Access key is not required for the `gcs` storage media type.\n\nNote that this field is not readable by clients, only writeable.",
																			"type": "string",
																			"writeOnly": true
																		},
																		"auth_method": {
																			"description": "Authentication method used for \"sftp\" type storage medium\n",
																			"enum": [
																				"KEY",
																				"PASSWORD"
																			],
																			"type": "string"
																		},
																		"bucket": {
																			"description": "Name of the storage medium's bucket.",
																			"type": "string"
																		},
																		"host": {
																			"description": "SSH destination server host for SFTP type storage medium",
																			"type": "string"
																		},
																		"password": {
																			"description": "SSH destination server password for SFTP type storage medium when auth_method is \"PASSWORD\". If auth_method is \"KEY\", this specifies the password for the ssh private key.",
																			"type": "string"
																		},
																		"path": {
																			"description": "Path relative to the bucket root at which the recording will be placed.",
																			"type": "string"
																		},
																		"port": {
																			"description": "SSH destination server port for SFTP type storage medium",
																			"type": "number"
																		},
																		"private_key": {
																			"description": "Private key used to login to destination SSH server for SFTP type storage medium, when auth_method used is \"KEY\"",
																			"type": "string"
																		},
																		"region": {
																			"description": "Region of the storage medium.",
																			"example": "us-east-1",
																			"type": "string"
																		},
																		"secret": {
																			"description": "Secret key of the storage medium. Similar to `access_key`, it is only writeable by clients, not readable.",
																			"type": "string"
																		},
																		"type": {
																			"description": "Type of storage media.",
																			"enum": [
																				"aws",
																				"azure",
																				"digitalocean",
																				"gcs",
																				"sftp"
																			],
																			"type": "string"
																		},
																		"username": {
																			"description": "SSH destination server username for SFTP type storage medium",
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"title": "StorageConfig",
																	"type": "object"
																},
																"video_config": {
																	"properties": {
																		"codec": {
																			"default": "H264",
																			"description": "Codec using which the recording will be encoded.",
																			"enum": [
																				"H264",
																				"VP8"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export video file seperately",
																			"type": "boolean"
																		},
																		"height": {
																			"default": 720,
																			"description": "Height of the recording video in pixels",
																			"example": 720,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		},
																		"watermark": {
																			"description": "Watermark to be added to the recording",
																			"properties": {
																				"position": {
																					"default": "left top",
																					"description": "Position of the watermark",
																					"enum": [
																						"left top",
																						"right top",
																						"left bottom",
																						"right bottom"
																					],
																					"type": "string"
																				},
																				"size": {
																					"description": "Size of the watermark",
																					"properties": {
																						"height": {
																							"description": "Height of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						},
																						"width": {
																							"description": "Width of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						}
																					},
																					"type": "object"
																				},
																				"url": {
																					"description": "URL of the watermark image",
																					"format": "uri",
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"width": {
																			"default": 1280,
																			"description": "Width of the recording video in pixels",
																			"example": 1280,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		}
																	},
																	"title": "VideoConfig",
																	"type": "object"
																}
															},
															"title": "RecordingConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"ai_config": {
															"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
															"properties": {
																"summarization": {
																	"description": "Summary Config",
																	"properties": {
																		"summary_type": {
																			"default": "general",
																			"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
																			"enum": [
																				"general",
																				"team_meeting",
																				"sales_call",
																				"client_check_in",
																				"interview",
																				"daily_standup",
																				"one_on_one_meeting",
																				"lecture",
																				"code_review"
																			],
																			"type": "string"
																		},
																		"text_format": {
																			"default": "markdown",
																			"description": "Determines the text format of the summary, such as plain text or markdown.",
																			"enum": [
																				"plain_text",
																				"markdown"
																			],
																			"type": "string"
																		},
																		"word_limit": {
																			"default": 500,
																			"description": "Sets the maximum number of words in the meeting summary.",
																			"maximum": 1000,
																			"minimum": 150,
																			"type": "integer"
																		}
																	},
																	"title": "SummarizationConfig",
																	"type": "object"
																},
																"transcription": {
																	"description": "Transcription Configurations",
																	"properties": {
																		"keywords": {
																			"description": "Adds specific terms to improve accurate detection during transcription.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"language": {
																			"default": "en-US",
																			"description": "Specifies the language code for transcription to ensure accurate results.",
																			"enum": [
																				"en-US",
																				"en-IN",
																				"de",
																				"hi",
																				"sv",
																				"ru",
																				"pl",
																				"el",
																				"fr",
																				"nl"
																			],
																			"type": "string"
																		},
																		"profanity_filter": {
																			"default": false,
																			"description": "Control the inclusion of offensive language in transcriptions.",
																			"type": "boolean"
																		}
																	},
																	"title": "TranscriptionConfig",
																	"type": "object"
																}
															},
															"title": "AIConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Fetch a meeting for an organization",
		"tags": [
			"Meetings"
		]
	},
	"GET /accounts/{account_id}/realtimekit/meetings/{meeting_id}/participants": {
		"description": "Returns all participants detail for the given meeting ID.",
		"operationId": "get_meeting_participants",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"allowEmptyValue": true,
				"description": "The page number from which you want your page search results to be displayed.",
				"in": "query",
				"name": "page_no",
				"schema": {
					"minimum": 0,
					"type": "number"
				}
			},
			{
				"allowEmptyValue": true,
				"description": "Number of results per page",
				"in": "query",
				"name": "per_page",
				"schema": {
					"minimum": 0,
					"type": "number"
				}
			},
			{
				"description": "ID of the meeting. Fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"items": {
												"type": "object"
											},
											"type": "array"
										},
										"paging": {
											"properties": {
												"end_offset": {
													"example": 30,
													"type": "number"
												},
												"start_offset": {
													"example": 1,
													"type": "number"
												},
												"total_count": {
													"example": 30,
													"minimum": 0,
													"type": "number"
												}
											},
											"required": [
												"total_count",
												"start_offset",
												"end_offset"
											],
											"type": "object"
										},
										"success": {
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"data",
										"paging"
									],
									"title": "PagingResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"items": {
												"description": "Represents a participant.",
												"properties": {
													"created_at": {
														"description": "When this object was created. The time is returned in ISO format.",
														"format": "date-time",
														"type": "string"
													},
													"custom_participant_id": {
														"description": "A unique participant ID generated by the client.",
														"type": "string"
													},
													"id": {
														"description": "ID of the participant.",
														"format": "uuid",
														"type": "string"
													},
													"name": {
														"description": "Name of the participant.",
														"nullable": true,
														"type": "string"
													},
													"picture": {
														"description": "URL to a picture of the participant.",
														"format": "uri",
														"nullable": true,
														"type": "string"
													},
													"preset_name": {
														"description": "Preset applied to the participant.",
														"type": "string"
													},
													"updated_at": {
														"description": "When this object was updated. The time is returned in ISO format.",
														"format": "date-time",
														"type": "string"
													}
												},
												"required": [
													"id",
													"custom_participant_id",
													"preset_name",
													"created_at",
													"updated_at"
												],
												"title": "Participant",
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Fetch all participants of a meeting",
		"tags": [
			"Meetings"
		]
	},
	"GET /accounts/{account_id}/realtimekit/meetings/{meeting_id}/participants/{participant_id}": {
		"description": "Returns a participant details for the given meeting and participant ID.",
		"operationId": "get_meeting_participant",
		"parameters": [
			{
				"description": "ID of the meeting. You can fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			},
			{
				"description": "ID of the participant. You can fetch the participant ID using the add a participant API.",
				"in": "path",
				"name": "participant_id",
				"required": true,
				"schema": {
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"description": "Represents a participant.",
											"properties": {
												"created_at": {
													"description": "When this object was created. The time is returned in ISO format.",
													"format": "date-time",
													"type": "string"
												},
												"custom_participant_id": {
													"description": "A unique participant ID generated by the client.",
													"type": "string"
												},
												"id": {
													"description": "ID of the participant.",
													"format": "uuid",
													"type": "string"
												},
												"name": {
													"description": "Name of the participant.",
													"nullable": true,
													"type": "string"
												},
												"picture": {
													"description": "URL to a picture of the participant.",
													"format": "uri",
													"nullable": true,
													"type": "string"
												},
												"preset_name": {
													"description": "Preset applied to the participant.",
													"type": "string"
												},
												"updated_at": {
													"description": "When this object was updated. The time is returned in ISO format.",
													"format": "date-time",
													"type": "string"
												}
											},
											"required": [
												"id",
												"custom_participant_id",
												"preset_name",
												"created_at",
												"updated_at"
											],
											"title": "Participant",
											"type": "object"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Fetch a participant's detail",
		"tags": [
			"Meetings"
		]
	},
	"PATCH /accounts/{account_id}/realtimekit/meetings/{meeting_id}": {
		"description": "Updates a meeting in an organization for the given meeting ID.",
		"operationId": "update_meeting",
		"parameters": [
			{
				"description": "ID of the meeting. Fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"ai_config": {
								"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
								"properties": {
									"summarization": {
										"description": "Summary Config",
										"properties": {
											"summary_type": {
												"default": "general",
												"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
												"enum": [
													"general",
													"team_meeting",
													"sales_call",
													"client_check_in",
													"interview",
													"daily_standup",
													"one_on_one_meeting",
													"lecture",
													"code_review"
												],
												"type": "string"
											},
											"text_format": {
												"default": "markdown",
												"description": "Determines the text format of the summary, such as plain text or markdown.",
												"enum": [
													"plain_text",
													"markdown"
												],
												"type": "string"
											},
											"word_limit": {
												"default": 500,
												"description": "Sets the maximum number of words in the meeting summary.",
												"maximum": 1000,
												"minimum": 150,
												"type": "integer"
											}
										},
										"title": "SummarizationConfig",
										"type": "object"
									},
									"transcription": {
										"description": "Transcription Configurations",
										"properties": {
											"keywords": {
												"description": "Adds specific terms to improve accurate detection during transcription.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"language": {
												"default": "en-US",
												"description": "Specifies the language code for transcription to ensure accurate results.",
												"enum": [
													"en-US",
													"en-IN",
													"de",
													"hi",
													"sv",
													"ru",
													"pl",
													"el",
													"fr",
													"nl"
												],
												"type": "string"
											},
											"profanity_filter": {
												"default": false,
												"description": "Control the inclusion of offensive language in transcriptions.",
												"type": "boolean"
											}
										},
										"title": "TranscriptionConfig",
										"type": "object"
									}
								},
								"title": "AIConfig",
								"type": "object"
							},
							"live_stream_on_start": {
								"default": false,
								"description": "Specifies if the meeting should start getting livestreamed on start.",
								"type": "boolean"
							},
							"persist_chat": {
								"default": false,
								"description": "If a meeting is updated to persist_chat, meeting chat would remain for a week within the meeting space.",
								"type": "boolean"
							},
							"preferred_region": {
								"description": "The region in which this meeting should be created.",
								"enum": [
									"ap-south-1",
									"ap-southeast-1",
									"us-east-1",
									"eu-central-1"
								],
								"type": "string"
							},
							"record_on_start": {
								"default": false,
								"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
								"type": "boolean"
							},
							"session_keep_alive_time_in_secs": {
								"default": 60,
								"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
								"maximum": 600,
								"minimum": 60,
								"type": "number"
							},
							"status": {
								"description": "Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.",
								"enum": [
									"ACTIVE",
									"INACTIVE"
								],
								"example": "INACTIVE",
								"type": "string"
							},
							"summarize_on_end": {
								"default": false,
								"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
								"type": "boolean"
							},
							"title": {
								"description": "Title of the meeting",
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"description": "Create meeting body"
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"allOf": [
										{
											"properties": {
												"data": {
													"properties": {
														"created_at": {
															"description": "Timestamp the object was created at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"id": {
															"description": "ID of the meeting.",
															"format": "uuid",
															"readOnly": true,
															"type": "string"
														},
														"live_stream_on_start": {
															"description": "Specifies if the meeting should start getting livestreamed on start.",
															"type": "boolean"
														},
														"persist_chat": {
															"description": "Specifies if Chat within a meeting should persist for a week.",
															"type": "boolean"
														},
														"preferred_region": {
															"description": "The region in which this meeting should be created.",
															"enum": [
																"ap-south-1",
																"ap-southeast-1",
																"us-east-1",
																"eu-central-1",
																null
															],
															"nullable": true,
															"type": "string"
														},
														"record_on_start": {
															"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
															"type": "boolean"
														},
														"session_keep_alive_time_in_secs": {
															"default": 60,
															"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
															"maximum": 600,
															"minimum": 60,
															"type": "number"
														},
														"status": {
															"description": "Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.",
															"enum": [
																"ACTIVE",
																"INACTIVE"
															],
															"type": "string"
														},
														"summarize_on_end": {
															"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
															"type": "boolean"
														},
														"title": {
															"description": "Title of the meeting.",
															"type": "string"
														},
														"updated_at": {
															"description": "Timestamp the object was updated at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														}
													},
													"required": [
														"id",
														"created_at",
														"updated_at"
													],
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"recording_config": {
															"description": "Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.\n",
															"properties": {
																"audio_config": {
																	"description": "Object containing configuration regarding the audio that is being recorded.",
																	"properties": {
																		"channel": {
																			"default": "stereo",
																			"description": "Audio signal pathway within an audio file that carries a specific sound source.",
																			"enum": [
																				"mono",
																				"stereo"
																			],
																			"type": "string"
																		},
																		"codec": {
																			"default": "AAC",
																			"description": "Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.",
																			"enum": [
																				"MP3",
																				"AAC"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export audio file seperately",
																			"type": "boolean"
																		}
																	},
																	"title": "AudioConfig",
																	"type": "object"
																},
																"file_name_prefix": {
																	"description": "Adds a prefix to the beginning of the file name of the recording.",
																	"type": "string"
																},
																"live_streaming_config": {
																	"properties": {
																		"rtmp_url": {
																			"description": "RTMP URL to stream to",
																			"example": "rtmp://a.rtmp.youtube.com/live2",
																			"format": "uri",
																			"type": "string"
																		}
																	},
																	"title": "LivestreamingConfig",
																	"type": "object"
																},
																"max_seconds": {
																	"description": "Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.",
																	"maximum": 86400,
																	"minimum": 60,
																	"type": "number"
																},
																"realtimekit_bucket_config": {
																	"properties": {
																		"enabled": {
																			"description": "Controls whether recordings are uploaded to RealtimeKit's bucket. If set to false, `download_url`, `audio_download_url`, `download_url_expiry` won't be generated for a recording.",
																			"type": "boolean"
																		}
																	},
																	"required": [
																		"enabled"
																	],
																	"title": "realtimekitBucketConfig",
																	"type": "object"
																},
																"storage_config": {
																	"nullable": true,
																	"properties": {
																		"access_key": {
																			"description": "Access key of the storage medium. Access key is not required for the `gcs` storage media type.\n\nNote that this field is not readable by clients, only writeable.",
																			"type": "string",
																			"writeOnly": true
																		},
																		"auth_method": {
																			"description": "Authentication method used for \"sftp\" type storage medium\n",
																			"enum": [
																				"KEY",
																				"PASSWORD"
																			],
																			"type": "string"
																		},
																		"bucket": {
																			"description": "Name of the storage medium's bucket.",
																			"type": "string"
																		},
																		"host": {
																			"description": "SSH destination server host for SFTP type storage medium",
																			"type": "string"
																		},
																		"password": {
																			"description": "SSH destination server password for SFTP type storage medium when auth_method is \"PASSWORD\". If auth_method is \"KEY\", this specifies the password for the ssh private key.",
																			"type": "string"
																		},
																		"path": {
																			"description": "Path relative to the bucket root at which the recording will be placed.",
																			"type": "string"
																		},
																		"port": {
																			"description": "SSH destination server port for SFTP type storage medium",
																			"type": "number"
																		},
																		"private_key": {
																			"description": "Private key used to login to destination SSH server for SFTP type storage medium, when auth_method used is \"KEY\"",
																			"type": "string"
																		},
																		"region": {
																			"description": "Region of the storage medium.",
																			"example": "us-east-1",
																			"type": "string"
																		},
																		"secret": {
																			"description": "Secret key of the storage medium. Similar to `access_key`, it is only writeable by clients, not readable.",
																			"type": "string"
																		},
																		"type": {
																			"description": "Type of storage media.",
																			"enum": [
																				"aws",
																				"azure",
																				"digitalocean",
																				"gcs",
																				"sftp"
																			],
																			"type": "string"
																		},
																		"username": {
																			"description": "SSH destination server username for SFTP type storage medium",
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"title": "StorageConfig",
																	"type": "object"
																},
																"video_config": {
																	"properties": {
																		"codec": {
																			"default": "H264",
																			"description": "Codec using which the recording will be encoded.",
																			"enum": [
																				"H264",
																				"VP8"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export video file seperately",
																			"type": "boolean"
																		},
																		"height": {
																			"default": 720,
																			"description": "Height of the recording video in pixels",
																			"example": 720,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		},
																		"watermark": {
																			"description": "Watermark to be added to the recording",
																			"properties": {
																				"position": {
																					"default": "left top",
																					"description": "Position of the watermark",
																					"enum": [
																						"left top",
																						"right top",
																						"left bottom",
																						"right bottom"
																					],
																					"type": "string"
																				},
																				"size": {
																					"description": "Size of the watermark",
																					"properties": {
																						"height": {
																							"description": "Height of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						},
																						"width": {
																							"description": "Width of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						}
																					},
																					"type": "object"
																				},
																				"url": {
																					"description": "URL of the watermark image",
																					"format": "uri",
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"width": {
																			"default": 1280,
																			"description": "Width of the recording video in pixels",
																			"example": 1280,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		}
																	},
																	"title": "VideoConfig",
																	"type": "object"
																}
															},
															"title": "RecordingConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"ai_config": {
															"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
															"properties": {
																"summarization": {
																	"description": "Summary Config",
																	"properties": {
																		"summary_type": {
																			"default": "general",
																			"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
																			"enum": [
																				"general",
																				"team_meeting",
																				"sales_call",
																				"client_check_in",
																				"interview",
																				"daily_standup",
																				"one_on_one_meeting",
																				"lecture",
																				"code_review"
																			],
																			"type": "string"
																		},
																		"text_format": {
																			"default": "markdown",
																			"description": "Determines the text format of the summary, such as plain text or markdown.",
																			"enum": [
																				"plain_text",
																				"markdown"
																			],
																			"type": "string"
																		},
																		"word_limit": {
																			"default": 500,
																			"description": "Sets the maximum number of words in the meeting summary.",
																			"maximum": 1000,
																			"minimum": 150,
																			"type": "integer"
																		}
																	},
																	"title": "SummarizationConfig",
																	"type": "object"
																},
																"transcription": {
																	"description": "Transcription Configurations",
																	"properties": {
																		"keywords": {
																			"description": "Adds specific terms to improve accurate detection during transcription.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"language": {
																			"default": "en-US",
																			"description": "Specifies the language code for transcription to ensure accurate results.",
																			"enum": [
																				"en-US",
																				"en-IN",
																				"de",
																				"hi",
																				"sv",
																				"ru",
																				"pl",
																				"el",
																				"fr",
																				"nl"
																			],
																			"type": "string"
																		},
																		"profanity_filter": {
																			"default": false,
																			"description": "Control the inclusion of offensive language in transcriptions.",
																			"type": "boolean"
																		}
																	},
																	"title": "TranscriptionConfig",
																	"type": "object"
																}
															},
															"title": "AIConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Update a meeting",
		"tags": [
			"Meetings"
		]
	},
	"PATCH /accounts/{account_id}/realtimekit/meetings/{meeting_id}/participants/{participant_id}": {
		"description": "Updates a participant's details for the given meeting and participant ID.",
		"operationId": "edit_participant",
		"parameters": [
			{
				"description": "ID of the meeting. You can fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			},
			{
				"description": "ID of the participant. You can fetch the participant ID using the add a participant API.",
				"in": "path",
				"name": "participant_id",
				"required": true,
				"schema": {
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"name": {
								"description": "(Optional) Name of the participant.",
								"example": "Jane Doe",
								"nullable": true,
								"type": "string"
							},
							"picture": {
								"description": "(Optional) A URL to a picture to be used for the participant.",
								"format": "uri",
								"nullable": true,
								"type": "string"
							},
							"preset_name": {
								"description": "(Optional) Name of the preset to apply to this participant.",
								"nullable": true,
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"allOf": [
												{
													"description": "Represents a participant.",
													"properties": {
														"created_at": {
															"description": "When this object was created. The time is returned in ISO format.",
															"format": "date-time",
															"type": "string"
														},
														"custom_participant_id": {
															"description": "A unique participant ID generated by the client.",
															"type": "string"
														},
														"id": {
															"description": "ID of the participant.",
															"format": "uuid",
															"type": "string"
														},
														"name": {
															"description": "Name of the participant.",
															"nullable": true,
															"type": "string"
														},
														"picture": {
															"description": "URL to a picture of the participant.",
															"format": "uri",
															"nullable": true,
															"type": "string"
														},
														"preset_name": {
															"description": "Preset applied to the participant.",
															"type": "string"
														},
														"updated_at": {
															"description": "When this object was updated. The time is returned in ISO format.",
															"format": "date-time",
															"type": "string"
														}
													},
													"required": [
														"id",
														"custom_participant_id",
														"preset_name",
														"created_at",
														"updated_at"
													],
													"title": "Participant",
													"type": "object"
												},
												{
													"properties": {
														"token": {
															"description": "The participant's auth token that can be used for joining a meeting from the client side.",
															"type": "string"
														}
													},
													"required": [
														"token"
													],
													"type": "object"
												}
											]
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Edit a participant's detail",
		"tags": [
			"Meetings"
		]
	},
	"POST /accounts/{account_id}/realtimekit/meetings": {
		"description": "Create a meeting for the given organization ID.",
		"operationId": "create_meeting",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"ai_config": {
								"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
								"properties": {
									"summarization": {
										"description": "Summary Config",
										"properties": {
											"summary_type": {
												"default": "general",
												"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
												"enum": [
													"general",
													"team_meeting",
													"sales_call",
													"client_check_in",
													"interview",
													"daily_standup",
													"one_on_one_meeting",
													"lecture",
													"code_review"
												],
												"type": "string"
											},
											"text_format": {
												"default": "markdown",
												"description": "Determines the text format of the summary, such as plain text or markdown.",
												"enum": [
													"plain_text",
													"markdown"
												],
												"type": "string"
											},
											"word_limit": {
												"default": 500,
												"description": "Sets the maximum number of words in the meeting summary.",
												"maximum": 1000,
												"minimum": 150,
												"type": "integer"
											}
										},
										"title": "SummarizationConfig",
										"type": "object"
									},
									"transcription": {
										"description": "Transcription Configurations",
										"properties": {
											"keywords": {
												"description": "Adds specific terms to improve accurate detection during transcription.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"language": {
												"default": "en-US",
												"description": "Specifies the language code for transcription to ensure accurate results.",
												"enum": [
													"en-US",
													"en-IN",
													"de",
													"hi",
													"sv",
													"ru",
													"pl",
													"el",
													"fr",
													"nl"
												],
												"type": "string"
											},
											"profanity_filter": {
												"default": false,
												"description": "Control the inclusion of offensive language in transcriptions.",
												"type": "boolean"
											}
										},
										"title": "TranscriptionConfig",
										"type": "object"
									}
								},
								"title": "AIConfig",
								"type": "object"
							},
							"live_stream_on_start": {
								"default": false,
								"description": "Specifies if the meeting should start getting livestreamed on start.",
								"nullable": true,
								"type": "boolean"
							},
							"persist_chat": {
								"default": false,
								"description": "If a meeting is set to persist_chat, meeting chat would remain for a week within the meeting space.",
								"type": "boolean"
							},
							"preferred_region": {
								"description": "The region in which this meeting should be created.",
								"enum": [
									"ap-south-1",
									"ap-southeast-1",
									"us-east-1",
									"eu-central-1",
									null
								],
								"nullable": true,
								"type": "string"
							},
							"record_on_start": {
								"default": false,
								"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
								"nullable": true,
								"type": "boolean"
							},
							"recording_config": {
								"description": "Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.\n",
								"properties": {
									"audio_config": {
										"description": "Object containing configuration regarding the audio that is being recorded.",
										"properties": {
											"channel": {
												"default": "stereo",
												"description": "Audio signal pathway within an audio file that carries a specific sound source.",
												"enum": [
													"mono",
													"stereo"
												],
												"type": "string"
											},
											"codec": {
												"default": "AAC",
												"description": "Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.",
												"enum": [
													"MP3",
													"AAC"
												],
												"type": "string"
											},
											"export_file": {
												"default": true,
												"description": "Controls whether to export audio file seperately",
												"type": "boolean"
											}
										},
										"title": "AudioConfig",
										"type": "object"
									},
									"file_name_prefix": {
										"description": "Adds a prefix to the beginning of the file name of the recording.",
										"type": "string"
									},
									"live_streaming_config": {
										"properties": {
											"rtmp_url": {
												"description": "RTMP URL to stream to",
												"example": "rtmp://a.rtmp.youtube.com/live2",
												"format": "uri",
												"type": "string"
											}
										},
										"title": "LivestreamingConfig",
										"type": "object"
									},
									"max_seconds": {
										"description": "Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.",
										"maximum": 86400,
										"minimum": 60,
										"type": "number"
									},
									"realtimekit_bucket_config": {
										"properties": {
											"enabled": {
												"description": "Controls whether recordings are uploaded to RealtimeKit's bucket. If set to false, `download_url`, `audio_download_url`, `download_url_expiry` won't be generated for a recording.",
												"type": "boolean"
											}
										},
										"required": [
											"enabled"
										],
										"title": "realtimekitBucketConfig",
										"type": "object"
									},
									"storage_config": {
										"nullable": true,
										"properties": {
											"access_key": {
												"description": "Access key of the storage medium. Access key is not required for the `gcs` storage media type.\n\nNote that this field is not readable by clients, only writeable.",
												"type": "string",
												"writeOnly": true
											},
											"auth_method": {
												"description": "Authentication method used for \"sftp\" type storage medium\n",
												"enum": [
													"KEY",
													"PASSWORD"
												],
												"type": "string"
											},
											"bucket": {
												"description": "Name of the storage medium's bucket.",
												"type": "string"
											},
											"host": {
												"description": "SSH destination server host for SFTP type storage medium",
												"type": "string"
											},
											"password": {
												"description": "SSH destination server password for SFTP type storage medium when auth_method is \"PASSWORD\". If auth_method is \"KEY\", this specifies the password for the ssh private key.",
												"type": "string"
											},
											"path": {
												"description": "Path relative to the bucket root at which the recording will be placed.",
												"type": "string"
											},
											"port": {
												"description": "SSH destination server port for SFTP type storage medium",
												"type": "number"
											},
											"private_key": {
												"description": "Private key used to login to destination SSH server for SFTP type storage medium, when auth_method used is \"KEY\"",
												"type": "string"
											},
											"region": {
												"description": "Region of the storage medium.",
												"example": "us-east-1",
												"type": "string"
											},
											"secret": {
												"description": "Secret key of the storage medium. Similar to `access_key`, it is only writeable by clients, not readable.",
												"type": "string"
											},
											"type": {
												"description": "Type of storage media.",
												"enum": [
													"aws",
													"azure",
													"digitalocean",
													"gcs",
													"sftp"
												],
												"type": "string"
											},
											"username": {
												"description": "SSH destination server username for SFTP type storage medium",
												"type": "string"
											}
										},
										"required": [
											"type"
										],
										"title": "StorageConfig",
										"type": "object"
									},
									"video_config": {
										"properties": {
											"codec": {
												"default": "H264",
												"description": "Codec using which the recording will be encoded.",
												"enum": [
													"H264",
													"VP8"
												],
												"type": "string"
											},
											"export_file": {
												"default": true,
												"description": "Controls whether to export video file seperately",
												"type": "boolean"
											},
											"height": {
												"default": 720,
												"description": "Height of the recording video in pixels",
												"example": 720,
												"maximum": 1920,
												"minimum": 1,
												"type": "integer"
											},
											"watermark": {
												"description": "Watermark to be added to the recording",
												"properties": {
													"position": {
														"default": "left top",
														"description": "Position of the watermark",
														"enum": [
															"left top",
															"right top",
															"left bottom",
															"right bottom"
														],
														"type": "string"
													},
													"size": {
														"description": "Size of the watermark",
														"properties": {
															"height": {
																"description": "Height of the watermark in px",
																"minimum": 1,
																"type": "integer"
															},
															"width": {
																"description": "Width of the watermark in px",
																"minimum": 1,
																"type": "integer"
															}
														},
														"type": "object"
													},
													"url": {
														"description": "URL of the watermark image",
														"format": "uri",
														"type": "string"
													}
												},
												"type": "object"
											},
											"width": {
												"default": 1280,
												"description": "Width of the recording video in pixels",
												"example": 1280,
												"maximum": 1920,
												"minimum": 1,
												"type": "integer"
											}
										},
										"title": "VideoConfig",
										"type": "object"
									}
								},
								"title": "RecordingConfig",
								"type": "object"
							},
							"session_keep_alive_time_in_secs": {
								"default": 60,
								"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
								"maximum": 600,
								"minimum": 60,
								"type": "number"
							},
							"summarize_on_end": {
								"default": false,
								"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
								"type": "boolean"
							},
							"title": {
								"description": "Title of the meeting",
								"nullable": true,
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"description": "Create meeting body"
		},
		"responses": {
			"201": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"allOf": [
										{
											"properties": {
												"data": {
													"properties": {
														"created_at": {
															"description": "Timestamp the object was created at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"id": {
															"description": "ID of the meeting.",
															"format": "uuid",
															"readOnly": true,
															"type": "string"
														},
														"live_stream_on_start": {
															"description": "Specifies if the meeting should start getting livestreamed on start.",
															"type": "boolean"
														},
														"persist_chat": {
															"description": "Specifies if Chat within a meeting should persist for a week.",
															"type": "boolean"
														},
														"preferred_region": {
															"description": "The region in which this meeting should be created.",
															"enum": [
																"ap-south-1",
																"ap-southeast-1",
																"us-east-1",
																"eu-central-1",
																null
															],
															"nullable": true,
															"type": "string"
														},
														"record_on_start": {
															"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
															"type": "boolean"
														},
														"session_keep_alive_time_in_secs": {
															"default": 60,
															"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
															"maximum": 600,
															"minimum": 60,
															"type": "number"
														},
														"status": {
															"description": "Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.",
															"enum": [
																"ACTIVE",
																"INACTIVE"
															],
															"type": "string"
														},
														"summarize_on_end": {
															"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
															"type": "boolean"
														},
														"title": {
															"description": "Title of the meeting.",
															"type": "string"
														},
														"updated_at": {
															"description": "Timestamp the object was updated at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														}
													},
													"required": [
														"id",
														"created_at",
														"updated_at"
													],
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"recording_config": {
															"description": "Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.\n",
															"properties": {
																"audio_config": {
																	"description": "Object containing configuration regarding the audio that is being recorded.",
																	"properties": {
																		"channel": {
																			"default": "stereo",
																			"description": "Audio signal pathway within an audio file that carries a specific sound source.",
																			"enum": [
																				"mono",
																				"stereo"
																			],
																			"type": "string"
																		},
																		"codec": {
																			"default": "AAC",
																			"description": "Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.",
																			"enum": [
																				"MP3",
																				"AAC"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export audio file seperately",
																			"type": "boolean"
																		}
																	},
																	"title": "AudioConfig",
																	"type": "object"
																},
																"file_name_prefix": {
																	"description": "Adds a prefix to the beginning of the file name of the recording.",
																	"type": "string"
																},
																"live_streaming_config": {
																	"properties": {
																		"rtmp_url": {
																			"description": "RTMP URL to stream to",
																			"example": "rtmp://a.rtmp.youtube.com/live2",
																			"format": "uri",
																			"type": "string"
																		}
																	},
																	"title": "LivestreamingConfig",
																	"type": "object"
																},
																"max_seconds": {
																	"description": "Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.",
																	"maximum": 86400,
																	"minimum": 60,
																	"type": "number"
																},
																"realtimekit_bucket_config": {
																	"properties": {
																		"enabled": {
																			"description": "Controls whether recordings are uploaded to RealtimeKit's bucket. If set to false, `download_url`, `audio_download_url`, `download_url_expiry` won't be generated for a recording.",
																			"type": "boolean"
																		}
																	},
																	"required": [
																		"enabled"
																	],
																	"title": "realtimekitBucketConfig",
																	"type": "object"
																},
																"storage_config": {
																	"nullable": true,
																	"properties": {
																		"access_key": {
																			"description": "Access key of the storage medium. Access key is not required for the `gcs` storage media type.\n\nNote that this field is not readable by clients, only writeable.",
																			"type": "string",
																			"writeOnly": true
																		},
																		"auth_method": {
																			"description": "Authentication method used for \"sftp\" type storage medium\n",
																			"enum": [
																				"KEY",
																				"PASSWORD"
																			],
																			"type": "string"
																		},
																		"bucket": {
																			"description": "Name of the storage medium's bucket.",
																			"type": "string"
																		},
																		"host": {
																			"description": "SSH destination server host for SFTP type storage medium",
																			"type": "string"
																		},
																		"password": {
																			"description": "SSH destination server password for SFTP type storage medium when auth_method is \"PASSWORD\". If auth_method is \"KEY\", this specifies the password for the ssh private key.",
																			"type": "string"
																		},
																		"path": {
																			"description": "Path relative to the bucket root at which the recording will be placed.",
																			"type": "string"
																		},
																		"port": {
																			"description": "SSH destination server port for SFTP type storage medium",
																			"type": "number"
																		},
																		"private_key": {
																			"description": "Private key used to login to destination SSH server for SFTP type storage medium, when auth_method used is \"KEY\"",
																			"type": "string"
																		},
																		"region": {
																			"description": "Region of the storage medium.",
																			"example": "us-east-1",
																			"type": "string"
																		},
																		"secret": {
																			"description": "Secret key of the storage medium. Similar to `access_key`, it is only writeable by clients, not readable.",
																			"type": "string"
																		},
																		"type": {
																			"description": "Type of storage media.",
																			"enum": [
																				"aws",
																				"azure",
																				"digitalocean",
																				"gcs",
																				"sftp"
																			],
																			"type": "string"
																		},
																		"username": {
																			"description": "SSH destination server username for SFTP type storage medium",
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"title": "StorageConfig",
																	"type": "object"
																},
																"video_config": {
																	"properties": {
																		"codec": {
																			"default": "H264",
																			"description": "Codec using which the recording will be encoded.",
																			"enum": [
																				"H264",
																				"VP8"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export video file seperately",
																			"type": "boolean"
																		},
																		"height": {
																			"default": 720,
																			"description": "Height of the recording video in pixels",
																			"example": 720,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		},
																		"watermark": {
																			"description": "Watermark to be added to the recording",
																			"properties": {
																				"position": {
																					"default": "left top",
																					"description": "Position of the watermark",
																					"enum": [
																						"left top",
																						"right top",
																						"left bottom",
																						"right bottom"
																					],
																					"type": "string"
																				},
																				"size": {
																					"description": "Size of the watermark",
																					"properties": {
																						"height": {
																							"description": "Height of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						},
																						"width": {
																							"description": "Width of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						}
																					},
																					"type": "object"
																				},
																				"url": {
																					"description": "URL of the watermark image",
																					"format": "uri",
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"width": {
																			"default": 1280,
																			"description": "Width of the recording video in pixels",
																			"example": 1280,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		}
																	},
																	"title": "VideoConfig",
																	"type": "object"
																}
															},
															"title": "RecordingConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"ai_config": {
															"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
															"properties": {
																"summarization": {
																	"description": "Summary Config",
																	"properties": {
																		"summary_type": {
																			"default": "general",
																			"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
																			"enum": [
																				"general",
																				"team_meeting",
																				"sales_call",
																				"client_check_in",
																				"interview",
																				"daily_standup",
																				"one_on_one_meeting",
																				"lecture",
																				"code_review"
																			],
																			"type": "string"
																		},
																		"text_format": {
																			"default": "markdown",
																			"description": "Determines the text format of the summary, such as plain text or markdown.",
																			"enum": [
																				"plain_text",
																				"markdown"
																			],
																			"type": "string"
																		},
																		"word_limit": {
																			"default": 500,
																			"description": "Sets the maximum number of words in the meeting summary.",
																			"maximum": 1000,
																			"minimum": 150,
																			"type": "integer"
																		}
																	},
																	"title": "SummarizationConfig",
																	"type": "object"
																},
																"transcription": {
																	"description": "Transcription Configurations",
																	"properties": {
																		"keywords": {
																			"description": "Adds specific terms to improve accurate detection during transcription.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"language": {
																			"default": "en-US",
																			"description": "Specifies the language code for transcription to ensure accurate results.",
																			"enum": [
																				"en-US",
																				"en-IN",
																				"de",
																				"hi",
																				"sv",
																				"ru",
																				"pl",
																				"el",
																				"fr",
																				"nl"
																			],
																			"type": "string"
																		},
																		"profanity_filter": {
																			"default": false,
																			"description": "Control the inclusion of offensive language in transcriptions.",
																			"type": "boolean"
																		}
																	},
																	"title": "TranscriptionConfig",
																	"type": "object"
																}
															},
															"title": "AIConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Create a meeting",
		"tags": [
			"Meetings"
		]
	},
	"POST /accounts/{account_id}/realtimekit/meetings/{meeting_id}/participants": {
		"description": "Adds a participant to the given meeting ID.",
		"operationId": "add_participant",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"description": "ID of the meeting. Fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"custom_participant_id": {
								"description": "A unique participant ID. You must specify a unique ID for the participant, for example, UUID, email address, and so on. ",
								"type": "string"
							},
							"name": {
								"description": "(Optional) Name of the participant. ",
								"example": "Mary Sue",
								"nullable": true,
								"type": "string"
							},
							"picture": {
								"description": "(Optional) A URL to a picture to be used for the participant. ",
								"example": "https://i.imgur.com/test.jpg",
								"format": "uri",
								"nullable": true,
								"type": "string"
							},
							"preset_name": {
								"default": "group_call_host",
								"description": "Name of the preset to apply to this participant.",
								"type": "string"
							}
						},
						"required": [
							"preset_name",
							"custom_participant_id"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"201": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"allOf": [
												{
													"description": "Represents a participant.",
													"properties": {
														"created_at": {
															"description": "When this object was created. The time is returned in ISO format.",
															"format": "date-time",
															"type": "string"
														},
														"custom_participant_id": {
															"description": "A unique participant ID generated by the client.",
															"type": "string"
														},
														"id": {
															"description": "ID of the participant.",
															"format": "uuid",
															"type": "string"
														},
														"name": {
															"description": "Name of the participant.",
															"nullable": true,
															"type": "string"
														},
														"picture": {
															"description": "URL to a picture of the participant.",
															"format": "uri",
															"nullable": true,
															"type": "string"
														},
														"preset_name": {
															"description": "Preset applied to the participant.",
															"type": "string"
														},
														"updated_at": {
															"description": "When this object was updated. The time is returned in ISO format.",
															"format": "date-time",
															"type": "string"
														}
													},
													"required": [
														"id",
														"custom_participant_id",
														"preset_name",
														"created_at",
														"updated_at"
													],
													"title": "Participant",
													"type": "object"
												},
												{
													"properties": {
														"token": {
															"description": "The participant's auth token that can be used for joining a meeting from the client side.",
															"type": "string"
														}
													},
													"required": [
														"token"
													],
													"type": "object"
												}
											]
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Add a participant",
		"tags": [
			"Meetings"
		]
	},
	"POST /accounts/{account_id}/realtimekit/meetings/{meeting_id}/participants/{participant_id}/token": {
		"description": "Regenerates participant's authentication token for the given meeting and participant ID.",
		"operationId": "regenerate_token",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"description": "ID of the meeting. You can fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			},
			{
				"description": "ID of the participant. You can fetch the participant ID using the add a  participant API.",
				"in": "path",
				"name": "participant_id",
				"required": true,
				"schema": {
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"properties": {
										"data": {
											"properties": {
												"token": {
													"description": "Regenerated participant's authentication token.",
													"type": "string"
												}
											},
											"required": [
												"token"
											],
											"type": "object"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Example response"
			},
			"500": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"error": {
									"properties": {
										"code": {
											"description": "HTTP status code of the error.",
											"type": "number"
										},
										"message": {
											"description": "Error message describing what went wrong.",
											"type": "string"
										}
									},
									"required": [
										"code",
										"message"
									],
									"type": "object"
								},
								"success": {
									"default": false,
									"description": "Success status of the request.",
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"error"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Refresh participant's authentication token",
		"tags": [
			"Meetings"
		]
	},
	"PUT /accounts/{account_id}/realtimekit/meetings/{meeting_id}": {
		"description": "Replaces all the details for the given meeting ID.",
		"operationId": "replace_meeting",
		"parameters": [
			{
				"description": "ID of the meeting. Fetch the meeting ID using the create a meeting API.",
				"in": "path",
				"name": "meeting_id",
				"required": true,
				"schema": {
					"format": "uuid",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"ai_config": {
								"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
								"properties": {
									"summarization": {
										"description": "Summary Config",
										"properties": {
											"summary_type": {
												"default": "general",
												"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
												"enum": [
													"general",
													"team_meeting",
													"sales_call",
													"client_check_in",
													"interview",
													"daily_standup",
													"one_on_one_meeting",
													"lecture",
													"code_review"
												],
												"type": "string"
											},
											"text_format": {
												"default": "markdown",
												"description": "Determines the text format of the summary, such as plain text or markdown.",
												"enum": [
													"plain_text",
													"markdown"
												],
												"type": "string"
											},
											"word_limit": {
												"default": 500,
												"description": "Sets the maximum number of words in the meeting summary.",
												"maximum": 1000,
												"minimum": 150,
												"type": "integer"
											}
										},
										"title": "SummarizationConfig",
										"type": "object"
									},
									"transcription": {
										"description": "Transcription Configurations",
										"properties": {
											"keywords": {
												"description": "Adds specific terms to improve accurate detection during transcription.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"language": {
												"default": "en-US",
												"description": "Specifies the language code for transcription to ensure accurate results.",
												"enum": [
													"en-US",
													"en-IN",
													"de",
													"hi",
													"sv",
													"ru",
													"pl",
													"el",
													"fr",
													"nl"
												],
												"type": "string"
											},
											"profanity_filter": {
												"default": false,
												"description": "Control the inclusion of offensive language in transcriptions.",
												"type": "boolean"
											}
										},
										"title": "TranscriptionConfig",
										"type": "object"
									}
								},
								"title": "AIConfig",
								"type": "object"
							},
							"live_stream_on_start": {
								"default": false,
								"description": "Specifies if the meeting should start getting livestreamed on start.",
								"nullable": true,
								"type": "boolean"
							},
							"persist_chat": {
								"default": false,
								"description": "If a meeting is set to persist_chat, meeting chat would remain for a week within the meeting space.",
								"type": "boolean"
							},
							"preferred_region": {
								"description": "The region in which this meeting should be created.",
								"enum": [
									"ap-south-1",
									"ap-southeast-1",
									"us-east-1",
									"eu-central-1",
									null
								],
								"nullable": true,
								"type": "string"
							},
							"record_on_start": {
								"default": false,
								"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
								"nullable": true,
								"type": "boolean"
							},
							"recording_config": {
								"description": "Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.\n",
								"properties": {
									"audio_config": {
										"description": "Object containing configuration regarding the audio that is being recorded.",
										"properties": {
											"channel": {
												"default": "stereo",
												"description": "Audio signal pathway within an audio file that carries a specific sound source.",
												"enum": [
													"mono",
													"stereo"
												],
												"type": "string"
											},
											"codec": {
												"default": "AAC",
												"description": "Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.",
												"enum": [
													"MP3",
													"AAC"
												],
												"type": "string"
											},
											"export_file": {
												"default": true,
												"description": "Controls whether to export audio file seperately",
												"type": "boolean"
											}
										},
										"title": "AudioConfig",
										"type": "object"
									},
									"file_name_prefix": {
										"description": "Adds a prefix to the beginning of the file name of the recording.",
										"type": "string"
									},
									"live_streaming_config": {
										"properties": {
											"rtmp_url": {
												"description": "RTMP URL to stream to",
												"example": "rtmp://a.rtmp.youtube.com/live2",
												"format": "uri",
												"type": "string"
											}
										},
										"title": "LivestreamingConfig",
										"type": "object"
									},
									"max_seconds": {
										"description": "Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.",
										"maximum": 86400,
										"minimum": 60,
										"type": "number"
									},
									"realtimekit_bucket_config": {
										"properties": {
											"enabled": {
												"description": "Controls whether recordings are uploaded to RealtimeKit's bucket. If set to false, `download_url`, `audio_download_url`, `download_url_expiry` won't be generated for a recording.",
												"type": "boolean"
											}
										},
										"required": [
											"enabled"
										],
										"title": "realtimekitBucketConfig",
										"type": "object"
									},
									"storage_config": {
										"nullable": true,
										"properties": {
											"access_key": {
												"description": "Access key of the storage medium. Access key is not required for the `gcs` storage media type.\n\nNote that this field is not readable by clients, only writeable.",
												"type": "string",
												"writeOnly": true
											},
											"auth_method": {
												"description": "Authentication method used for \"sftp\" type storage medium\n",
												"enum": [
													"KEY",
													"PASSWORD"
												],
												"type": "string"
											},
											"bucket": {
												"description": "Name of the storage medium's bucket.",
												"type": "string"
											},
											"host": {
												"description": "SSH destination server host for SFTP type storage medium",
												"type": "string"
											},
											"password": {
												"description": "SSH destination server password for SFTP type storage medium when auth_method is \"PASSWORD\". If auth_method is \"KEY\", this specifies the password for the ssh private key.",
												"type": "string"
											},
											"path": {
												"description": "Path relative to the bucket root at which the recording will be placed.",
												"type": "string"
											},
											"port": {
												"description": "SSH destination server port for SFTP type storage medium",
												"type": "number"
											},
											"private_key": {
												"description": "Private key used to login to destination SSH server for SFTP type storage medium, when auth_method used is \"KEY\"",
												"type": "string"
											},
											"region": {
												"description": "Region of the storage medium.",
												"example": "us-east-1",
												"type": "string"
											},
											"secret": {
												"description": "Secret key of the storage medium. Similar to `access_key`, it is only writeable by clients, not readable.",
												"type": "string"
											},
											"type": {
												"description": "Type of storage media.",
												"enum": [
													"aws",
													"azure",
													"digitalocean",
													"gcs",
													"sftp"
												],
												"type": "string"
											},
											"username": {
												"description": "SSH destination server username for SFTP type storage medium",
												"type": "string"
											}
										},
										"required": [
											"type"
										],
										"title": "StorageConfig",
										"type": "object"
									},
									"video_config": {
										"properties": {
											"codec": {
												"default": "H264",
												"description": "Codec using which the recording will be encoded.",
												"enum": [
													"H264",
													"VP8"
												],
												"type": "string"
											},
											"export_file": {
												"default": true,
												"description": "Controls whether to export video file seperately",
												"type": "boolean"
											},
											"height": {
												"default": 720,
												"description": "Height of the recording video in pixels",
												"example": 720,
												"maximum": 1920,
												"minimum": 1,
												"type": "integer"
											},
											"watermark": {
												"description": "Watermark to be added to the recording",
												"properties": {
													"position": {
														"default": "left top",
														"description": "Position of the watermark",
														"enum": [
															"left top",
															"right top",
															"left bottom",
															"right bottom"
														],
														"type": "string"
													},
													"size": {
														"description": "Size of the watermark",
														"properties": {
															"height": {
																"description": "Height of the watermark in px",
																"minimum": 1,
																"type": "integer"
															},
															"width": {
																"description": "Width of the watermark in px",
																"minimum": 1,
																"type": "integer"
															}
														},
														"type": "object"
													},
													"url": {
														"description": "URL of the watermark image",
														"format": "uri",
														"type": "string"
													}
												},
												"type": "object"
											},
											"width": {
												"default": 1280,
												"description": "Width of the recording video in pixels",
												"example": 1280,
												"maximum": 1920,
												"minimum": 1,
												"type": "integer"
											}
										},
										"title": "VideoConfig",
										"type": "object"
									}
								},
								"title": "RecordingConfig",
								"type": "object"
							},
							"session_keep_alive_time_in_secs": {
								"default": 60,
								"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
								"maximum": 600,
								"minimum": 60,
								"type": "number"
							},
							"summarize_on_end": {
								"default": false,
								"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
								"type": "boolean"
							},
							"title": {
								"description": "Title of the meeting",
								"nullable": true,
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"description": "Create meeting body"
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"data": {
											"description": "Data returned by the operation",
											"type": "object"
										},
										"success": {
											"default": true,
											"description": "Success status of the operation",
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"title": "GenericSuccessResponse",
									"type": "object"
								},
								{
									"allOf": [
										{
											"properties": {
												"data": {
													"properties": {
														"created_at": {
															"description": "Timestamp the object was created at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"id": {
															"description": "ID of the meeting.",
															"format": "uuid",
															"readOnly": true,
															"type": "string"
														},
														"live_stream_on_start": {
															"description": "Specifies if the meeting should start getting livestreamed on start.",
															"type": "boolean"
														},
														"persist_chat": {
															"description": "Specifies if Chat within a meeting should persist for a week.",
															"type": "boolean"
														},
														"preferred_region": {
															"description": "The region in which this meeting should be created.",
															"enum": [
																"ap-south-1",
																"ap-southeast-1",
																"us-east-1",
																"eu-central-1",
																null
															],
															"nullable": true,
															"type": "string"
														},
														"record_on_start": {
															"description": "Specifies if the meeting should start getting recorded as soon as someone joins the meeting.",
															"type": "boolean"
														},
														"session_keep_alive_time_in_secs": {
															"default": 60,
															"description": "Time in seconds, for which a session remains active, after the last participant has left the meeting.",
															"maximum": 600,
															"minimum": 60,
															"type": "number"
														},
														"status": {
															"description": "Whether the meeting is `ACTIVE` or `INACTIVE`. Users will not be able to join an `INACTIVE` meeting.",
															"enum": [
																"ACTIVE",
																"INACTIVE"
															],
															"type": "string"
														},
														"summarize_on_end": {
															"description": "Automatically generate summary of meetings using transcripts. Requires Transcriptions to be enabled, and can be retrieved via Webhooks or summary API.",
															"type": "boolean"
														},
														"title": {
															"description": "Title of the meeting.",
															"type": "string"
														},
														"updated_at": {
															"description": "Timestamp the object was updated at. The time is returned in ISO format.",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														}
													},
													"required": [
														"id",
														"created_at",
														"updated_at"
													],
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"recording_config": {
															"description": "Recording Configurations to be used for this meeting. This level of configs takes higher preference over organization level configs on the RealtimeKit developer portal.\n",
															"properties": {
																"audio_config": {
																	"description": "Object containing configuration regarding the audio that is being recorded.",
																	"properties": {
																		"channel": {
																			"default": "stereo",
																			"description": "Audio signal pathway within an audio file that carries a specific sound source.",
																			"enum": [
																				"mono",
																				"stereo"
																			],
																			"type": "string"
																		},
																		"codec": {
																			"default": "AAC",
																			"description": "Codec using which the recording will be encoded. If VP8/VP9 is selected for videoConfig, changing audioConfig is not allowed. In this case, the codec in the audioConfig is automatically set to vorbis.",
																			"enum": [
																				"MP3",
																				"AAC"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export audio file seperately",
																			"type": "boolean"
																		}
																	},
																	"title": "AudioConfig",
																	"type": "object"
																},
																"file_name_prefix": {
																	"description": "Adds a prefix to the beginning of the file name of the recording.",
																	"type": "string"
																},
																"live_streaming_config": {
																	"properties": {
																		"rtmp_url": {
																			"description": "RTMP URL to stream to",
																			"example": "rtmp://a.rtmp.youtube.com/live2",
																			"format": "uri",
																			"type": "string"
																		}
																	},
																	"title": "LivestreamingConfig",
																	"type": "object"
																},
																"max_seconds": {
																	"description": "Specifies the maximum duration for recording in seconds, ranging from a minimum of 60 seconds to a maximum of 24 hours.",
																	"maximum": 86400,
																	"minimum": 60,
																	"type": "number"
																},
																"realtimekit_bucket_config": {
																	"properties": {
																		"enabled": {
																			"description": "Controls whether recordings are uploaded to RealtimeKit's bucket. If set to false, `download_url`, `audio_download_url`, `download_url_expiry` won't be generated for a recording.",
																			"type": "boolean"
																		}
																	},
																	"required": [
																		"enabled"
																	],
																	"title": "realtimekitBucketConfig",
																	"type": "object"
																},
																"storage_config": {
																	"nullable": true,
																	"properties": {
																		"access_key": {
																			"description": "Access key of the storage medium. Access key is not required for the `gcs` storage media type.\n\nNote that this field is not readable by clients, only writeable.",
																			"type": "string",
																			"writeOnly": true
																		},
																		"auth_method": {
																			"description": "Authentication method used for \"sftp\" type storage medium\n",
																			"enum": [
																				"KEY",
																				"PASSWORD"
																			],
																			"type": "string"
																		},
																		"bucket": {
																			"description": "Name of the storage medium's bucket.",
																			"type": "string"
																		},
																		"host": {
																			"description": "SSH destination server host for SFTP type storage medium",
																			"type": "string"
																		},
																		"password": {
																			"description": "SSH destination server password for SFTP type storage medium when auth_method is \"PASSWORD\". If auth_method is \"KEY\", this specifies the password for the ssh private key.",
																			"type": "string"
																		},
																		"path": {
																			"description": "Path relative to the bucket root at which the recording will be placed.",
																			"type": "string"
																		},
																		"port": {
																			"description": "SSH destination server port for SFTP type storage medium",
																			"type": "number"
																		},
																		"private_key": {
																			"description": "Private key used to login to destination SSH server for SFTP type storage medium, when auth_method used is \"KEY\"",
																			"type": "string"
																		},
																		"region": {
																			"description": "Region of the storage medium.",
																			"example": "us-east-1",
																			"type": "string"
																		},
																		"secret": {
																			"description": "Secret key of the storage medium. Similar to `access_key`, it is only writeable by clients, not readable.",
																			"type": "string"
																		},
																		"type": {
																			"description": "Type of storage media.",
																			"enum": [
																				"aws",
																				"azure",
																				"digitalocean",
																				"gcs",
																				"sftp"
																			],
																			"type": "string"
																		},
																		"username": {
																			"description": "SSH destination server username for SFTP type storage medium",
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"title": "StorageConfig",
																	"type": "object"
																},
																"video_config": {
																	"properties": {
																		"codec": {
																			"default": "H264",
																			"description": "Codec using which the recording will be encoded.",
																			"enum": [
																				"H264",
																				"VP8"
																			],
																			"type": "string"
																		},
																		"export_file": {
																			"default": true,
																			"description": "Controls whether to export video file seperately",
																			"type": "boolean"
																		},
																		"height": {
																			"default": 720,
																			"description": "Height of the recording video in pixels",
																			"example": 720,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		},
																		"watermark": {
																			"description": "Watermark to be added to the recording",
																			"properties": {
																				"position": {
																					"default": "left top",
																					"description": "Position of the watermark",
																					"enum": [
																						"left top",
																						"right top",
																						"left bottom",
																						"right bottom"
																					],
																					"type": "string"
																				},
																				"size": {
																					"description": "Size of the watermark",
																					"properties": {
																						"height": {
																							"description": "Height of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						},
																						"width": {
																							"description": "Width of the watermark in px",
																							"minimum": 1,
																							"type": "integer"
																						}
																					},
																					"type": "object"
																				},
																				"url": {
																					"description": "URL of the watermark image",
																					"format": "uri",
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"width": {
																			"default": 1280,
																			"description": "Width of the recording video in pixels",
																			"example": 1280,
																			"maximum": 1920,
																			"minimum": 1,
																			"type": "integer"
																		}
																	},
																	"title": "VideoConfig",
																	"type": "object"
																}
															},
															"title": "RecordingConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"ai_config": {
															"description": "The AI Config allows you to customize the behavior of meeting transcriptions and summaries",
															"properties": {
																"summarization": {
																	"description": "Summary Config",
																	"properties": {
																		"summary_type": {
																			"default": "general",
																			"description": "Defines the style of the summary, such as general, team meeting, or sales call.",
																			"enum": [
																				"general",
																				"team_meeting",
																				"sales_call",
																				"client_check_in",
																				"interview",
																				"daily_standup",
																				"one_on_one_meeting",
																				"lecture",
																				"code_review"
																			],
																			"type": "string"
																		},
																		"text_format": {
																			"default": "markdown",
																			"description": "Determines the text format of the summary, such as plain text or markdown.",
																			"enum": [
																				"plain_text",
																				"markdown"
																			],
																			"type": "string"
																		},
																		"word_limit": {
																			"default": 500,
																			"description": "Sets the maximum number of words in the meeting summary.",
																			"maximum": 1000,
																			"minimum": 150,
																			"type": "integer"
																		}
																	},
																	"title": "SummarizationConfig",
																	"type": "object"
																},
																"transcription": {
																	"description": "Transcription Configurations",
																	"properties": {
																		"keywords": {
																			"description": "Adds specific terms to improve accurate detection during transcription.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"language": {
																			"default": "en-US",
																			"description": "Specifies the language code for transcription to ensure accurate results.",
																			"enum": [
																				"en-US",
																				"en-IN",
																				"de",
																				"hi",
																				"sv",
																				"ru",
																				"pl",
																				"el",
																				"fr",
																				"nl"
																			],
																			"type": "string"
																		},
																		"profanity_filter": {
																			"default": false,
																			"description": "Control the inclusion of offensive language in transcriptions.",
																			"type": "boolean"
																		}
																	},
																	"title": "TranscriptionConfig",
																	"type": "object"
																}
															},
															"title": "AIConfig",
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response"
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Replace a meeting",
		"tags": [
			"Meetings"
		]
	}
}