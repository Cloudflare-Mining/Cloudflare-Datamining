{
	"GET /zones/{zone_id}/api_gateway/discovery": {
		"description": "Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas",
		"operationId": "api-shield-api-discovery-retrieve-discovered-operations-on-a-zone-as-openapi",
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"schemas": {
													"items": {
														"description": "A OpenAPI 3.0.0 compliant schema.",
														"example": {
															"info": {
																"title": "OpenAPI JSON schema for www.example.com",
																"version": "1.0"
															},
															"openapi": "3.0.0",
															"paths": {
																"... Further paths ...": {},
																"/api/v1/users/{var1}": {
																	"get": {
																		"parameters": [
																			{
																				"in": "path",
																				"name": "var1",
																				"required": true,
																				"schema": {
																					"type": "string"
																				}
																			}
																		]
																	}
																}
															},
															"servers": [
																{
																	"url": "www.example.com"
																}
															]
														},
														"type": "object"
													},
													"type": "array"
												},
												"timestamp": {
													"allOf": [
														{
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														{
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													]
												}
											},
											"required": [
												"timestamp",
												"schemas"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve discovered operations on a zone, rendered as OpenAPI schemas response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"schemas": {
															"items": {
																"description": "A OpenAPI 3.0.0 compliant schema.",
																"example": {
																	"info": {
																		"title": "OpenAPI JSON schema for www.example.com",
																		"version": "1.0"
																	},
																	"openapi": "3.0.0",
																	"paths": {
																		"... Further paths ...": {},
																		"/api/v1/users/{var1}": {
																			"get": {
																				"parameters": [
																					{
																						"in": "path",
																						"name": "var1",
																						"required": true,
																						"schema": {
																							"type": "string"
																						}
																					}
																				]
																			}
																		}
																	},
																	"servers": [
																		{
																			"url": "www.example.com"
																		}
																	]
																},
																"type": "object"
															},
															"type": "array"
														},
														"timestamp": {
															"allOf": [
																{
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																},
																{
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															]
														}
													},
													"required": [
														"timestamp",
														"schemas"
													],
													"type": "object"
												}
											},
											"required": [
												"result"
											],
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve discovered operations on a zone, rendered as OpenAPI schemas response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve discovered operations on a zone rendered as OpenAPI schemas",
		"tags": [
			"API Shield API Discovery"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"GET /zones/{zone_id}/api_gateway/discovery/operations": {
		"description": "Retrieve the most up to date view of discovered operations",
		"operationId": "api-shield-api-discovery-retrieve-discovered-operations-on-a-zone",
		"parameters": [
			{
				"description": "Page number of paginated results.",
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"minimum": 1,
					"type": "integer"
				}
			},
			{
				"description": "Maximum number of results per page.",
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 20,
					"maximum": 50,
					"minimum": 5,
					"type": "integer"
				}
			},
			{
				"in": "query",
				"name": "host",
				"schema": {
					"description": "Filter results to only include the specified hosts.",
					"items": {
						"example": "api.cloudflare.com",
						"type": "string"
					},
					"type": "array",
					"uniqueItems": true
				}
			},
			{
				"in": "query",
				"name": "method",
				"schema": {
					"description": "Filter results to only include the specified HTTP methods.",
					"items": {
						"example": "GET",
						"type": "string"
					},
					"type": "array",
					"uniqueItems": true
				}
			},
			{
				"in": "query",
				"name": "endpoint",
				"schema": {
					"description": "Filter results to only include endpoints containing this pattern.",
					"example": "/api/v1",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "direction",
				"schema": {
					"description": "Direction to order results.",
					"enum": [
						"asc",
						"desc"
					],
					"example": "desc",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "order",
				"schema": {
					"description": "Field to order by",
					"enum": [
						"host",
						"method",
						"endpoint",
						"traffic_stats.requests",
						"traffic_stats.last_updated"
					],
					"example": "method",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "diff",
				"schema": {
					"description": "When `true`, only return API Discovery results that are not saved into API Shield Endpoint Management",
					"type": "boolean"
				}
			},
			{
				"description": "Filter results to only include discovery results sourced from a particular discovery engine\n  * `ML` - Discovered operations that were sourced using ML API Discovery\n  * `SessionIdentifier` - Discovered operations that were sourced using Session Identifier API Discovery\n",
				"in": "query",
				"name": "origin",
				"schema": {
					"description": "* `ML` - Discovered operation was sourced using ML API Discovery * `SessionIdentifier` - Discovered operation was sourced using Session Identifier API Discovery * `LabelDiscovery` - Discovered operation was identified to have a specific label\n",
					"enum": [
						"ML",
						"SessionIdentifier",
						"LabelDiscovery"
					],
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"description": "Filter results to only include discovery results in a particular state. States are as follows\n  * `review` - Discovered operations that are not saved into API Shield Endpoint Management\n  * `saved` - Discovered operations that are already saved into API Shield Endpoint Management\n  * `ignored` - Discovered operations that have been marked as ignored\n",
				"in": "query",
				"name": "state",
				"schema": {
					"description": "State of operation in API Discovery\n  * `review` - Operation is not saved into API Shield Endpoint Management\n  * `saved` - Operation is saved into API Shield Endpoint Management\n  * `ignored` - Operation is marked as ignored\n",
					"enum": [
						"review",
						"saved",
						"ignored"
					],
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results for the requested service.",
															"example": 1,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results.",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page of results.",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters.",
															"example": 2000,
															"type": "number"
														}
													},
													"type": "object"
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"allOf": [
													{
														"properties": {
															"features": {
																"properties": {
																	"traffic_stats": {
																		"properties": {
																			"last_updated": {
																				"allOf": [
																					{
																						"example": "2014-01-01T05:20:00.12345Z",
																						"format": "date-time",
																						"type": "string"
																					},
																					{
																						"readOnly": true,
																						"type": "string",
																						"x-auditable": true
																					}
																				]
																			},
																			"period_seconds": {
																				"description": "The period in seconds these statistics were computed over",
																				"example": 3600,
																				"readOnly": true,
																				"type": "integer",
																				"x-auditable": true
																			},
																			"requests": {
																				"description": "The average number of requests seen during this period",
																				"example": 1987.06,
																				"format": "float",
																				"readOnly": true,
																				"type": "number",
																				"x-auditable": true
																			}
																		},
																		"required": [
																			"period_seconds",
																			"requests",
																			"last_updated"
																		],
																		"type": "object"
																	}
																},
																"readOnly": true,
																"type": "object"
															},
															"id": {
																"allOf": [
																	{
																		"minLength": 36,
																		"type": "string",
																		"x-auditable": true
																	},
																	{
																		"description": "UUID.",
																		"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
																		"maxLength": 36,
																		"type": "string"
																	}
																]
															},
															"last_updated": {
																"allOf": [
																	{
																		"example": "2014-01-01T05:20:00.12345Z",
																		"format": "date-time",
																		"type": "string"
																	},
																	{
																		"readOnly": true,
																		"type": "string",
																		"x-auditable": true
																	}
																]
															},
															"origin": {
																"description": "API discovery engine(s) that discovered this operation",
																"items": {
																	"description": "* `ML` - Discovered operation was sourced using ML API Discovery * `SessionIdentifier` - Discovered operation was sourced using Session Identifier API Discovery * `LabelDiscovery` - Discovered operation was identified to have a specific label\n",
																	"enum": [
																		"ML",
																		"SessionIdentifier",
																		"LabelDiscovery"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"state": {
																"description": "State of operation in API Discovery\n  * `review` - Operation is not saved into API Shield Endpoint Management\n  * `saved` - Operation is saved into API Shield Endpoint Management\n  * `ignored` - Operation is marked as ignored\n",
																"enum": [
																	"review",
																	"saved",
																	"ignored"
																],
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"id",
															"last_updated",
															"state",
															"origin"
														],
														"type": "object"
													},
													{
														"properties": {
															"endpoint": {
																"description": "The endpoint which can contain path parameter templates in curly braces, each will be replaced from left to right with {varN}, starting with {var1}, during insertion. This will further be Cloudflare-normalized upon insertion. See: https://developers.cloudflare.com/rules/normalization/how-it-works/.",
																"example": "/api/v1/users/{var1}",
																"format": "uri-template",
																"maxLength": 4096,
																"pattern": "^/.*$",
																"type": "string",
																"x-auditable": true
															},
															"host": {
																"description": "RFC3986-compliant host.",
																"example": "www.example.com",
																"format": "hostname",
																"maxLength": 255,
																"type": "string",
																"x-auditable": true
															},
															"method": {
																"description": "The HTTP method used to access the endpoint.",
																"enum": [
																	"GET",
																	"POST",
																	"HEAD",
																	"OPTIONS",
																	"PUT",
																	"DELETE",
																	"CONNECT",
																	"PATCH",
																	"TRACE"
																],
																"example": "GET",
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"method",
															"host",
															"endpoint"
														],
														"type": "object"
													}
												]
											},
											"type": "array"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve discovered operations on a zone response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve discovered operations on a zone response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve discovered operations on a zone",
		"tags": [
			"API Shield API Discovery"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"PATCH /zones/{zone_id}/api_gateway/discovery/operations": {
		"description": "Update the `state` on one or more discovered operations",
		"operationId": "api-shield-api-patch-discovered-operations",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"additionalProperties": {
							"description": "Mappings of discovered operations (keys) to objects describing their state",
							"properties": {
								"state": {
									"description": "Mark state of operation in API Discovery\n  * `review` - Mark operation as for review\n  * `ignored` - Mark operation as ignored\n",
									"enum": [
										"review",
										"ignored"
									],
									"type": "string",
									"x-auditable": true
								}
							},
							"type": "object"
						},
						"example": {
							"3818d821-5901-4147-a474-f5f5aec1d54e": {
								"state": "ignored"
							},
							"b17c8043-99a0-4202-b7d9-8f7cdbee02cd": {
								"state": "review"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"additionalProperties": {
												"description": "Mappings of discovered operations (keys) to objects describing their state",
												"properties": {
													"state": {
														"description": "Mark state of operation in API Discovery\n  * `review` - Mark operation as for review\n  * `ignored` - Mark operation as ignored\n",
														"enum": [
															"review",
															"ignored"
														],
														"type": "string",
														"x-auditable": true
													}
												},
												"type": "object"
											},
											"example": {
												"3818d821-5901-4147-a474-f5f5aec1d54e": {
													"state": "ignored"
												},
												"b17c8043-99a0-4202-b7d9-8f7cdbee02cd": {
													"state": "review"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch discovered operations response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch discovered operations response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Patch discovered operations",
		"tags": [
			"API Shield API Discovery"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"PATCH /zones/{zone_id}/api_gateway/discovery/operations/{operation_id}": {
		"description": "Update the `state` on a discovered operation",
		"operationId": "api-shield-api-patch-discovered-operation",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"state": {
								"allOf": [
									{
										"description": "Mark state of operation in API Discovery\n  * `review` - Mark operation as for review\n  * `ignored` - Mark operation as ignored\n",
										"enum": [
											"review",
											"ignored"
										],
										"type": "string",
										"x-auditable": true
									}
								]
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"state": {
													"description": "State of operation in API Discovery\n  * `review` - Operation is not saved into API Shield Endpoint Management\n  * `saved` - Operation is saved into API Shield Endpoint Management\n  * `ignored` - Operation is marked as ignored\n",
													"enum": [
														"review",
														"saved",
														"ignored"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch discovered operation response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch discovered operation response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Patch discovered operation",
		"tags": [
			"API Shield API Discovery"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	}
}