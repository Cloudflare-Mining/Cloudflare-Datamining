{
	"DELETE /accounts/{account_id}/d1/database/{database_id}": {
		"description": "Deletes the specified D1 database.",
		"operationId": "cloudflare-d1-delete-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Delete D1 database response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete D1 database response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete D1 Database",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Write"
		]
	},
	"GET /accounts/{account_id}/d1/database": {
		"description": "Returns a list of D1 databases.",
		"operationId": "cloudflare-d1-list-databases",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "query",
				"name": "name",
				"schema": {
					"description": "a database name to search for.",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"description": "Page number of paginated results.",
					"minimum": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 1000,
					"description": "Number of items per page.",
					"maximum": 10000,
					"minimum": 10,
					"type": "number"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"created_at": {
														"description": "Specifies the timestamp the resource was created as an ISO8601 string.",
														"example": "2022-11-15T18:25:44.442097Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"name": {
														"description": "D1 database name.",
														"example": "my-database",
														"pattern": "^[a-z0-9][a-z0-9-_]*$",
														"type": "string",
														"x-auditable": true
													},
													"uuid": {
														"description": "D1 database identifier (UUID).",
														"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"version": {
														"example": "production",
														"pattern": "^(alpha|beta|production)$",
														"type": "string",
														"x-auditable": true
													}
												},
												"type": "object"
											},
											"type": "array"
										},
										"result_info": {
											"properties": {
												"count": {
													"description": "Total number of results for the requested service",
													"example": 1,
													"type": "number"
												},
												"page": {
													"description": "Current page within paginated list of results",
													"example": 1,
													"type": "number"
												},
												"per_page": {
													"description": "Number of results per page of results",
													"example": 20,
													"type": "number"
												},
												"total_count": {
													"description": "Total results available without any search parameters",
													"example": 2000,
													"type": "number"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "List D1 databases response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List D1 databases response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List D1 Databases",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Read",
			"D1 Write"
		]
	},
	"GET /accounts/{account_id}/d1/database/{database_id}": {
		"description": "Returns the specified D1 database.",
		"operationId": "cloudflare-d1-get-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"oneOf": [
						{
							"description": "D1 database identifier (UUID).",
							"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
							"readOnly": true,
							"type": "string",
							"x-auditable": true
						},
						{
							"description": "D1 database name.",
							"example": "my-database",
							"pattern": "^[a-z0-9][a-z0-9-_]*$",
							"type": "string",
							"x-auditable": true
						}
					]
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "The details of the D1 database.",
											"properties": {
												"created_at": {
													"description": "Specifies the timestamp the resource was created as an ISO8601 string.",
													"example": "2022-11-15T18:25:44.442097Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"file_size": {
													"description": "The D1 database's size, in bytes.",
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"name": {
													"description": "D1 database name.",
													"example": "my-database",
													"pattern": "^[a-z0-9][a-z0-9-_]*$",
													"type": "string",
													"x-auditable": true
												},
												"num_tables": {
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"read_replication": {
													"description": "Configuration for D1 read replication.",
													"properties": {
														"mode": {
															"description": "The read replication mode for the database. Use 'auto' to create replicas and allow D1 automatically place them around the world, or 'disabled' to not use any database replicas (it can take a few hours for all replicas to be deleted).",
															"enum": [
																"auto",
																"disabled"
															],
															"example": "auto",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"mode"
													],
													"type": "object"
												},
												"uuid": {
													"description": "D1 database identifier (UUID).",
													"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"version": {
													"example": "production",
													"pattern": "^(alpha|beta|production)$",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Database details response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Database details response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get D1 Database",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Read",
			"D1 Write"
		]
	},
	"PATCH /accounts/{account_id}/d1/database/{database_id}": {
		"description": "Updates partially the specified D1 database.",
		"operationId": "cloudflare-d1-update-partial-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"read_replication": {
								"description": "Configuration for D1 read replication.",
								"properties": {
									"mode": {
										"description": "The read replication mode for the database. Use 'auto' to create replicas and allow D1 automatically place them around the world, or 'disabled' to not use any database replicas (it can take a few hours for all replicas to be deleted).",
										"enum": [
											"auto",
											"disabled"
										],
										"example": "auto",
										"type": "string",
										"x-auditable": true
									}
								},
								"required": [
									"mode"
								],
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "The details of the D1 database.",
											"properties": {
												"created_at": {
													"description": "Specifies the timestamp the resource was created as an ISO8601 string.",
													"example": "2022-11-15T18:25:44.442097Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"file_size": {
													"description": "The D1 database's size, in bytes.",
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"name": {
													"description": "D1 database name.",
													"example": "my-database",
													"pattern": "^[a-z0-9][a-z0-9-_]*$",
													"type": "string",
													"x-auditable": true
												},
												"num_tables": {
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"read_replication": {
													"description": "Configuration for D1 read replication.",
													"properties": {
														"mode": {
															"description": "The read replication mode for the database. Use 'auto' to create replicas and allow D1 automatically place them around the world, or 'disabled' to not use any database replicas (it can take a few hours for all replicas to be deleted).",
															"enum": [
																"auto",
																"disabled"
															],
															"example": "auto",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"mode"
													],
													"type": "object"
												},
												"uuid": {
													"description": "D1 database identifier (UUID).",
													"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"version": {
													"example": "production",
													"pattern": "^(alpha|beta|production)$",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Database details response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update D1 database response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update D1 Database partially",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Write"
		]
	},
	"POST /accounts/{account_id}/d1/database": {
		"description": "Returns the created D1 database.",
		"operationId": "cloudflare-d1-create-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"name": {
								"description": "D1 database name.",
								"example": "my-database",
								"pattern": "^[a-z0-9][a-z0-9-_]*$",
								"type": "string",
								"x-auditable": true
							},
							"primary_location_hint": {
								"description": "Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.",
								"enum": [
									"wnam",
									"enam",
									"weur",
									"eeur",
									"apac",
									"oc"
								],
								"example": "wnam",
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "The details of the D1 database.",
											"properties": {
												"created_at": {
													"description": "Specifies the timestamp the resource was created as an ISO8601 string.",
													"example": "2022-11-15T18:25:44.442097Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"file_size": {
													"description": "The D1 database's size, in bytes.",
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"name": {
													"description": "D1 database name.",
													"example": "my-database",
													"pattern": "^[a-z0-9][a-z0-9-_]*$",
													"type": "string",
													"x-auditable": true
												},
												"num_tables": {
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"read_replication": {
													"description": "Configuration for D1 read replication.",
													"properties": {
														"mode": {
															"description": "The read replication mode for the database. Use 'auto' to create replicas and allow D1 automatically place them around the world, or 'disabled' to not use any database replicas (it can take a few hours for all replicas to be deleted).",
															"enum": [
																"auto",
																"disabled"
															],
															"example": "auto",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"mode"
													],
													"type": "object"
												},
												"uuid": {
													"description": "D1 database identifier (UUID).",
													"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"version": {
													"example": "production",
													"pattern": "^(alpha|beta|production)$",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Returns the created D1 database's metadata"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Database details response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create D1 Database",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Write"
		]
	},
	"POST /accounts/{account_id}/d1/database/{database_id}/export": {
		"description": "Returns a URL where the SQL contents of your D1 can be downloaded. Note: this process may take\nsome time for larger DBs, during which your D1 will be unavailable to serve queries. To avoid\nblocking your DB unnecessarily, an in-progress export must be continually polled or will automatically cancel.\n",
		"operationId": "cloudflare-d1-export-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"current_bookmark": {
								"description": "To poll an in-progress export, provide the current bookmark (returned by your first polling response)",
								"type": "string",
								"x-auditable": true
							},
							"dump_options": {
								"properties": {
									"no_data": {
										"description": "Export only the table definitions, not their contents",
										"type": "boolean",
										"x-auditable": true
									},
									"no_schema": {
										"description": "Export only each table's contents, not its definition",
										"type": "boolean",
										"x-auditable": true
									},
									"tables": {
										"description": "Filter the export to just one or more tables. Passing an empty array is the same as not passing anything and means: export all tables.",
										"items": {
											"type": "string",
											"x-auditable": true
										},
										"type": "array"
									}
								},
								"type": "object"
							},
							"output_format": {
								"description": "Specifies that you will poll this endpoint until the export completes",
								"enum": [
									"polling"
								],
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"output_format"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"at_bookmark": {
													"description": "The current time-travel bookmark for your D1, used to poll for updates. Will not change for the duration of the export task.",
													"type": "string",
													"x-auditable": true
												},
												"error": {
													"description": "Only present when status = 'error'. Contains the error message.",
													"type": "string",
													"x-auditable": true
												},
												"messages": {
													"description": "Logs since the last time you polled",
													"items": {
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												},
												"result": {
													"description": "Only present when status = 'complete'",
													"properties": {
														"filename": {
															"description": "The generated SQL filename.",
															"type": "string",
															"x-auditable": true
														},
														"signed_url": {
															"description": "The URL to download the exported SQL. Available for one hour.",
															"type": "string"
														}
													},
													"type": "object"
												},
												"status": {
													"enum": [
														"complete",
														"error"
													],
													"type": "string",
													"x-auditable": true
												},
												"success": {
													"type": "boolean",
													"x-auditable": true
												},
												"type": {
													"enum": [
														"export"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Polled successfully, task no longer running (errored or complete)"
			},
			"202": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"at_bookmark": {
													"description": "The current time-travel bookmark for your D1, used to poll for updates. Will not change for the duration of the export task.",
													"type": "string",
													"x-auditable": true
												},
												"messages": {
													"description": "Logs since the last time you polled",
													"items": {
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												},
												"status": {
													"enum": [
														"active"
													],
													"type": "string",
													"x-auditable": true
												},
												"success": {
													"type": "boolean",
													"x-auditable": true
												},
												"type": {
													"enum": [
														"export"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Polled successfully, task is currently running"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Poll failed (API error)"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Export D1 Database as SQL",
		"tags": [
			"D1"
		]
	},
	"POST /accounts/{account_id}/d1/database/{database_id}/import": {
		"description": "Generates a temporary URL for uploading an SQL file to, then instructing the D1 to import it\nand polling it for status updates. Imports block the D1 for their duration.\n",
		"operationId": "cloudflare-d1-import-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"oneOf": [
							{
								"properties": {
									"action": {
										"description": "Indicates you have a new SQL file to upload.",
										"enum": [
											"init"
										],
										"type": "string",
										"x-auditable": true
									},
									"etag": {
										"description": "Required when action is 'init' or 'ingest'. An md5 hash of the file you're uploading. Used to check if it already exists, and validate its contents before ingesting.",
										"type": "string",
										"x-auditable": true
									}
								},
								"required": [
									"action",
									"etag"
								],
								"title": "init",
								"type": "object"
							},
							{
								"properties": {
									"action": {
										"description": "Indicates you've finished uploading to tell the D1 to start consuming it",
										"enum": [
											"ingest"
										],
										"type": "string",
										"x-auditable": true
									},
									"etag": {
										"description": "An md5 hash of the file you're uploading. Used to check if it already exists, and validate its contents before ingesting.",
										"type": "string",
										"x-auditable": true
									},
									"filename": {
										"description": "The filename you have successfully uploaded.",
										"type": "string",
										"x-auditable": true
									}
								},
								"required": [
									"action",
									"etag",
									"filename"
								],
								"title": "ingest",
								"type": "object"
							},
							{
								"properties": {
									"action": {
										"description": "Indicates you've finished uploading to tell the D1 to start consuming it",
										"enum": [
											"poll"
										],
										"type": "string",
										"x-auditable": true
									},
									"current_bookmark": {
										"description": "This identifies the currently-running import, checking its status.",
										"type": "string",
										"x-auditable": true
									}
								},
								"required": [
									"action",
									"current_bookmark"
								],
								"title": "poll",
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"at_bookmark": {
													"description": "The current time-travel bookmark for your D1, used to poll for updates. Will not change for the duration of the import. Only returned if an import process is currently running or recently finished.",
													"type": "string",
													"x-auditable": true
												},
												"error": {
													"description": "Only present when status = 'error'. Contains the error message that prevented the import from succeeding.",
													"type": "string",
													"x-auditable": true
												},
												"filename": {
													"description": "Derived from the database ID and etag, to use in avoiding repeated uploads. Only returned when for the 'init' action.",
													"type": "string",
													"x-auditable": true
												},
												"messages": {
													"description": "Logs since the last time you polled",
													"items": {
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												},
												"result": {
													"description": "Only present when status = 'complete'",
													"properties": {
														"final_bookmark": {
															"description": "The time-travel bookmark if you need restore your D1 to directly after the import succeeded.",
															"type": "string",
															"x-auditable": true
														},
														"meta": {
															"properties": {
																"changed_db": {
																	"description": "Denotes if the database has been altered in some way, like deleting rows.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"changes": {
																	"description": "Rough indication of how many rows were modified by the query, as provided by SQLite's `sqlite3_total_changes()`.",
																	"type": "number",
																	"x-auditable": true
																},
																"duration": {
																	"description": "The duration of the SQL query execution inside the database. Does not include any network communication.",
																	"type": "number",
																	"x-auditable": true
																},
																"last_row_id": {
																	"description": "The row ID of the last inserted row in a table with an `INTEGER PRIMARY KEY` as provided by SQLite. Tables created with `WITHOUT ROWID` do not populate this.",
																	"type": "number",
																	"x-auditable": true
																},
																"rows_read": {
																	"description": "Number of rows read during the SQL query execution, including indices (not all rows are necessarily returned).",
																	"type": "number",
																	"x-auditable": true
																},
																"rows_written": {
																	"description": "Number of rows written during the SQL query execution, including indices.",
																	"type": "number",
																	"x-auditable": true
																},
																"served_by_primary": {
																	"description": "Denotes if the query has been handled by the database primary instance.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"served_by_region": {
																	"description": "Region location hint of the database instance that handled the query.",
																	"enum": [
																		"WNAM",
																		"ENAM",
																		"WEUR",
																		"EEUR",
																		"APAC",
																		"OC"
																	],
																	"example": "EEUR",
																	"type": "string",
																	"x-auditable": true
																},
																"size_after": {
																	"description": "Size of the database after the query committed, in bytes.",
																	"type": "number",
																	"x-auditable": true
																},
																"timings": {
																	"description": "Various durations for the query.",
																	"properties": {
																		"sql_duration_ms": {
																			"description": "The duration of the SQL query execution inside the database. Does not include any network communication.",
																			"type": "number",
																			"x-auditable": true
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"num_queries": {
															"description": "The total number of queries that were executed during the import.",
															"type": "number",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"status": {
													"enum": [
														"complete",
														"error"
													],
													"type": "string",
													"x-auditable": true
												},
												"success": {
													"type": "boolean",
													"x-auditable": true
												},
												"type": {
													"enum": [
														"import"
													],
													"type": "string",
													"x-auditable": true
												},
												"upload_url": {
													"description": "The R2 presigned URL to use for uploading. Only returned when for the 'init' action.",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Successful action. Import is either ready to start, under way, or finished (succeeded or failed)."
			},
			"202": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"at_bookmark": {
													"description": "The current time-travel bookmark for your D1, used to poll for updates. Will not change for the duration of the import.",
													"type": "string",
													"x-auditable": true
												},
												"messages": {
													"description": "Logs since the last time you polled",
													"items": {
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												},
												"status": {
													"enum": [
														"active"
													],
													"type": "string",
													"x-auditable": true
												},
												"success": {
													"type": "boolean",
													"x-auditable": true
												},
												"type": {
													"enum": [
														"import"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Polled successfully, task is currently running"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Poll failed (API error)"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Import SQL into your D1 Database",
		"tags": [
			"D1"
		]
	},
	"POST /accounts/{account_id}/d1/database/{database_id}/query": {
		"description": "Returns the query result as an object.",
		"operationId": "cloudflare-d1-query-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"description": "A single query object or an array of query objects.",
						"oneOf": [
							{
								"description": "A single query with or without parameters",
								"properties": {
									"params": {
										"example": [
											"firstParam",
											"secondParam"
										],
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"sql": {
										"description": "Your SQL query. Supports multiple statements, joined by semicolons, which will be executed as a batch.",
										"example": "SELECT * FROM myTable WHERE field = ? OR field = ?;",
										"type": "string"
									}
								},
								"required": [
									"sql"
								],
								"type": "object"
							},
							{
								"items": {
									"description": "A single query with or without parameters",
									"properties": {
										"params": {
											"example": [
												"firstParam",
												"secondParam"
											],
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"sql": {
											"description": "Your SQL query. Supports multiple statements, joined by semicolons, which will be executed as a batch.",
											"example": "SELECT * FROM myTable WHERE field = ? OR field = ?;",
											"type": "string"
										}
									},
									"required": [
										"sql"
									],
									"type": "object"
								},
								"title": "multiple queries",
								"type": "array"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"meta": {
														"properties": {
															"changed_db": {
																"description": "Denotes if the database has been altered in some way, like deleting rows.",
																"type": "boolean",
																"x-auditable": true
															},
															"changes": {
																"description": "Rough indication of how many rows were modified by the query, as provided by SQLite's `sqlite3_total_changes()`.",
																"type": "number",
																"x-auditable": true
															},
															"duration": {
																"description": "The duration of the SQL query execution inside the database. Does not include any network communication.",
																"type": "number",
																"x-auditable": true
															},
															"last_row_id": {
																"description": "The row ID of the last inserted row in a table with an `INTEGER PRIMARY KEY` as provided by SQLite. Tables created with `WITHOUT ROWID` do not populate this.",
																"type": "number",
																"x-auditable": true
															},
															"rows_read": {
																"description": "Number of rows read during the SQL query execution, including indices (not all rows are necessarily returned).",
																"type": "number",
																"x-auditable": true
															},
															"rows_written": {
																"description": "Number of rows written during the SQL query execution, including indices.",
																"type": "number",
																"x-auditable": true
															},
															"served_by_primary": {
																"description": "Denotes if the query has been handled by the database primary instance.",
																"type": "boolean",
																"x-auditable": true
															},
															"served_by_region": {
																"description": "Region location hint of the database instance that handled the query.",
																"enum": [
																	"WNAM",
																	"ENAM",
																	"WEUR",
																	"EEUR",
																	"APAC",
																	"OC"
																],
																"example": "EEUR",
																"type": "string",
																"x-auditable": true
															},
															"size_after": {
																"description": "Size of the database after the query committed, in bytes.",
																"type": "number",
																"x-auditable": true
															},
															"timings": {
																"description": "Various durations for the query.",
																"properties": {
																	"sql_duration_ms": {
																		"description": "The duration of the SQL query execution inside the database. Does not include any network communication.",
																		"type": "number",
																		"x-auditable": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"results": {
														"items": {
															"type": "object"
														},
														"type": "array"
													},
													"success": {
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Query response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Query response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Query D1 Database",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Read",
			"D1 Write"
		]
	},
	"POST /accounts/{account_id}/d1/database/{database_id}/raw": {
		"description": "Returns the query result rows as arrays rather than objects. This is a performance-optimized version of the /query endpoint.",
		"operationId": "cloudflare-d1-raw-database-query",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"description": "A single query object or an array of query objects.",
						"oneOf": [
							{
								"description": "A single query with or without parameters",
								"properties": {
									"params": {
										"example": [
											"firstParam",
											"secondParam"
										],
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"sql": {
										"description": "Your SQL query. Supports multiple statements, joined by semicolons, which will be executed as a batch.",
										"example": "SELECT * FROM myTable WHERE field = ? OR field = ?;",
										"type": "string"
									}
								},
								"required": [
									"sql"
								],
								"type": "object"
							},
							{
								"items": {
									"description": "A single query with or without parameters",
									"properties": {
										"params": {
											"example": [
												"firstParam",
												"secondParam"
											],
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"sql": {
											"description": "Your SQL query. Supports multiple statements, joined by semicolons, which will be executed as a batch.",
											"example": "SELECT * FROM myTable WHERE field = ? OR field = ?;",
											"type": "string"
										}
									},
									"required": [
										"sql"
									],
									"type": "object"
								},
								"title": "multiple queries",
								"type": "array"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"meta": {
														"properties": {
															"changed_db": {
																"description": "Denotes if the database has been altered in some way, like deleting rows.",
																"type": "boolean",
																"x-auditable": true
															},
															"changes": {
																"description": "Rough indication of how many rows were modified by the query, as provided by SQLite's `sqlite3_total_changes()`.",
																"type": "number",
																"x-auditable": true
															},
															"duration": {
																"description": "The duration of the SQL query execution inside the database. Does not include any network communication.",
																"type": "number",
																"x-auditable": true
															},
															"last_row_id": {
																"description": "The row ID of the last inserted row in a table with an `INTEGER PRIMARY KEY` as provided by SQLite. Tables created with `WITHOUT ROWID` do not populate this.",
																"type": "number",
																"x-auditable": true
															},
															"rows_read": {
																"description": "Number of rows read during the SQL query execution, including indices (not all rows are necessarily returned).",
																"type": "number",
																"x-auditable": true
															},
															"rows_written": {
																"description": "Number of rows written during the SQL query execution, including indices.",
																"type": "number",
																"x-auditable": true
															},
															"served_by_primary": {
																"description": "Denotes if the query has been handled by the database primary instance.",
																"type": "boolean",
																"x-auditable": true
															},
															"served_by_region": {
																"description": "Region location hint of the database instance that handled the query.",
																"enum": [
																	"WNAM",
																	"ENAM",
																	"WEUR",
																	"EEUR",
																	"APAC",
																	"OC"
																],
																"example": "EEUR",
																"type": "string",
																"x-auditable": true
															},
															"size_after": {
																"description": "Size of the database after the query committed, in bytes.",
																"type": "number",
																"x-auditable": true
															},
															"timings": {
																"description": "Various durations for the query.",
																"properties": {
																	"sql_duration_ms": {
																		"description": "The duration of the SQL query execution inside the database. Does not include any network communication.",
																		"type": "number",
																		"x-auditable": true
																	}
																},
																"type": "object"
															}
														},
														"type": "object"
													},
													"results": {
														"properties": {
															"columns": {
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"rows": {
																"items": {
																	"items": {
																		"anyOf": [
																			{
																				"type": "number"
																			},
																			{
																				"type": "string"
																			},
																			{
																				"type": "object"
																			}
																		]
																	},
																	"type": "array"
																},
																"type": "array"
															}
														},
														"type": "object"
													},
													"success": {
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Raw query response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Query response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Raw D1 Database query",
		"tags": [
			"D1"
		]
	},
	"PUT /accounts/{account_id}/d1/database/{database_id}": {
		"description": "Updates the specified D1 database.",
		"operationId": "cloudflare-d1-update-database",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "database_id",
				"required": true,
				"schema": {
					"description": "D1 database identifier (UUID).",
					"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"read_replication": {
								"description": "Configuration for D1 read replication.",
								"properties": {
									"mode": {
										"description": "The read replication mode for the database. Use 'auto' to create replicas and allow D1 automatically place them around the world, or 'disabled' to not use any database replicas (it can take a few hours for all replicas to be deleted).",
										"enum": [
											"auto",
											"disabled"
										],
										"example": "auto",
										"type": "string",
										"x-auditable": true
									}
								},
								"required": [
									"mode"
								],
								"type": "object"
							}
						},
						"required": [
							"read_replication"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "The details of the D1 database.",
											"properties": {
												"created_at": {
													"description": "Specifies the timestamp the resource was created as an ISO8601 string.",
													"example": "2022-11-15T18:25:44.442097Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"file_size": {
													"description": "The D1 database's size, in bytes.",
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"name": {
													"description": "D1 database name.",
													"example": "my-database",
													"pattern": "^[a-z0-9][a-z0-9-_]*$",
													"type": "string",
													"x-auditable": true
												},
												"num_tables": {
													"example": 12,
													"type": "number",
													"x-auditable": true
												},
												"read_replication": {
													"description": "Configuration for D1 read replication.",
													"properties": {
														"mode": {
															"description": "The read replication mode for the database. Use 'auto' to create replicas and allow D1 automatically place them around the world, or 'disabled' to not use any database replicas (it can take a few hours for all replicas to be deleted).",
															"enum": [
																"auto",
																"disabled"
															],
															"example": "auto",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"mode"
													],
													"type": "object"
												},
												"uuid": {
													"description": "D1 database identifier (UUID).",
													"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"version": {
													"example": "production",
													"pattern": "^(alpha|beta|production)$",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Database details response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update D1 database response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update D1 Database",
		"tags": [
			"D1"
		],
		"x-api-token-group": [
			"D1 Write"
		]
	}
}