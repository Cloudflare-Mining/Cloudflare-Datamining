{
	"DELETE /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}": {
		"description": "Delete an event notification rule. **If no body is provided, all rules for specified queue will be deleted**.",
		"operationId": "r2-event-notification-delete-config",
		"parameters": [
			{
				"in": "path",
				"name": "queue_id",
				"required": true,
				"schema": {
					"description": "Queue ID.",
					"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"ruleIds": {
								"description": "Array of rule ids to delete.",
								"items": {
									"description": "rule ids to be deleted.",
									"type": "string"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete Configuration failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Delete Event Notification Rules",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write"
		]
	},
	"DELETE /accounts/{account_id}/r2/buckets/{bucket_name}": {
		"description": "Deletes an existing R2 bucket.",
		"operationId": "r2-delete-bucket",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										true
									],
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete Bucket response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete Bucket response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Delete Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write"
		]
	},
	"DELETE /accounts/{account_id}/r2/buckets/{bucket_name}/cors": {
		"description": "Delete the CORS policy for a bucket.",
		"operationId": "r2-delete-bucket-cors-policy",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Delete Bucket CORS Policy",
		"tags": [
			"R2 Bucket"
		]
	},
	"DELETE /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom/{domain}": {
		"description": "Remove custom domain registration from an existing R2 bucket.",
		"operationId": "r2-delete-custom-domain",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "domain",
				"required": true,
				"schema": {
					"description": "Name of the custom domain.",
					"example": "example-domain/custom-domain.com",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": {
												"domain": "example-domain/custom-domain.com"
											},
											"properties": {
												"domain": {
													"description": "Name of the removed custom domain.",
													"type": "string",
													"x-auditable": true
												}
											},
											"required": [
												"domain"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Custom Domain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete Custom Domain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Remove Custom Domain From Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write"
		]
	},
	"DELETE /accounts/{account_id}/r2/buckets/{bucket_name}/sippy": {
		"description": "Disables Sippy on this bucket.",
		"operationId": "r2-delete-bucket-sippy-config",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"enabled": {
													"enum": [
														false
													],
													"type": "boolean"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Sippy Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete Sippy Configuration response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Disable Sippy",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write"
		]
	},
	"GET /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration": {
		"description": "List all event notification rules for a bucket.",
		"operationId": "r2-get-event-notification-configs",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bucketName": {
													"description": "Name of the bucket.",
													"type": "string",
													"x-auditable": true
												},
												"queues": {
													"description": "List of queues associated with the bucket.",
													"items": {
														"properties": {
															"queueId": {
																"description": "Queue ID.",
																"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
																"type": "string",
																"x-auditable": true
															},
															"queueName": {
																"description": "Name of the queue.",
																"example": "first-queue",
																"type": "string",
																"x-auditable": true
															},
															"rules": {
																"items": {
																	"allOf": [
																		{
																			"properties": {
																				"actions": {
																					"description": "Array of R2 object actions that will trigger notifications.",
																					"example": [
																						"PutObject",
																						"CopyObject"
																					],
																					"items": {
																						"enum": [
																							"PutObject",
																							"CopyObject",
																							"DeleteObject",
																							"CompleteMultipartUpload",
																							"LifecycleDeletion"
																						],
																						"type": "string",
																						"x-auditable": true
																					},
																					"type": "array",
																					"uniqueItems": true
																				},
																				"description": {
																					"description": "A description that can be used to identify the event notification rule after creation.",
																					"example": "Notifications from source bucket to queue",
																					"type": "string",
																					"x-auditable": true
																				},
																				"prefix": {
																					"description": "Notifications will be sent only for objects with this prefix.",
																					"example": "img/",
																					"type": "string",
																					"x-auditable": true
																				},
																				"suffix": {
																					"description": "Notifications will be sent only for objects with this suffix.",
																					"example": ".jpeg",
																					"type": "string",
																					"x-auditable": true
																				}
																			},
																			"required": [
																				"actions"
																			],
																			"type": "object"
																		},
																		{
																			"properties": {
																				"createdAt": {
																					"description": "Timestamp when the rule was created.",
																					"example": "2024-09-19T21:54:48.405Z",
																					"type": "string",
																					"x-auditable": true
																				},
																				"description": {
																					"description": "A description that can be used to identify the event notification rule after creation.",
																					"example": "Notifications from source bucket to queue",
																					"type": "string",
																					"x-auditable": true
																				},
																				"ruleId": {
																					"description": "Rule ID.",
																					"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
																					"type": "string",
																					"x-auditable": true
																				}
																			},
																			"type": "object"
																		}
																	]
																},
																"type": "array"
															}
														},
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Read Configuration response."
			},
			"404": {
				"content": {
					"application/json": {
						"example": {
							"errors": [
								{
									"code": 11015,
									"message": "workers.api.error.no_configs_found_for_bucket"
								}
							],
							"messages": [],
							"result": null,
							"success": false
						},
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "No Configuration Found response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Read Configuration failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "List Event Notification Rules",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write",
			"Workers R2 Storage Read"
		]
	},
	"GET /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}": {
		"description": "Get a single event notification rule.",
		"operationId": "r2-get-event-notification-config",
		"parameters": [
			{
				"in": "path",
				"name": "queue_id",
				"required": true,
				"schema": {
					"description": "Queue ID.",
					"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "The bucket jurisdiction.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"queueId": {
													"description": "Queue ID.",
													"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
													"type": "string",
													"x-auditable": true
												},
												"queueName": {
													"description": "Name of the queue.",
													"example": "first-queue",
													"type": "string",
													"x-auditable": true
												},
												"rules": {
													"items": {
														"allOf": [
															{
																"properties": {
																	"actions": {
																		"description": "Array of R2 object actions that will trigger notifications.",
																		"example": [
																			"PutObject",
																			"CopyObject"
																		],
																		"items": {
																			"enum": [
																				"PutObject",
																				"CopyObject",
																				"DeleteObject",
																				"CompleteMultipartUpload",
																				"LifecycleDeletion"
																			],
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array",
																		"uniqueItems": true
																	},
																	"description": {
																		"description": "A description that can be used to identify the event notification rule after creation.",
																		"example": "Notifications from source bucket to queue",
																		"type": "string",
																		"x-auditable": true
																	},
																	"prefix": {
																		"description": "Notifications will be sent only for objects with this prefix.",
																		"example": "img/",
																		"type": "string",
																		"x-auditable": true
																	},
																	"suffix": {
																		"description": "Notifications will be sent only for objects with this suffix.",
																		"example": ".jpeg",
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"required": [
																	"actions"
																],
																"type": "object"
															},
															{
																"properties": {
																	"createdAt": {
																		"description": "Timestamp when the rule was created.",
																		"example": "2024-09-19T21:54:48.405Z",
																		"type": "string",
																		"x-auditable": true
																	},
																	"description": {
																		"description": "A description that can be used to identify the event notification rule after creation.",
																		"example": "Notifications from source bucket to queue",
																		"type": "string",
																		"x-auditable": true
																	},
																	"ruleId": {
																		"description": "Rule ID.",
																		"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"type": "object"
															}
														]
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Read Configuration response."
			},
			"404": {
				"content": {
					"application/json": {
						"example": {
							"errors": [
								{
									"code": 11015,
									"message": "workers.api.error.no_configs_found_for_bucket"
								}
							],
							"messages": [],
							"result": null,
							"success": false
						},
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "No Configuration Found response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Read Configuration failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Event Notification Rule",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write",
			"Workers R2 Storage Read"
		]
	},
	"GET /accounts/{account_id}/r2/buckets": {
		"description": "Lists all R2 buckets on your account.",
		"operationId": "r2-list-buckets",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "name_contains",
				"schema": {
					"description": "Bucket names to filter by. Only buckets with this phrase in their name will be returned.",
					"example": "my-bucket",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "start_after",
				"schema": {
					"description": "Bucket name to start searching after. Buckets are ordered lexicographically.",
					"example": "my-bucket",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 20,
					"description": "Maximum number of buckets to return in a single call.",
					"maximum": 1000,
					"minimum": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "order",
				"schema": {
					"description": "Field to order buckets by.",
					"enum": [
						"name"
					],
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "direction",
				"schema": {
					"description": "Direction to order buckets.",
					"enum": [
						"asc",
						"desc"
					],
					"example": "desc",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "cursor",
				"schema": {
					"description": "Pagination cursor received during the last List Buckets call. R2 buckets are paginated using cursors instead of page numbers.",
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"result": {
													"type": "object"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"cursor": {
															"description": "A continuation token that should be used to fetch the next page of results.",
															"example": "1-JTdCJTIydiUyMiUzQTElMkMlMjJzdGFydEFmdGVyJTIyJTNBJTIyZGF2aWRwdWJsaWMlMjIlN0Q=",
															"type": "string"
														},
														"per_page": {
															"description": "Maximum number of results on this page.",
															"example": 20,
															"type": "number"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"buckets": {
													"items": {
														"description": "A single R2 bucket.",
														"properties": {
															"creation_date": {
																"description": "Creation timestamp.",
																"type": "string"
															},
															"jurisdiction": {
																"default": "default",
																"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
																"enum": [
																	"default",
																	"eu",
																	"fedramp"
																],
																"type": "string",
																"x-auditable": true,
																"x-stainless-param": "jurisdiction"
															},
															"location": {
																"description": "Location of the bucket.",
																"enum": [
																	"apac",
																	"eeur",
																	"enam",
																	"weur",
																	"wnam",
																	"oc"
																],
																"type": "string",
																"x-auditable": true,
																"x-stainless-terraform-configurability": "computed_optional"
															},
															"name": {
																"description": "Name of the bucket.",
																"example": "example-bucket",
																"maxLength": 64,
																"minLength": 3,
																"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
																"type": "string",
																"x-auditable": true
															},
															"storage_class": {
																"default": "Standard",
																"description": "Storage class for newly uploaded objects, unless specified otherwise.",
																"enum": [
																	"Standard",
																	"InfrequentAccess"
																],
																"type": "string",
																"x-auditable": true
															}
														},
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Buckets response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List Buckets response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "List Buckets",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write",
			"Workers R2 Storage Read"
		]
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}": {
		"description": "Gets properties of an existing R2 bucket.",
		"operationId": "r2-get-bucket",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "A single R2 bucket.",
											"properties": {
												"creation_date": {
													"description": "Creation timestamp.",
													"type": "string"
												},
												"jurisdiction": {
													"default": "default",
													"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
													"enum": [
														"default",
														"eu",
														"fedramp"
													],
													"type": "string",
													"x-auditable": true,
													"x-stainless-param": "jurisdiction"
												},
												"location": {
													"description": "Location of the bucket.",
													"enum": [
														"apac",
														"eeur",
														"enam",
														"weur",
														"wnam",
														"oc"
													],
													"type": "string",
													"x-auditable": true,
													"x-stainless-terraform-configurability": "computed_optional"
												},
												"name": {
													"description": "Name of the bucket.",
													"example": "example-bucket",
													"maxLength": 64,
													"minLength": 3,
													"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
													"type": "string",
													"x-auditable": true
												},
												"storage_class": {
													"default": "Standard",
													"description": "Storage class for newly uploaded objects, unless specified otherwise.",
													"enum": [
														"Standard",
														"InfrequentAccess"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Bucket response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Bucket response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.read"
			]
		}
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/cors": {
		"description": "Get the CORS policy for a bucket.",
		"operationId": "r2-get-bucket-cors-policy",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"rules": {
													"items": {
														"properties": {
															"allowed": {
																"description": "Object specifying allowed origins, methods and headers for this CORS rule.",
																"properties": {
																	"headers": {
																		"description": "Specifies the value for the Access-Control-Allow-Headers header R2 sets when requesting objects in this bucket from a browser. Cross-origin requests that include custom headers (e.g. x-user-id) should specify these headers as AllowedHeaders.",
																		"items": {
																			"example": "x-requested-by",
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"methods": {
																		"description": "Specifies the value for the Access-Control-Allow-Methods header R2 sets when requesting objects in a bucket from a browser.",
																		"items": {
																			"enum": [
																				"GET",
																				"PUT",
																				"POST",
																				"DELETE",
																				"HEAD"
																			],
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"origins": {
																		"description": "Specifies the value for the Access-Control-Allow-Origin header R2 sets when requesting objects in a bucket from a browser.",
																		"items": {
																			"example": "http://localhost:3000",
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	}
																},
																"required": [
																	"methods",
																	"origins"
																],
																"type": "object"
															},
															"exposeHeaders": {
																"description": "Specifies the headers that can be exposed back, and accessed by, the JavaScript making the cross-origin request. If you need to access headers beyond the safelisted response headers, such as Content-Encoding or cf-cache-status, you must specify it here.",
																"items": {
																	"example": "Content-Encoding",
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"id": {
																"description": "Identifier for this rule.",
																"example": "Allow Local Development",
																"type": "string",
																"x-auditable": true
															},
															"maxAgeSeconds": {
																"description": "Specifies the amount of time (in seconds) browsers are allowed to cache CORS preflight responses. Browsers may limit this to 2 hours or less, even if the maximum value (86400) is specified.",
																"example": 3600,
																"type": "number",
																"x-auditable": true
															}
														},
														"required": [
															"allowed"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Bucket CORS Policy",
		"tags": [
			"R2 Bucket"
		]
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom": {
		"description": "Gets a list of all custom domains registered with an existing R2 bucket.",
		"operationId": "r2-list-custom-domains",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": {
												"domains": [
													{
														"domain": "prefix.example-domain.one.com",
														"enabled": false,
														"status": {
															"ownership": "deactivated",
															"ssl": "pending"
														},
														"zoneId": "36ca64a6d92827b8a6b90be344bb1bfd",
														"zoneName": "example-domain.one.com"
													},
													{
														"domain": "prefix.example-domain.two.com",
														"enabled": true,
														"status": {
															"ownership": "active",
															"ssl": "active"
														},
														"zoneId": "d9d28585d5f8f5b0f857b055bf574f19"
													}
												]
											},
											"properties": {
												"domains": {
													"items": {
														"properties": {
															"ciphers": {
																"description": "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.",
																"items": {
																	"type": "string"
																},
																"type": "array",
																"x-auditable": true
															},
															"domain": {
																"description": "Domain name of the custom domain to be added.",
																"type": "string",
																"x-auditable": true
															},
															"enabled": {
																"description": "Whether this bucket is publicly accessible at the specified custom domain.",
																"type": "boolean",
																"x-auditable": true
															},
															"minTLS": {
																"description": "Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.",
																"enum": [
																	"1.0",
																	"1.1",
																	"1.2",
																	"1.3"
																],
																"type": "string",
																"x-auditable": true
															},
															"status": {
																"properties": {
																	"ownership": {
																		"description": "Ownership status of the domain.",
																		"enum": [
																			"pending",
																			"active",
																			"deactivated",
																			"blocked",
																			"error",
																			"unknown"
																		],
																		"type": "string",
																		"x-auditable": true
																	},
																	"ssl": {
																		"description": "SSL certificate status.",
																		"enum": [
																			"initializing",
																			"pending",
																			"active",
																			"deactivated",
																			"error",
																			"unknown"
																		],
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"required": [
																	"ssl",
																	"ownership"
																],
																"type": "object"
															},
															"zoneId": {
																"description": "Zone ID of the custom domain resides in.",
																"type": "string",
																"x-auditable": true
															},
															"zoneName": {
																"description": "Zone that the custom domain resides in.",
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"domain",
															"status",
															"enabled"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"required": [
												"domains"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Custom Domains response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List Custom Domains response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "List Custom Domains of Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.read"
			]
		}
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom/{domain}": {
		"description": "Get the configuration for a custom domain on an existing R2 bucket.",
		"operationId": "r2-get-custom-domain-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "domain",
				"required": true,
				"schema": {
					"description": "Name of the custom domain.",
					"example": "example-domain/custom-domain.com",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"example": {
														"domain": "prefix.example-domain.one.com",
														"enabled": false,
														"status": {
															"ownership": "deactivated",
															"ssl": "pending"
														},
														"zoneId": "36ca64a6d92827b8a6b90be344bb1bfd",
														"zoneName": "example-domain.one.com"
													},
													"properties": {
														"ciphers": {
															"description": "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.",
															"items": {
																"type": "string"
															},
															"type": "array",
															"x-auditable": true
														},
														"domain": {
															"description": "Domain name of the custom domain to be added.",
															"type": "string",
															"x-auditable": true
														},
														"enabled": {
															"description": "Whether this bucket is publicly accessible at the specified custom domain.",
															"type": "boolean",
															"x-auditable": true
														},
														"minTLS": {
															"description": "Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.",
															"enum": [
																"1.0",
																"1.1",
																"1.2",
																"1.3"
															],
															"type": "string",
															"x-auditable": true
														},
														"status": {
															"properties": {
																"ownership": {
																	"description": "Ownership status of the domain.",
																	"enum": [
																		"pending",
																		"active",
																		"deactivated",
																		"blocked",
																		"error",
																		"unknown"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"ssl": {
																	"description": "SSL certificate status.",
																	"enum": [
																		"initializing",
																		"pending",
																		"active",
																		"deactivated",
																		"error",
																		"unknown"
																	],
																	"type": "string",
																	"x-auditable": true
																}
															},
															"required": [
																"ssl",
																"ownership"
															],
															"type": "object"
														},
														"zoneId": {
															"description": "Zone ID of the custom domain resides in.",
															"type": "string",
															"x-auditable": true
														},
														"zoneName": {
															"description": "Zone that the custom domain resides in.",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"domain",
														"status",
														"enabled"
													],
													"type": "object"
												}
											]
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Custom Domain Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Custom Domain Configuration response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Custom Domain Settings",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write",
			"Workers R2 Storage Read"
		]
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/domains/managed": {
		"description": "Gets state of public access over the bucket's R2-managed (r2.dev) domain.",
		"operationId": "r2-get-bucket-public-policy",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": {
												"bucketId": "0113a9e4549cf9b1ff1bf56e04da0cef",
												"domain": "pub-0113a9e4549cf9b1ff1bf56e04da0cef.r2.dev",
												"enabled": true
											},
											"properties": {
												"bucketId": {
													"description": "Bucket ID.",
													"maxLength": 32,
													"type": "string",
													"x-auditable": true
												},
												"domain": {
													"description": "Domain name of the bucket's r2.dev domain.",
													"type": "string",
													"x-auditable": true
												},
												"enabled": {
													"description": "Whether this bucket is publicly accessible at the r2.dev domain.",
													"type": "boolean",
													"x-auditable": true
												}
											},
											"required": [
												"bucketId",
												"domain",
												"enabled"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Managed Subdomain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Managed Subdomain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get r2.dev Domain of Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.read"
			]
		}
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/lifecycle": {
		"description": "Get object lifecycle rules for a bucket.",
		"operationId": "r2-get-bucket-lifecycle-configuration",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"rules": {
													"items": {
														"allOf": [
															{
																"properties": {
																	"abortMultipartUploadsTransition": {
																		"description": "Transition to abort ongoing multipart uploads.",
																		"properties": {
																			"condition": {
																				"allOf": [
																					{
																						"description": "Condition for lifecycle transitions to apply after an object reaches an age in seconds.",
																						"properties": {
																							"maxAge": {
																								"type": "integer",
																								"x-auditable": true
																							},
																							"type": {
																								"enum": [
																									"Age"
																								],
																								"type": "string",
																								"x-auditable": true
																							}
																						},
																						"required": [
																							"type",
																							"maxAge"
																						],
																						"type": "object"
																					}
																				]
																			}
																		},
																		"type": "object"
																	},
																	"conditions": {
																		"description": "Conditions that apply to all transitions of this rule.",
																		"properties": {
																			"prefix": {
																				"description": "Transitions will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads.",
																				"type": "string",
																				"x-auditable": true
																			}
																		},
																		"required": [
																			"prefix"
																		],
																		"type": "object"
																	},
																	"deleteObjectsTransition": {
																		"description": "Transition to delete objects.",
																		"properties": {
																			"condition": {
																				"oneOf": [
																					{
																						"description": "Condition for lifecycle transitions to apply after an object reaches an age in seconds.",
																						"properties": {
																							"maxAge": {
																								"type": "integer",
																								"x-auditable": true
																							},
																							"type": {
																								"enum": [
																									"Age"
																								],
																								"type": "string",
																								"x-auditable": true
																							}
																						},
																						"required": [
																							"type",
																							"maxAge"
																						],
																						"type": "object"
																					},
																					{
																						"description": "Condition for lifecycle transitions to apply on a specific date.",
																						"properties": {
																							"date": {
																								"format": "date-time",
																								"type": "string",
																								"x-auditable": true
																							},
																							"type": {
																								"enum": [
																									"Date"
																								],
																								"type": "string",
																								"x-auditable": true
																							}
																						},
																						"required": [
																							"type",
																							"date"
																						],
																						"type": "object"
																					}
																				]
																			}
																		},
																		"type": "object"
																	},
																	"enabled": {
																		"description": "Whether or not this rule is in effect.",
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"id": {
																		"description": "Unique identifier for this rule.",
																		"example": "Expire all objects older than 24 hours",
																		"type": "string",
																		"x-auditable": true
																	},
																	"storageClassTransitions": {
																		"description": "Transitions to change the storage class of objects.",
																		"items": {
																			"allOf": [
																				{
																					"properties": {
																						"condition": {
																							"oneOf": [
																								{
																									"description": "Condition for lifecycle transitions to apply after an object reaches an age in seconds.",
																									"properties": {
																										"maxAge": {
																											"type": "integer",
																											"x-auditable": true
																										},
																										"type": {
																											"enum": [
																												"Age"
																											],
																											"type": "string",
																											"x-auditable": true
																										}
																									},
																									"required": [
																										"type",
																										"maxAge"
																									],
																									"type": "object"
																								},
																								{
																									"description": "Condition for lifecycle transitions to apply on a specific date.",
																									"properties": {
																										"date": {
																											"format": "date-time",
																											"type": "string",
																											"x-auditable": true
																										},
																										"type": {
																											"enum": [
																												"Date"
																											],
																											"type": "string",
																											"x-auditable": true
																										}
																									},
																									"required": [
																										"type",
																										"date"
																									],
																									"type": "object"
																								}
																							]
																						},
																						"storageClass": {
																							"enum": [
																								"InfrequentAccess"
																							],
																							"type": "string",
																							"x-auditable": true
																						}
																					},
																					"required": [
																						"condition",
																						"storageClass"
																					],
																					"type": "object"
																				}
																			]
																		},
																		"type": "array"
																	}
																},
																"required": [
																	"id",
																	"conditions",
																	"enabled"
																],
																"type": "object"
															}
														]
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Object Lifecycle Rules",
		"tags": [
			"R2 Bucket"
		]
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/lock": {
		"description": "Get lock rules for a bucket.",
		"operationId": "r2-get-bucket-lock-configuration",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"rules": {
													"items": {
														"allOf": [
															{
																"properties": {
																	"condition": {
																		"oneOf": [
																			{
																				"description": "Condition to apply a lock rule to an object for how long in seconds.",
																				"properties": {
																					"maxAgeSeconds": {
																						"example": 100,
																						"type": "integer",
																						"x-auditable": true
																					},
																					"type": {
																						"enum": [
																							"Age"
																						],
																						"type": "string",
																						"x-auditable": true
																					}
																				},
																				"required": [
																					"type",
																					"maxAgeSeconds"
																				],
																				"type": "object"
																			},
																			{
																				"description": "Condition to apply a lock rule to an object until a specific date.",
																				"properties": {
																					"date": {
																						"format": "date-time",
																						"type": "string",
																						"x-auditable": true
																					},
																					"type": {
																						"enum": [
																							"Date"
																						],
																						"type": "string",
																						"x-auditable": true
																					}
																				},
																				"required": [
																					"type",
																					"date"
																				],
																				"type": "object"
																			},
																			{
																				"description": "Condition to apply a lock rule indefinitely.",
																				"properties": {
																					"type": {
																						"enum": [
																							"Indefinite"
																						],
																						"type": "string",
																						"x-auditable": true
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		]
																	},
																	"enabled": {
																		"description": "Whether or not this rule is in effect.",
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"id": {
																		"description": "Unique identifier for this rule.",
																		"example": "Lock all objects for 24 hours",
																		"type": "string",
																		"x-auditable": true
																	},
																	"prefix": {
																		"description": "Rule will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads.",
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"required": [
																	"id",
																	"condition",
																	"enabled"
																],
																"type": "object"
															}
														]
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Bucket Lock Rules",
		"tags": [
			"R2 Bucket"
		]
	},
	"GET /accounts/{account_id}/r2/buckets/{bucket_name}/sippy": {
		"description": "Gets configuration for Sippy for an existing R2 bucket.",
		"operationId": "r2-get-bucket-sippy-config",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"destination": {
													"description": "Details about the configured destination bucket.",
													"properties": {
														"accessKeyId": {
															"description": "ID of the Cloudflare API token used when writing objects to this\nbucket.\n",
															"type": "string"
														},
														"account": {
															"type": "string",
															"x-auditable": true
														},
														"bucket": {
															"description": "Name of the bucket on the provider.",
															"type": "string",
															"x-auditable": true
														},
														"provider": {
															"enum": [
																"r2"
															],
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"enabled": {
													"description": "State of Sippy for this bucket.",
													"type": "boolean",
													"x-auditable": true
												},
												"source": {
													"description": "Details about the configured source bucket.",
													"properties": {
														"bucket": {
															"description": "Name of the bucket on the provider.",
															"type": "string",
															"x-auditable": true
														},
														"provider": {
															"enum": [
																"aws",
																"gcs"
															],
															"type": "string",
															"x-auditable": true
														},
														"region": {
															"description": "Region where the bucket resides (AWS only).",
															"nullable": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Sippy Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Sippy Configuration response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Get Sippy Configuration",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.read"
			]
		}
	},
	"PATCH /accounts/{account_id}/r2/buckets/{bucket_name}": {
		"description": "Updates properties of an existing R2 bucket.",
		"operationId": "r2-patch-bucket",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-storage-class",
				"required": true,
				"schema": {
					"allOf": [
						{
							"default": "Standard",
							"description": "Storage class for newly uploaded objects, unless specified otherwise.",
							"enum": [
								"Standard",
								"InfrequentAccess"
							],
							"type": "string",
							"x-auditable": true
						}
					],
					"x-stainless-param": "storage_class"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "A single R2 bucket.",
											"properties": {
												"creation_date": {
													"description": "Creation timestamp.",
													"type": "string"
												},
												"jurisdiction": {
													"default": "default",
													"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
													"enum": [
														"default",
														"eu",
														"fedramp"
													],
													"type": "string",
													"x-auditable": true,
													"x-stainless-param": "jurisdiction"
												},
												"location": {
													"description": "Location of the bucket.",
													"enum": [
														"apac",
														"eeur",
														"enam",
														"weur",
														"wnam",
														"oc"
													],
													"type": "string",
													"x-auditable": true,
													"x-stainless-terraform-configurability": "computed_optional"
												},
												"name": {
													"description": "Name of the bucket.",
													"example": "example-bucket",
													"maxLength": 64,
													"minLength": 3,
													"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
													"type": "string",
													"x-auditable": true
												},
												"storage_class": {
													"default": "Standard",
													"description": "Storage class for newly uploaded objects, unless specified otherwise.",
													"enum": [
														"Standard",
														"InfrequentAccess"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch Bucket response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Bucket response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Patch Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.write"
			]
		}
	},
	"POST /accounts/{account_id}/r2/buckets": {
		"description": "Creates a new R2 bucket.",
		"operationId": "r2-create-bucket",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"example": "{\"name\": \"example-bucket\"}",
						"properties": {
							"locationHint": {
								"description": "Location of the bucket.",
								"enum": [
									"apac",
									"eeur",
									"enam",
									"weur",
									"wnam",
									"oc"
								],
								"type": "string",
								"x-auditable": true,
								"x-stainless-terraform-configurability": "computed_optional"
							},
							"name": {
								"description": "Name of the bucket.",
								"example": "example-bucket",
								"maxLength": 64,
								"minLength": 3,
								"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
								"type": "string",
								"x-auditable": true
							},
							"storageClass": {
								"default": "Standard",
								"description": "Storage class for newly uploaded objects, unless specified otherwise.",
								"enum": [
									"Standard",
									"InfrequentAccess"
								],
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "A single R2 bucket.",
											"properties": {
												"creation_date": {
													"description": "Creation timestamp.",
													"type": "string"
												},
												"jurisdiction": {
													"default": "default",
													"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
													"enum": [
														"default",
														"eu",
														"fedramp"
													],
													"type": "string",
													"x-auditable": true,
													"x-stainless-param": "jurisdiction"
												},
												"location": {
													"description": "Location of the bucket.",
													"enum": [
														"apac",
														"eeur",
														"enam",
														"weur",
														"wnam",
														"oc"
													],
													"type": "string",
													"x-auditable": true,
													"x-stainless-terraform-configurability": "computed_optional"
												},
												"name": {
													"description": "Name of the bucket.",
													"example": "example-bucket",
													"maxLength": 64,
													"minLength": 3,
													"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
													"type": "string",
													"x-auditable": true
												},
												"storage_class": {
													"default": "Standard",
													"description": "Storage class for newly uploaded objects, unless specified otherwise.",
													"enum": [
														"Standard",
														"InfrequentAccess"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Bucket response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Create Bucket response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Create Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write"
		]
	},
	"POST /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom": {
		"description": "Register a new custom domain for an existing R2 bucket.",
		"operationId": "r2-add-custom-domain",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"example": {
							"domain": "prefix.example-domain.com",
							"enabled": true,
							"zoneId": "36ca64a6d92827b8a6b90be344bb1bfd"
						},
						"properties": {
							"ciphers": {
								"description": "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.",
								"items": {
									"type": "string"
								},
								"type": "array",
								"x-auditable": true
							},
							"domain": {
								"description": "Name of the custom domain to be added.",
								"type": "string",
								"x-auditable": true
							},
							"enabled": {
								"description": "Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.",
								"type": "boolean",
								"x-auditable": true
							},
							"minTLS": {
								"description": "Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.",
								"enum": [
									"1.0",
									"1.1",
									"1.2",
									"1.3"
								],
								"type": "string",
								"x-auditable": true
							},
							"zoneId": {
								"description": "Zone ID of the custom domain.",
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"domain",
							"zoneId",
							"enabled"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": {
												"domain": "example-domain.com",
												"enabled": true
											},
											"properties": {
												"ciphers": {
													"description": "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.",
													"items": {
														"type": "string"
													},
													"type": "array",
													"x-auditable": true
												},
												"domain": {
													"description": "Domain name of the affected custom domain.",
													"type": "string",
													"x-auditable": true
												},
												"enabled": {
													"description": "Whether this bucket is publicly accessible at the specified custom domain.",
													"type": "boolean"
												},
												"minTLS": {
													"description": "Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.",
													"enum": [
														"1.0",
														"1.1",
														"1.2",
														"1.3"
													],
													"type": "string",
													"x-auditable": true
												}
											},
											"required": [
												"domain",
												"enabled"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Add Custom Domain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Add Custom Domain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Attach Custom Domain To Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.write"
			]
		}
	},
	"POST /accounts/{account_id}/r2/temp-access-credentials": {
		"description": "Creates temporary access credentials on a bucket that can be optionally scoped to prefixes or objects.",
		"operationId": "r2-create-temp-access-credentials",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"example": {
							"bucket": "example-bucket",
							"objects": [
								"example-object"
							],
							"parentAccessKeyId": "example-access-key-id",
							"permission": "object-read-write",
							"prefixes": [
								"example-prefix/"
							],
							"ttlSeconds": 3600
						},
						"properties": {
							"bucket": {
								"description": "Name of the R2 bucket.",
								"type": "string",
								"x-auditable": true
							},
							"objects": {
								"description": "Optional object paths to scope the credentials to.",
								"items": {
									"type": "string",
									"x-auditable": true
								},
								"type": "array"
							},
							"parentAccessKeyId": {
								"description": "The parent access key id to use for signing.",
								"type": "string"
							},
							"permission": {
								"description": "Permissions allowed on the credentials.",
								"enum": [
									"admin-read-write",
									"admin-read-only",
									"object-read-write",
									"object-read-only"
								],
								"type": "string",
								"x-auditable": true
							},
							"prefixes": {
								"description": "Optional prefix paths to scope the credentials to.",
								"items": {
									"type": "string",
									"x-auditable": true
								},
								"type": "array"
							},
							"ttlSeconds": {
								"default": 900,
								"description": "How long the credentials will live for in seconds.",
								"maximum": 604800,
								"type": "number",
								"x-auditable": true
							}
						},
						"required": [
							"bucket",
							"permission",
							"ttlSeconds",
							"parentAccessKeyId"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": {
												"accessKeyId": "example-access-key-id",
												"secretAccessKey": "example-secret-key",
												"sessionToken": "example-session-token"
											},
											"properties": {
												"accessKeyId": {
													"description": "ID for new access key.",
													"type": "string"
												},
												"secretAccessKey": {
													"description": "Secret access key.",
													"type": "string",
													"x-sensitive": true
												},
												"sessionToken": {
													"description": "Security token.",
													"type": "string",
													"x-sensitive": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create temporary access credentials response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Create temporary access credentials response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Create Temporary Access Credentials",
		"tags": [
			"R2 Bucket"
		]
	},
	"PUT /accounts/{account_id}/event_notifications/r2/{bucket_name}/configuration/queues/{queue_id}": {
		"description": "Create event notification rule.",
		"operationId": "r2-put-event-notification-config",
		"parameters": [
			{
				"in": "path",
				"name": "queue_id",
				"required": true,
				"schema": {
					"description": "Queue ID.",
					"example": "11111aa1-11aa-111a-a1a1-a1a111a11a11",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"rules": {
								"description": "Array of rules to drive notifications.",
								"items": {
									"properties": {
										"actions": {
											"description": "Array of R2 object actions that will trigger notifications.",
											"example": [
												"PutObject",
												"CopyObject"
											],
											"items": {
												"enum": [
													"PutObject",
													"CopyObject",
													"DeleteObject",
													"CompleteMultipartUpload",
													"LifecycleDeletion"
												],
												"type": "string",
												"x-auditable": true
											},
											"type": "array",
											"uniqueItems": true
										},
										"description": {
											"description": "A description that can be used to identify the event notification rule after creation.",
											"example": "Notifications from source bucket to queue",
											"type": "string",
											"x-auditable": true
										},
										"prefix": {
											"description": "Notifications will be sent only for objects with this prefix.",
											"example": "img/",
											"type": "string",
											"x-auditable": true
										},
										"suffix": {
											"description": "Notifications will be sent only for objects with this suffix.",
											"example": ".jpeg",
											"type": "string",
											"x-auditable": true
										}
									},
									"required": [
										"actions"
									],
									"type": "object"
								},
								"minItems": 1,
								"type": "array"
							}
						},
						"required": [
							"rules"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Create Configuration failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Create Event Notification Rule",
		"tags": [
			"R2 Bucket"
		],
		"x-api-token-group": [
			"Workers R2 Storage Write"
		]
	},
	"PUT /accounts/{account_id}/r2/buckets/{bucket_name}/cors": {
		"description": "Set the CORS policy for a bucket.",
		"operationId": "r2-put-bucket-cors-policy",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"rules": {
								"items": {
									"properties": {
										"allowed": {
											"description": "Object specifying allowed origins, methods and headers for this CORS rule.",
											"properties": {
												"headers": {
													"description": "Specifies the value for the Access-Control-Allow-Headers header R2 sets when requesting objects in this bucket from a browser. Cross-origin requests that include custom headers (e.g. x-user-id) should specify these headers as AllowedHeaders.",
													"items": {
														"example": "x-requested-by",
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												},
												"methods": {
													"description": "Specifies the value for the Access-Control-Allow-Methods header R2 sets when requesting objects in a bucket from a browser.",
													"items": {
														"enum": [
															"GET",
															"PUT",
															"POST",
															"DELETE",
															"HEAD"
														],
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												},
												"origins": {
													"description": "Specifies the value for the Access-Control-Allow-Origin header R2 sets when requesting objects in a bucket from a browser.",
													"items": {
														"example": "http://localhost:3000",
														"type": "string",
														"x-auditable": true
													},
													"type": "array"
												}
											},
											"required": [
												"methods",
												"origins"
											],
											"type": "object"
										},
										"exposeHeaders": {
											"description": "Specifies the headers that can be exposed back, and accessed by, the JavaScript making the cross-origin request. If you need to access headers beyond the safelisted response headers, such as Content-Encoding or cf-cache-status, you must specify it here.",
											"items": {
												"example": "Content-Encoding",
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"id": {
											"description": "Identifier for this rule.",
											"example": "Allow Local Development",
											"type": "string",
											"x-auditable": true
										},
										"maxAgeSeconds": {
											"description": "Specifies the amount of time (in seconds) browsers are allowed to cache CORS preflight responses. Browsers may limit this to 2 hours or less, even if the maximum value (86400) is specified.",
											"example": 3600,
											"type": "number",
											"x-auditable": true
										}
									},
									"required": [
										"allowed"
									],
									"type": "object"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Put Bucket CORS Policy",
		"tags": [
			"R2 Bucket"
		]
	},
	"PUT /accounts/{account_id}/r2/buckets/{bucket_name}/domains/custom/{domain}": {
		"description": "Edit the configuration for a custom domain on an existing R2 bucket.",
		"operationId": "r2-edit-custom-domain-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "domain",
				"required": true,
				"schema": {
					"description": "Name of the custom domain.",
					"example": "example-domain/custom-domain.com",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"example": {
							"enabled": true,
							"minTLS": "1.2"
						},
						"properties": {
							"ciphers": {
								"description": "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.",
								"items": {
									"type": "string"
								},
								"type": "array",
								"x-auditable": true
							},
							"enabled": {
								"description": "Whether to enable public bucket access at the specified custom domain.",
								"type": "boolean",
								"x-auditable": true
							},
							"minTLS": {
								"description": "Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to previous value.",
								"enum": [
									"1.0",
									"1.1",
									"1.2",
									"1.3"
								],
								"type": "string",
								"x-auditable": true
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"example": {
														"domain": "example-domain.com",
														"enabled": true
													},
													"properties": {
														"ciphers": {
															"description": "An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.",
															"items": {
																"type": "string"
															},
															"type": "array",
															"x-auditable": true
														},
														"domain": {
															"description": "Domain name of the affected custom domain.",
															"type": "string",
															"x-auditable": true
														},
														"enabled": {
															"description": "Whether this bucket is publicly accessible at the specified custom domain.",
															"type": "boolean",
															"x-auditable": true
														},
														"minTLS": {
															"description": "Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.",
															"enum": [
																"1.0",
																"1.1",
																"1.2",
																"1.3"
															],
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"domain"
													],
													"type": "object"
												}
											]
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Edit Custom Domain Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Edit Custom Domain Configuration response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Configure Custom Domain Settings",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.write"
			]
		}
	},
	"PUT /accounts/{account_id}/r2/buckets/{bucket_name}/domains/managed": {
		"description": "Updates state of public access over the bucket's R2-managed (r2.dev) domain.",
		"operationId": "r2-put-bucket-public-policy",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"example": {
							"enabled": true
						},
						"properties": {
							"enabled": {
								"description": "Whether to enable public bucket access at the r2.dev domain.",
								"type": "boolean",
								"x-auditable": true
							}
						},
						"required": [
							"enabled"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": {
												"bucketId": "0113a9e4549cf9b1ff1bf56e04da0cef",
												"domain": "pub-0113a9e4549cf9b1ff1bf56e04da0cef.r2.dev",
												"enabled": true
											},
											"properties": {
												"bucketId": {
													"description": "Bucket ID.",
													"maxLength": 32,
													"type": "string",
													"x-auditable": true
												},
												"domain": {
													"description": "Domain name of the bucket's r2.dev domain.",
													"type": "string",
													"x-auditable": true
												},
												"enabled": {
													"description": "Whether this bucket is publicly accessible at the r2.dev domain.",
													"type": "boolean",
													"x-auditable": true
												}
											},
											"required": [
												"bucketId",
												"domain",
												"enabled"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update Managed Subdomain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update Managed Subdomain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Update r2.dev Domain of Bucket",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.write"
			]
		}
	},
	"PUT /accounts/{account_id}/r2/buckets/{bucket_name}/lifecycle": {
		"description": "Set the object lifecycle rules for a bucket.",
		"operationId": "r2-put-bucket-lifecycle-configuration",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"rules": {
								"items": {
									"properties": {
										"abortMultipartUploadsTransition": {
											"description": "Transition to abort ongoing multipart uploads.",
											"properties": {
												"condition": {
													"allOf": [
														{
															"description": "Condition for lifecycle transitions to apply after an object reaches an age in seconds.",
															"properties": {
																"maxAge": {
																	"type": "integer",
																	"x-auditable": true
																},
																"type": {
																	"enum": [
																		"Age"
																	],
																	"type": "string",
																	"x-auditable": true
																}
															},
															"required": [
																"type",
																"maxAge"
															],
															"type": "object"
														}
													]
												}
											},
											"type": "object"
										},
										"conditions": {
											"description": "Conditions that apply to all transitions of this rule.",
											"properties": {
												"prefix": {
													"description": "Transitions will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads.",
													"type": "string",
													"x-auditable": true
												}
											},
											"required": [
												"prefix"
											],
											"type": "object"
										},
										"deleteObjectsTransition": {
											"description": "Transition to delete objects.",
											"properties": {
												"condition": {
													"oneOf": [
														{
															"description": "Condition for lifecycle transitions to apply after an object reaches an age in seconds.",
															"properties": {
																"maxAge": {
																	"type": "integer",
																	"x-auditable": true
																},
																"type": {
																	"enum": [
																		"Age"
																	],
																	"type": "string",
																	"x-auditable": true
																}
															},
															"required": [
																"type",
																"maxAge"
															],
															"type": "object"
														},
														{
															"description": "Condition for lifecycle transitions to apply on a specific date.",
															"properties": {
																"date": {
																	"format": "date-time",
																	"type": "string",
																	"x-auditable": true
																},
																"type": {
																	"enum": [
																		"Date"
																	],
																	"type": "string",
																	"x-auditable": true
																}
															},
															"required": [
																"type",
																"date"
															],
															"type": "object"
														}
													]
												}
											},
											"type": "object"
										},
										"enabled": {
											"description": "Whether or not this rule is in effect.",
											"type": "boolean",
											"x-auditable": true
										},
										"id": {
											"description": "Unique identifier for this rule.",
											"example": "Expire all objects older than 24 hours",
											"type": "string",
											"x-auditable": true
										},
										"storageClassTransitions": {
											"description": "Transitions to change the storage class of objects.",
											"items": {
												"allOf": [
													{
														"properties": {
															"condition": {
																"oneOf": [
																	{
																		"description": "Condition for lifecycle transitions to apply after an object reaches an age in seconds.",
																		"properties": {
																			"maxAge": {
																				"type": "integer",
																				"x-auditable": true
																			},
																			"type": {
																				"enum": [
																					"Age"
																				],
																				"type": "string",
																				"x-auditable": true
																			}
																		},
																		"required": [
																			"type",
																			"maxAge"
																		],
																		"type": "object"
																	},
																	{
																		"description": "Condition for lifecycle transitions to apply on a specific date.",
																		"properties": {
																			"date": {
																				"format": "date-time",
																				"type": "string",
																				"x-auditable": true
																			},
																			"type": {
																				"enum": [
																					"Date"
																				],
																				"type": "string",
																				"x-auditable": true
																			}
																		},
																		"required": [
																			"type",
																			"date"
																		],
																		"type": "object"
																	}
																]
															},
															"storageClass": {
																"enum": [
																	"InfrequentAccess"
																],
																"type": "string",
																"x-auditable": true
															}
														},
														"required": [
															"condition",
															"storageClass"
														],
														"type": "object"
													}
												]
											},
											"type": "array"
										}
									},
									"required": [
										"id",
										"conditions",
										"enabled"
									],
									"type": "object"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Put Object Lifecycle Rules",
		"tags": [
			"R2 Bucket"
		]
	},
	"PUT /accounts/{account_id}/r2/buckets/{bucket_name}/lock": {
		"description": "Set lock rules for a bucket.",
		"operationId": "r2-put-bucket-lock-configuration",
		"parameters": [
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"rules": {
								"items": {
									"properties": {
										"condition": {
											"oneOf": [
												{
													"description": "Condition to apply a lock rule to an object for how long in seconds.",
													"properties": {
														"maxAgeSeconds": {
															"example": 100,
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"enum": [
																"Age"
															],
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"type",
														"maxAgeSeconds"
													],
													"type": "object"
												},
												{
													"description": "Condition to apply a lock rule to an object until a specific date.",
													"properties": {
														"date": {
															"format": "date-time",
															"type": "string",
															"x-auditable": true
														},
														"type": {
															"enum": [
																"Date"
															],
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"type",
														"date"
													],
													"type": "object"
												},
												{
													"description": "Condition to apply a lock rule indefinitely.",
													"properties": {
														"type": {
															"enum": [
																"Indefinite"
															],
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"type"
													],
													"type": "object"
												}
											]
										},
										"enabled": {
											"description": "Whether or not this rule is in effect.",
											"type": "boolean",
											"x-auditable": true
										},
										"id": {
											"description": "Unique identifier for this rule.",
											"example": "Lock all objects for 24 hours",
											"type": "string",
											"x-auditable": true
										},
										"prefix": {
											"description": "Rule will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads.",
											"type": "string",
											"x-auditable": true
										}
									},
									"required": [
										"id",
										"condition",
										"enabled"
									],
									"type": "object"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Success Response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Error Response."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Put Bucket Lock Rules",
		"tags": [
			"R2 Bucket"
		]
	},
	"PUT /accounts/{account_id}/r2/buckets/{bucket_name}/sippy": {
		"description": "Sets configuration for Sippy for an existing R2 bucket.",
		"operationId": "r2-put-bucket-sippy-config",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Account ID.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "bucket_name",
				"required": true,
				"schema": {
					"description": "Name of the bucket.",
					"example": "example-bucket",
					"maxLength": 64,
					"minLength": 3,
					"pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "header",
				"name": "cf-r2-jurisdiction",
				"schema": {
					"default": "default",
					"description": "Jurisdiction where objects in this bucket are guaranteed to be stored.",
					"enum": [
						"default",
						"eu",
						"fedramp"
					],
					"type": "string",
					"x-auditable": true,
					"x-stainless-param": "jurisdiction"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"oneOf": [
							{
								"properties": {
									"destination": {
										"description": "R2 bucket to copy objects to.",
										"properties": {
											"accessKeyId": {
												"description": "ID of a Cloudflare API token.\nThis is the value labelled \"Access Key ID\" when creating an API.\ntoken from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).\n\nSippy will use this token when writing objects to R2, so it is\nbest to scope this token to the bucket you're enabling Sippy for.\n",
												"type": "string"
											},
											"provider": {
												"enum": [
													"r2"
												],
												"type": "string",
												"x-auditable": true
											},
											"secretAccessKey": {
												"description": "Value of a Cloudflare API token.\nThis is the value labelled \"Secret Access Key\" when creating an API.\ntoken from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).\n\nSippy will use this token when writing objects to R2, so it is\nbest to scope this token to the bucket you're enabling Sippy for.\n",
												"type": "string",
												"x-sensitive": true
											}
										},
										"type": "object"
									},
									"source": {
										"description": "AWS S3 bucket to copy objects from.",
										"properties": {
											"accessKeyId": {
												"description": "Access Key ID of an IAM credential (ideally scoped to a single S3 bucket).",
												"type": "string"
											},
											"bucket": {
												"description": "Name of the AWS S3 bucket.",
												"type": "string",
												"x-auditable": true
											},
											"provider": {
												"enum": [
													"aws"
												],
												"type": "string",
												"x-auditable": true
											},
											"region": {
												"description": "Name of the AWS availability zone.",
												"type": "string",
												"x-auditable": true
											},
											"secretAccessKey": {
												"description": "Secret Access Key of an IAM credential (ideally scoped to a single S3 bucket).",
												"type": "string",
												"x-sensitive": true
											}
										},
										"type": "object"
									}
								}
							},
							{
								"properties": {
									"destination": {
										"description": "R2 bucket to copy objects to.",
										"properties": {
											"accessKeyId": {
												"description": "ID of a Cloudflare API token.\nThis is the value labelled \"Access Key ID\" when creating an API.\ntoken from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).\n\nSippy will use this token when writing objects to R2, so it is\nbest to scope this token to the bucket you're enabling Sippy for.\n",
												"type": "string"
											},
											"provider": {
												"enum": [
													"r2"
												],
												"type": "string"
											},
											"secretAccessKey": {
												"description": "Value of a Cloudflare API token.\nThis is the value labelled \"Secret Access Key\" when creating an API.\ntoken from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).\n\nSippy will use this token when writing objects to R2, so it is\nbest to scope this token to the bucket you're enabling Sippy for.\n",
												"type": "string",
												"x-sensitive": true
											}
										},
										"type": "object"
									},
									"source": {
										"description": "GCS bucket to copy objects from.",
										"properties": {
											"bucket": {
												"description": "Name of the GCS bucket.",
												"type": "string",
												"x-auditable": true
											},
											"clientEmail": {
												"description": "Client email of an IAM credential (ideally scoped to a single GCS bucket).",
												"type": "string"
											},
											"privateKey": {
												"description": "Private Key of an IAM credential (ideally scoped to a single GCS bucket).",
												"type": "string",
												"x-sensitive": true
											},
											"provider": {
												"enum": [
													"gcs"
												],
												"type": "string"
											}
										},
										"type": "object"
									}
								}
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"result": {
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"destination": {
													"description": "Details about the configured destination bucket.",
													"properties": {
														"accessKeyId": {
															"description": "ID of the Cloudflare API token used when writing objects to this\nbucket.\n",
															"type": "string"
														},
														"account": {
															"type": "string",
															"x-auditable": true
														},
														"bucket": {
															"description": "Name of the bucket on the provider.",
															"type": "string",
															"x-auditable": true
														},
														"provider": {
															"enum": [
																"r2"
															],
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"enabled": {
													"description": "State of Sippy for this bucket.",
													"type": "boolean",
													"x-auditable": true
												},
												"source": {
													"description": "Details about the configured source bucket.",
													"properties": {
														"bucket": {
															"description": "Name of the bucket on the provider.",
															"type": "string",
															"x-auditable": true
														},
														"provider": {
															"enum": [
																"aws",
																"gcs"
															],
															"type": "string",
															"x-auditable": true
														},
														"region": {
															"description": "Region where the bucket resides (AWS only).",
															"nullable": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Set Sippy Configuration response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Sippy Configuration response failure."
			}
		},
		"security": [
			{
				"api_token": []
			}
		],
		"summary": "Enable Sippy",
		"tags": [
			"R2 Bucket"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.r2.bucket.write"
			]
		}
	}
}