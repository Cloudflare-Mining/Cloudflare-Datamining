{
	"DELETE /accounts/{account_id}/storage/kv/namespaces/{namespace_id}": {
		"description": "Deletes the namespace corresponding to the given ID.",
		"operationId": "workers-kv-namespace-remove-a-namespace",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"nullable": true,
											"type": "object",
											"x-stainless-empty-object": true
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Remove a Namespace response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Remove a Namespace response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Remove a Namespace",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"DELETE /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk": {
		"deprecated": true,
		"description": "Remove multiple KV pairs from the namespace. Body should be an array of up to 10,000 keys to be removed.",
		"operationId": "workers-kv-namespace-delete-multiple-key-value-pairs-deprecated",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"items": {
							"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid.",
							"example": "My-Key",
							"maxLength": 512,
							"type": "string"
						},
						"type": "array"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"successful_key_count": {
													"description": "Number of keys successfully updated.",
													"example": 100,
													"type": "number"
												},
												"unsuccessful_keys": {
													"description": "Name of the keys that failed to be fully updated. They should be retried.",
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete multiple key-value pairs response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"successful_key_count": {
													"description": "Number of keys successfully updated.",
													"example": 100,
													"type": "number"
												},
												"unsuccessful_keys": {
													"description": "Name of the keys that failed to be fully updated. They should be retried.",
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete multiple key-value pairs response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete multiple key-value pairs",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"DELETE /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}": {
		"description": "Remove a KV pair from the namespace. Use URL-encoding to use special characters (for example, `:`, `!`, `%`) in the key name.",
		"operationId": "workers-kv-namespace-delete-key-value-pair",
		"parameters": [
			{
				"in": "path",
				"name": "key_name",
				"required": true,
				"schema": {
					"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.",
					"example": "My-Key",
					"maxLength": 512,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"nullable": true,
											"type": "object",
											"x-stainless-empty-object": true
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete key-value pair response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete key-value pair response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete key-value pair",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"GET /accounts/{account_id}/storage/kv/namespaces": {
		"description": "Returns the namespaces owned by an account.",
		"operationId": "workers-kv-namespace-list-namespaces",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"description": "Page number of paginated results.",
					"minimum": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 20,
					"description": "Maximum number of results per page.",
					"maximum": 1000,
					"minimum": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "order",
				"schema": {
					"description": "Field to order results by.",
					"enum": [
						"id",
						"title"
					],
					"example": "id",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "direction",
				"schema": {
					"description": "Direction to order namespaces.",
					"enum": [
						"asc",
						"desc"
					],
					"example": "asc",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results for the requested service.",
															"example": 1,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results.",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page of results.",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters.",
															"example": 2000,
															"type": "number"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"id": {
														"description": "Namespace identifier tag.",
														"example": "0f2ac74b498b48028cb68387c421e279",
														"maxLength": 32,
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"supports_url_encoding": {
														"description": "True if keys written on the URL will be URL-decoded before storing. For example, if set to \"true\", a key written on the URL as \"%3F\" will be stored as \"?\".",
														"example": true,
														"readOnly": true,
														"type": "boolean",
														"x-auditable": true
													},
													"title": {
														"description": "A human-readable string name for a Namespace.",
														"example": "My Own Namespace",
														"maxLength": 512,
														"type": "string",
														"x-auditable": true
													}
												},
												"required": [
													"id",
													"title"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Namespaces response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List Namespaces response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Namespaces",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write",
			"Workers KV Storage Read"
		]
	},
	"GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}": {
		"description": "Get the namespace corresponding to the given ID.",
		"operationId": "workers-kv-namespace-get-a-namespace",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"id": {
													"description": "Namespace identifier tag.",
													"example": "0f2ac74b498b48028cb68387c421e279",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"supports_url_encoding": {
													"description": "True if keys written on the URL will be URL-decoded before storing. For example, if set to \"true\", a key written on the URL as \"%3F\" will be stored as \"?\".",
													"example": true,
													"readOnly": true,
													"type": "boolean",
													"x-auditable": true
												},
												"title": {
													"description": "A human-readable string name for a Namespace.",
													"example": "My Own Namespace",
													"maxLength": 512,
													"type": "string",
													"x-auditable": true
												}
											},
											"required": [
												"id",
												"title"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get a Namespace response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get a Namespace response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get a Namespace",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write",
			"Workers KV Storage Read"
		]
	},
	"GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/keys": {
		"description": "Lists a namespace's keys.",
		"operationId": "workers-kv-namespace-list-a-namespace'-s-keys",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "query",
				"name": "limit",
				"schema": {
					"default": 1000,
					"description": "Limits the number of keys returned in the response. The cursor attribute may be used to iterate over the next batch of keys if there are more than the limit.",
					"maximum": 1000,
					"minimum": 10,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "prefix",
				"schema": {
					"description": "Filters returned keys by a name prefix. Exact matches and any key names that begin with the prefix will be returned.",
					"example": "My-Prefix",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "cursor",
				"schema": {
					"description": "Opaque token indicating the position from which to continue when requesting the next set of records if the amount of list results was limited by the limit parameter. A valid value for the cursor can be obtained from the `cursors` object in the `result_info` structure.",
					"example": "6Ck1la0VxJ0djhidm1MdX2FyDGxLKVeeHZZmORS_8XeSuhz9SjIJRaSa2lnsF01tQOHrfTGAP3R5X1Kv5iVUuMbNKhWNAXHOl6ePB0TUL8nw",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"description": "A name for a value. A value stored under a given key may be retrieved via the same key.",
												"properties": {
													"expiration": {
														"description": "The time, measured in number of seconds since the UNIX epoch, at which the key will expire. This property is omitted for keys that will not expire.",
														"example": 1577836800,
														"type": "number"
													},
													"metadata": {
														"allOf": [
															{
																"anyOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "number"
																	},
																	{
																		"type": "integer"
																	},
																	{
																		"type": "boolean"
																	},
																	{
																		"additionalProperties": true,
																		"nullable": true,
																		"type": "object"
																	},
																	{
																		"items": "[Circular ~.GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/keys.responses.200.content.application/json.schema.allOf.1.properties.result.items.properties.metadata.allOf.0]",
																		"type": "array"
																	}
																],
																"x-stainless-override-schema": {
																	"type": "unknown"
																}
															},
															{
																"description": "Arbitrary JSON that is associated with a key.",
																"example": {
																	"someMetadataKey": "someMetadataValue"
																}
															}
														]
													},
													"name": {
														"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.",
														"example": "My-Key",
														"maxLength": 512,
														"type": "string"
													}
												},
												"required": [
													"name"
												],
												"type": "object"
											},
											"type": "array"
										},
										"result_info": {
											"properties": {
												"count": {
													"description": "Total results returned based on your list parameters.",
													"example": 1,
													"type": "number"
												},
												"cursor": {
													"description": "Opaque token indicating the position from which to continue when requesting the next set of records if the amount of list results was limited by the limit parameter. A valid value for the cursor can be obtained from the cursors object in the result_info structure.",
													"example": "6Ck1la0VxJ0djhidm1MdX2FyDGxLKVeeHZZmORS_8XeSuhz9SjIJRaSa2lnsF01tQOHrfTGAP3R5X1Kv5iVUuMbNKhWNAXHOl6ePB0TUL8nw",
													"type": "string"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List a Namespace's Keys response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List a Namespace's Keys response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List a Namespace's Keys",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write",
			"Workers KV Storage Read"
		]
	},
	"GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/metadata/{key_name}": {
		"description": "Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, `:`, `!`, `%`) in the key name.",
		"operationId": "workers-kv-namespace-read-the-metadata-for-a-key",
		"parameters": [
			{
				"in": "path",
				"name": "key_name",
				"required": true,
				"schema": {
					"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.",
					"example": "My-Key",
					"maxLength": 512,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"anyOf": [
														{
															"type": "string"
														},
														{
															"type": "number"
														},
														{
															"type": "integer"
														},
														{
															"type": "boolean"
														},
														{
															"additionalProperties": true,
															"nullable": true,
															"type": "object"
														},
														{
															"items": "[Circular ~.GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/metadata/{key_name}.responses.200.content.application/json.schema.allOf.1.properties.result.allOf.0]",
															"type": "array"
														}
													],
													"x-stainless-override-schema": {
														"type": "unknown"
													}
												},
												{
													"description": "Arbitrary JSON that is associated with a key.",
													"example": {
														"someMetadataKey": "someMetadataValue"
													}
												}
											]
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Read the metadata for a key response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Read the metadata for a key response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Read the metadata for a key",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write",
			"Workers KV Storage Read"
		]
	},
	"GET /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}": {
		"description": "Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, `:`, `!`, `%`) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the `expiration` response header.",
		"operationId": "workers-kv-namespace-read-key-value-pair",
		"parameters": [
			{
				"in": "path",
				"name": "key_name",
				"required": true,
				"schema": {
					"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.",
					"example": "My-Key",
					"maxLength": 512,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/octet-stream": {
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"format": "binary",
									"type": "string"
								}
							],
							"description": "A byte sequence to be stored, up to 25 MiB in length.",
							"example": "Some Value"
						}
					}
				},
				"description": "Read key-value pair response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Read key-value pair response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Read key-value pair",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write",
			"Workers KV Storage Read"
		]
	},
	"POST /accounts/{account_id}/storage/kv/namespaces": {
		"description": "Creates a namespace under the given title. A `400` is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.",
		"operationId": "workers-kv-namespace-create-a-namespace",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"title": {
								"description": "A human-readable string name for a Namespace.",
								"example": "My Own Namespace",
								"maxLength": 512,
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"title"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"id": {
													"description": "Namespace identifier tag.",
													"example": "0f2ac74b498b48028cb68387c421e279",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"supports_url_encoding": {
													"description": "True if keys written on the URL will be URL-decoded before storing. For example, if set to \"true\", a key written on the URL as \"%3F\" will be stored as \"?\".",
													"example": true,
													"readOnly": true,
													"type": "boolean",
													"x-auditable": true
												},
												"title": {
													"description": "A human-readable string name for a Namespace.",
													"example": "My Own Namespace",
													"maxLength": 512,
													"type": "string",
													"x-auditable": true
												}
											},
											"required": [
												"id",
												"title"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create a Namespace response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Create a Namespace response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create a Namespace",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"POST /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk/delete": {
		"description": "Remove multiple KV pairs from the namespace. Body should be an array of up to 10,000 keys to be removed.",
		"operationId": "workers-kv-namespace-delete-multiple-key-value-pairs",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"items": {
							"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid.",
							"example": "My-Key",
							"maxLength": 512,
							"type": "string"
						},
						"type": "array"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"successful_key_count": {
													"description": "Number of keys successfully updated.",
													"example": 100,
													"type": "number"
												},
												"unsuccessful_keys": {
													"description": "Name of the keys that failed to be fully updated. They should be retried.",
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete multiple key-value pairs response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"successful_key_count": {
													"description": "Number of keys successfully updated.",
													"example": 100,
													"type": "number"
												},
												"unsuccessful_keys": {
													"description": "Name of the keys that failed to be fully updated. They should be retried.",
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete multiple key-value pairs response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete multiple key-value pairs",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"POST /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk/get": {
		"description": "Retrieve up to 100 KV pairs from the namespace. Keys must contain text-based values. JSON values can optionally be parsed instead of being returned as a string value. Metadata can be included if `withMetadata` is true.",
		"operationId": "workers-kv-namespace-get-multiple-key-value-pairs",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"keys": {
								"description": "Array of keys to retrieve (maximum of 100).",
								"items": {
									"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid.",
									"example": "My-Key",
									"maxLength": 512,
									"type": "string"
								},
								"maxItems": 100,
								"type": "array"
							},
							"type": {
								"default": "text",
								"description": "Whether to parse JSON values in the response.",
								"enum": [
									"text",
									"json"
								],
								"type": "string"
							},
							"withMetadata": {
								"default": false,
								"description": "Whether to include metadata in the response.",
								"type": "boolean"
							}
						},
						"required": [
							"keys"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"oneOf": [
												{
													"properties": {
														"values": {
															"additionalProperties": {
																"description": "The value associated with the key.",
																"oneOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "number"
																	},
																	{
																		"type": "boolean"
																	},
																	{
																		"additionalProperties": true,
																		"type": "object"
																	}
																]
															},
															"description": "Requested keys are paired with their values in an object.",
															"example": {
																"key1": "value1",
																"key2": "value2"
															},
															"type": "object"
														}
													},
													"type": "object"
												},
												{
													"properties": {
														"values": {
															"additionalProperties": {
																"nullable": true,
																"properties": {
																	"expiration": {
																		"description": "Expires the key at a certain time, measured in number of seconds since the UNIX epoch.",
																		"example": 1578435000,
																		"type": "number"
																	},
																	"metadata": {
																		"allOf": [
																			{
																				"anyOf": [
																					{
																						"type": "string"
																					},
																					{
																						"type": "number"
																					},
																					{
																						"type": "integer"
																					},
																					{
																						"type": "boolean"
																					},
																					{
																						"additionalProperties": true,
																						"nullable": true,
																						"type": "object"
																					},
																					{
																						"items": "[Circular ~.POST /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk/get.responses.200.content.application/json.schema.allOf.1.properties.result.oneOf.1.properties.values.additionalProperties.properties.metadata.allOf.0]",
																						"type": "array"
																					}
																				],
																				"x-stainless-override-schema": {
																					"type": "unknown"
																				}
																			},
																			{
																				"description": "The metadata associated with the key."
																			}
																		]
																	},
																	"value": {
																		"allOf": [
																			{
																				"anyOf": [
																					{
																						"type": "string"
																					},
																					{
																						"type": "number"
																					},
																					{
																						"type": "integer"
																					},
																					{
																						"type": "boolean"
																					},
																					{
																						"additionalProperties": true,
																						"nullable": true,
																						"type": "object"
																					},
																					{
																						"items": "[Circular ~.POST /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk/get.responses.200.content.application/json.schema.allOf.1.properties.result.oneOf.1.properties.values.additionalProperties.properties.value.allOf.0]",
																						"type": "array"
																					}
																				],
																				"x-stainless-override-schema": {
																					"type": "unknown"
																				}
																			},
																			{
																				"description": "The value associated with the key."
																			}
																		]
																	}
																},
																"required": [
																	"value",
																	"metadata"
																],
																"type": "object"
															},
															"description": "Requested keys are paired with their values and metadata in an object.",
															"example": {
																"key1": {
																	"expiration": 1577836800,
																	"metadata": {
																		"someMetadataKey": "someMetadataValue"
																	},
																	"value": "value1"
																},
																"key2": {
																	"metadata": {
																		"anotherKey": "anotherValue"
																	},
																	"value": "value2"
																}
															},
															"type": "object"
														}
													},
													"type": "object"
												}
											]
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get multiple key-value pairs response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get multiple key-value pairs response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get multiple key-value pairs",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write",
			"Workers KV Storage Read"
		]
	},
	"PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}": {
		"description": "Modifies a namespace's title.",
		"operationId": "workers-kv-namespace-rename-a-namespace",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"title": {
								"description": "A human-readable string name for a Namespace.",
								"example": "My Own Namespace",
								"maxLength": 512,
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"title"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"id": {
													"description": "Namespace identifier tag.",
													"example": "0f2ac74b498b48028cb68387c421e279",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"supports_url_encoding": {
													"description": "True if keys written on the URL will be URL-decoded before storing. For example, if set to \"true\", a key written on the URL as \"%3F\" will be stored as \"?\".",
													"example": true,
													"readOnly": true,
													"type": "boolean",
													"x-auditable": true
												},
												"title": {
													"description": "A human-readable string name for a Namespace.",
													"example": "My Own Namespace",
													"maxLength": 512,
													"type": "string",
													"x-auditable": true
												}
											},
											"required": [
												"id",
												"title"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Rename a Namespace response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Rename a Namespace response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Rename a Namespace",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk": {
		"description": "Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither `expiration` nor `expiration_ttl` is specified, the key-value pair will never expire. If both are set, `expiration_ttl` is used and `expiration` is ignored. The entire request size must be 100 megabytes or less.",
		"operationId": "workers-kv-namespace-write-multiple-key-value-pairs",
		"parameters": [
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"items": {
							"properties": {
								"base64": {
									"default": false,
									"description": "Indicates whether or not the server should base64 decode the value before storing it. Useful for writing values that wouldn't otherwise be valid JSON strings, such as images.",
									"type": "boolean"
								},
								"expiration": {
									"description": "Expires the key at a certain time, measured in number of seconds since the UNIX epoch.",
									"example": 1578435000,
									"type": "number"
								},
								"expiration_ttl": {
									"description": "Expires the key after a number of seconds. Must be at least 60.",
									"example": 300,
									"minimum": 60,
									"type": "number"
								},
								"key": {
									"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid.",
									"example": "My-Key",
									"maxLength": 512,
									"type": "string"
								},
								"metadata": {
									"allOf": [
										{
											"anyOf": [
												{
													"type": "string"
												},
												{
													"type": "number"
												},
												{
													"type": "integer"
												},
												{
													"type": "boolean"
												},
												{
													"additionalProperties": true,
													"nullable": true,
													"type": "object"
												},
												{
													"items": "[Circular ~.PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/bulk.requestBody.content.application/json.schema.items.properties.metadata.allOf.0]",
													"type": "array"
												}
											],
											"x-stainless-override-schema": {
												"type": "unknown"
											}
										},
										{
											"description": "Arbitrary JSON that is associated with a key.",
											"example": {
												"someMetadataKey": "someMetadataValue"
											}
										}
									]
								},
								"value": {
									"description": "A UTF-8 encoded string to be stored, up to 25 MiB in length.",
									"example": "Some string",
									"maxLength": 26214400,
									"type": "string"
								}
							},
							"required": [
								"key",
								"value"
							],
							"type": "object"
						},
						"type": "array"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"successful_key_count": {
													"description": "Number of keys successfully updated.",
													"example": 100,
													"type": "number"
												},
												"unsuccessful_keys": {
													"description": "Name of the keys that failed to be fully updated. They should be retried.",
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Write multiple key-value pairs response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object"
													},
													"type": "array",
													"uniqueItems": true
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"nullable": true,
													"type": "object",
													"x-stainless-empty-object": true
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"result": {
											"properties": {
												"successful_key_count": {
													"description": "Number of keys successfully updated.",
													"example": 100,
													"type": "number"
												},
												"unsuccessful_keys": {
													"description": "Name of the keys that failed to be fully updated. They should be retried.",
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Write multiple key-value pairs response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Write multiple key-value pairs",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	},
	"PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}": {
		"description": "Write a value identified by a key. Use URL-encoding to use special characters (for example, `:`, `!`, `%`) in the key name. Body should be the value to be stored. If JSON metadata to be associated with the key/value pair is needed, use `multipart/form-data` content type for your PUT request (see dropdown below in `REQUEST BODY SCHEMA`). Existing values, expirations, and metadata will be overwritten. If neither `expiration` nor `expiration_ttl` is specified, the key-value pair will never expire. If both are set, `expiration_ttl` is used and `expiration` is ignored.",
		"operationId": "workers-kv-namespace-write-key-value-pair-with-metadata",
		"parameters": [
			{
				"in": "path",
				"name": "key_name",
				"required": true,
				"schema": {
					"description": "A key's name. The name may be at most 512 bytes. All printable, non-whitespace characters are valid. Use percent-encoding to define key names as part of a URL.",
					"example": "My-Key",
					"maxLength": 512,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "namespace_id",
				"required": true,
				"schema": {
					"description": "Namespace identifier tag.",
					"example": "0f2ac74b498b48028cb68387c421e279",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "query",
				"name": "expiration",
				"schema": {
					"description": "Expires the key at a certain time, measured in number of seconds since the UNIX epoch.",
					"example": 1578435000,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "expiration_ttl",
				"schema": {
					"description": "Expires the key after a number of seconds. Must be at least 60.",
					"example": 300,
					"minimum": 60,
					"type": "number"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/octet-stream": {
					"schema": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"format": "binary",
								"type": "string"
							}
						],
						"description": "A byte sequence to be stored, up to 25 MiB in length.",
						"example": "Some Value"
					},
					"x-stainless-only": [
						"http"
					]
				},
				"multipart/form-data": {
					"encoding": {
						"metadata": {
							"contentType": "application/json"
						}
					},
					"schema": {
						"properties": {
							"metadata": {
								"allOf": [
									{
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "number"
											},
											{
												"type": "integer"
											},
											{
												"type": "boolean"
											},
											{
												"additionalProperties": true,
												"nullable": true,
												"type": "object"
											},
											{
												"items": "[Circular ~.PUT /accounts/{account_id}/storage/kv/namespaces/{namespace_id}/values/{key_name}.requestBody.content.multipart/form-data.schema.properties.metadata.allOf.0]",
												"type": "array"
											}
										],
										"x-stainless-override-schema": {
											"type": "unknown"
										}
									},
									{
										"description": "Associates arbitrary JSON data with a key/value pair.",
										"example": {
											"someMetadataKey": "someMetadataValue"
										}
									}
								]
							},
							"value": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"format": "binary",
										"type": "string"
									}
								],
								"description": "A byte sequence to be stored, up to 25 MiB in length.",
								"example": "Some Value"
							}
						},
						"required": [
							"value"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"nullable": true,
											"type": "object",
											"x-stainless-empty-object": true
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Write key-value pair with metadata response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object"
											},
											"type": "array",
											"uniqueItems": true
										}
									],
									"example": []
								},
								"result": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Write key-value pair with metadata response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Write key-value pair with optional metadata",
		"tags": [
			"Workers KV Namespace"
		],
		"x-api-token-group": [
			"Workers KV Storage Write"
		]
	}
}