{
	"DELETE /zones/{zone_id}/api_gateway/user_schemas/{schema_id}": {
		"operationId": "api-shield-schema-delete-a-schema",
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Delete a schema response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete a schema response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Delete a schema",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"GET /zones/{zone_id}/api_gateway/operations/{operation_id}/schema_validation": {
		"description": "Retrieves operation-level schema validation settings on the zone",
		"operationId": "api-shield-schema-validation-retrieve-operation-level-settings",
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"mitigation_action": {
									"description": "When set, this applies a mitigation action to this operation\n\n  - `log` log request when request does not conform to schema for this operation\n  - `block` deny access to the site when request does not conform to schema for this operation\n  - `none` will skip mitigation for this operation\n  - `null` indicates that no operation level mitigation is in place, see Zone Level Schema Validation Settings for mitigation action that will be applied\n",
									"enum": [
										"log",
										"block",
										"none",
										null
									],
									"example": "block",
									"nullable": true,
									"type": "string"
								},
								"operation_id": {
									"allOf": [
										{
											"minLength": 36,
											"type": "string"
										},
										{
											"description": "UUID.",
											"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
											"maxLength": 36,
											"type": "string"
										}
									]
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Operation-level schema validation settings response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Operation-level schema validation settings response"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve operation-level schema validation settings",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"GET /zones/{zone_id}/api_gateway/settings/schema_validation": {
		"description": "Retrieves zone level schema validation settings currently set on the zone",
		"operationId": "api-shield-schema-validation-retrieve-zone-level-settings",
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"validation_default_mitigation_action": {
									"description": "The default mitigation action used when there is no mitigation action defined on the operation\n\nMitigation actions are as follows:\n\n  * `log` - log request when request does not conform to schema\n  * `block` - deny access to the site when request does not conform to schema\n\nA special value of of `none` will skip running schema validation entirely for the request when there is no mitigation action defined on the operation\n",
									"enum": [
										"none",
										"log",
										"block"
									],
									"example": "block",
									"type": "string"
								},
								"validation_override_mitigation_action": {
									"description": "When set, this overrides both zone level and operation level mitigation actions.\n\n  - `none` will skip running schema validation entirely for the request\n  - `null` indicates that no override is in place\n",
									"enum": [
										"none",
										null
									],
									"example": "disable_override",
									"nullable": true,
									"type": "string"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Zone level schema validation settings response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Zone level schema validation settings response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve zone level schema validation settings",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"GET /zones/{zone_id}/api_gateway/user_schemas": {
		"operationId": "api-shield-schema-validation-retrieve-information-about-all-schemas",
		"parameters": [
			{
				"description": "Page number of paginated results.",
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"minimum": 1,
					"type": "integer"
				}
			},
			{
				"description": "Maximum number of results per page.",
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 20,
					"maximum": 50,
					"minimum": 5,
					"type": "integer"
				}
			},
			{
				"description": "Omit the source-files of schemas and only retrieve their meta-data.",
				"in": "query",
				"name": "omit_source",
				"schema": {
					"default": false,
					"type": "boolean"
				}
			},
			{
				"in": "query",
				"name": "validation_enabled",
				"schema": {
					"description": "Flag whether schema is enabled for validation.",
					"type": "boolean"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results for the requested service.",
															"example": 1,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results.",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page of results.",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters.",
															"example": 2000,
															"type": "number"
														}
													},
													"type": "object"
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"created_at": {
														"allOf": [
															{
																"example": "2014-01-01T05:20:00.12345Z",
																"format": "date-time",
																"type": "string"
															},
															{
																"readOnly": true,
																"type": "string"
															}
														]
													},
													"kind": {
														"description": "Kind of schema",
														"enum": [
															"openapi_v3"
														],
														"example": "openapi_v3",
														"type": "string"
													},
													"name": {
														"description": "Name of the schema",
														"example": "petstore schema",
														"type": "string"
													},
													"schema_id": {
														"allOf": [
															{
																"minLength": 36,
																"type": "string"
															},
															{
																"description": "UUID.",
																"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
																"maxLength": 36,
																"type": "string"
															}
														]
													},
													"source": {
														"description": "Source of the schema",
														"example": "<schema file bytes>",
														"type": "string"
													},
													"validation_enabled": {
														"description": "Flag whether schema is enabled for validation.",
														"type": "boolean"
													}
												},
												"required": [
													"schema_id",
													"name",
													"kind",
													"created_at"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve information about all schemas on a zone response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve information about all schemas on a zone response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve information about all schemas on a zone",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"GET /zones/{zone_id}/api_gateway/user_schemas/{schema_id}": {
		"operationId": "api-shield-schema-validation-retrieve-information-about-specific-schema",
		"parameters": [
			{
				"description": "Omit the source-files of schemas and only retrieve their meta-data.",
				"in": "query",
				"name": "omit_source",
				"schema": {
					"default": false,
					"type": "boolean"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_at": {
													"allOf": [
														{
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														{
															"readOnly": true,
															"type": "string"
														}
													]
												},
												"kind": {
													"description": "Kind of schema",
													"enum": [
														"openapi_v3"
													],
													"example": "openapi_v3",
													"type": "string"
												},
												"name": {
													"description": "Name of the schema",
													"example": "petstore schema",
													"type": "string"
												},
												"schema_id": {
													"allOf": [
														{
															"minLength": 36,
															"type": "string"
														},
														{
															"description": "UUID.",
															"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
															"maxLength": 36,
															"type": "string"
														}
													]
												},
												"source": {
													"description": "Source of the schema",
													"example": "<schema file bytes>",
													"type": "string"
												},
												"validation_enabled": {
													"description": "Flag whether schema is enabled for validation.",
													"type": "boolean"
												}
											},
											"required": [
												"schema_id",
												"name",
												"kind",
												"created_at"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve information about a specific schema on a zone response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Retrieve information about a specific schema zone response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve information about a specific schema on a zone",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"GET /zones/{zone_id}/api_gateway/user_schemas/{schema_id}/operations": {
		"description": "Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.",
		"operationId": "api-shield-schema-validation-extract-operations-from-schema",
		"parameters": [
			{
				"description": "Add feature(s) to the results. The feature name that is given here corresponds to the resulting feature object. Have a look at the top-level object description for more details on the specific meaning.",
				"in": "query",
				"name": "feature",
				"schema": {
					"example": [
						"thresholds"
					],
					"items": {
						"enum": [
							"thresholds",
							"parameter_schemas",
							"schema_info"
						],
						"example": "thresholds",
						"type": "string"
					},
					"type": "array",
					"uniqueItems": true
				}
			},
			{
				"in": "query",
				"name": "host",
				"schema": {
					"description": "Filter results to only include the specified hosts.",
					"items": {
						"example": "api.cloudflare.com",
						"type": "string"
					},
					"type": "array",
					"uniqueItems": true
				}
			},
			{
				"in": "query",
				"name": "method",
				"schema": {
					"description": "Filter results to only include the specified HTTP methods.",
					"items": {
						"example": "GET",
						"type": "string"
					},
					"type": "array",
					"uniqueItems": true
				}
			},
			{
				"in": "query",
				"name": "endpoint",
				"schema": {
					"description": "Filter results to only include endpoints containing this pattern.",
					"example": "/api/v1",
					"type": "string"
				}
			},
			{
				"description": "Page number of paginated results.",
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"minimum": 1,
					"type": "integer"
				}
			},
			{
				"description": "Maximum number of results per page.",
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 20,
					"maximum": 50,
					"minimum": 5,
					"type": "integer"
				}
			},
			{
				"description": "Filter results by whether operations exist in API Shield Endpoint Management or not. `new` will just return operations from the schema that do not exist in API Shield Endpoint Management. `existing` will just return operations from the schema that already exist in API Shield Endpoint Management.",
				"in": "query",
				"name": "operation_status",
				"schema": {
					"enum": [
						"new",
						"existing"
					],
					"example": "new",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results for the requested service.",
															"example": 1,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results.",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page of results.",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters.",
															"example": 2000,
															"type": "number"
														}
													},
													"type": "object"
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"anyOf": [
													{
														"allOf": [
															{
																"allOf": [
																	{
																		"properties": {
																			"endpoint": {
																				"description": "The endpoint which can contain path parameter templates in curly braces, each will be replaced from left to right with {varN}, starting with {var1}, during insertion. This will further be Cloudflare-normalized upon insertion. See: https://developers.cloudflare.com/rules/normalization/how-it-works/.",
																				"example": "/api/v1/users/{var1}",
																				"format": "uri-template",
																				"maxLength": 4096,
																				"pattern": "^/.*$",
																				"type": "string"
																			},
																			"host": {
																				"description": "RFC3986-compliant host.",
																				"example": "www.example.com",
																				"format": "hostname",
																				"maxLength": 255,
																				"type": "string"
																			},
																			"method": {
																				"description": "The HTTP method used to access the endpoint.",
																				"enum": [
																					"GET",
																					"POST",
																					"HEAD",
																					"OPTIONS",
																					"PUT",
																					"DELETE",
																					"CONNECT",
																					"PATCH",
																					"TRACE"
																				],
																				"example": "GET",
																				"type": "string"
																			}
																		},
																		"required": [
																			"method",
																			"host",
																			"endpoint"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"last_updated": {
																				"allOf": [
																					{
																						"example": "2014-01-01T05:20:00.12345Z",
																						"format": "date-time",
																						"type": "string"
																					},
																					{
																						"readOnly": true,
																						"type": "string"
																					}
																				]
																			},
																			"operation_id": {
																				"allOf": [
																					{
																						"minLength": 36,
																						"type": "string"
																					},
																					{
																						"description": "UUID.",
																						"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
																						"maxLength": 36,
																						"type": "string"
																					}
																				]
																			}
																		},
																		"required": [
																			"operation_id",
																			"last_updated"
																		],
																		"type": "object"
																	}
																]
															},
															{
																"default": {},
																"nullable": true,
																"properties": {
																	"features": {
																		"anyOf": [
																			{
																				"properties": {
																					"thresholds": {
																						"properties": {
																							"auth_id_tokens": {
																								"description": "The total number of auth-ids seen across this calculation.",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"data_points": {
																								"description": "The number of data points used for the threshold suggestion calculation.",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"last_updated": {
																								"example": "2014-01-01T05:20:00.12345Z",
																								"format": "date-time",
																								"type": "string"
																							},
																							"p50": {
																								"description": "The p50 quantile of requests (in period_seconds).",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"p90": {
																								"description": "The p90 quantile of requests (in period_seconds).",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"p99": {
																								"description": "The p99 quantile of requests (in period_seconds).",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"period_seconds": {
																								"description": "The period over which this threshold is suggested.",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"requests": {
																								"description": "The estimated number of requests covered by these calculations.",
																								"readOnly": true,
																								"type": "integer"
																							},
																							"suggested_threshold": {
																								"description": "The suggested threshold in requests done by the same auth_id or period_seconds.",
																								"readOnly": true,
																								"type": "integer"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"readOnly": true,
																				"required": [
																					"period_seconds",
																					"suggested_threshold",
																					"p50",
																					"p90",
																					"p99",
																					"requests",
																					"auth_id_tokens",
																					"data_points",
																					"last_updated"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"parameter_schemas": {
																						"properties": {
																							"last_updated": {
																								"example": "2014-01-01T05:20:00.12345Z",
																								"format": "date-time",
																								"type": "string"
																							},
																							"parameter_schemas": {
																								"description": "An operation schema object containing a response.",
																								"example": {
																									"parameters": [
																										{
																											"description": "Sufficient requests have been observed for this parameter to provide high confidence in this parameter schema.",
																											"in": "path",
																											"name": "var1",
																											"required": true,
																											"schema": {
																												"maximum": 10,
																												"minimum": 1,
																												"type": "integer"
																											}
																										}
																									],
																									"responses": null
																								},
																								"properties": {
																									"parameters": {
																										"description": "An array containing the learned parameter schemas.",
																										"example": [
																											{
																												"description": "Sufficient requests have been observed for this parameter to provide high confidence in this parameter schema.",
																												"in": "path",
																												"name": "var1",
																												"required": true,
																												"schema": {
																													"maximum": 10,
																													"minimum": 1,
																													"type": "integer"
																												}
																											}
																										],
																										"items": {
																											"type": "object"
																										},
																										"readOnly": true,
																										"type": "array"
																									},
																									"responses": {
																										"description": "An empty response object. This field is required to yield a valid operation schema.",
																										"nullable": true,
																										"readOnly": true,
																										"type": "object"
																									}
																								},
																								"readOnly": true,
																								"type": "object"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"readOnly": true,
																				"required": [
																					"parameter_schemas",
																					"last_updated"
																				],
																				"type": "object"
																			},
																			{
																				"example": {
																					"api_routing": {
																						"last_updated": "2014-01-01T05:20:00.12345Z",
																						"route": "https://api.example.com/api/service"
																					}
																				},
																				"properties": {
																					"api_routing": {
																						"description": "API Routing settings on endpoint.",
																						"properties": {
																							"last_updated": {
																								"example": "2014-01-01T05:20:00.12345Z",
																								"format": "date-time",
																								"type": "string"
																							},
																							"route": {
																								"description": "Target route.",
																								"example": "https://api.example.com/api/service",
																								"type": "string"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"readOnly": true,
																				"type": "object"
																			},
																			{
																				"example": {
																					"confidence_intervals": {
																						"last_updated": "2014-01-01T05:20:00.12345Z",
																						"suggested_threshold": {
																							"confidence_intervals": {
																								"p90": {
																									"lower": 23.1,
																									"upper": 23.9
																								},
																								"p95": {
																									"lower": 22,
																									"upper": 24.1
																								},
																								"p99": {
																									"lower": 20.2,
																									"upper": 30
																								}
																							},
																							"mean": 23.5
																						}
																					}
																				},
																				"properties": {
																					"confidence_intervals": {
																						"properties": {
																							"last_updated": {
																								"example": "2014-01-01T05:20:00.12345Z",
																								"format": "date-time",
																								"type": "string"
																							},
																							"suggested_threshold": {
																								"properties": {
																									"confidence_intervals": {
																										"properties": {
																											"p90": {
																												"description": "Upper and lower bound for percentile estimate",
																												"properties": {
																													"lower": {
																														"description": "Lower bound for percentile estimate",
																														"example": 20.5,
																														"type": "number"
																													},
																													"upper": {
																														"description": "Upper bound for percentile estimate",
																														"example": 30.4,
																														"type": "number"
																													}
																												},
																												"readOnly": true,
																												"type": "object"
																											},
																											"p95": {
																												"description": "Upper and lower bound for percentile estimate",
																												"properties": {
																													"lower": {
																														"description": "Lower bound for percentile estimate",
																														"example": 20.5,
																														"type": "number"
																													},
																													"upper": {
																														"description": "Upper bound for percentile estimate",
																														"example": 30.4,
																														"type": "number"
																													}
																												},
																												"readOnly": true,
																												"type": "object"
																											},
																											"p99": {
																												"description": "Upper and lower bound for percentile estimate",
																												"properties": {
																													"lower": {
																														"description": "Lower bound for percentile estimate",
																														"example": 20.5,
																														"type": "number"
																													},
																													"upper": {
																														"description": "Upper bound for percentile estimate",
																														"example": 30.4,
																														"type": "number"
																													}
																												},
																												"readOnly": true,
																												"type": "object"
																											}
																										},
																										"type": "object"
																									},
																									"mean": {
																										"description": "Suggested threshold.",
																										"example": 25.5,
																										"type": "number"
																									}
																								},
																								"type": "object"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"readOnly": true,
																				"type": "object"
																			},
																			{
																				"properties": {
																					"schema_info": {
																						"properties": {
																							"active_schema": {
																								"description": "Schema active on endpoint.",
																								"properties": {
																									"created_at": {
																										"example": "2014-01-01T05:20:00.12345Z",
																										"format": "date-time",
																										"type": "string"
																									},
																									"id": {
																										"allOf": [
																											{
																												"minLength": 36,
																												"type": "string"
																											},
																											{
																												"description": "UUID.",
																												"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
																												"maxLength": 36,
																												"type": "string"
																											}
																										]
																									},
																									"is_learned": {
																										"description": "True if schema is Cloudflare-provided.",
																										"example": true,
																										"type": "boolean"
																									},
																									"name": {
																										"description": "Schema file name.",
																										"example": "api-endpoints-8694824bf5c04d019edcbf399c03c103-api-discovery.example.com-thresholds.json",
																										"type": "string"
																									}
																								},
																								"type": "object"
																							},
																							"learned_available": {
																								"description": "True if a Cloudflare-provided learned schema is available for this endpoint.",
																								"example": true,
																								"type": "boolean"
																							},
																							"mitigation_action": {
																								"description": "Action taken on requests failing validation.",
																								"enum": [
																									"none",
																									"log",
																									"block"
																								],
																								"example": "block",
																								"nullable": true,
																								"type": "string"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"readOnly": true,
																				"type": "object"
																			}
																		],
																		"readOnly": true,
																		"type": "object"
																	}
																},
																"type": "object"
															}
														]
													},
													{
														"properties": {
															"endpoint": {
																"description": "The endpoint which can contain path parameter templates in curly braces, each will be replaced from left to right with {varN}, starting with {var1}, during insertion. This will further be Cloudflare-normalized upon insertion. See: https://developers.cloudflare.com/rules/normalization/how-it-works/.",
																"example": "/api/v1/users/{var1}",
																"format": "uri-template",
																"maxLength": 4096,
																"pattern": "^/.*$",
																"type": "string"
															},
															"host": {
																"description": "RFC3986-compliant host.",
																"example": "www.example.com",
																"format": "hostname",
																"maxLength": 255,
																"type": "string"
															},
															"method": {
																"description": "The HTTP method used to access the endpoint.",
																"enum": [
																	"GET",
																	"POST",
																	"HEAD",
																	"OPTIONS",
																	"PUT",
																	"DELETE",
																	"CONNECT",
																	"PATCH",
																	"TRACE"
																],
																"example": "GET",
																"type": "string"
															}
														},
														"required": [
															"method",
															"host",
															"endpoint"
														],
														"type": "object"
													}
												]
											},
											"type": "array"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Retrieve all operations from a schema response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Retrieve all operations from a schema response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve all operations from a schema.",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"GET /zones/{zone_id}/api_gateway/user_schemas/hosts": {
		"operationId": "api-shield-schema-validation-retrieve-user-schema-hosts",
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results for the requested service.",
															"example": 1,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results.",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page of results.",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters.",
															"example": 2000,
															"type": "number"
														}
													},
													"type": "object"
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"created_at": {
														"allOf": [
															{
																"example": "2014-01-01T05:20:00.12345Z",
																"format": "date-time",
																"type": "string"
															},
															{
																"readOnly": true,
																"type": "string"
															}
														]
													},
													"hosts": {
														"description": "Hosts serving the schema, e.g zone.host.com",
														"items": {
															"type": "string"
														},
														"type": "array"
													},
													"name": {
														"description": "Name of the schema",
														"example": "petstore schema",
														"type": "string"
													},
													"schema_id": {
														"allOf": [
															{
																"minLength": 36,
																"type": "string"
															},
															{
																"description": "UUID.",
																"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
																"maxLength": 36,
																"type": "string"
															}
														]
													}
												},
												"required": [
													"schema_id",
													"name",
													"hosts",
													"created_at"
												],
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Retrieve schema hosts in a zone response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Retrieve schema hosts in a zone response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve schema hosts in a zone",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Account API Gateway Read",
			"Domain API Gateway",
			"Domain API Gateway Read"
		]
	},
	"PATCH /zones/{zone_id}/api_gateway/operations/schema_validation": {
		"description": "Updates multiple operation-level schema validation settings on the zone",
		"operationId": "api-shield-schema-validation-update-multiple-operation-level-settings",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"additionalProperties": {
							"description": "Operation ID to mitigation action mappings",
							"properties": {
								"mitigation_action": {
									"description": "When set, this applies a mitigation action to this operation\n\n  - `log` log request when request does not conform to schema for this operation\n  - `block` deny access to the site when request does not conform to schema for this operation\n  - `none` will skip mitigation for this operation\n  - `null` indicates that no operation level mitigation is in place, see Zone Level Schema Validation Settings for mitigation action that will be applied\n",
									"enum": [
										"log",
										"block",
										"none",
										null
									],
									"example": "block",
									"nullable": true,
									"type": "string"
								}
							},
							"type": "object"
						},
						"example": {
							"3818d821-5901-4147-a474-f5f5aec1d54e": {
								"mitigation_action": "log"
							},
							"b17c8043-99a0-4202-b7d9-8f7cdbee02cd": {
								"mitigation_action": "block"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"additionalProperties": {
												"description": "Operation ID to mitigation action mappings",
												"properties": {
													"mitigation_action": {
														"description": "When set, this applies a mitigation action to this operation\n\n  - `log` log request when request does not conform to schema for this operation\n  - `block` deny access to the site when request does not conform to schema for this operation\n  - `none` will skip mitigation for this operation\n  - `null` indicates that no operation level mitigation is in place, see Zone Level Schema Validation Settings for mitigation action that will be applied\n",
														"enum": [
															"log",
															"block",
															"none",
															null
														],
														"example": "block",
														"nullable": true,
														"type": "string"
													}
												},
												"type": "object"
											},
											"example": {
												"3818d821-5901-4147-a474-f5f5aec1d54e": {
													"mitigation_action": "log"
												},
												"b17c8043-99a0-4202-b7d9-8f7cdbee02cd": {
													"mitigation_action": "block"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update multiple operation-level schema validation settings response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update multiple operation-level schema validation settings response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Update multiple operation-level schema validation settings",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"PATCH /zones/{zone_id}/api_gateway/settings/schema_validation": {
		"description": "Updates zone level schema validation settings on the zone",
		"operationId": "api-shield-schema-validation-patch-zone-level-settings",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"validation_default_mitigation_action": {
								"description": "The default mitigation action used when there is no mitigation action defined on the operation\nMitigation actions are as follows:\n\n  * `log` - log request when request does not conform to schema\n  * `block` - deny access to the site when request does not conform to schema\n\nA special value of of `none` will skip running schema validation entirely for the request when there is no mitigation action defined on the operation\n\n`null` will have no effect.\n",
								"enum": [
									"none",
									"log",
									"block",
									null
								],
								"example": "block",
								"nullable": true,
								"type": "string"
							},
							"validation_override_mitigation_action": {
								"description": "When set, this overrides both zone level and operation level mitigation actions.\n\n  - `none` will skip running schema validation entirely for the request\n\nTo clear any override, use the special value `disable_override`\n\n`null` will have no effect.\n",
								"enum": [
									"none",
									"disable_override",
									null
								],
								"example": "none",
								"nullable": true,
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"validation_default_mitigation_action": {
									"description": "The default mitigation action used when there is no mitigation action defined on the operation\n\nMitigation actions are as follows:\n\n  * `log` - log request when request does not conform to schema\n  * `block` - deny access to the site when request does not conform to schema\n\nA special value of of `none` will skip running schema validation entirely for the request when there is no mitigation action defined on the operation\n",
									"enum": [
										"none",
										"log",
										"block"
									],
									"example": "block",
									"type": "string"
								},
								"validation_override_mitigation_action": {
									"description": "When set, this overrides both zone level and operation level mitigation actions.\n\n  - `none` will skip running schema validation entirely for the request\n  - `null` indicates that no override is in place\n",
									"enum": [
										"none",
										null
									],
									"example": "disable_override",
									"nullable": true,
									"type": "string"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Update zone level schema validation settings response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update zone level schema validation settings response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Update zone level schema validation settings",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"PATCH /zones/{zone_id}/api_gateway/user_schemas/{schema_id}": {
		"operationId": "api-shield-schema-validation-enable-validation-for-a-schema",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"validation_enabled": {
								"allOf": [
									{
										"description": "Flag whether schema is enabled for validation.",
										"type": "boolean"
									},
									{
										"enum": [
											true
										]
									}
								]
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_at": {
													"allOf": [
														{
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														{
															"readOnly": true,
															"type": "string"
														}
													]
												},
												"kind": {
													"description": "Kind of schema",
													"enum": [
														"openapi_v3"
													],
													"example": "openapi_v3",
													"type": "string"
												},
												"name": {
													"description": "Name of the schema",
													"example": "petstore schema",
													"type": "string"
												},
												"schema_id": {
													"allOf": [
														{
															"minLength": 36,
															"type": "string"
														},
														{
															"description": "UUID.",
															"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
															"maxLength": 36,
															"type": "string"
														}
													]
												},
												"source": {
													"description": "Source of the schema",
													"example": "<schema file bytes>",
													"type": "string"
												},
												"validation_enabled": {
													"description": "Flag whether schema is enabled for validation.",
													"type": "boolean"
												}
											},
											"required": [
												"schema_id",
												"name",
												"kind",
												"created_at"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Enable validation for a schema response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Enable validation for a schema response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Enable validation for a schema",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"POST /zones/{zone_id}/api_gateway/user_schemas": {
		"operationId": "api-shield-schema-validation-post-schema",
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"schema": {
						"properties": {
							"file": {
								"description": "Schema file bytes",
								"format": "binary",
								"type": "string"
							},
							"kind": {
								"description": "Kind of schema",
								"enum": [
									"openapi_v3"
								],
								"example": "openapi_v3",
								"type": "string"
							},
							"name": {
								"description": "Name of the schema",
								"example": "petstore schema",
								"type": "string"
							},
							"validation_enabled": {
								"description": "Flag whether schema is enabled for validation.",
								"enum": [
									"true",
									"false"
								],
								"type": "string"
							}
						},
						"required": [
							"file",
							"kind"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"schema": {
													"properties": {
														"created_at": {
															"allOf": [
																{
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																},
																{
																	"readOnly": true,
																	"type": "string"
																}
															]
														},
														"kind": {
															"description": "Kind of schema",
															"enum": [
																"openapi_v3"
															],
															"example": "openapi_v3",
															"type": "string"
														},
														"name": {
															"description": "Name of the schema",
															"example": "petstore schema",
															"type": "string"
														},
														"schema_id": {
															"allOf": [
																{
																	"minLength": 36,
																	"type": "string"
																},
																{
																	"description": "UUID.",
																	"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
																	"maxLength": 36,
																	"type": "string"
																}
															]
														},
														"source": {
															"description": "Source of the schema",
															"example": "<schema file bytes>",
															"type": "string"
														},
														"validation_enabled": {
															"description": "Flag whether schema is enabled for validation.",
															"type": "boolean"
														}
													},
													"required": [
														"schema_id",
														"name",
														"kind",
														"created_at"
													],
													"type": "object"
												},
												"upload_details": {
													"properties": {
														"warnings": {
															"description": "Diagnostic warning events that occurred during processing. These events are non-critical errors found within the schema.",
															"items": {
																"properties": {
																	"code": {
																		"description": "Code that identifies the event that occurred.",
																		"example": 28,
																		"type": "integer"
																	},
																	"locations": {
																		"description": "JSONPath location(s) in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.",
																		"items": {
																			"description": "JSONPath location in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.",
																			"example": ".paths[\"/user/{username}\"].put",
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"message": {
																		"description": "Diagnostic message that describes the event.",
																		"example": "unsupported media type: application/octet-stream",
																		"type": "string"
																	}
																},
																"required": [
																	"code"
																],
																"type": "object"
															},
															"type": "array"
														}
													},
													"type": "object"
												}
											},
											"required": [
												"schema"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload a schema response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"upload_details": {
											"properties": {
												"critical": {
													"description": "Diagnostic critical error events that occurred during processing.",
													"items": {
														"properties": {
															"code": {
																"description": "Code that identifies the event that occurred.",
																"example": 28,
																"type": "integer"
															},
															"locations": {
																"description": "JSONPath location(s) in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.",
																"items": {
																	"description": "JSONPath location in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.",
																	"example": ".paths[\"/user/{username}\"].put",
																	"type": "string"
																},
																"type": "array"
															},
															"message": {
																"description": "Diagnostic message that describes the event.",
																"example": "unsupported media type: application/octet-stream",
																"type": "string"
															}
														},
														"required": [
															"code"
														],
														"type": "object"
													},
													"type": "array"
												},
												"errors": {
													"description": "Diagnostic error events that occurred during processing.",
													"items": {
														"properties": {
															"code": {
																"description": "Code that identifies the event that occurred.",
																"example": 28,
																"type": "integer"
															},
															"locations": {
																"description": "JSONPath location(s) in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.",
																"items": {
																	"description": "JSONPath location in the schema where these events were encountered.  See [https://goessner.net/articles/JsonPath/](https://goessner.net/articles/JsonPath/) for JSONPath specification.",
																	"example": ".paths[\"/user/{username}\"].put",
																	"type": "string"
																},
																"type": "array"
															},
															"message": {
																"description": "Diagnostic message that describes the event.",
																"example": "unsupported media type: application/octet-stream",
																"type": "string"
															}
														},
														"required": [
															"code"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload a schema response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Upload a schema to a zone",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"PUT /zones/{zone_id}/api_gateway/operations/{operation_id}/schema_validation": {
		"description": "Updates operation-level schema validation settings on the zone",
		"operationId": "api-shield-schema-validation-update-operation-level-settings",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"mitigation_action": {
								"description": "When set, this applies a mitigation action to this operation\n\n  - `log` log request when request does not conform to schema for this operation\n  - `block` deny access to the site when request does not conform to schema for this operation\n  - `none` will skip mitigation for this operation\n  - `null` indicates that no operation level mitigation is in place, see Zone Level Schema Validation Settings for mitigation action that will be applied\n",
								"enum": [
									"log",
									"block",
									"none",
									null
								],
								"example": "block",
								"nullable": true,
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"mitigation_action": {
									"description": "When set, this applies a mitigation action to this operation\n\n  - `log` log request when request does not conform to schema for this operation\n  - `block` deny access to the site when request does not conform to schema for this operation\n  - `none` will skip mitigation for this operation\n  - `null` indicates that no operation level mitigation is in place, see Zone Level Schema Validation Settings for mitigation action that will be applied\n",
									"enum": [
										"log",
										"block",
										"none",
										null
									],
									"example": "block",
									"nullable": true,
									"type": "string"
								},
								"operation_id": {
									"allOf": [
										{
											"minLength": 36,
											"type": "string"
										},
										{
											"description": "UUID.",
											"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
											"maxLength": 36,
											"type": "string"
										}
									]
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Update operation-level schema validation settings response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update operation-level schema validation settings response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Update operation-level schema validation settings",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	},
	"PUT /zones/{zone_id}/api_gateway/settings/schema_validation": {
		"description": "Updates zone level schema validation settings on the zone",
		"operationId": "api-shield-schema-validation-update-zone-level-settings",
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"validation_default_mitigation_action": {
								"description": "The default mitigation action used when there is no mitigation action defined on the operation\n\nMitigation actions are as follows:\n\n  * `log` - log request when request does not conform to schema\n  * `block` - deny access to the site when request does not conform to schema\n\nA special value of of `none` will skip running schema validation entirely for the request when there is no mitigation action defined on the operation\n",
								"enum": [
									"none",
									"log",
									"block"
								],
								"example": "block",
								"type": "string"
							},
							"validation_override_mitigation_action": {
								"description": "When set, this overrides both zone level and operation level mitigation actions.\n\n  - `none` will skip running schema validation entirely for the request\n  - `null` indicates that no override is in place\n\nTo clear any override, use the special value `disable_override` or `null`\n",
								"enum": [
									"none",
									"disable_override",
									null
								],
								"example": "none",
								"nullable": true,
								"type": "string"
							}
						},
						"required": [
							"validation_default_mitigation_action"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"validation_default_mitigation_action": {
									"description": "The default mitigation action used when there is no mitigation action defined on the operation\n\nMitigation actions are as follows:\n\n  * `log` - log request when request does not conform to schema\n  * `block` - deny access to the site when request does not conform to schema\n\nA special value of of `none` will skip running schema validation entirely for the request when there is no mitigation action defined on the operation\n",
									"enum": [
										"none",
										"log",
										"block"
									],
									"example": "block",
									"type": "string"
								},
								"validation_override_mitigation_action": {
									"description": "When set, this overrides both zone level and operation level mitigation actions.\n\n  - `none` will skip running schema validation entirely for the request\n  - `null` indicates that no override is in place\n",
									"enum": [
										"none",
										null
									],
									"example": "disable_override",
									"nullable": true,
									"type": "string"
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Update zone level schema validation settings response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update zone level schema validation settings response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Update zone level schema validation settings",
		"tags": [
			"API Shield Schema Validation 2.0"
		],
		"x-api-token-group": [
			"Account API Gateway",
			"Domain API Gateway"
		]
	}
}