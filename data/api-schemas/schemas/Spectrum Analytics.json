{
	"GET /zones/{zone_id}/spectrum/analytics/aggregate/current": {
		"description": "Retrieves analytics aggregated from the last minute of usage on Spectrum applications underneath a given zone.",
		"operationId": "spectrum-aggregate-analytics-get-current-aggregated-analytics",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "appID",
				"schema": {
					"description": "Comma-delimited list of Spectrum Application Id(s). If provided, the response will be limited to Spectrum Application Id(s) that match.",
					"example": "ea95132c15732412d22c1476fa83f27a,d122c5f4bb71e25cc9e86ab43b142e2f",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "colo_name",
				"schema": {
					"description": "Co-location identifier.",
					"example": "PDX",
					"maxLength": 3,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"appID": {
														"allOf": [
															{
																"description": "Application identifier."
															},
															{
																"description": "Identifier.",
																"example": "023e105f4ecef8ad9ca31a8372d0c353",
																"maxLength": 32,
																"type": "string"
															}
														]
													},
													"bytesEgress": {
														"description": "Number of bytes sent",
														"type": "number"
													},
													"bytesIngress": {
														"description": "Number of bytes received",
														"type": "number"
													},
													"connections": {
														"description": "Number of connections",
														"type": "number"
													},
													"durationAvg": {
														"description": "Average duration of connections",
														"type": "number"
													}
												},
												"required": [
													"appID",
													"bytesIngress",
													"bytesEgress",
													"connections",
													"durationAvg"
												],
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Get current aggregated analytics response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get current aggregated analytics response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get current aggregated analytics",
		"tags": [
			"Spectrum Analytics"
		],
		"x-api-token-group": [
			"Analytics Read"
		]
	},
	"GET /zones/{zone_id}/spectrum/analytics/events/bytime": {
		"description": "Retrieves a list of aggregate metrics grouped by time interval.",
		"operationId": "spectrum-analytics-(-by-time)-get-analytics-by-time",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "dimensions",
				"schema": {
					"description": "Can be used to break down the data by given attributes. Options are: \n\nDimension                 | Name                            | Example\n--------------------------|---------------------------------|--------------------------\nevent                     | Connection Event                | connect, progress, disconnect, originError, clientFiltered\nappID                     | Application ID                  | 40d67c87c6cd4b889a4fd57805225e85\ncoloName                  | Colo Name                       | SFO\nipVersion                 | IP version used by the client   | 4, 6.",
					"example": [
						"event",
						"appID"
					],
					"items": {
						"enum": [
							"event",
							"appID",
							"coloName",
							"ipVersion"
						],
						"type": "string"
					},
					"type": "array"
				}
			},
			{
				"in": "query",
				"name": "sort",
				"schema": {
					"description": "The sort order for the result set; sort fields must be included in `metrics` or `dimensions`.",
					"example": [
						"+count",
						"-bytesIngress"
					],
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			{
				"in": "query",
				"name": "until",
				"schema": {
					"allOf": [
						{
							"description": "End of time interval to query, defaults to current time. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
						},
						{
							"example": "2014-01-01T05:20:00.12345Z",
							"format": "date-time",
							"type": "string"
						}
					]
				}
			},
			{
				"in": "query",
				"name": "metrics",
				"schema": {
					"description": "One or more metrics to compute. Options are: \n\nMetric                    | Name                                | Example                  | Unit\n--------------------------|-------------------------------------|--------------------------|--------------------------\ncount                     | Count of total events               | 1000                     | Count\nbytesIngress              | Sum of ingress bytes                | 1000                     | Sum\nbytesEgress               | Sum of egress bytes                 | 1000                     | Sum\ndurationAvg               | Average connection duration         | 1.0                      | Time in milliseconds\ndurationMedian            | Median connection duration          | 1.0                      | Time in milliseconds\nduration90th              | 90th percentile connection duration | 1.0                      | Time in milliseconds\nduration99th              | 99th percentile connection duration | 1.0                      | Time in milliseconds.",
					"example": [
						"count",
						"bytesIngress"
					],
					"items": {
						"enum": [
							"count",
							"bytesIngress",
							"bytesEgress",
							"durationAvg",
							"durationMedian",
							"duration90th",
							"duration99th"
						],
						"type": "string"
					},
					"type": "array"
				}
			},
			{
				"in": "query",
				"name": "filters",
				"schema": {
					"description": "Used to filter rows by one or more dimensions. Filters can be combined using OR and AND boolean logic. AND takes precedence over OR in all the expressions. The OR operator is defined using a comma (,) or OR keyword surrounded by whitespace. The AND operator is defined using a semicolon (;) or AND keyword surrounded by whitespace. Note that the semicolon is a reserved character in URLs (rfc1738) and needs to be percent-encoded as %3B. Comparison options are:\n\nOperator                  | Name                            | URL Encoded\n--------------------------|---------------------------------|--------------------------\n==                        | Equals                          | %3D%3D\n!=                        | Does not equals                 | !%3D\n\\>                        | Greater Than                    | %3E\n\\<                        | Less Than                       | %3C\n\\>=                       | Greater than or equal to        | %3E%3D\n\\<=                       | Less than or equal to           | %3C%3D",
					"example": "event==disconnect%20AND%20coloName!=SFO",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "since",
				"schema": {
					"allOf": [
						{
							"description": "Start of time interval to query, defaults to `until` - 6 hours. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
						},
						{
							"example": "2014-01-01T05:20:00.12345Z",
							"format": "date-time",
							"type": "string"
						}
					]
				}
			},
			{
				"in": "query",
				"name": "time_delta",
				"required": true,
				"schema": {
					"description": "Used to select time series resolution.",
					"enum": [
						"year",
						"quarter",
						"month",
						"week",
						"day",
						"hour",
						"dekaminute",
						"minute"
					],
					"example": "minute",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"data": {
													"description": "List of columns returned by the analytics query.",
													"items": {
														"properties": {
															"dimensions": {
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"metrics": {
																"oneOf": [
																	{
																		"items": {
																			"type": "number"
																		},
																		"type": "array"
																	},
																	{
																		"items": {
																			"items": {
																				"type": "number"
																			},
																			"type": "array"
																		},
																		"type": "array"
																	}
																]
															}
														},
														"type": "object"
													},
													"type": "array"
												},
												"data_lag": {
													"description": "Number of seconds between current time and last processed event, i.e. how many seconds of data could be missing.",
													"example": 3,
													"minimum": 0,
													"type": "number"
												},
												"max": {
													"allOf": [
														{
															"description": "Maximum result for each selected metrics across all data."
														},
														{
															"additionalProperties": {
																"type": "number"
															},
															"example": {
																"bytesEgress": 100,
																"bytesIngress": 50
															},
															"type": "object"
														}
													]
												},
												"min": {
													"allOf": [
														{
															"description": "Minimum result for each selected metrics across all data."
														},
														{
															"additionalProperties": {
																"type": "number"
															},
															"example": {
																"bytesEgress": 100,
																"bytesIngress": 50
															},
															"type": "object"
														}
													]
												},
												"query": {
													"properties": {
														"dimensions": {
															"description": "Can be used to break down the data by given attributes. Options are: \n\nDimension                 | Name                            | Example\n--------------------------|---------------------------------|--------------------------\nevent                     | Connection Event                | connect, progress, disconnect, originError, clientFiltered\nappID                     | Application ID                  | 40d67c87c6cd4b889a4fd57805225e85\ncoloName                  | Colo Name                       | SFO\nipVersion                 | IP version used by the client   | 4, 6.",
															"example": [
																"event",
																"appID"
															],
															"items": {
																"enum": [
																	"event",
																	"appID",
																	"coloName",
																	"ipVersion"
																],
																"type": "string"
															},
															"type": "array"
														},
														"filters": {
															"description": "Used to filter rows by one or more dimensions. Filters can be combined using OR and AND boolean logic. AND takes precedence over OR in all the expressions. The OR operator is defined using a comma (,) or OR keyword surrounded by whitespace. The AND operator is defined using a semicolon (;) or AND keyword surrounded by whitespace. Note that the semicolon is a reserved character in URLs (rfc1738) and needs to be percent-encoded as %3B. Comparison options are:\n\nOperator                  | Name                            | URL Encoded\n--------------------------|---------------------------------|--------------------------\n==                        | Equals                          | %3D%3D\n!=                        | Does not equals                 | !%3D\n\\>                        | Greater Than                    | %3E\n\\<                        | Less Than                       | %3C\n\\>=                       | Greater than or equal to        | %3E%3D\n\\<=                       | Less than or equal to           | %3C%3D",
															"example": "event==disconnect%20AND%20coloName!=SFO",
															"type": "string"
														},
														"limit": {
															"description": "Limit number of returned metrics.",
															"type": "number"
														},
														"metrics": {
															"description": "One or more metrics to compute. Options are: \n\nMetric                    | Name                                | Example                  | Unit\n--------------------------|-------------------------------------|--------------------------|--------------------------\ncount                     | Count of total events               | 1000                     | Count\nbytesIngress              | Sum of ingress bytes                | 1000                     | Sum\nbytesEgress               | Sum of egress bytes                 | 1000                     | Sum\ndurationAvg               | Average connection duration         | 1.0                      | Time in milliseconds\ndurationMedian            | Median connection duration          | 1.0                      | Time in milliseconds\nduration90th              | 90th percentile connection duration | 1.0                      | Time in milliseconds\nduration99th              | 99th percentile connection duration | 1.0                      | Time in milliseconds.",
															"example": [
																"count",
																"bytesIngress"
															],
															"items": {
																"enum": [
																	"count",
																	"bytesIngress",
																	"bytesEgress",
																	"durationAvg",
																	"durationMedian",
																	"duration90th",
																	"duration99th"
																],
																"type": "string"
															},
															"type": "array"
														},
														"since": {
															"allOf": [
																{
																	"description": "Start of time interval to query, defaults to `until` - 6 hours. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
																},
																{
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																}
															]
														},
														"sort": {
															"description": "The sort order for the result set; sort fields must be included in `metrics` or `dimensions`.",
															"example": [
																"+count",
																"-bytesIngress"
															],
															"items": {
																"type": "string"
															},
															"type": "array"
														},
														"until": {
															"allOf": [
																{
																	"description": "End of time interval to query, defaults to current time. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
																},
																{
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												},
												"rows": {
													"description": "Total number of rows in the result.",
													"example": 5,
													"minimum": 0,
													"type": "number"
												},
												"time_intervals": {
													"description": "List of time interval buckets: [start, end]",
													"items": {
														"items": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														"type": "array"
													},
													"type": "array"
												},
												"totals": {
													"allOf": [
														{
															"description": "Total result for each selected metrics across all data."
														},
														{
															"additionalProperties": {
																"type": "number"
															},
															"example": {
																"bytesEgress": 100,
																"bytesIngress": 50
															},
															"type": "object"
														}
													]
												}
											},
											"required": [
												"rows",
												"data",
												"data_lag",
												"min",
												"max",
												"totals",
												"query"
											],
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Get analytics by time response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get analytics by time response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get analytics by time",
		"tags": [
			"Spectrum Analytics"
		],
		"x-api-token-group": [
			"Analytics Read"
		]
	},
	"GET /zones/{zone_id}/spectrum/analytics/events/summary": {
		"description": "Retrieves a list of summarised aggregate metrics over a given time period.",
		"operationId": "spectrum-analytics-(-summary)-get-analytics-summary",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "dimensions",
				"schema": {
					"description": "Can be used to break down the data by given attributes. Options are: \n\nDimension                 | Name                            | Example\n--------------------------|---------------------------------|--------------------------\nevent                     | Connection Event                | connect, progress, disconnect, originError, clientFiltered\nappID                     | Application ID                  | 40d67c87c6cd4b889a4fd57805225e85\ncoloName                  | Colo Name                       | SFO\nipVersion                 | IP version used by the client   | 4, 6.",
					"example": [
						"event",
						"appID"
					],
					"items": {
						"enum": [
							"event",
							"appID",
							"coloName",
							"ipVersion"
						],
						"type": "string"
					},
					"type": "array"
				}
			},
			{
				"in": "query",
				"name": "sort",
				"schema": {
					"description": "The sort order for the result set; sort fields must be included in `metrics` or `dimensions`.",
					"example": [
						"+count",
						"-bytesIngress"
					],
					"items": {
						"type": "string"
					},
					"type": "array"
				}
			},
			{
				"in": "query",
				"name": "until",
				"schema": {
					"allOf": [
						{
							"description": "End of time interval to query, defaults to current time. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
						},
						{
							"example": "2014-01-01T05:20:00.12345Z",
							"format": "date-time",
							"type": "string"
						}
					]
				}
			},
			{
				"in": "query",
				"name": "metrics",
				"schema": {
					"description": "One or more metrics to compute. Options are: \n\nMetric                    | Name                                | Example                  | Unit\n--------------------------|-------------------------------------|--------------------------|--------------------------\ncount                     | Count of total events               | 1000                     | Count\nbytesIngress              | Sum of ingress bytes                | 1000                     | Sum\nbytesEgress               | Sum of egress bytes                 | 1000                     | Sum\ndurationAvg               | Average connection duration         | 1.0                      | Time in milliseconds\ndurationMedian            | Median connection duration          | 1.0                      | Time in milliseconds\nduration90th              | 90th percentile connection duration | 1.0                      | Time in milliseconds\nduration99th              | 99th percentile connection duration | 1.0                      | Time in milliseconds.",
					"example": [
						"count",
						"bytesIngress"
					],
					"items": {
						"enum": [
							"count",
							"bytesIngress",
							"bytesEgress",
							"durationAvg",
							"durationMedian",
							"duration90th",
							"duration99th"
						],
						"type": "string"
					},
					"type": "array"
				}
			},
			{
				"in": "query",
				"name": "filters",
				"schema": {
					"description": "Used to filter rows by one or more dimensions. Filters can be combined using OR and AND boolean logic. AND takes precedence over OR in all the expressions. The OR operator is defined using a comma (,) or OR keyword surrounded by whitespace. The AND operator is defined using a semicolon (;) or AND keyword surrounded by whitespace. Note that the semicolon is a reserved character in URLs (rfc1738) and needs to be percent-encoded as %3B. Comparison options are:\n\nOperator                  | Name                            | URL Encoded\n--------------------------|---------------------------------|--------------------------\n==                        | Equals                          | %3D%3D\n!=                        | Does not equals                 | !%3D\n\\>                        | Greater Than                    | %3E\n\\<                        | Less Than                       | %3C\n\\>=                       | Greater than or equal to        | %3E%3D\n\\<=                       | Less than or equal to           | %3C%3D",
					"example": "event==disconnect%20AND%20coloName!=SFO",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "since",
				"schema": {
					"allOf": [
						{
							"description": "Start of time interval to query, defaults to `until` - 6 hours. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
						},
						{
							"example": "2014-01-01T05:20:00.12345Z",
							"format": "date-time",
							"type": "string"
						}
					]
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"data": {
													"description": "List of columns returned by the analytics query.",
													"items": {
														"properties": {
															"dimensions": {
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"metrics": {
																"oneOf": [
																	{
																		"items": {
																			"type": "number"
																		},
																		"type": "array"
																	},
																	{
																		"items": {
																			"items": {
																				"type": "number"
																			},
																			"type": "array"
																		},
																		"type": "array"
																	}
																]
															}
														},
														"type": "object"
													},
													"type": "array"
												},
												"data_lag": {
													"description": "Number of seconds between current time and last processed event, i.e. how many seconds of data could be missing.",
													"example": 3,
													"minimum": 0,
													"type": "number"
												},
												"max": {
													"allOf": [
														{
															"description": "Maximum result for each selected metrics across all data."
														},
														{
															"additionalProperties": {
																"type": "number"
															},
															"example": {
																"bytesEgress": 100,
																"bytesIngress": 50
															},
															"type": "object"
														}
													]
												},
												"min": {
													"allOf": [
														{
															"description": "Minimum result for each selected metrics across all data."
														},
														{
															"additionalProperties": {
																"type": "number"
															},
															"example": {
																"bytesEgress": 100,
																"bytesIngress": 50
															},
															"type": "object"
														}
													]
												},
												"query": {
													"properties": {
														"dimensions": {
															"description": "Can be used to break down the data by given attributes. Options are: \n\nDimension                 | Name                            | Example\n--------------------------|---------------------------------|--------------------------\nevent                     | Connection Event                | connect, progress, disconnect, originError, clientFiltered\nappID                     | Application ID                  | 40d67c87c6cd4b889a4fd57805225e85\ncoloName                  | Colo Name                       | SFO\nipVersion                 | IP version used by the client   | 4, 6.",
															"example": [
																"event",
																"appID"
															],
															"items": {
																"enum": [
																	"event",
																	"appID",
																	"coloName",
																	"ipVersion"
																],
																"type": "string"
															},
															"type": "array"
														},
														"filters": {
															"description": "Used to filter rows by one or more dimensions. Filters can be combined using OR and AND boolean logic. AND takes precedence over OR in all the expressions. The OR operator is defined using a comma (,) or OR keyword surrounded by whitespace. The AND operator is defined using a semicolon (;) or AND keyword surrounded by whitespace. Note that the semicolon is a reserved character in URLs (rfc1738) and needs to be percent-encoded as %3B. Comparison options are:\n\nOperator                  | Name                            | URL Encoded\n--------------------------|---------------------------------|--------------------------\n==                        | Equals                          | %3D%3D\n!=                        | Does not equals                 | !%3D\n\\>                        | Greater Than                    | %3E\n\\<                        | Less Than                       | %3C\n\\>=                       | Greater than or equal to        | %3E%3D\n\\<=                       | Less than or equal to           | %3C%3D",
															"example": "event==disconnect%20AND%20coloName!=SFO",
															"type": "string"
														},
														"limit": {
															"description": "Limit number of returned metrics.",
															"type": "number"
														},
														"metrics": {
															"description": "One or more metrics to compute. Options are: \n\nMetric                    | Name                                | Example                  | Unit\n--------------------------|-------------------------------------|--------------------------|--------------------------\ncount                     | Count of total events               | 1000                     | Count\nbytesIngress              | Sum of ingress bytes                | 1000                     | Sum\nbytesEgress               | Sum of egress bytes                 | 1000                     | Sum\ndurationAvg               | Average connection duration         | 1.0                      | Time in milliseconds\ndurationMedian            | Median connection duration          | 1.0                      | Time in milliseconds\nduration90th              | 90th percentile connection duration | 1.0                      | Time in milliseconds\nduration99th              | 99th percentile connection duration | 1.0                      | Time in milliseconds.",
															"example": [
																"count",
																"bytesIngress"
															],
															"items": {
																"enum": [
																	"count",
																	"bytesIngress",
																	"bytesEgress",
																	"durationAvg",
																	"durationMedian",
																	"duration90th",
																	"duration99th"
																],
																"type": "string"
															},
															"type": "array"
														},
														"since": {
															"allOf": [
																{
																	"description": "Start of time interval to query, defaults to `until` - 6 hours. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
																},
																{
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																}
															]
														},
														"sort": {
															"description": "The sort order for the result set; sort fields must be included in `metrics` or `dimensions`.",
															"example": [
																"+count",
																"-bytesIngress"
															],
															"items": {
																"type": "string"
															},
															"type": "array"
														},
														"until": {
															"allOf": [
																{
																	"description": "End of time interval to query, defaults to current time. Timestamp must be in RFC3339 format and uses UTC unless otherwise specified."
																},
																{
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												},
												"rows": {
													"description": "Total number of rows in the result.",
													"example": 5,
													"minimum": 0,
													"type": "number"
												},
												"time_intervals": {
													"description": "List of time interval buckets: [start, end]",
													"items": {
														"items": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														"type": "array"
													},
													"type": "array"
												},
												"totals": {
													"allOf": [
														{
															"description": "Total result for each selected metrics across all data."
														},
														{
															"additionalProperties": {
																"type": "number"
															},
															"example": {
																"bytesEgress": 100,
																"bytesIngress": 50
															},
															"type": "object"
														}
													]
												}
											},
											"required": [
												"rows",
												"data",
												"data_lag",
												"min",
												"max",
												"totals",
												"query"
											],
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Get analytics summary response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get analytics summary response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get analytics summary",
		"tags": [
			"Spectrum Analytics"
		],
		"x-api-token-group": [
			"Analytics Read"
		]
	}
}