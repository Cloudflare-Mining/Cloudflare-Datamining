{
	"DELETE /accounts/{account_id}/load_balancers/monitors/{monitor_id}": {
		"description": "Delete a configured monitor.",
		"operationId": "account-load-balancer-monitors-delete-monitor",
		"parameters": [
			{
				"in": "path",
				"name": "monitor_id",
				"required": true,
				"schema": {
					"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"id": {
													"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Delete Monitor response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"id": {
															"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Monitor response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Delete Monitor",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write"
		]
	},
	"GET /accounts/{account_id}/load_balancers/monitors": {
		"description": "List configured monitors for an account.",
		"operationId": "account-load-balancer-monitors-list-monitors",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results on the current page",
															"example": 20,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters",
															"example": 2000,
															"type": "number"
														},
														"total_pages": {
															"description": "Total number of pages available",
															"example": 100,
															"type": "number"
														}
													},
													"type": "object"
												}
											}
										}
									],
									"required": [
										"result_info"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"allOf": [
													{
														"properties": {
															"allow_insecure": {
																"default": false,
																"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
																"example": true,
																"type": "boolean",
																"x-auditable": true
															},
															"consecutive_down": {
																"default": 0,
																"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
																"type": "integer",
																"x-auditable": true
															},
															"consecutive_up": {
																"default": 0,
																"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
																"type": "integer",
																"x-auditable": true
															},
															"description": {
																"description": "Object description.",
																"example": "Login page monitor",
																"type": "string",
																"x-auditable": true
															},
															"expected_body": {
																"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
																"example": "alive",
																"type": "string",
																"x-auditable": true
															},
															"expected_codes": {
																"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
																"example": "2xx",
																"type": "string",
																"x-auditable": true
															},
															"follow_redirects": {
																"default": false,
																"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
																"example": true,
																"type": "boolean",
																"x-auditable": true
															},
															"header": {
																"additionalProperties": {
																	"items": {
																		"type": "string",
																		"x-auditable": true
																	},
																	"type": "array"
																},
																"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
																"example": {
																	"Host": [
																		"example.com"
																	],
																	"X-App-ID": [
																		"abc123"
																	]
																},
																"type": "object"
															},
															"interval": {
																"default": 60,
																"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
																"type": "integer",
																"x-auditable": true
															},
															"method": {
																"default": "GET",
																"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
																"example": "GET",
																"type": "string",
																"x-auditable": true
															},
															"path": {
																"default": "/",
																"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
																"example": "/health",
																"type": "string",
																"x-auditable": true
															},
															"port": {
																"default": 0,
																"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
																"type": "integer",
																"x-auditable": true
															},
															"probe_zone": {
																"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
																"example": "example.com",
																"type": "string",
																"x-auditable": true
															},
															"retries": {
																"default": 2,
																"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																"type": "integer",
																"x-auditable": true
															},
															"timeout": {
																"default": 5,
																"description": "The timeout (in seconds) before marking the health check as failed.",
																"type": "integer",
																"x-auditable": true
															},
															"type": {
																"default": "http",
																"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
																"enum": [
																	"http",
																	"https",
																	"tcp",
																	"udp_icmp",
																	"icmp_ping",
																	"smtp"
																],
																"example": "https",
																"type": "string",
																"x-auditable": true
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"created_on": {
																"example": "2014-01-01T05:20:00.12345Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															},
															"id": {
																"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
																"type": "string",
																"x-auditable": true
															},
															"modified_on": {
																"example": "2014-01-01T05:20:00.12345Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															}
														},
														"type": "object"
													}
												]
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "List Monitors response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result_info": {
															"properties": {
																"count": {
																	"description": "Total number of results on the current page",
																	"example": 20,
																	"type": "number"
																},
																"page": {
																	"description": "Current page within paginated list of results",
																	"example": 1,
																	"type": "number"
																},
																"per_page": {
																	"description": "Number of results per page",
																	"example": 20,
																	"type": "number"
																},
																"total_count": {
																	"description": "Total results available without any search parameters",
																	"example": 2000,
																	"type": "number"
																},
																"total_pages": {
																	"description": "Total number of pages available",
																	"example": 100,
																	"type": "number"
																}
															},
															"type": "object"
														}
													}
												}
											],
											"required": [
												"result_info"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"items": {
														"allOf": [
															{
																"properties": {
																	"allow_insecure": {
																		"default": false,
																		"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
																		"example": true,
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"consecutive_down": {
																		"default": 0,
																		"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
																		"type": "integer",
																		"x-auditable": true
																	},
																	"consecutive_up": {
																		"default": 0,
																		"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
																		"type": "integer",
																		"x-auditable": true
																	},
																	"description": {
																		"description": "Object description.",
																		"example": "Login page monitor",
																		"type": "string",
																		"x-auditable": true
																	},
																	"expected_body": {
																		"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
																		"example": "alive",
																		"type": "string",
																		"x-auditable": true
																	},
																	"expected_codes": {
																		"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
																		"example": "2xx",
																		"type": "string",
																		"x-auditable": true
																	},
																	"follow_redirects": {
																		"default": false,
																		"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
																		"example": true,
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"header": {
																		"additionalProperties": {
																			"items": {
																				"type": "string",
																				"x-auditable": true
																			},
																			"type": "array"
																		},
																		"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
																		"example": {
																			"Host": [
																				"example.com"
																			],
																			"X-App-ID": [
																				"abc123"
																			]
																		},
																		"type": "object"
																	},
																	"interval": {
																		"default": 60,
																		"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
																		"type": "integer",
																		"x-auditable": true
																	},
																	"method": {
																		"default": "GET",
																		"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
																		"example": "GET",
																		"type": "string",
																		"x-auditable": true
																	},
																	"path": {
																		"default": "/",
																		"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
																		"example": "/health",
																		"type": "string",
																		"x-auditable": true
																	},
																	"port": {
																		"default": 0,
																		"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
																		"type": "integer",
																		"x-auditable": true
																	},
																	"probe_zone": {
																		"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
																		"example": "example.com",
																		"type": "string",
																		"x-auditable": true
																	},
																	"retries": {
																		"default": 2,
																		"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																		"type": "integer",
																		"x-auditable": true
																	},
																	"timeout": {
																		"default": 5,
																		"description": "The timeout (in seconds) before marking the health check as failed.",
																		"type": "integer",
																		"x-auditable": true
																	},
																	"type": {
																		"default": "http",
																		"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
																		"enum": [
																			"http",
																			"https",
																			"tcp",
																			"udp_icmp",
																			"icmp_ping",
																			"smtp"
																		],
																		"example": "https",
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"created_on": {
																		"example": "2014-01-01T05:20:00.12345Z",
																		"format": "date-time",
																		"readOnly": true,
																		"type": "string",
																		"x-auditable": true
																	},
																	"id": {
																		"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
																		"type": "string",
																		"x-auditable": true
																	},
																	"modified_on": {
																		"example": "2014-01-01T05:20:00.12345Z",
																		"format": "date-time",
																		"readOnly": true,
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"type": "object"
															}
														]
													},
													"type": "array"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Monitors response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "List Monitors",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write",
			"Load Balancing: Monitors and Pools Read"
		]
	},
	"GET /accounts/{account_id}/load_balancers/monitors/{monitor_id}": {
		"description": "List a single configured monitor for an account.",
		"operationId": "account-load-balancer-monitors-monitor-details",
		"parameters": [
			{
				"in": "path",
				"name": "monitor_id",
				"required": true,
				"schema": {
					"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"consecutive_down": {
															"default": 0,
															"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_up": {
															"default": 0,
															"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"description": {
															"description": "Object description.",
															"example": "Login page monitor",
															"type": "string",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "alive",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "2xx",
															"type": "string",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"type": "object"
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"method": {
															"default": "GET",
															"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
															"example": "GET",
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 0,
															"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
															"type": "integer",
															"x-auditable": true
														},
														"probe_zone": {
															"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "example.com",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "http",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
															"enum": [
																"http",
																"https",
																"tcp",
																"udp_icmp",
																"icmp_ping",
																"smtp"
															],
															"example": "https",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												{
													"properties": {
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"id": {
															"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
															"type": "string",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Monitor Details response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"consecutive_down": {
																	"default": 0,
																	"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"consecutive_up": {
																	"default": 0,
																	"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"description": {
																	"description": "Object description.",
																	"example": "Login page monitor",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "alive",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "2xx",
																	"type": "string",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"type": "object"
																},
																"interval": {
																	"default": 60,
																	"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
																	"type": "integer",
																	"x-auditable": true
																},
																"method": {
																	"default": "GET",
																	"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
																	"example": "GET",
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 0,
																	"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
																	"type": "integer",
																	"x-auditable": true
																},
																"probe_zone": {
																	"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "example.com",
																	"type": "string",
																	"x-auditable": true
																},
																"retries": {
																	"default": 2,
																	"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																	"type": "integer",
																	"x-auditable": true
																},
																"timeout": {
																	"default": 5,
																	"description": "The timeout (in seconds) before marking the health check as failed.",
																	"type": "integer",
																	"x-auditable": true
																},
																"type": {
																	"default": "http",
																	"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
																	"enum": [
																		"http",
																		"https",
																		"tcp",
																		"udp_icmp",
																		"icmp_ping",
																		"smtp"
																	],
																	"example": "https",
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"created_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																},
																"id": {
																	"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
																	"type": "string",
																	"x-auditable": true
																},
																"modified_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Monitor Details response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Monitor Details",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write",
			"Load Balancing: Monitors and Pools Read"
		]
	},
	"GET /accounts/{account_id}/load_balancers/monitors/{monitor_id}/references": {
		"description": "Get the list of resources that reference the provided monitor.",
		"operationId": "account-load-balancer-monitors-list-monitor-references",
		"parameters": [
			{
				"in": "path",
				"name": "monitor_id",
				"required": true,
				"schema": {
					"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "List of resources that reference a given monitor.",
											"example": [
												{
													"reference_type": "referrer",
													"resource_id": "17b5962d775c646f3f9725cbc7a53df4",
													"resource_name": "primary-dc-1",
													"resource_type": "pool"
												}
											],
											"items": {
												"properties": {
													"reference_type": {
														"enum": [
															"*",
															"referral",
															"referrer"
														],
														"type": "string",
														"x-auditable": true
													},
													"resource_id": {
														"type": "string",
														"x-auditable": true
													},
													"resource_name": {
														"type": "string",
														"x-auditable": true
													},
													"resource_type": {
														"type": "string",
														"x-auditable": true
													}
												},
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "List Monitor References response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"description": "List of resources that reference a given monitor.",
													"example": [
														{
															"reference_type": "referrer",
															"resource_id": "17b5962d775c646f3f9725cbc7a53df4",
															"resource_name": "primary-dc-1",
															"resource_type": "pool"
														}
													],
													"items": {
														"properties": {
															"reference_type": {
																"enum": [
																	"*",
																	"referral",
																	"referrer"
																],
																"type": "string",
																"x-auditable": true
															},
															"resource_id": {
																"type": "string",
																"x-auditable": true
															},
															"resource_name": {
																"type": "string",
																"x-auditable": true
															},
															"resource_type": {
																"type": "string",
																"x-auditable": true
															}
														},
														"type": "object"
													},
													"type": "array"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Monitor References response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "List Monitor References",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write",
			"Load Balancing: Monitors and Pools Read"
		]
	},
	"GET /accounts/{account_id}/load_balancers/preview/{preview_id}": {
		"description": "Get the result of a previous preview operation using the provided preview_id.",
		"operationId": "account-load-balancer-monitors-preview-result",
		"parameters": [
			{
				"in": "path",
				"name": "preview_id",
				"required": true,
				"schema": {
					"example": "p1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"additionalProperties": {
												"properties": {
													"healthy": {
														"type": "boolean",
														"x-auditable": true
													},
													"origins": {
														"items": {
															"additionalProperties": {
																"description": "The origin ipv4/ipv6 address or domain name mapped to it's health data.",
																"example": {
																	"failure_reason": "No failures",
																	"healthy": true,
																	"response_code": 200,
																	"rtt": "66ms"
																},
																"properties": {
																	"failure_reason": {
																		"type": "string",
																		"x-auditable": true
																	},
																	"healthy": {
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"response_code": {
																		"type": "number",
																		"x-auditable": true
																	},
																	"rtt": {
																		"type": "string",
																		"x-auditable": true
																	}
																},
																"type": "object"
															},
															"maxProperties": 1,
															"minProperties": 1,
															"type": "object"
														},
														"type": "array"
													}
												},
												"type": "object"
											},
											"description": "Resulting health data from a preview operation.",
											"example": {
												"abwlnp5jbqn45ecgxd03erbgtxtqai0d": {
													"healthy": true,
													"origins": [
														{
															"originone.example.com.": {
																"failure_reason": "No failures",
																"healthy": true,
																"response_code": 200,
																"rtt": "66ms"
															}
														}
													]
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Preview Result response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"additionalProperties": {
														"properties": {
															"healthy": {
																"type": "boolean",
																"x-auditable": true
															},
															"origins": {
																"items": {
																	"additionalProperties": {
																		"description": "The origin ipv4/ipv6 address or domain name mapped to it's health data.",
																		"example": {
																			"failure_reason": "No failures",
																			"healthy": true,
																			"response_code": 200,
																			"rtt": "66ms"
																		},
																		"properties": {
																			"failure_reason": {
																				"type": "string",
																				"x-auditable": true
																			},
																			"healthy": {
																				"type": "boolean",
																				"x-auditable": true
																			},
																			"response_code": {
																				"type": "number",
																				"x-auditable": true
																			},
																			"rtt": {
																				"type": "string",
																				"x-auditable": true
																			}
																		},
																		"type": "object"
																	},
																	"maxProperties": 1,
																	"minProperties": 1,
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													},
													"description": "Resulting health data from a preview operation.",
													"example": {
														"abwlnp5jbqn45ecgxd03erbgtxtqai0d": {
															"healthy": true,
															"origins": [
																{
																	"originone.example.com.": {
																		"failure_reason": "No failures",
																		"healthy": true,
																		"response_code": 200,
																		"rtt": "66ms"
																	}
																}
															]
														}
													},
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Preview Result response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Preview Result",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write",
			"Load Balancing: Monitors and Pools Read"
		]
	},
	"PATCH /accounts/{account_id}/load_balancers/monitors/{monitor_id}": {
		"description": "Apply changes to an existing monitor, overwriting the supplied properties.",
		"operationId": "account-load-balancer-monitors-patch-monitor",
		"parameters": [
			{
				"in": "path",
				"name": "monitor_id",
				"required": true,
				"schema": {
					"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"allOf": [
							{
								"properties": {
									"allow_insecure": {
										"default": false,
										"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"consecutive_down": {
										"default": 0,
										"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"consecutive_up": {
										"default": 0,
										"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"description": {
										"description": "Object description.",
										"example": "Login page monitor",
										"type": "string",
										"x-auditable": true
									},
									"expected_body": {
										"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "alive",
										"type": "string",
										"x-auditable": true
									},
									"expected_codes": {
										"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "2xx",
										"type": "string",
										"x-auditable": true
									},
									"follow_redirects": {
										"default": false,
										"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"header": {
										"additionalProperties": {
											"items": {
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": {
											"Host": [
												"example.com"
											],
											"X-App-ID": [
												"abc123"
											]
										},
										"type": "object"
									},
									"interval": {
										"default": 60,
										"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
										"type": "integer",
										"x-auditable": true
									},
									"method": {
										"default": "GET",
										"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
										"example": "GET",
										"type": "string",
										"x-auditable": true
									},
									"path": {
										"default": "/",
										"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "/health",
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 0,
										"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
										"type": "integer",
										"x-auditable": true
									},
									"probe_zone": {
										"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "example.com",
										"type": "string",
										"x-auditable": true
									},
									"retries": {
										"default": 2,
										"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
										"type": "integer",
										"x-auditable": true
									},
									"timeout": {
										"default": 5,
										"description": "The timeout (in seconds) before marking the health check as failed.",
										"type": "integer",
										"x-auditable": true
									},
									"type": {
										"default": "http",
										"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
										"enum": [
											"http",
											"https",
											"tcp",
											"udp_icmp",
											"icmp_ping",
											"smtp"
										],
										"example": "https",
										"type": "string",
										"x-auditable": true
									}
								},
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"consecutive_down": {
															"default": 0,
															"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_up": {
															"default": 0,
															"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"description": {
															"description": "Object description.",
															"example": "Login page monitor",
															"type": "string",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "alive",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "2xx",
															"type": "string",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"type": "object"
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"method": {
															"default": "GET",
															"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
															"example": "GET",
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 0,
															"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
															"type": "integer",
															"x-auditable": true
														},
														"probe_zone": {
															"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "example.com",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "http",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
															"enum": [
																"http",
																"https",
																"tcp",
																"udp_icmp",
																"icmp_ping",
																"smtp"
															],
															"example": "https",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												{
													"properties": {
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"id": {
															"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
															"type": "string",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Patch Monitor response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"consecutive_down": {
																	"default": 0,
																	"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"consecutive_up": {
																	"default": 0,
																	"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"description": {
																	"description": "Object description.",
																	"example": "Login page monitor",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "alive",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "2xx",
																	"type": "string",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"type": "object"
																},
																"interval": {
																	"default": 60,
																	"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
																	"type": "integer",
																	"x-auditable": true
																},
																"method": {
																	"default": "GET",
																	"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
																	"example": "GET",
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 0,
																	"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
																	"type": "integer",
																	"x-auditable": true
																},
																"probe_zone": {
																	"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "example.com",
																	"type": "string",
																	"x-auditable": true
																},
																"retries": {
																	"default": 2,
																	"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																	"type": "integer",
																	"x-auditable": true
																},
																"timeout": {
																	"default": 5,
																	"description": "The timeout (in seconds) before marking the health check as failed.",
																	"type": "integer",
																	"x-auditable": true
																},
																"type": {
																	"default": "http",
																	"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
																	"enum": [
																		"http",
																		"https",
																		"tcp",
																		"udp_icmp",
																		"icmp_ping",
																		"smtp"
																	],
																	"example": "https",
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"created_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																},
																"id": {
																	"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
																	"type": "string",
																	"x-auditable": true
																},
																"modified_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch Monitor response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Patch Monitor",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write"
		]
	},
	"POST /accounts/{account_id}/load_balancers/monitors": {
		"description": "Create a configured monitor.",
		"operationId": "account-load-balancer-monitors-create-monitor",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"allOf": [
							{
								"properties": {
									"allow_insecure": {
										"default": false,
										"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"consecutive_down": {
										"default": 0,
										"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"consecutive_up": {
										"default": 0,
										"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"description": {
										"description": "Object description.",
										"example": "Login page monitor",
										"type": "string",
										"x-auditable": true
									},
									"expected_body": {
										"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "alive",
										"type": "string",
										"x-auditable": true
									},
									"expected_codes": {
										"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "2xx",
										"type": "string",
										"x-auditable": true
									},
									"follow_redirects": {
										"default": false,
										"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"header": {
										"additionalProperties": {
											"items": {
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": {
											"Host": [
												"example.com"
											],
											"X-App-ID": [
												"abc123"
											]
										},
										"type": "object"
									},
									"interval": {
										"default": 60,
										"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
										"type": "integer",
										"x-auditable": true
									},
									"method": {
										"default": "GET",
										"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
										"example": "GET",
										"type": "string",
										"x-auditable": true
									},
									"path": {
										"default": "/",
										"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "/health",
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 0,
										"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
										"type": "integer",
										"x-auditable": true
									},
									"probe_zone": {
										"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "example.com",
										"type": "string",
										"x-auditable": true
									},
									"retries": {
										"default": 2,
										"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
										"type": "integer",
										"x-auditable": true
									},
									"timeout": {
										"default": 5,
										"description": "The timeout (in seconds) before marking the health check as failed.",
										"type": "integer",
										"x-auditable": true
									},
									"type": {
										"default": "http",
										"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
										"enum": [
											"http",
											"https",
											"tcp",
											"udp_icmp",
											"icmp_ping",
											"smtp"
										],
										"example": "https",
										"type": "string",
										"x-auditable": true
									}
								},
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"consecutive_down": {
															"default": 0,
															"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_up": {
															"default": 0,
															"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"description": {
															"description": "Object description.",
															"example": "Login page monitor",
															"type": "string",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "alive",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "2xx",
															"type": "string",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"type": "object"
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"method": {
															"default": "GET",
															"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
															"example": "GET",
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 0,
															"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
															"type": "integer",
															"x-auditable": true
														},
														"probe_zone": {
															"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "example.com",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "http",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
															"enum": [
																"http",
																"https",
																"tcp",
																"udp_icmp",
																"icmp_ping",
																"smtp"
															],
															"example": "https",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												{
													"properties": {
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"id": {
															"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
															"type": "string",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Create Monitor response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"consecutive_down": {
																	"default": 0,
																	"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"consecutive_up": {
																	"default": 0,
																	"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"description": {
																	"description": "Object description.",
																	"example": "Login page monitor",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "alive",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "2xx",
																	"type": "string",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"type": "object"
																},
																"interval": {
																	"default": 60,
																	"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
																	"type": "integer",
																	"x-auditable": true
																},
																"method": {
																	"default": "GET",
																	"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
																	"example": "GET",
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 0,
																	"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
																	"type": "integer",
																	"x-auditable": true
																},
																"probe_zone": {
																	"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "example.com",
																	"type": "string",
																	"x-auditable": true
																},
																"retries": {
																	"default": 2,
																	"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																	"type": "integer",
																	"x-auditable": true
																},
																"timeout": {
																	"default": 5,
																	"description": "The timeout (in seconds) before marking the health check as failed.",
																	"type": "integer",
																	"x-auditable": true
																},
																"type": {
																	"default": "http",
																	"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
																	"enum": [
																		"http",
																		"https",
																		"tcp",
																		"udp_icmp",
																		"icmp_ping",
																		"smtp"
																	],
																	"example": "https",
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"created_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																},
																"id": {
																	"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
																	"type": "string",
																	"x-auditable": true
																},
																"modified_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Monitor response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Create Monitor",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write"
		]
	},
	"POST /accounts/{account_id}/load_balancers/monitors/{monitor_id}/preview": {
		"description": "Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.",
		"operationId": "account-load-balancer-monitors-preview-monitor",
		"parameters": [
			{
				"in": "path",
				"name": "monitor_id",
				"required": true,
				"schema": {
					"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"allOf": [
							{
								"properties": {
									"allow_insecure": {
										"default": false,
										"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"consecutive_down": {
										"default": 0,
										"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"consecutive_up": {
										"default": 0,
										"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"description": {
										"description": "Object description.",
										"example": "Login page monitor",
										"type": "string",
										"x-auditable": true
									},
									"expected_body": {
										"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "alive",
										"type": "string",
										"x-auditable": true
									},
									"expected_codes": {
										"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "2xx",
										"type": "string",
										"x-auditable": true
									},
									"follow_redirects": {
										"default": false,
										"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"header": {
										"additionalProperties": {
											"items": {
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": {
											"Host": [
												"example.com"
											],
											"X-App-ID": [
												"abc123"
											]
										},
										"type": "object"
									},
									"interval": {
										"default": 60,
										"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
										"type": "integer",
										"x-auditable": true
									},
									"method": {
										"default": "GET",
										"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
										"example": "GET",
										"type": "string",
										"x-auditable": true
									},
									"path": {
										"default": "/",
										"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "/health",
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 0,
										"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
										"type": "integer",
										"x-auditable": true
									},
									"probe_zone": {
										"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "example.com",
										"type": "string",
										"x-auditable": true
									},
									"retries": {
										"default": 2,
										"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
										"type": "integer",
										"x-auditable": true
									},
									"timeout": {
										"default": 5,
										"description": "The timeout (in seconds) before marking the health check as failed.",
										"type": "integer",
										"x-auditable": true
									},
									"type": {
										"default": "http",
										"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
										"enum": [
											"http",
											"https",
											"tcp",
											"udp_icmp",
											"icmp_ping",
											"smtp"
										],
										"example": "https",
										"type": "string",
										"x-auditable": true
									}
								},
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"pools": {
													"additionalProperties": {
														"description": "The pool name associated with the pool ID.",
														"type": "string",
														"x-auditable": true
													},
													"description": "Monitored pool IDs mapped to their respective names.",
													"example": {
														"abwlnp5jbqn45ecgxd03erbgtxtqai0d": "WNAM Datacenter",
														"ve8h9lrcip5n5bbga9yqmdws28ay5d0l": "EEU Datacenter"
													},
													"type": "object"
												},
												"preview_id": {
													"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Preview Monitor response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"pools": {
															"additionalProperties": {
																"description": "The pool name associated with the pool ID.",
																"type": "string",
																"x-auditable": true
															},
															"description": "Monitored pool IDs mapped to their respective names.",
															"example": {
																"abwlnp5jbqn45ecgxd03erbgtxtqai0d": "WNAM Datacenter",
																"ve8h9lrcip5n5bbga9yqmdws28ay5d0l": "EEU Datacenter"
															},
															"type": "object"
														},
														"preview_id": {
															"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Preview Monitor response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Preview Monitor",
		"tags": [
			"Account Load Balancer Monitors"
		]
	},
	"PUT /accounts/{account_id}/load_balancers/monitors/{monitor_id}": {
		"description": "Modify a configured monitor.",
		"operationId": "account-load-balancer-monitors-update-monitor",
		"parameters": [
			{
				"in": "path",
				"name": "monitor_id",
				"required": true,
				"schema": {
					"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"allOf": [
							{
								"properties": {
									"allow_insecure": {
										"default": false,
										"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"consecutive_down": {
										"default": 0,
										"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"consecutive_up": {
										"default": 0,
										"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
										"type": "integer",
										"x-auditable": true
									},
									"description": {
										"description": "Object description.",
										"example": "Login page monitor",
										"type": "string",
										"x-auditable": true
									},
									"expected_body": {
										"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "alive",
										"type": "string",
										"x-auditable": true
									},
									"expected_codes": {
										"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "2xx",
										"type": "string",
										"x-auditable": true
									},
									"follow_redirects": {
										"default": false,
										"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": true,
										"type": "boolean",
										"x-auditable": true
									},
									"header": {
										"additionalProperties": {
											"items": {
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": {
											"Host": [
												"example.com"
											],
											"X-App-ID": [
												"abc123"
											]
										},
										"type": "object"
									},
									"interval": {
										"default": 60,
										"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
										"type": "integer",
										"x-auditable": true
									},
									"method": {
										"default": "GET",
										"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
										"example": "GET",
										"type": "string",
										"x-auditable": true
									},
									"path": {
										"default": "/",
										"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "/health",
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 0,
										"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
										"type": "integer",
										"x-auditable": true
									},
									"probe_zone": {
										"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
										"example": "example.com",
										"type": "string",
										"x-auditable": true
									},
									"retries": {
										"default": 2,
										"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
										"type": "integer",
										"x-auditable": true
									},
									"timeout": {
										"default": 5,
										"description": "The timeout (in seconds) before marking the health check as failed.",
										"type": "integer",
										"x-auditable": true
									},
									"type": {
										"default": "http",
										"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
										"enum": [
											"http",
											"https",
											"tcp",
											"udp_icmp",
											"icmp_ping",
											"smtp"
										],
										"example": "https",
										"type": "string",
										"x-auditable": true
									}
								},
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"nullable": true,
															"type": "object"
														},
														{
															"nullable": true,
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"consecutive_down": {
															"default": 0,
															"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_up": {
															"default": 0,
															"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
															"type": "integer",
															"x-auditable": true
														},
														"description": {
															"description": "Object description.",
															"example": "Login page monitor",
															"type": "string",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "alive",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "2xx",
															"type": "string",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": true,
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"type": "object"
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"method": {
															"default": "GET",
															"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
															"example": "GET",
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 0,
															"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
															"type": "integer",
															"x-auditable": true
														},
														"probe_zone": {
															"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
															"example": "example.com",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "http",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
															"enum": [
																"http",
																"https",
																"tcp",
																"udp_icmp",
																"icmp_ping",
																"smtp"
															],
															"example": "https",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												{
													"properties": {
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"id": {
															"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
															"type": "string",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Update Monitor response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"consecutive_down": {
																	"default": 0,
																	"description": "To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"consecutive_up": {
																	"default": 0,
																	"description": "To be marked healthy the monitored origin must pass this healthcheck N consecutive times.",
																	"type": "integer",
																	"x-auditable": true
																},
																"description": {
																	"description": "Object description.",
																	"example": "Login page monitor",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "alive",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"description": "The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "2xx",
																	"type": "string",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": true,
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"type": "object"
																},
																"interval": {
																	"default": 60,
																	"description": "The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.",
																	"type": "integer",
																	"x-auditable": true
																},
																"method": {
																	"default": "GET",
																	"description": "The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.",
																	"example": "GET",
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 0,
																	"description": "The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).",
																	"type": "integer",
																	"x-auditable": true
																},
																"probe_zone": {
																	"description": "Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.",
																	"example": "example.com",
																	"type": "string",
																	"x-auditable": true
																},
																"retries": {
																	"default": 2,
																	"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																	"type": "integer",
																	"x-auditable": true
																},
																"timeout": {
																	"default": 5,
																	"description": "The timeout (in seconds) before marking the health check as failed.",
																	"type": "integer",
																	"x-auditable": true
																},
																"type": {
																	"default": "http",
																	"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.",
																	"enum": [
																		"http",
																		"https",
																		"tcp",
																		"udp_icmp",
																		"icmp_ping",
																		"smtp"
																	],
																	"example": "https",
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"created_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																},
																"id": {
																	"example": "f1aba936b94213e5b8dca0c0dbf1f9cc",
																	"type": "string",
																	"x-auditable": true
																},
																"modified_on": {
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update Monitor response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Update Monitor",
		"tags": [
			"Account Load Balancer Monitors"
		],
		"x-api-token-group": [
			"Load Balancing: Monitors and Pools Write"
		]
	}
}