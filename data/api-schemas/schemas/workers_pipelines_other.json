{
	"DELETE /accounts/{account_id}/pipelines/{pipeline_name}": {
		"deprecated": true,
		"description": "[DEPRECATED] Delete a pipeline. Use the new /pipelines/v1/pipelines endpoint instead.",
		"operationId": "deleteV4AccountsByAccount_idPipelinesByPipeline_name_deprecated",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "pipeline_name",
				"required": true,
				"schema": {
					"description": "Defines the name of the pipeline.",
					"example": "sample_pipeline",
					"maxLength": 128,
					"minLength": 1,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"description": "[DEPRECATED] Indicates a successfully deleted pipeline."
			},
			"4XX": {
				"description": "Indicates an error in deleting a pipeline."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "[DEPRECATED] Delete Pipeline",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"DELETE /accounts/{account_id}/pipelines/v1/pipelines/{pipeline_id}": {
		"description": "Delete Pipeline in Account.",
		"operationId": "deleteV4AccountsByAccount_idPipelinesV1PipelinesByPipeline_id",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "pipeline_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the pipeline.",
					"example": "043e105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"description": "Indicates a successfully deleted Pipeline."
			},
			"4XX": {
				"description": "Indicates an error in listing Pipelines."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Pipelines",
		"tags": [
			"workers_pipelines_other"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"DELETE /accounts/{account_id}/pipelines/v1/sinks/{sink_id}": {
		"description": "Delete Pipeline in Account.",
		"operationId": "deleteV4AccountsByAccount_idPipelinesV1SinksBySink_id",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "sink_id",
				"required": true,
				"schema": {
					"description": "Specifies the publid ID of the sink.",
					"example": "0223105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "force",
				"schema": {
					"description": "Delete sink forcefully, including deleting any dependent pipelines.",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"description": "Indicates a successfully deleted Sink."
			},
			"4XX": {
				"description": "Indicates an error in listing Sinks."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Sink",
		"tags": [
			"workers_pipelines_other"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"DELETE /accounts/{account_id}/pipelines/v1/streams/{stream_id}": {
		"description": "Delete Stream in Account.",
		"operationId": "deleteV4AccountsByAccount_idPipelinesV1StreamsByStream_id",
		"parameters": [
			{
				"in": "query",
				"name": "force",
				"schema": {
					"description": "Delete stream forcefully, including deleting any dependent pipelines.",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "stream_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the stream.",
					"example": "033e105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"description": "Indicates a successfully deleted Stream."
			},
			"4XX": {
				"description": "Indicates an error in listing Streams."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Stream",
		"tags": [
			"workers_pipelines_other"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines": {
		"deprecated": true,
		"description": "[DEPRECATED] List, filter, and paginate pipelines in an account. Use the new /pipelines/v1/pipelines endpoint instead.",
		"operationId": "getV4AccountsByAccount_idPipelines_deprecated",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "search",
				"schema": {
					"description": "Specifies the prefix of pipeline name to search.",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": "1",
					"description": "Specifies which page to retrieve.",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": "25",
					"description": "Specifies the number of pipelines per page.",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result_info": {
									"properties": {
										"count": {
											"description": "Indicates the number of items on current page.",
											"example": 1,
											"type": "number"
										},
										"page": {
											"description": "Indicates the current page number.",
											"example": 0,
											"type": "number"
										},
										"per_page": {
											"description": "Indicates the number of items per page.",
											"example": 10,
											"type": "number"
										},
										"total_count": {
											"description": "Indicates the total number of items.",
											"example": 1,
											"type": "number"
										}
									},
									"required": [
										"count",
										"page",
										"per_page",
										"total_count"
									],
									"type": "object"
								},
								"results": {
									"items": {
										"deprecated": true,
										"description": "[DEPRECATED] Describes the configuration of a pipeline. Use the new streams/sinks/pipelines API instead.",
										"properties": {
											"destination": {
												"properties": {
													"batch": {
														"properties": {
															"max_bytes": {
																"default": 100000000,
																"description": "Specifies rough maximum size of files.",
																"maximum": 100000000,
																"minimum": 1000,
																"type": "integer"
															},
															"max_duration_s": {
																"default": 300,
																"description": "Specifies duration to wait to aggregate batches files.",
																"maximum": 300,
																"minimum": 0.25,
																"type": "number"
															},
															"max_rows": {
																"default": 10000000,
																"description": "Specifies rough maximum number of rows per file.",
																"maximum": 10000000,
																"minimum": 100,
																"type": "integer"
															}
														},
														"required": [
															"max_rows",
															"max_bytes",
															"max_duration_s"
														],
														"type": "object"
													},
													"compression": {
														"properties": {
															"type": {
																"default": "gzip",
																"description": "Specifies the desired compression algorithm and format.",
																"enum": [
																	"none",
																	"gzip",
																	"deflate"
																],
																"example": "gzip",
																"type": "string"
															}
														},
														"required": [
															"type"
														],
														"type": "object"
													},
													"format": {
														"description": "Specifies the format of data to deliver.",
														"enum": [
															"json"
														],
														"type": "string"
													},
													"path": {
														"example": {
															"bucket": "bucket",
															"prefix": "base"
														},
														"properties": {
															"bucket": {
																"description": "Specifies the R2 Bucket to store files.",
																"example": "bucket",
																"type": "string"
															},
															"filename": {
																"allOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "string"
																	}
																],
																"description": "Specifies the name pattern to for individual data files.",
																"example": "${slug}${extension}"
															},
															"filepath": {
																"description": "Specifies the name pattern for directory.",
																"example": "${date}/${hour}",
																"type": "string"
															},
															"prefix": {
																"description": "Specifies the base directory within the bucket.",
																"example": "base",
																"type": "string"
															}
														},
														"required": [
															"bucket"
														],
														"type": "object"
													},
													"type": {
														"description": "Specifies the type of destination.",
														"enum": [
															"r2"
														],
														"type": "string"
													}
												},
												"required": [
													"type",
													"format",
													"batch",
													"compression",
													"path"
												],
												"type": "object"
											},
											"endpoint": {
												"description": "Indicates the endpoint URL to send traffic.",
												"example": "https://123f8a8258064ed892a347f173372359.pipelines.cloudflare.com",
												"type": "string"
											},
											"id": {
												"description": "Specifies the pipeline identifier.",
												"example": "123f8a8258064ed892a347f173372359",
												"type": "string"
											},
											"name": {
												"description": "Defines the name of the pipeline.",
												"example": "sample_pipeline",
												"maxLength": 128,
												"minLength": 1,
												"type": "string"
											},
											"source": {
												"items": {
													"discriminator": {
														"mapping": {
															"binding": "#/components/schemas/cloudflare-pipelines_workers_pipelines_binding_source",
															"http": "#/components/schemas/cloudflare-pipelines_workers_pipelines_http_source"
														},
														"propertyName": "type"
													},
													"oneOf": [
														{
															"deprecated": true,
															"description": "[DEPRECATED] HTTP source configuration. Use the new streams API instead.",
															"properties": {
																"authentication": {
																	"description": "Specifies whether authentication is required to send to this pipeline via HTTP.",
																	"type": "boolean"
																},
																"cors": {
																	"properties": {
																		"origins": {
																			"description": "Specifies allowed origins to allow Cross Origin HTTP Requests.",
																			"example": [
																				"*"
																			],
																			"items": {
																				"anyOf": [
																					{
																						"type": "string"
																					},
																					{
																						"type": "string"
																					}
																				]
																			},
																			"maxItems": 5,
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"format": {
																	"description": "Specifies the format of source data.",
																	"enum": [
																		"json"
																	],
																	"type": "string"
																},
																"type": {
																	"type": "string"
																}
															},
															"required": [
																"type",
																"format"
															],
															"type": "object"
														},
														{
															"deprecated": true,
															"description": "[DEPRECATED] Worker binding source configuration. Use the new streams API instead.",
															"properties": {
																"format": {
																	"description": "Specifies the format of source data.",
																	"enum": [
																		"json"
																	],
																	"type": "string"
																},
																"type": {
																	"type": "string"
																}
															},
															"required": [
																"type",
																"format"
															],
															"type": "object"
														}
													]
												},
												"minItems": 1,
												"type": "array"
											},
											"version": {
												"description": "Indicates the version number of last saved configuration.",
												"example": 2,
												"type": "number"
											}
										},
										"required": [
											"name",
											"source",
											"destination",
											"id",
											"version",
											"endpoint"
										],
										"type": "object"
									},
									"type": "array"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"results",
								"result_info"
							],
							"type": "object"
						}
					}
				},
				"description": "[DEPRECATED] Lists the pipelines. Use /pipelines/v1/pipelines instead."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"type": "number"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object"
									},
									"type": "array"
								},
								"results": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"allOf": [
										{
											"description": "Indicates whether the API call was successful.",
											"example": true,
											"type": "boolean"
										}
									],
									"example": false
								}
							},
							"required": [
								"success",
								"results",
								"errors"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates the error trying to list pipelines."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "[DEPRECATED] List Pipelines",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/{pipeline_name}": {
		"deprecated": true,
		"description": "[DEPRECATED] Get configuration of a pipeline. Use the new /pipelines/v1/pipelines endpoint instead.",
		"operationId": "getV4AccountsByAccount_idPipelinesByPipeline_name_deprecated",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "pipeline_name",
				"required": true,
				"schema": {
					"description": "Defines the name of the pipeline.",
					"example": "sample_pipeline",
					"maxLength": 128,
					"minLength": 1,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"deprecated": true,
									"description": "[DEPRECATED] Describes the configuration of a pipeline. Use the new streams/sinks/pipelines API instead.",
									"properties": {
										"destination": {
											"properties": {
												"batch": {
													"properties": {
														"max_bytes": {
															"default": 100000000,
															"description": "Specifies rough maximum size of files.",
															"maximum": 100000000,
															"minimum": 1000,
															"type": "integer"
														},
														"max_duration_s": {
															"default": 300,
															"description": "Specifies duration to wait to aggregate batches files.",
															"maximum": 300,
															"minimum": 0.25,
															"type": "number"
														},
														"max_rows": {
															"default": 10000000,
															"description": "Specifies rough maximum number of rows per file.",
															"maximum": 10000000,
															"minimum": 100,
															"type": "integer"
														}
													},
													"required": [
														"max_rows",
														"max_bytes",
														"max_duration_s"
													],
													"type": "object"
												},
												"compression": {
													"properties": {
														"type": {
															"default": "gzip",
															"description": "Specifies the desired compression algorithm and format.",
															"enum": [
																"none",
																"gzip",
																"deflate"
															],
															"example": "gzip",
															"type": "string"
														}
													},
													"required": [
														"type"
													],
													"type": "object"
												},
												"format": {
													"description": "Specifies the format of data to deliver.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"path": {
													"example": {
														"bucket": "bucket",
														"prefix": "base"
													},
													"properties": {
														"bucket": {
															"description": "Specifies the R2 Bucket to store files.",
															"example": "bucket",
															"type": "string"
														},
														"filename": {
															"allOf": [
																{
																	"type": "string"
																},
																{
																	"type": "string"
																}
															],
															"description": "Specifies the name pattern to for individual data files.",
															"example": "${slug}${extension}"
														},
														"filepath": {
															"description": "Specifies the name pattern for directory.",
															"example": "${date}/${hour}",
															"type": "string"
														},
														"prefix": {
															"description": "Specifies the base directory within the bucket.",
															"example": "base",
															"type": "string"
														}
													},
													"required": [
														"bucket"
													],
													"type": "object"
												},
												"type": {
													"description": "Specifies the type of destination.",
													"enum": [
														"r2"
													],
													"type": "string"
												}
											},
											"required": [
												"type",
												"format",
												"batch",
												"compression",
												"path"
											],
											"type": "object"
										},
										"endpoint": {
											"description": "Indicates the endpoint URL to send traffic.",
											"example": "https://123f8a8258064ed892a347f173372359.pipelines.cloudflare.com",
											"type": "string"
										},
										"id": {
											"description": "Specifies the pipeline identifier.",
											"example": "123f8a8258064ed892a347f173372359",
											"type": "string"
										},
										"name": {
											"description": "Defines the name of the pipeline.",
											"example": "sample_pipeline",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"source": {
											"items": {
												"discriminator": {
													"mapping": {
														"binding": "#/components/schemas/cloudflare-pipelines_workers_pipelines_binding_source",
														"http": "#/components/schemas/cloudflare-pipelines_workers_pipelines_http_source"
													},
													"propertyName": "type"
												},
												"oneOf": [
													{
														"deprecated": true,
														"description": "[DEPRECATED] HTTP source configuration. Use the new streams API instead.",
														"properties": {
															"authentication": {
																"description": "Specifies whether authentication is required to send to this pipeline via HTTP.",
																"type": "boolean"
															},
															"cors": {
																"properties": {
																	"origins": {
																		"description": "Specifies allowed origins to allow Cross Origin HTTP Requests.",
																		"example": [
																			"*"
																		],
																		"items": {
																			"anyOf": [
																				{
																					"type": "string"
																				},
																				{
																					"type": "string"
																				}
																			]
																		},
																		"maxItems": 5,
																		"type": "array"
																	}
																},
																"type": "object"
															},
															"format": {
																"description": "Specifies the format of source data.",
																"enum": [
																	"json"
																],
																"type": "string"
															},
															"type": {
																"type": "string"
															}
														},
														"required": [
															"type",
															"format"
														],
														"type": "object"
													},
													{
														"deprecated": true,
														"description": "[DEPRECATED] Worker binding source configuration. Use the new streams API instead.",
														"properties": {
															"format": {
																"description": "Specifies the format of source data.",
																"enum": [
																	"json"
																],
																"type": "string"
															},
															"type": {
																"type": "string"
															}
														},
														"required": [
															"type",
															"format"
														],
														"type": "object"
													}
												]
											},
											"minItems": 1,
											"type": "array"
										},
										"version": {
											"description": "Indicates the version number of last saved configuration.",
											"example": 2,
											"type": "number"
										}
									},
									"required": [
										"name",
										"source",
										"destination",
										"id",
										"version",
										"endpoint"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "[DEPRECATED] Describes the configuration of a pipeline."
			},
			"404": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"type": "number"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object"
									},
									"type": "array"
								},
								"results": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"allOf": [
										{
											"description": "Indicates whether the API call was successful.",
											"example": true,
											"type": "boolean"
										}
									],
									"example": false
								}
							},
							"required": [
								"success",
								"results",
								"errors"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates that the pipeline was not found."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "[DEPRECATED] Get Pipeline",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/v1/pipelines": {
		"description": "List/Filter Pipelines in Account.",
		"operationId": "getV4AccountsByAccount_idPipelinesV1Pipelines",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"type": "number"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"items": {
										"properties": {
											"created_at": {
												"type": "string"
											},
											"id": {
												"description": "Indicates a unique identifier for this pipeline.",
												"example": "01234567890123457689012345678901",
												"type": "string"
											},
											"modified_at": {
												"type": "string"
											},
											"name": {
												"description": "Indicates the name of the Pipeline.",
												"example": "my_pipeline",
												"maxLength": 128,
												"minLength": 1,
												"type": "string"
											},
											"sql": {
												"description": "Specifies SQL for the Pipeline processing flow.",
												"example": "insert into sink select * from source;",
												"type": "string"
											},
											"status": {
												"description": "Indicates the current status of the Pipeline.",
												"type": "string"
											}
										},
										"required": [
											"id",
											"name",
											"created_at",
											"modified_at",
											"sql",
											"status"
										],
										"type": "object"
									},
									"type": "array"
								},
								"result_info": {
									"properties": {
										"count": {
											"description": "Indicates the number of items on current page.",
											"example": 1,
											"type": "number"
										},
										"page": {
											"description": "Indicates the current page number.",
											"example": 0,
											"type": "number"
										},
										"per_page": {
											"description": "Indicates the number of items per page.",
											"example": 10,
											"type": "number"
										},
										"total_count": {
											"description": "Indicates the total number of items.",
											"example": 1,
											"type": "number"
										}
									},
									"required": [
										"count",
										"page",
										"per_page",
										"total_count"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result",
								"result_info"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully listed Pipelines."
			},
			"4XX": {
				"description": "Indicates an error in listing Pipelines."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Pipelines",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/v1/pipelines/{pipeline_id}": {
		"description": "Get Pipelines Details.",
		"operationId": "getV4AccountsByAccount_idPipelinesV1PipelinesByPipeline_id",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "pipeline_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the pipeline.",
					"example": "043e105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"created_at": {
											"type": "string"
										},
										"id": {
											"description": "Indicates a unique identifier for this pipeline.",
											"example": "01234567890123457689012345678901",
											"type": "string"
										},
										"modified_at": {
											"type": "string"
										},
										"name": {
											"description": "Indicates the name of the Pipeline.",
											"example": "my_pipeline",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"sql": {
											"description": "Specifies SQL for the Pipeline processing flow.",
											"example": "insert into sink select * from source;",
											"type": "string"
										},
										"status": {
											"description": "Indicates the current status of the Pipeline.",
											"type": "string"
										}
									},
									"required": [
										"id",
										"name",
										"created_at",
										"modified_at",
										"sql",
										"status"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully retrieved Pipeline."
			},
			"4XX": {
				"description": "Indicates an error in retrieving Pipelines."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Pipeline Details",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/v1/sinks": {
		"description": "List/Filter Sinks in Account.",
		"operationId": "getV4AccountsByAccount_idPipelinesV1Sinks",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "pipelineId",
				"schema": {
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"type": "number"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"items": {
										"properties": {
											"config": {
												"description": "Defines the configuration of the R2 Sink.",
												"oneOf": [
													{
														"additionalProperties": false,
														"properties": {
															"account_id": {
																"description": "Cloudflare Account ID for the bucket",
																"title": "Account ID",
																"type": "string"
															},
															"bucket": {
																"description": "R2 Bucket to write to",
																"title": "Bucket",
																"type": "string"
															},
															"credentials": {
																"additionalProperties": false,
																"properties": {
																	"access_key_id": {
																		"description": "Cloudflare Account ID for the bucket",
																		"format": "var-str",
																		"title": "Access Key ID",
																		"type": "string"
																	},
																	"secret_access_key": {
																		"description": "Cloudflare Account ID for the bucket",
																		"format": "var-str",
																		"title": "Access Key ID",
																		"type": "string"
																	}
																},
																"required": [
																	"access_key_id",
																	"secret_access_key"
																],
																"title": "R2 Credentials",
																"type": "object"
															},
															"file_naming": {
																"additionalProperties": false,
																"description": "Controls filename prefix/suffix and strategy.",
																"properties": {
																	"prefix": {
																		"description": "The prefix to use in file name. i.e prefix-<uuid>.parquet",
																		"title": "Filename Prefix",
																		"type": "string"
																	},
																	"strategy": {
																		"description": "Filename generation strategy.",
																		"enum": [
																			"serial",
																			"uuid",
																			"uuid_v7",
																			"ulid"
																		],
																		"title": "Filename Strategy",
																		"type": "string"
																	},
																	"suffix": {
																		"description": "This will overwrite the default file suffix. i.e .parquet, use with caution",
																		"title": "Filename Suffix",
																		"type": "string"
																	}
																},
																"title": "File Naming",
																"type": "object"
															},
															"jurisdiction": {
																"description": "Jurisdiction this bucket is hosted in",
																"title": "Jurisdiction",
																"type": "string"
															},
															"partitioning": {
																"additionalProperties": false,
																"description": "Data-layout partitioning for sinks.",
																"properties": {
																	"time_pattern": {
																		"description": "The pattern of the date string",
																		"example": "year=%Y/month=%m/day=%d/hour=%H",
																		"title": "Time Partition Pattern",
																		"type": "string"
																	}
																},
																"title": "Partitioning Configuration",
																"type": "object"
															},
															"path": {
																"description": "Subpath within the bucket to write to",
																"title": "Path",
																"type": "string"
															},
															"rolling_policy": {
																"additionalProperties": false,
																"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
																"properties": {
																	"file_size_bytes": {
																		"description": "Files will be rolled after reaching this number of bytes",
																		"format": "uint64",
																		"minimum": 0,
																		"title": "File Size",
																		"type": "integer"
																	},
																	"inactivity_seconds": {
																		"description": "Number of seconds of inactivity to wait before rolling over to a new file",
																		"format": "uint64",
																		"minimum": 1,
																		"title": "Inactivity Seconds",
																		"type": "integer"
																	},
																	"interval_seconds": {
																		"description": "Number of seconds to wait before rolling over to a new file",
																		"format": "uint64",
																		"minimum": 1,
																		"title": "Interval Seconds",
																		"type": "integer"
																	}
																},
																"title": "File Rolling Policy",
																"type": "object"
															}
														},
														"required": [
															"account_id",
															"bucket",
															"credentials"
														],
														"title": "R2 Sink",
														"type": "object"
													},
													{
														"additionalProperties": false,
														"description": "R2 Data Catalog Sink",
														"properties": {
															"account_id": {
																"description": "Cloudflare Account ID",
																"example": "6791973bbe876d621f9e557f891e90b3",
																"format": "uri",
																"type": "string"
															},
															"bucket": {
																"description": "The R2 Bucket that hosts this catalog",
																"example": "my-bucket",
																"type": "string"
															},
															"namespace": {
																"description": "Table namespace",
																"title": "Namespace",
																"type": "string"
															},
															"rolling_policy": {
																"additionalProperties": false,
																"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
																"properties": {
																	"file_size_bytes": {
																		"description": "Files will be rolled after reaching this number of bytes",
																		"format": "uint64",
																		"minimum": 0,
																		"title": "File Size",
																		"type": "integer"
																	},
																	"inactivity_seconds": {
																		"description": "Number of seconds of inactivity to wait before rolling over to a new file",
																		"format": "uint64",
																		"minimum": 1,
																		"title": "Inactivity Seconds",
																		"type": "integer"
																	},
																	"interval_seconds": {
																		"description": "Number of seconds to wait before rolling over to a new file",
																		"format": "uint64",
																		"minimum": 1,
																		"title": "Interval Seconds",
																		"type": "integer"
																	}
																},
																"title": "File Rolling Policy",
																"type": "object"
															},
															"table_name": {
																"description": "Table name",
																"title": "Table Name",
																"type": "string"
															},
															"token": {
																"description": "Authentication token",
																"example": "\"asdfkj2h34kjhkj\"",
																"format": "var-str",
																"type": "string"
															}
														},
														"required": [
															"account_id",
															"bucket",
															"token",
															"table_name"
														],
														"title": "R2DataCatalogSinkTable",
														"type": "object"
													}
												]
											},
											"created_at": {
												"format": "date-time",
												"type": "string"
											},
											"format": {
												"discriminator": {
													"propertyName": "type"
												},
												"oneOf": [
													{
														"allOf": [
															{
																"properties": {
																	"decimal_encoding": {
																		"enum": [
																			"number",
																			"string",
																			"bytes"
																		],
																		"type": "string"
																	},
																	"timestamp_format": {
																		"enum": [
																			"rfc3339",
																			"unix_millis"
																		],
																		"type": "string"
																	},
																	"unstructured": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"json"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Json"
													},
													{
														"allOf": [
															{
																"properties": {
																	"compression": {
																		"enum": [
																			"uncompressed",
																			"snappy",
																			"gzip",
																			"zstd",
																			"lz4"
																		],
																		"type": "string"
																	},
																	"row_group_bytes": {
																		"format": "int64",
																		"minimum": 0,
																		"nullable": true,
																		"type": "integer"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"parquet"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Parquet"
													}
												]
											},
											"id": {
												"description": "Indicates a unique identifier for this sink.",
												"example": "01234567890123457689012345678901",
												"type": "string"
											},
											"modified_at": {
												"format": "date-time",
												"type": "string"
											},
											"name": {
												"description": "Defines the name of the Sink.",
												"example": "my_sink",
												"maxLength": 128,
												"minLength": 1,
												"type": "string"
											},
											"schema": {
												"properties": {
													"fields": {
														"items": {
															"allOf": [
																{
																	"discriminator": {
																		"propertyName": "type"
																	},
																	"oneOf": [
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"int32"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Int32",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"int64"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Int64",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"float32"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Float32",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"float64"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Float64",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"bool"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Bool",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"string"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "String",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"binary"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Binary",
																			"type": "object"
																		},
																		{
																			"allOf": [
																				{
																					"properties": {
																						"unit": {
																							"enum": [
																								"second",
																								"millisecond",
																								"microsecond",
																								"nanosecond"
																							],
																							"type": "string"
																						}
																					},
																					"type": "object"
																				},
																				{
																					"properties": {
																						"type": {
																							"enum": [
																								"timestamp"
																							],
																							"type": "string"
																						}
																					},
																					"required": [
																						"type"
																					],
																					"type": "object"
																				}
																			],
																			"title": "Timestamp"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"json"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Json",
																			"type": "object"
																		},
																		{
																			"allOf": [
																				{
																					"properties": {
																						"fields": {
																							"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/sinks.responses.200.content.application/json.schema.properties.result.items.properties.schema.properties.fields.items]",
																							"type": "array"
																						},
																						"name": {
																							"nullable": true,
																							"type": "string"
																						}
																					},
																					"required": [
																						"fields"
																					],
																					"type": "object"
																				},
																				{
																					"properties": {
																						"type": {
																							"enum": [
																								"struct"
																							],
																							"type": "string"
																						}
																					},
																					"required": [
																						"type"
																					],
																					"type": "object"
																				}
																			],
																			"title": "Struct"
																		},
																		{
																			"allOf": [
																				{
																					"properties": {
																						"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/sinks.responses.200.content.application/json.schema.properties.result.items.properties.schema.properties.fields.items]"
																					},
																					"required": [
																						"items"
																					],
																					"type": "object"
																				},
																				{
																					"properties": {
																						"type": {
																							"enum": [
																								"list"
																							],
																							"type": "string"
																						}
																					},
																					"required": [
																						"type"
																					],
																					"type": "object"
																				}
																			],
																			"title": "List"
																		}
																	]
																},
																{
																	"properties": {
																		"metadata_key": {
																			"nullable": true,
																			"type": "string"
																		},
																		"name": {
																			"type": "string"
																		},
																		"required": {
																			"type": "boolean"
																		},
																		"sql_name": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"name"
																	],
																	"type": "object"
																}
															]
														},
														"type": "array"
													},
													"format": {
														"allOf": [
															{
																"discriminator": {
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"allOf": [
																			{
																				"properties": {
																					"decimal_encoding": {
																						"enum": [
																							"number",
																							"string",
																							"bytes"
																						],
																						"type": "string"
																					},
																					"timestamp_format": {
																						"enum": [
																							"rfc3339",
																							"unix_millis"
																						],
																						"type": "string"
																					},
																					"unstructured": {
																						"type": "boolean"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"json"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Json"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"compression": {
																						"enum": [
																							"uncompressed",
																							"snappy",
																							"gzip",
																							"zstd",
																							"lz4"
																						],
																						"type": "string"
																					},
																					"row_group_bytes": {
																						"format": "int64",
																						"minimum": 0,
																						"nullable": true,
																						"type": "integer"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"parquet"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Parquet"
																	}
																]
															}
														]
													},
													"inferred": {
														"nullable": true,
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"type": {
												"description": "Specifies the type of sink.",
												"enum": [
													"r2",
													"r2_data_catalog"
												],
												"example": "r2",
												"type": "string"
											}
										},
										"required": [
											"id",
											"name",
											"created_at",
											"modified_at",
											"type"
										],
										"type": "object"
									},
									"type": "array"
								},
								"result_info": {
									"properties": {
										"count": {
											"description": "Indicates the number of items on current page.",
											"example": 1,
											"type": "number"
										},
										"page": {
											"description": "Indicates the current page number.",
											"example": 0,
											"type": "number"
										},
										"per_page": {
											"description": "Indicates the number of items per page.",
											"example": 10,
											"type": "number"
										},
										"total_count": {
											"description": "Indicates the total number of items.",
											"example": 1,
											"type": "number"
										}
									},
									"required": [
										"count",
										"page",
										"per_page",
										"total_count"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result",
								"result_info"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates successfully listed Sinks."
			},
			"4XX": {
				"description": "Indicates an error in listing Sinks."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Sinks",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/v1/sinks/{sink_id}": {
		"description": "Get Sink Details.",
		"operationId": "getV4AccountsByAccount_idPipelinesV1SinksBySink_id",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "sink_id",
				"required": true,
				"schema": {
					"description": "Specifies the publid ID of the sink.",
					"example": "0223105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"config": {
											"description": "Defines the configuration of the R2 Sink.",
											"oneOf": [
												{
													"additionalProperties": false,
													"properties": {
														"account_id": {
															"description": "Cloudflare Account ID for the bucket",
															"title": "Account ID",
															"type": "string"
														},
														"bucket": {
															"description": "R2 Bucket to write to",
															"title": "Bucket",
															"type": "string"
														},
														"credentials": {
															"additionalProperties": false,
															"properties": {
																"access_key_id": {
																	"description": "Cloudflare Account ID for the bucket",
																	"format": "var-str",
																	"title": "Access Key ID",
																	"type": "string"
																},
																"secret_access_key": {
																	"description": "Cloudflare Account ID for the bucket",
																	"format": "var-str",
																	"title": "Access Key ID",
																	"type": "string"
																}
															},
															"required": [
																"access_key_id",
																"secret_access_key"
															],
															"title": "R2 Credentials",
															"type": "object"
														},
														"file_naming": {
															"additionalProperties": false,
															"description": "Controls filename prefix/suffix and strategy.",
															"properties": {
																"prefix": {
																	"description": "The prefix to use in file name. i.e prefix-<uuid>.parquet",
																	"title": "Filename Prefix",
																	"type": "string"
																},
																"strategy": {
																	"description": "Filename generation strategy.",
																	"enum": [
																		"serial",
																		"uuid",
																		"uuid_v7",
																		"ulid"
																	],
																	"title": "Filename Strategy",
																	"type": "string"
																},
																"suffix": {
																	"description": "This will overwrite the default file suffix. i.e .parquet, use with caution",
																	"title": "Filename Suffix",
																	"type": "string"
																}
															},
															"title": "File Naming",
															"type": "object"
														},
														"jurisdiction": {
															"description": "Jurisdiction this bucket is hosted in",
															"title": "Jurisdiction",
															"type": "string"
														},
														"partitioning": {
															"additionalProperties": false,
															"description": "Data-layout partitioning for sinks.",
															"properties": {
																"time_pattern": {
																	"description": "The pattern of the date string",
																	"example": "year=%Y/month=%m/day=%d/hour=%H",
																	"title": "Time Partition Pattern",
																	"type": "string"
																}
															},
															"title": "Partitioning Configuration",
															"type": "object"
														},
														"path": {
															"description": "Subpath within the bucket to write to",
															"title": "Path",
															"type": "string"
														},
														"rolling_policy": {
															"additionalProperties": false,
															"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
															"properties": {
																"file_size_bytes": {
																	"description": "Files will be rolled after reaching this number of bytes",
																	"format": "uint64",
																	"minimum": 0,
																	"title": "File Size",
																	"type": "integer"
																},
																"inactivity_seconds": {
																	"description": "Number of seconds of inactivity to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Inactivity Seconds",
																	"type": "integer"
																},
																"interval_seconds": {
																	"description": "Number of seconds to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Interval Seconds",
																	"type": "integer"
																}
															},
															"title": "File Rolling Policy",
															"type": "object"
														}
													},
													"required": [
														"account_id",
														"bucket",
														"credentials"
													],
													"title": "R2 Sink",
													"type": "object"
												},
												{
													"additionalProperties": false,
													"description": "R2 Data Catalog Sink",
													"properties": {
														"account_id": {
															"description": "Cloudflare Account ID",
															"example": "6791973bbe876d621f9e557f891e90b3",
															"format": "uri",
															"type": "string"
														},
														"bucket": {
															"description": "The R2 Bucket that hosts this catalog",
															"example": "my-bucket",
															"type": "string"
														},
														"namespace": {
															"description": "Table namespace",
															"title": "Namespace",
															"type": "string"
														},
														"rolling_policy": {
															"additionalProperties": false,
															"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
															"properties": {
																"file_size_bytes": {
																	"description": "Files will be rolled after reaching this number of bytes",
																	"format": "uint64",
																	"minimum": 0,
																	"title": "File Size",
																	"type": "integer"
																},
																"inactivity_seconds": {
																	"description": "Number of seconds of inactivity to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Inactivity Seconds",
																	"type": "integer"
																},
																"interval_seconds": {
																	"description": "Number of seconds to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Interval Seconds",
																	"type": "integer"
																}
															},
															"title": "File Rolling Policy",
															"type": "object"
														},
														"table_name": {
															"description": "Table name",
															"title": "Table Name",
															"type": "string"
														},
														"token": {
															"description": "Authentication token",
															"example": "\"asdfkj2h34kjhkj\"",
															"format": "var-str",
															"type": "string"
														}
													},
													"required": [
														"account_id",
														"bucket",
														"token",
														"table_name"
													],
													"title": "R2DataCatalogSinkTable",
													"type": "object"
												}
											]
										},
										"created_at": {
											"format": "date-time",
											"type": "string"
										},
										"format": {
											"discriminator": {
												"propertyName": "type"
											},
											"oneOf": [
												{
													"allOf": [
														{
															"properties": {
																"decimal_encoding": {
																	"enum": [
																		"number",
																		"string",
																		"bytes"
																	],
																	"type": "string"
																},
																"timestamp_format": {
																	"enum": [
																		"rfc3339",
																		"unix_millis"
																	],
																	"type": "string"
																},
																"unstructured": {
																	"type": "boolean"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Json"
												},
												{
													"allOf": [
														{
															"properties": {
																"compression": {
																	"enum": [
																		"uncompressed",
																		"snappy",
																		"gzip",
																		"zstd",
																		"lz4"
																	],
																	"type": "string"
																},
																"row_group_bytes": {
																	"format": "int64",
																	"minimum": 0,
																	"nullable": true,
																	"type": "integer"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"parquet"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Parquet"
												}
											]
										},
										"id": {
											"description": "Indicates a unique identifier for this sink.",
											"example": "01234567890123457689012345678901",
											"type": "string"
										},
										"modified_at": {
											"format": "date-time",
											"type": "string"
										},
										"name": {
											"description": "Defines the name of the Sink.",
											"example": "my_sink",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"schema": {
											"properties": {
												"fields": {
													"items": {
														"allOf": [
															{
																"discriminator": {
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"bool"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Bool",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"string"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "String",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"binary"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Binary",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"unit": {
																						"enum": [
																							"second",
																							"millisecond",
																							"microsecond",
																							"nanosecond"
																						],
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"timestamp"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Timestamp"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Json",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"fields": {
																						"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/sinks/{sink_id}.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]",
																						"type": "array"
																					},
																					"name": {
																						"nullable": true,
																						"type": "string"
																					}
																				},
																				"required": [
																					"fields"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"struct"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Struct"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/sinks/{sink_id}.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]"
																				},
																				"required": [
																					"items"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"list"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "List"
																	}
																]
															},
															{
																"properties": {
																	"metadata_key": {
																		"nullable": true,
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"required": {
																		"type": "boolean"
																	},
																	"sql_name": {
																		"type": "string"
																	}
																},
																"required": [
																	"name"
																],
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"format": {
													"allOf": [
														{
															"discriminator": {
																"propertyName": "type"
															},
															"oneOf": [
																{
																	"allOf": [
																		{
																			"properties": {
																				"decimal_encoding": {
																					"enum": [
																						"number",
																						"string",
																						"bytes"
																					],
																					"type": "string"
																				},
																				"timestamp_format": {
																					"enum": [
																						"rfc3339",
																						"unix_millis"
																					],
																					"type": "string"
																				},
																				"unstructured": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"json"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Json"
																},
																{
																	"allOf": [
																		{
																			"properties": {
																				"compression": {
																					"enum": [
																						"uncompressed",
																						"snappy",
																						"gzip",
																						"zstd",
																						"lz4"
																					],
																					"type": "string"
																				},
																				"row_group_bytes": {
																					"format": "int64",
																					"minimum": 0,
																					"nullable": true,
																					"type": "integer"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"parquet"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Parquet"
																}
															]
														}
													]
												},
												"inferred": {
													"nullable": true,
													"type": "boolean"
												}
											},
											"type": "object"
										},
										"type": {
											"description": "Specifies the type of sink.",
											"enum": [
												"r2",
												"r2_data_catalog"
											],
											"example": "r2",
											"type": "string"
										}
									},
									"required": [
										"id",
										"name",
										"created_at",
										"modified_at",
										"type"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates that Sink was retrieved."
			},
			"4XX": {
				"description": "Indicates an error in listing Sinks."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Sink Details",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/v1/streams": {
		"description": "List/Filter Streams in Account.",
		"operationId": "getV4AccountsByAccount_idPipelinesV1Streams",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "pipelineId",
				"schema": {
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"type": "number"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"items": {
										"properties": {
											"created_at": {
												"format": "date-time",
												"type": "string"
											},
											"endpoint": {
												"description": "Indicates the endpoint URL of this stream.",
												"example": "https://01234567890123457689012345678901.ingest.cloudflare.com/v1",
												"format": "uri",
												"type": "string"
											},
											"format": {
												"discriminator": {
													"propertyName": "type"
												},
												"oneOf": [
													{
														"allOf": [
															{
																"properties": {
																	"decimal_encoding": {
																		"enum": [
																			"number",
																			"string",
																			"bytes"
																		],
																		"type": "string"
																	},
																	"timestamp_format": {
																		"enum": [
																			"rfc3339",
																			"unix_millis"
																		],
																		"type": "string"
																	},
																	"unstructured": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"json"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Json"
													},
													{
														"allOf": [
															{
																"properties": {
																	"compression": {
																		"enum": [
																			"uncompressed",
																			"snappy",
																			"gzip",
																			"zstd",
																			"lz4"
																		],
																		"type": "string"
																	},
																	"row_group_bytes": {
																		"format": "int64",
																		"minimum": 0,
																		"nullable": true,
																		"type": "integer"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"parquet"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Parquet"
													}
												]
											},
											"http": {
												"properties": {
													"authentication": {
														"type": "boolean"
													},
													"cors": {
														"description": "Specifies the CORS options for the HTTP endpoint.",
														"example": {},
														"properties": {
															"origins": {
																"items": {
																	"anyOf": [
																		{
																			"type": "string"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"maxItems": 5,
																"type": "array"
															}
														},
														"type": "object"
													},
													"enabled": {
														"type": "boolean"
													}
												},
												"required": [
													"enabled",
													"authentication"
												],
												"type": "object"
											},
											"id": {
												"description": "Indicates a unique identifier for this stream.",
												"example": "01234567890123457689012345678901",
												"type": "string"
											},
											"modified_at": {
												"format": "date-time",
												"type": "string"
											},
											"name": {
												"description": "Indicates the name of the Stream.",
												"example": "my_stream",
												"maxLength": 128,
												"minLength": 1,
												"type": "string"
											},
											"schema": {
												"properties": {
													"fields": {
														"items": {
															"allOf": [
																{
																	"discriminator": {
																		"propertyName": "type"
																	},
																	"oneOf": [
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"int32"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Int32",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"int64"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Int64",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"float32"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Float32",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"float64"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Float64",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"bool"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Bool",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"string"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "String",
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"binary"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Binary",
																			"type": "object"
																		},
																		{
																			"allOf": [
																				{
																					"properties": {
																						"unit": {
																							"enum": [
																								"second",
																								"millisecond",
																								"microsecond",
																								"nanosecond"
																							],
																							"type": "string"
																						}
																					},
																					"type": "object"
																				},
																				{
																					"properties": {
																						"type": {
																							"enum": [
																								"timestamp"
																							],
																							"type": "string"
																						}
																					},
																					"required": [
																						"type"
																					],
																					"type": "object"
																				}
																			],
																			"title": "Timestamp"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"json"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"title": "Json",
																			"type": "object"
																		},
																		{
																			"allOf": [
																				{
																					"properties": {
																						"fields": {
																							"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/streams.responses.200.content.application/json.schema.properties.result.items.properties.schema.properties.fields.items]",
																							"type": "array"
																						},
																						"name": {
																							"nullable": true,
																							"type": "string"
																						}
																					},
																					"required": [
																						"fields"
																					],
																					"type": "object"
																				},
																				{
																					"properties": {
																						"type": {
																							"enum": [
																								"struct"
																							],
																							"type": "string"
																						}
																					},
																					"required": [
																						"type"
																					],
																					"type": "object"
																				}
																			],
																			"title": "Struct"
																		},
																		{
																			"allOf": [
																				{
																					"properties": {
																						"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/streams.responses.200.content.application/json.schema.properties.result.items.properties.schema.properties.fields.items]"
																					},
																					"required": [
																						"items"
																					],
																					"type": "object"
																				},
																				{
																					"properties": {
																						"type": {
																							"enum": [
																								"list"
																							],
																							"type": "string"
																						}
																					},
																					"required": [
																						"type"
																					],
																					"type": "object"
																				}
																			],
																			"title": "List"
																		}
																	]
																},
																{
																	"properties": {
																		"metadata_key": {
																			"nullable": true,
																			"type": "string"
																		},
																		"name": {
																			"type": "string"
																		},
																		"required": {
																			"type": "boolean"
																		},
																		"sql_name": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"name"
																	],
																	"type": "object"
																}
															]
														},
														"type": "array"
													},
													"format": {
														"allOf": [
															{
																"discriminator": {
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"allOf": [
																			{
																				"properties": {
																					"decimal_encoding": {
																						"enum": [
																							"number",
																							"string",
																							"bytes"
																						],
																						"type": "string"
																					},
																					"timestamp_format": {
																						"enum": [
																							"rfc3339",
																							"unix_millis"
																						],
																						"type": "string"
																					},
																					"unstructured": {
																						"type": "boolean"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"json"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Json"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"compression": {
																						"enum": [
																							"uncompressed",
																							"snappy",
																							"gzip",
																							"zstd",
																							"lz4"
																						],
																						"type": "string"
																					},
																					"row_group_bytes": {
																						"format": "int64",
																						"minimum": 0,
																						"nullable": true,
																						"type": "integer"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"parquet"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Parquet"
																	}
																]
															}
														]
													},
													"inferred": {
														"nullable": true,
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"version": {
												"description": "Indicates the current version of this stream.",
												"example": 3,
												"type": "integer"
											},
											"worker_binding": {
												"properties": {
													"enabled": {
														"type": "boolean"
													}
												},
												"required": [
													"enabled"
												],
												"type": "object"
											}
										},
										"required": [
											"id",
											"name",
											"version",
											"created_at",
											"modified_at",
											"endpoint",
											"http",
											"worker_binding"
										],
										"type": "object"
									},
									"type": "array"
								},
								"result_info": {
									"properties": {
										"count": {
											"description": "Indicates the number of items on current page.",
											"example": 1,
											"type": "number"
										},
										"page": {
											"description": "Indicates the current page number.",
											"example": 0,
											"type": "number"
										},
										"per_page": {
											"description": "Indicates the number of items per page.",
											"example": 10,
											"type": "number"
										},
										"total_count": {
											"description": "Indicates the total number of items.",
											"example": 1,
											"type": "number"
										}
									},
									"required": [
										"count",
										"page",
										"per_page",
										"total_count"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result",
								"result_info"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully created Stream."
			},
			"4XX": {
				"description": "Indicates an error in listing Streams."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Streams",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /accounts/{account_id}/pipelines/v1/streams/{stream_id}": {
		"description": "Get Stream Details.",
		"operationId": "getV4AccountsByAccount_idPipelinesV1StreamsByStream_id",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "stream_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the stream.",
					"example": "033e105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"created_at": {
											"format": "date-time",
											"type": "string"
										},
										"endpoint": {
											"description": "Indicates the endpoint URL of this stream.",
											"example": "https://01234567890123457689012345678901.ingest.cloudflare.com/v1",
											"format": "uri",
											"type": "string"
										},
										"format": {
											"discriminator": {
												"propertyName": "type"
											},
											"oneOf": [
												{
													"allOf": [
														{
															"properties": {
																"decimal_encoding": {
																	"enum": [
																		"number",
																		"string",
																		"bytes"
																	],
																	"type": "string"
																},
																"timestamp_format": {
																	"enum": [
																		"rfc3339",
																		"unix_millis"
																	],
																	"type": "string"
																},
																"unstructured": {
																	"type": "boolean"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Json"
												},
												{
													"allOf": [
														{
															"properties": {
																"compression": {
																	"enum": [
																		"uncompressed",
																		"snappy",
																		"gzip",
																		"zstd",
																		"lz4"
																	],
																	"type": "string"
																},
																"row_group_bytes": {
																	"format": "int64",
																	"minimum": 0,
																	"nullable": true,
																	"type": "integer"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"parquet"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Parquet"
												}
											]
										},
										"http": {
											"properties": {
												"authentication": {
													"type": "boolean"
												},
												"cors": {
													"description": "Specifies the CORS options for the HTTP endpoint.",
													"example": {},
													"properties": {
														"origins": {
															"items": {
																"anyOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "string"
																	}
																]
															},
															"maxItems": 5,
															"type": "array"
														}
													},
													"type": "object"
												},
												"enabled": {
													"type": "boolean"
												}
											},
											"required": [
												"enabled",
												"authentication"
											],
											"type": "object"
										},
										"id": {
											"description": "Indicates a unique identifier for this stream.",
											"example": "01234567890123457689012345678901",
											"type": "string"
										},
										"modified_at": {
											"format": "date-time",
											"type": "string"
										},
										"name": {
											"description": "Indicates the name of the Stream.",
											"example": "my_stream",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"schema": {
											"properties": {
												"fields": {
													"items": {
														"allOf": [
															{
																"discriminator": {
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"bool"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Bool",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"string"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "String",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"binary"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Binary",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"unit": {
																						"enum": [
																							"second",
																							"millisecond",
																							"microsecond",
																							"nanosecond"
																						],
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"timestamp"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Timestamp"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Json",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"fields": {
																						"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/streams/{stream_id}.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]",
																						"type": "array"
																					},
																					"name": {
																						"nullable": true,
																						"type": "string"
																					}
																				},
																				"required": [
																					"fields"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"struct"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Struct"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"items": "[Circular ~.GET /accounts/{account_id}/pipelines/v1/streams/{stream_id}.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]"
																				},
																				"required": [
																					"items"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"list"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "List"
																	}
																]
															},
															{
																"properties": {
																	"metadata_key": {
																		"nullable": true,
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"required": {
																		"type": "boolean"
																	},
																	"sql_name": {
																		"type": "string"
																	}
																},
																"required": [
																	"name"
																],
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"format": {
													"allOf": [
														{
															"discriminator": {
																"propertyName": "type"
															},
															"oneOf": [
																{
																	"allOf": [
																		{
																			"properties": {
																				"decimal_encoding": {
																					"enum": [
																						"number",
																						"string",
																						"bytes"
																					],
																					"type": "string"
																				},
																				"timestamp_format": {
																					"enum": [
																						"rfc3339",
																						"unix_millis"
																					],
																					"type": "string"
																				},
																				"unstructured": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"json"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Json"
																},
																{
																	"allOf": [
																		{
																			"properties": {
																				"compression": {
																					"enum": [
																						"uncompressed",
																						"snappy",
																						"gzip",
																						"zstd",
																						"lz4"
																					],
																					"type": "string"
																				},
																				"row_group_bytes": {
																					"format": "int64",
																					"minimum": 0,
																					"nullable": true,
																					"type": "integer"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"parquet"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Parquet"
																}
															]
														}
													]
												},
												"inferred": {
													"nullable": true,
													"type": "boolean"
												}
											},
											"type": "object"
										},
										"version": {
											"description": "Indicates the current version of this stream.",
											"example": 3,
											"type": "integer"
										},
										"worker_binding": {
											"properties": {
												"enabled": {
													"type": "boolean"
												}
											},
											"required": [
												"enabled"
											],
											"type": "object"
										}
									},
									"required": [
										"id",
										"name",
										"version",
										"created_at",
										"modified_at",
										"endpoint",
										"http",
										"worker_binding"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully retrieved Stream."
			},
			"4XX": {
				"description": "Indicates an error in retrieving Stream."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Stream Details",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write",
			"Pipelines Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"POST /accounts/{account_id}/pipelines": {
		"deprecated": true,
		"description": "[DEPRECATED] Create a new pipeline. Use the new /pipelines/v1/pipelines endpoint instead.",
		"operationId": "postV4AccountsByAccount_idPipelines_deprecated",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"destination": {
								"properties": {
									"batch": {
										"properties": {
											"max_bytes": {
												"default": 100000000,
												"description": "Specifies rough maximum size of files.",
												"maximum": 100000000,
												"minimum": 1000,
												"type": "integer"
											},
											"max_duration_s": {
												"default": 300,
												"description": "Specifies duration to wait to aggregate batches files.",
												"maximum": 300,
												"minimum": 0.25,
												"type": "number"
											},
											"max_rows": {
												"default": 10000000,
												"description": "Specifies rough maximum number of rows per file.",
												"maximum": 10000000,
												"minimum": 100,
												"type": "integer"
											}
										},
										"type": "object"
									},
									"compression": {
										"properties": {
											"type": {
												"default": "gzip",
												"description": "Specifies the desired compression algorithm and format.",
												"enum": [
													"none",
													"gzip",
													"deflate"
												],
												"example": "gzip",
												"type": "string"
											}
										},
										"type": "object"
									},
									"credentials": {
										"properties": {
											"access_key_id": {
												"description": "Specifies the R2 Bucket Access Key Id.",
												"example": "<access key id>",
												"type": "string"
											},
											"endpoint": {
												"description": "Specifies the R2 Endpoint.",
												"example": "https://123f8a8258064ed892a347f173372359.r2.cloudflarestorage.com",
												"type": "string"
											},
											"secret_access_key": {
												"description": "Specifies the R2 Bucket Secret Access Key.",
												"example": "<secret key>",
												"type": "string"
											}
										},
										"required": [
											"endpoint",
											"access_key_id",
											"secret_access_key"
										],
										"type": "object"
									},
									"format": {
										"description": "Specifies the format of data to deliver.",
										"enum": [
											"json"
										],
										"type": "string"
									},
									"path": {
										"example": {
											"bucket": "bucket",
											"prefix": "base"
										},
										"properties": {
											"bucket": {
												"description": "Specifies the R2 Bucket to store files.",
												"example": "bucket",
												"type": "string"
											},
											"filename": {
												"allOf": [
													{
														"type": "string"
													},
													{
														"type": "string"
													}
												],
												"description": "Specifies the name pattern to for individual data files.",
												"example": "${slug}${extension}"
											},
											"filepath": {
												"description": "Specifies the name pattern for directory.",
												"example": "${date}/${hour}",
												"type": "string"
											},
											"prefix": {
												"description": "Specifies the base directory within the bucket.",
												"example": "base",
												"type": "string"
											}
										},
										"required": [
											"bucket"
										],
										"type": "object"
									},
									"type": {
										"description": "Specifies the type of destination.",
										"enum": [
											"r2"
										],
										"type": "string"
									}
								},
								"required": [
									"type",
									"format",
									"batch",
									"compression",
									"path",
									"credentials"
								],
								"type": "object"
							},
							"name": {
								"description": "Defines the name of the pipeline.",
								"example": "sample_pipeline",
								"maxLength": 128,
								"minLength": 1,
								"type": "string"
							},
							"source": {
								"items": {
									"discriminator": {
										"mapping": {
											"binding": "#/components/schemas/cloudflare-pipelines_workers_pipelines_binding_source",
											"http": "#/components/schemas/cloudflare-pipelines_workers_pipelines_http_source"
										},
										"propertyName": "type"
									},
									"oneOf": [
										{
											"deprecated": true,
											"description": "[DEPRECATED] HTTP source configuration. Use the new streams API instead.",
											"properties": {
												"authentication": {
													"description": "Specifies whether authentication is required to send to this pipeline via HTTP.",
													"type": "boolean"
												},
												"cors": {
													"properties": {
														"origins": {
															"description": "Specifies allowed origins to allow Cross Origin HTTP Requests.",
															"example": [
																"*"
															],
															"items": {
																"anyOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "string"
																	}
																]
															},
															"maxItems": 5,
															"type": "array"
														}
													},
													"type": "object"
												},
												"format": {
													"description": "Specifies the format of source data.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"type": {
													"type": "string"
												}
											},
											"required": [
												"type",
												"format"
											],
											"type": "object"
										},
										{
											"deprecated": true,
											"description": "[DEPRECATED] Worker binding source configuration. Use the new streams API instead.",
											"properties": {
												"format": {
													"description": "Specifies the format of source data.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"type": {
													"type": "string"
												}
											},
											"required": [
												"type",
												"format"
											],
											"type": "object"
										}
									]
								},
								"minItems": 1,
								"type": "array"
							}
						},
						"required": [
							"name",
							"source",
							"destination"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"deprecated": true,
									"description": "[DEPRECATED] Describes the configuration of a pipeline. Use the new streams/sinks/pipelines API instead.",
									"properties": {
										"destination": {
											"properties": {
												"batch": {
													"properties": {
														"max_bytes": {
															"default": 100000000,
															"description": "Specifies rough maximum size of files.",
															"maximum": 100000000,
															"minimum": 1000,
															"type": "integer"
														},
														"max_duration_s": {
															"default": 300,
															"description": "Specifies duration to wait to aggregate batches files.",
															"maximum": 300,
															"minimum": 0.25,
															"type": "number"
														},
														"max_rows": {
															"default": 10000000,
															"description": "Specifies rough maximum number of rows per file.",
															"maximum": 10000000,
															"minimum": 100,
															"type": "integer"
														}
													},
													"required": [
														"max_rows",
														"max_bytes",
														"max_duration_s"
													],
													"type": "object"
												},
												"compression": {
													"properties": {
														"type": {
															"default": "gzip",
															"description": "Specifies the desired compression algorithm and format.",
															"enum": [
																"none",
																"gzip",
																"deflate"
															],
															"example": "gzip",
															"type": "string"
														}
													},
													"required": [
														"type"
													],
													"type": "object"
												},
												"format": {
													"description": "Specifies the format of data to deliver.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"path": {
													"example": {
														"bucket": "bucket",
														"prefix": "base"
													},
													"properties": {
														"bucket": {
															"description": "Specifies the R2 Bucket to store files.",
															"example": "bucket",
															"type": "string"
														},
														"filename": {
															"allOf": [
																{
																	"type": "string"
																},
																{
																	"type": "string"
																}
															],
															"description": "Specifies the name pattern to for individual data files.",
															"example": "${slug}${extension}"
														},
														"filepath": {
															"description": "Specifies the name pattern for directory.",
															"example": "${date}/${hour}",
															"type": "string"
														},
														"prefix": {
															"description": "Specifies the base directory within the bucket.",
															"example": "base",
															"type": "string"
														}
													},
													"required": [
														"bucket"
													],
													"type": "object"
												},
												"type": {
													"description": "Specifies the type of destination.",
													"enum": [
														"r2"
													],
													"type": "string"
												}
											},
											"required": [
												"type",
												"format",
												"batch",
												"compression",
												"path"
											],
											"type": "object"
										},
										"endpoint": {
											"description": "Indicates the endpoint URL to send traffic.",
											"example": "https://123f8a8258064ed892a347f173372359.pipelines.cloudflare.com",
											"type": "string"
										},
										"id": {
											"description": "Specifies the pipeline identifier.",
											"example": "123f8a8258064ed892a347f173372359",
											"type": "string"
										},
										"name": {
											"description": "Defines the name of the pipeline.",
											"example": "sample_pipeline",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"source": {
											"items": {
												"discriminator": {
													"mapping": {
														"binding": "#/components/schemas/cloudflare-pipelines_workers_pipelines_binding_source",
														"http": "#/components/schemas/cloudflare-pipelines_workers_pipelines_http_source"
													},
													"propertyName": "type"
												},
												"oneOf": [
													{
														"deprecated": true,
														"description": "[DEPRECATED] HTTP source configuration. Use the new streams API instead.",
														"properties": {
															"authentication": {
																"description": "Specifies whether authentication is required to send to this pipeline via HTTP.",
																"type": "boolean"
															},
															"cors": {
																"properties": {
																	"origins": {
																		"description": "Specifies allowed origins to allow Cross Origin HTTP Requests.",
																		"example": [
																			"*"
																		],
																		"items": {
																			"anyOf": [
																				{
																					"type": "string"
																				},
																				{
																					"type": "string"
																				}
																			]
																		},
																		"maxItems": 5,
																		"type": "array"
																	}
																},
																"type": "object"
															},
															"format": {
																"description": "Specifies the format of source data.",
																"enum": [
																	"json"
																],
																"type": "string"
															},
															"type": {
																"type": "string"
															}
														},
														"required": [
															"type",
															"format"
														],
														"type": "object"
													},
													{
														"deprecated": true,
														"description": "[DEPRECATED] Worker binding source configuration. Use the new streams API instead.",
														"properties": {
															"format": {
																"description": "Specifies the format of source data.",
																"enum": [
																	"json"
																],
																"type": "string"
															},
															"type": {
																"type": "string"
															}
														},
														"required": [
															"type",
															"format"
														],
														"type": "object"
													}
												]
											},
											"minItems": 1,
											"type": "array"
										},
										"version": {
											"description": "Indicates the version number of last saved configuration.",
											"example": 2,
											"type": "number"
										}
									},
									"required": [
										"name",
										"source",
										"destination",
										"id",
										"version",
										"endpoint"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "[DEPRECATED] Indicates a successfully created pipeline. Use /pipelines/v1/pipelines instead."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"type": "number"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object"
									},
									"type": "array"
								},
								"results": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"allOf": [
										{
											"description": "Indicates whether the API call was successful.",
											"example": true,
											"type": "boolean"
										}
									],
									"example": false
								}
							},
							"required": [
								"success",
								"results",
								"errors"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates an error in creating a pipeline."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "[DEPRECATED] Create Pipeline",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"POST /accounts/{account_id}/pipelines/v1/pipelines": {
		"description": "Create a new Pipeline.",
		"operationId": "postV4AccountsByAccount_idPipelinesV1Pipelines",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"name": {
								"description": "Specifies the name of the Pipeline.",
								"example": "my_pipeline",
								"maxLength": 128,
								"minLength": 1,
								"type": "string"
							},
							"sql": {
								"description": "Specifies SQL for the Pipeline processing flow.",
								"example": "insert into sink select * from source;",
								"type": "string"
							}
						},
						"required": [
							"name",
							"sql"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"created_at": {
											"type": "string"
										},
										"id": {
											"description": "Indicates a unique identifier for this pipeline.",
											"example": "01234567890123457689012345678901",
											"type": "string"
										},
										"modified_at": {
											"type": "string"
										},
										"name": {
											"description": "Indicates the name of the Pipeline.",
											"example": "my_pipeline",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"sql": {
											"description": "Specifies SQL for the Pipeline processing flow.",
											"example": "insert into sink select * from source;",
											"type": "string"
										},
										"status": {
											"description": "Indicates the current status of the Pipeline.",
											"type": "string"
										}
									},
									"required": [
										"id",
										"name",
										"created_at",
										"modified_at",
										"sql",
										"status"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully created Pipeline."
			},
			"4XX": {
				"description": "Indicates an error in creating a Pipeline."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create Pipeline",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"POST /accounts/{account_id}/pipelines/v1/sinks": {
		"description": "Create a new Sink.",
		"operationId": "postV4AccountsByAccount_idPipelinesV1Sinks",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"config": {
								"description": "Defines the configuration of the R2 Sink.",
								"oneOf": [
									{
										"additionalProperties": false,
										"properties": {
											"account_id": {
												"description": "Cloudflare Account ID for the bucket",
												"title": "Account ID",
												"type": "string"
											},
											"bucket": {
												"description": "R2 Bucket to write to",
												"title": "Bucket",
												"type": "string"
											},
											"credentials": {
												"additionalProperties": false,
												"properties": {
													"access_key_id": {
														"description": "Cloudflare Account ID for the bucket",
														"format": "var-str",
														"title": "Access Key ID",
														"type": "string"
													},
													"secret_access_key": {
														"description": "Cloudflare Account ID for the bucket",
														"format": "var-str",
														"title": "Access Key ID",
														"type": "string"
													}
												},
												"required": [
													"access_key_id",
													"secret_access_key"
												],
												"title": "R2 Credentials",
												"type": "object"
											},
											"file_naming": {
												"additionalProperties": false,
												"description": "Controls filename prefix/suffix and strategy.",
												"properties": {
													"prefix": {
														"description": "The prefix to use in file name. i.e prefix-<uuid>.parquet",
														"title": "Filename Prefix",
														"type": "string"
													},
													"strategy": {
														"description": "Filename generation strategy.",
														"enum": [
															"serial",
															"uuid",
															"uuid_v7",
															"ulid"
														],
														"title": "Filename Strategy",
														"type": "string"
													},
													"suffix": {
														"description": "This will overwrite the default file suffix. i.e .parquet, use with caution",
														"title": "Filename Suffix",
														"type": "string"
													}
												},
												"title": "File Naming",
												"type": "object"
											},
											"jurisdiction": {
												"description": "Jurisdiction this bucket is hosted in",
												"title": "Jurisdiction",
												"type": "string"
											},
											"partitioning": {
												"additionalProperties": false,
												"description": "Data-layout partitioning for sinks.",
												"properties": {
													"time_pattern": {
														"description": "The pattern of the date string",
														"example": "year=%Y/month=%m/day=%d/hour=%H",
														"title": "Time Partition Pattern",
														"type": "string"
													}
												},
												"title": "Partitioning Configuration",
												"type": "object"
											},
											"path": {
												"description": "Subpath within the bucket to write to",
												"title": "Path",
												"type": "string"
											},
											"rolling_policy": {
												"additionalProperties": false,
												"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
												"properties": {
													"file_size_bytes": {
														"description": "Files will be rolled after reaching this number of bytes",
														"format": "uint64",
														"minimum": 0,
														"title": "File Size",
														"type": "integer"
													},
													"inactivity_seconds": {
														"description": "Number of seconds of inactivity to wait before rolling over to a new file",
														"format": "uint64",
														"minimum": 1,
														"title": "Inactivity Seconds",
														"type": "integer"
													},
													"interval_seconds": {
														"description": "Number of seconds to wait before rolling over to a new file",
														"format": "uint64",
														"minimum": 1,
														"title": "Interval Seconds",
														"type": "integer"
													}
												},
												"title": "File Rolling Policy",
												"type": "object"
											}
										},
										"required": [
											"account_id",
											"bucket",
											"credentials"
										],
										"title": "R2 Sink",
										"type": "object"
									},
									{
										"additionalProperties": false,
										"description": "R2 Data Catalog Sink",
										"properties": {
											"account_id": {
												"description": "Cloudflare Account ID",
												"example": "6791973bbe876d621f9e557f891e90b3",
												"format": "uri",
												"type": "string"
											},
											"bucket": {
												"description": "The R2 Bucket that hosts this catalog",
												"example": "my-bucket",
												"type": "string"
											},
											"namespace": {
												"description": "Table namespace",
												"title": "Namespace",
												"type": "string"
											},
											"rolling_policy": {
												"additionalProperties": false,
												"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
												"properties": {
													"file_size_bytes": {
														"description": "Files will be rolled after reaching this number of bytes",
														"format": "uint64",
														"minimum": 0,
														"title": "File Size",
														"type": "integer"
													},
													"inactivity_seconds": {
														"description": "Number of seconds of inactivity to wait before rolling over to a new file",
														"format": "uint64",
														"minimum": 1,
														"title": "Inactivity Seconds",
														"type": "integer"
													},
													"interval_seconds": {
														"description": "Number of seconds to wait before rolling over to a new file",
														"format": "uint64",
														"minimum": 1,
														"title": "Interval Seconds",
														"type": "integer"
													}
												},
												"title": "File Rolling Policy",
												"type": "object"
											},
											"table_name": {
												"description": "Table name",
												"title": "Table Name",
												"type": "string"
											},
											"token": {
												"description": "Authentication token",
												"example": "\"asdfkj2h34kjhkj\"",
												"format": "var-str",
												"type": "string"
											}
										},
										"required": [
											"account_id",
											"bucket",
											"token",
											"table_name"
										],
										"title": "R2DataCatalogSinkTable",
										"type": "object"
									}
								]
							},
							"format": {
								"discriminator": {
									"propertyName": "type"
								},
								"oneOf": [
									{
										"allOf": [
											{
												"properties": {
													"decimal_encoding": {
														"enum": [
															"number",
															"string",
															"bytes"
														],
														"type": "string"
													},
													"timestamp_format": {
														"enum": [
															"rfc3339",
															"unix_millis"
														],
														"type": "string"
													},
													"unstructured": {
														"type": "boolean"
													}
												},
												"type": "object"
											},
											{
												"properties": {
													"type": {
														"enum": [
															"json"
														],
														"type": "string"
													}
												},
												"required": [
													"type"
												],
												"type": "object"
											}
										],
										"title": "Json"
									},
									{
										"allOf": [
											{
												"properties": {
													"compression": {
														"enum": [
															"uncompressed",
															"snappy",
															"gzip",
															"zstd",
															"lz4"
														],
														"type": "string"
													},
													"row_group_bytes": {
														"format": "int64",
														"minimum": 0,
														"nullable": true,
														"type": "integer"
													}
												},
												"type": "object"
											},
											{
												"properties": {
													"type": {
														"enum": [
															"parquet"
														],
														"type": "string"
													}
												},
												"required": [
													"type"
												],
												"type": "object"
											}
										],
										"title": "Parquet"
									}
								]
							},
							"name": {
								"description": "Defines the name of the Sink.",
								"example": "my_sink",
								"maxLength": 128,
								"minLength": 1,
								"type": "string"
							},
							"schema": {
								"properties": {
									"fields": {
										"items": {
											"allOf": [
												{
													"discriminator": {
														"propertyName": "type"
													},
													"oneOf": [
														{
															"properties": {
																"type": {
																	"enum": [
																		"int32"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Int32",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"int64"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Int64",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"float32"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Float32",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"float64"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Float64",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"bool"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Bool",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"string"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "String",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"binary"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Binary",
															"type": "object"
														},
														{
															"allOf": [
																{
																	"properties": {
																		"unit": {
																			"enum": [
																				"second",
																				"millisecond",
																				"microsecond",
																				"nanosecond"
																			],
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"type": {
																			"enum": [
																				"timestamp"
																			],
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"type": "object"
																}
															],
															"title": "Timestamp"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Json",
															"type": "object"
														},
														{
															"allOf": [
																{
																	"properties": {
																		"fields": {
																			"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/sinks.requestBody.content.application/json.schema.properties.schema.properties.fields.items]",
																			"type": "array"
																		},
																		"name": {
																			"nullable": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"fields"
																	],
																	"type": "object"
																},
																{
																	"properties": {
																		"type": {
																			"enum": [
																				"struct"
																			],
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"type": "object"
																}
															],
															"title": "Struct"
														},
														{
															"allOf": [
																{
																	"properties": {
																		"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/sinks.requestBody.content.application/json.schema.properties.schema.properties.fields.items]"
																	},
																	"required": [
																		"items"
																	],
																	"type": "object"
																},
																{
																	"properties": {
																		"type": {
																			"enum": [
																				"list"
																			],
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"type": "object"
																}
															],
															"title": "List"
														}
													]
												},
												{
													"properties": {
														"metadata_key": {
															"nullable": true,
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"required": {
															"type": "boolean"
														},
														"sql_name": {
															"type": "string"
														}
													},
													"required": [
														"name"
													],
													"type": "object"
												}
											]
										},
										"type": "array"
									},
									"format": {
										"allOf": [
											{
												"discriminator": {
													"propertyName": "type"
												},
												"oneOf": [
													{
														"allOf": [
															{
																"properties": {
																	"decimal_encoding": {
																		"enum": [
																			"number",
																			"string",
																			"bytes"
																		],
																		"type": "string"
																	},
																	"timestamp_format": {
																		"enum": [
																			"rfc3339",
																			"unix_millis"
																		],
																		"type": "string"
																	},
																	"unstructured": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"json"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Json"
													},
													{
														"allOf": [
															{
																"properties": {
																	"compression": {
																		"enum": [
																			"uncompressed",
																			"snappy",
																			"gzip",
																			"zstd",
																			"lz4"
																		],
																		"type": "string"
																	},
																	"row_group_bytes": {
																		"format": "int64",
																		"minimum": 0,
																		"nullable": true,
																		"type": "integer"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"parquet"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Parquet"
													}
												]
											}
										]
									},
									"inferred": {
										"nullable": true,
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"type": {
								"description": "Specifies the type of sink.",
								"enum": [
									"r2",
									"r2_data_catalog"
								],
								"example": "r2",
								"type": "string"
							}
						},
						"required": [
							"name",
							"type"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"config": {
											"oneOf": [
												{
													"additionalProperties": false,
													"properties": {
														"account_id": {
															"description": "Cloudflare Account ID for the bucket",
															"title": "Account ID",
															"type": "string"
														},
														"bucket": {
															"description": "R2 Bucket to write to",
															"title": "Bucket",
															"type": "string"
														},
														"credentials": {
															"additionalProperties": false,
															"properties": {
																"access_key_id": {
																	"description": "Cloudflare Account ID for the bucket",
																	"format": "var-str",
																	"title": "Access Key ID",
																	"type": "string"
																},
																"secret_access_key": {
																	"description": "Cloudflare Account ID for the bucket",
																	"format": "var-str",
																	"title": "Access Key ID",
																	"type": "string"
																}
															},
															"required": [
																"access_key_id",
																"secret_access_key"
															],
															"title": "R2 Credentials",
															"type": "object"
														},
														"file_naming": {
															"additionalProperties": false,
															"description": "Controls filename prefix/suffix and strategy.",
															"properties": {
																"prefix": {
																	"description": "The prefix to use in file name. i.e prefix-<uuid>.parquet",
																	"title": "Filename Prefix",
																	"type": "string"
																},
																"strategy": {
																	"description": "Filename generation strategy.",
																	"enum": [
																		"serial",
																		"uuid",
																		"uuid_v7",
																		"ulid"
																	],
																	"title": "Filename Strategy",
																	"type": "string"
																},
																"suffix": {
																	"description": "This will overwrite the default file suffix. i.e .parquet, use with caution",
																	"title": "Filename Suffix",
																	"type": "string"
																}
															},
															"title": "File Naming",
															"type": "object"
														},
														"jurisdiction": {
															"description": "Jurisdiction this bucket is hosted in",
															"title": "Jurisdiction",
															"type": "string"
														},
														"partitioning": {
															"additionalProperties": false,
															"description": "Data-layout partitioning for sinks.",
															"properties": {
																"time_pattern": {
																	"description": "The pattern of the date string",
																	"example": "year=%Y/month=%m/day=%d/hour=%H",
																	"title": "Time Partition Pattern",
																	"type": "string"
																}
															},
															"title": "Partitioning Configuration",
															"type": "object"
														},
														"path": {
															"description": "Subpath within the bucket to write to",
															"title": "Path",
															"type": "string"
														},
														"rolling_policy": {
															"additionalProperties": false,
															"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
															"properties": {
																"file_size_bytes": {
																	"description": "Files will be rolled after reaching this number of bytes",
																	"format": "uint64",
																	"minimum": 0,
																	"title": "File Size",
																	"type": "integer"
																},
																"inactivity_seconds": {
																	"description": "Number of seconds of inactivity to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Inactivity Seconds",
																	"type": "integer"
																},
																"interval_seconds": {
																	"description": "Number of seconds to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Interval Seconds",
																	"type": "integer"
																}
															},
															"title": "File Rolling Policy",
															"type": "object"
														}
													},
													"required": [
														"account_id",
														"bucket",
														"credentials"
													],
													"title": "R2 Sink",
													"type": "object"
												},
												{
													"additionalProperties": false,
													"description": "R2 Data Catalog Sink",
													"properties": {
														"account_id": {
															"description": "Cloudflare Account ID",
															"example": "6791973bbe876d621f9e557f891e90b3",
															"format": "uri",
															"type": "string"
														},
														"bucket": {
															"description": "The R2 Bucket that hosts this catalog",
															"example": "my-bucket",
															"type": "string"
														},
														"namespace": {
															"description": "Table namespace",
															"title": "Namespace",
															"type": "string"
														},
														"rolling_policy": {
															"additionalProperties": false,
															"description": "Rolling policy for file sinks (when & why to close a file and open a new one).",
															"properties": {
																"file_size_bytes": {
																	"description": "Files will be rolled after reaching this number of bytes",
																	"format": "uint64",
																	"minimum": 0,
																	"title": "File Size",
																	"type": "integer"
																},
																"inactivity_seconds": {
																	"description": "Number of seconds of inactivity to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Inactivity Seconds",
																	"type": "integer"
																},
																"interval_seconds": {
																	"description": "Number of seconds to wait before rolling over to a new file",
																	"format": "uint64",
																	"minimum": 1,
																	"title": "Interval Seconds",
																	"type": "integer"
																}
															},
															"title": "File Rolling Policy",
															"type": "object"
														},
														"table_name": {
															"description": "Table name",
															"title": "Table Name",
															"type": "string"
														},
														"token": {
															"description": "Authentication token",
															"example": "\"asdfkj2h34kjhkj\"",
															"format": "var-str",
															"type": "string"
														}
													},
													"required": [
														"account_id",
														"bucket",
														"token",
														"table_name"
													],
													"title": "R2DataCatalogSinkTable",
													"type": "object"
												}
											]
										},
										"created_at": {
											"format": "date-time",
											"type": "string"
										},
										"format": {
											"discriminator": {
												"propertyName": "type"
											},
											"oneOf": [
												{
													"allOf": [
														{
															"properties": {
																"decimal_encoding": {
																	"enum": [
																		"number",
																		"string",
																		"bytes"
																	],
																	"type": "string"
																},
																"timestamp_format": {
																	"enum": [
																		"rfc3339",
																		"unix_millis"
																	],
																	"type": "string"
																},
																"unstructured": {
																	"type": "boolean"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Json"
												},
												{
													"allOf": [
														{
															"properties": {
																"compression": {
																	"enum": [
																		"uncompressed",
																		"snappy",
																		"gzip",
																		"zstd",
																		"lz4"
																	],
																	"type": "string"
																},
																"row_group_bytes": {
																	"format": "int64",
																	"minimum": 0,
																	"nullable": true,
																	"type": "integer"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"parquet"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Parquet"
												}
											]
										},
										"id": {
											"description": "Indicates a unique identifier for this sink.",
											"example": "01234567890123457689012345678901",
											"type": "string"
										},
										"modified_at": {
											"format": "date-time",
											"type": "string"
										},
										"name": {
											"description": "Defines the name of the Sink.",
											"example": "my_sink",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"schema": {
											"properties": {
												"fields": {
													"items": {
														"allOf": [
															{
																"discriminator": {
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"bool"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Bool",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"string"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "String",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"binary"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Binary",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"unit": {
																						"enum": [
																							"second",
																							"millisecond",
																							"microsecond",
																							"nanosecond"
																						],
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"timestamp"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Timestamp"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Json",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"fields": {
																						"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/sinks.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]",
																						"type": "array"
																					},
																					"name": {
																						"nullable": true,
																						"type": "string"
																					}
																				},
																				"required": [
																					"fields"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"struct"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Struct"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/sinks.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]"
																				},
																				"required": [
																					"items"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"list"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "List"
																	}
																]
															},
															{
																"properties": {
																	"metadata_key": {
																		"nullable": true,
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"required": {
																		"type": "boolean"
																	},
																	"sql_name": {
																		"type": "string"
																	}
																},
																"required": [
																	"name"
																],
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"format": {
													"allOf": [
														{
															"discriminator": {
																"propertyName": "type"
															},
															"oneOf": [
																{
																	"allOf": [
																		{
																			"properties": {
																				"decimal_encoding": {
																					"enum": [
																						"number",
																						"string",
																						"bytes"
																					],
																					"type": "string"
																				},
																				"timestamp_format": {
																					"enum": [
																						"rfc3339",
																						"unix_millis"
																					],
																					"type": "string"
																				},
																				"unstructured": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"json"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Json"
																},
																{
																	"allOf": [
																		{
																			"properties": {
																				"compression": {
																					"enum": [
																						"uncompressed",
																						"snappy",
																						"gzip",
																						"zstd",
																						"lz4"
																					],
																					"type": "string"
																				},
																				"row_group_bytes": {
																					"format": "int64",
																					"minimum": 0,
																					"nullable": true,
																					"type": "integer"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"parquet"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Parquet"
																}
															]
														}
													]
												},
												"inferred": {
													"nullable": true,
													"type": "boolean"
												}
											},
											"type": "object"
										},
										"type": {
											"description": "Specifies the type of sink.",
											"enum": [
												"r2",
												"r2_data_catalog"
											],
											"example": "r2",
											"type": "string"
										}
									},
									"required": [
										"id",
										"name",
										"created_at",
										"modified_at",
										"type"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully created Sink."
			},
			"4XX": {
				"description": "Indicates an error in creating a Sink."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create Sink",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"POST /accounts/{account_id}/pipelines/v1/streams": {
		"description": "Create a new Stream.",
		"operationId": "postV4AccountsByAccount_idPipelinesV1Streams",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"format": {
								"discriminator": {
									"propertyName": "type"
								},
								"oneOf": [
									{
										"allOf": [
											{
												"properties": {
													"decimal_encoding": {
														"enum": [
															"number",
															"string",
															"bytes"
														],
														"type": "string"
													},
													"timestamp_format": {
														"enum": [
															"rfc3339",
															"unix_millis"
														],
														"type": "string"
													},
													"unstructured": {
														"type": "boolean"
													}
												},
												"type": "object"
											},
											{
												"properties": {
													"type": {
														"enum": [
															"json"
														],
														"type": "string"
													}
												},
												"required": [
													"type"
												],
												"type": "object"
											}
										],
										"title": "Json"
									},
									{
										"allOf": [
											{
												"properties": {
													"compression": {
														"enum": [
															"uncompressed",
															"snappy",
															"gzip",
															"zstd",
															"lz4"
														],
														"type": "string"
													},
													"row_group_bytes": {
														"format": "int64",
														"minimum": 0,
														"nullable": true,
														"type": "integer"
													}
												},
												"type": "object"
											},
											{
												"properties": {
													"type": {
														"enum": [
															"parquet"
														],
														"type": "string"
													}
												},
												"required": [
													"type"
												],
												"type": "object"
											}
										],
										"title": "Parquet"
									}
								]
							},
							"http": {
								"default": {
									"authentication": false,
									"enabled": true
								},
								"properties": {
									"authentication": {
										"type": "boolean"
									},
									"cors": {
										"description": "Specifies the CORS options for the HTTP endpoint.",
										"example": {},
										"properties": {
											"origins": {
												"items": {
													"anyOf": [
														{
															"type": "string"
														},
														{
															"type": "string"
														}
													]
												},
												"maxItems": 5,
												"type": "array"
											}
										},
										"type": "object"
									},
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"enabled",
									"authentication"
								],
								"type": "object"
							},
							"name": {
								"description": "Specifies the name of the Stream.",
								"example": "my_stream",
								"maxLength": 128,
								"minLength": 1,
								"type": "string"
							},
							"schema": {
								"properties": {
									"fields": {
										"items": {
											"allOf": [
												{
													"discriminator": {
														"propertyName": "type"
													},
													"oneOf": [
														{
															"properties": {
																"type": {
																	"enum": [
																		"int32"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Int32",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"int64"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Int64",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"float32"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Float32",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"float64"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Float64",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"bool"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Bool",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"string"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "String",
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"binary"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Binary",
															"type": "object"
														},
														{
															"allOf": [
																{
																	"properties": {
																		"unit": {
																			"enum": [
																				"second",
																				"millisecond",
																				"microsecond",
																				"nanosecond"
																			],
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"type": {
																			"enum": [
																				"timestamp"
																			],
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"type": "object"
																}
															],
															"title": "Timestamp"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"title": "Json",
															"type": "object"
														},
														{
															"allOf": [
																{
																	"properties": {
																		"fields": {
																			"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/streams.requestBody.content.application/json.schema.properties.schema.properties.fields.items]",
																			"type": "array"
																		},
																		"name": {
																			"nullable": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"fields"
																	],
																	"type": "object"
																},
																{
																	"properties": {
																		"type": {
																			"enum": [
																				"struct"
																			],
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"type": "object"
																}
															],
															"title": "Struct"
														},
														{
															"allOf": [
																{
																	"properties": {
																		"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/streams.requestBody.content.application/json.schema.properties.schema.properties.fields.items]"
																	},
																	"required": [
																		"items"
																	],
																	"type": "object"
																},
																{
																	"properties": {
																		"type": {
																			"enum": [
																				"list"
																			],
																			"type": "string"
																		}
																	},
																	"required": [
																		"type"
																	],
																	"type": "object"
																}
															],
															"title": "List"
														}
													]
												},
												{
													"properties": {
														"metadata_key": {
															"nullable": true,
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"required": {
															"type": "boolean"
														},
														"sql_name": {
															"type": "string"
														}
													},
													"required": [
														"name"
													],
													"type": "object"
												}
											]
										},
										"type": "array"
									},
									"format": {
										"allOf": [
											{
												"discriminator": {
													"propertyName": "type"
												},
												"oneOf": [
													{
														"allOf": [
															{
																"properties": {
																	"decimal_encoding": {
																		"enum": [
																			"number",
																			"string",
																			"bytes"
																		],
																		"type": "string"
																	},
																	"timestamp_format": {
																		"enum": [
																			"rfc3339",
																			"unix_millis"
																		],
																		"type": "string"
																	},
																	"unstructured": {
																		"type": "boolean"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"json"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Json"
													},
													{
														"allOf": [
															{
																"properties": {
																	"compression": {
																		"enum": [
																			"uncompressed",
																			"snappy",
																			"gzip",
																			"zstd",
																			"lz4"
																		],
																		"type": "string"
																	},
																	"row_group_bytes": {
																		"format": "int64",
																		"minimum": 0,
																		"nullable": true,
																		"type": "integer"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"type": {
																		"enum": [
																			"parquet"
																		],
																		"type": "string"
																	}
																},
																"required": [
																	"type"
																],
																"type": "object"
															}
														],
														"title": "Parquet"
													}
												]
											}
										]
									},
									"inferred": {
										"nullable": true,
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"worker_binding": {
								"default": {
									"enabled": true
								},
								"properties": {
									"enabled": {
										"type": "boolean"
									}
								},
								"required": [
									"enabled"
								],
								"type": "object"
							}
						},
						"required": [
							"name"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"created_at": {
											"format": "date-time",
											"type": "string"
										},
										"endpoint": {
											"description": "Indicates the endpoint URL of this stream.",
											"example": "https://01234567890123457689012345678901.ingest.cloudflare.com/v1",
											"format": "uri",
											"type": "string"
										},
										"format": {
											"discriminator": {
												"propertyName": "type"
											},
											"oneOf": [
												{
													"allOf": [
														{
															"properties": {
																"decimal_encoding": {
																	"enum": [
																		"number",
																		"string",
																		"bytes"
																	],
																	"type": "string"
																},
																"timestamp_format": {
																	"enum": [
																		"rfc3339",
																		"unix_millis"
																	],
																	"type": "string"
																},
																"unstructured": {
																	"type": "boolean"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Json"
												},
												{
													"allOf": [
														{
															"properties": {
																"compression": {
																	"enum": [
																		"uncompressed",
																		"snappy",
																		"gzip",
																		"zstd",
																		"lz4"
																	],
																	"type": "string"
																},
																"row_group_bytes": {
																	"format": "int64",
																	"minimum": 0,
																	"nullable": true,
																	"type": "integer"
																}
															},
															"type": "object"
														},
														{
															"properties": {
																"type": {
																	"enum": [
																		"parquet"
																	],
																	"type": "string"
																}
															},
															"required": [
																"type"
															],
															"type": "object"
														}
													],
													"title": "Parquet"
												}
											]
										},
										"http": {
											"properties": {
												"authentication": {
													"type": "boolean"
												},
												"cors": {
													"description": "Specifies the CORS options for the HTTP endpoint.",
													"example": {},
													"properties": {
														"origins": {
															"items": {
																"anyOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "string"
																	}
																]
															},
															"maxItems": 5,
															"type": "array"
														}
													},
													"type": "object"
												},
												"enabled": {
													"type": "boolean"
												}
											},
											"required": [
												"enabled",
												"authentication"
											],
											"type": "object"
										},
										"id": {
											"description": "Indicates a unique identifier for this stream.",
											"example": "01234567890123457689012345678901",
											"type": "string"
										},
										"modified_at": {
											"format": "date-time",
											"type": "string"
										},
										"name": {
											"description": "Indicates the name of the Stream.",
											"example": "my_stream",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"schema": {
											"properties": {
												"fields": {
													"items": {
														"allOf": [
															{
																"discriminator": {
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"int64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Int64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float32"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float32",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"float64"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Float64",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"bool"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Bool",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"string"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "String",
																		"type": "object"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"binary"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Binary",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"unit": {
																						"enum": [
																							"second",
																							"millisecond",
																							"microsecond",
																							"nanosecond"
																						],
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"timestamp"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Timestamp"
																	},
																	{
																		"properties": {
																			"type": {
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"type"
																		],
																		"title": "Json",
																		"type": "object"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"fields": {
																						"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/streams.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]",
																						"type": "array"
																					},
																					"name": {
																						"nullable": true,
																						"type": "string"
																					}
																				},
																				"required": [
																					"fields"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"struct"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "Struct"
																	},
																	{
																		"allOf": [
																			{
																				"properties": {
																					"items": "[Circular ~.POST /accounts/{account_id}/pipelines/v1/streams.responses.200.content.application/json.schema.properties.result.properties.schema.properties.fields.items]"
																				},
																				"required": [
																					"items"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"type": {
																						"enum": [
																							"list"
																						],
																						"type": "string"
																					}
																				},
																				"required": [
																					"type"
																				],
																				"type": "object"
																			}
																		],
																		"title": "List"
																	}
																]
															},
															{
																"properties": {
																	"metadata_key": {
																		"nullable": true,
																		"type": "string"
																	},
																	"name": {
																		"type": "string"
																	},
																	"required": {
																		"type": "boolean"
																	},
																	"sql_name": {
																		"type": "string"
																	}
																},
																"required": [
																	"name"
																],
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"format": {
													"allOf": [
														{
															"discriminator": {
																"propertyName": "type"
															},
															"oneOf": [
																{
																	"allOf": [
																		{
																			"properties": {
																				"decimal_encoding": {
																					"enum": [
																						"number",
																						"string",
																						"bytes"
																					],
																					"type": "string"
																				},
																				"timestamp_format": {
																					"enum": [
																						"rfc3339",
																						"unix_millis"
																					],
																					"type": "string"
																				},
																				"unstructured": {
																					"type": "boolean"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"json"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Json"
																},
																{
																	"allOf": [
																		{
																			"properties": {
																				"compression": {
																					"enum": [
																						"uncompressed",
																						"snappy",
																						"gzip",
																						"zstd",
																						"lz4"
																					],
																					"type": "string"
																				},
																				"row_group_bytes": {
																					"format": "int64",
																					"minimum": 0,
																					"nullable": true,
																					"type": "integer"
																				}
																			},
																			"type": "object"
																		},
																		{
																			"properties": {
																				"type": {
																					"enum": [
																						"parquet"
																					],
																					"type": "string"
																				}
																			},
																			"required": [
																				"type"
																			],
																			"type": "object"
																		}
																	],
																	"title": "Parquet"
																}
															]
														}
													]
												},
												"inferred": {
													"nullable": true,
													"type": "boolean"
												}
											},
											"type": "object"
										},
										"version": {
											"description": "Indicates the current version of this stream.",
											"example": 3,
											"type": "integer"
										},
										"worker_binding": {
											"properties": {
												"enabled": {
													"type": "boolean"
												}
											},
											"required": [
												"enabled"
											],
											"type": "object"
										}
									},
									"required": [
										"id",
										"name",
										"version",
										"created_at",
										"modified_at",
										"endpoint",
										"http",
										"worker_binding"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates a successfully created Stream."
			},
			"4XX": {
				"description": "Indicates an error in creating a Stream."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create Stream",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"POST /accounts/{account_id}/pipelines/v1/validate_sql": {
		"description": "Validate Arroyo SQL.",
		"operationId": "postV4AccountsByAccount_idPipelinesV1Validate_sql",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"sql": {
								"description": "Specifies SQL to validate.",
								"example": "insert into sink select * from source;",
								"type": "string"
							}
						},
						"required": [
							"sql"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"graph": {
											"properties": {
												"edges": {
													"items": {
														"properties": {
															"dest_id": {
																"format": "int32",
																"minimum": 0,
																"type": "integer"
															},
															"edge_type": {
																"type": "string"
															},
															"key_type": {
																"type": "string"
															},
															"src_id": {
																"format": "int32",
																"minimum": 0,
																"type": "integer"
															},
															"value_type": {
																"type": "string"
															}
														},
														"required": [
															"src_id",
															"dest_id",
															"key_type",
															"value_type",
															"edge_type"
														],
														"type": "object"
													},
													"type": "array"
												},
												"nodes": {
													"items": {
														"properties": {
															"description": {
																"type": "string"
															},
															"node_id": {
																"format": "int32",
																"minimum": 0,
																"type": "integer"
															},
															"operator": {
																"type": "string"
															},
															"parallelism": {
																"format": "int32",
																"minimum": 0,
																"type": "integer"
															}
														},
														"required": [
															"node_id",
															"operator",
															"description",
															"parallelism"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"required": [
												"nodes",
												"edges"
											],
											"type": "object"
										},
										"tables": {
											"additionalProperties": {
												"properties": {
													"id": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"type": {
														"type": "string"
													},
													"version": {
														"type": "number"
													}
												},
												"required": [
													"id",
													"version",
													"type",
													"name"
												],
												"type": "object"
											},
											"description": "Indicates tables involved in the processing.",
											"type": "object"
										}
									},
									"required": [
										"tables"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates SQL validation success."
			},
			"4XX": {
				"description": "Indicates SQL validation failed."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Validate SQL",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"PUT /accounts/{account_id}/pipelines/{pipeline_name}": {
		"deprecated": true,
		"description": "[DEPRECATED] Update an existing pipeline. Use the new /pipelines/v1/pipelines endpoint instead.",
		"operationId": "putV4AccountsByAccount_idPipelinesByPipeline_name_deprecated",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Specifies the public ID of the account.",
					"example": "0123105f4ecef8ad9ca31a8372d0c353",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "pipeline_name",
				"required": true,
				"schema": {
					"description": "Defines the name of the pipeline.",
					"example": "sample_pipeline",
					"maxLength": 128,
					"minLength": 1,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"destination": {
								"properties": {
									"batch": {
										"properties": {
											"max_bytes": {
												"default": 100000000,
												"description": "Specifies rough maximum size of files.",
												"maximum": 100000000,
												"minimum": 1000,
												"type": "integer"
											},
											"max_duration_s": {
												"default": 300,
												"description": "Specifies duration to wait to aggregate batches files.",
												"maximum": 300,
												"minimum": 0.25,
												"type": "number"
											},
											"max_rows": {
												"default": 10000000,
												"description": "Specifies rough maximum number of rows per file.",
												"maximum": 10000000,
												"minimum": 100,
												"type": "integer"
											}
										},
										"type": "object"
									},
									"compression": {
										"properties": {
											"type": {
												"default": "gzip",
												"description": "Specifies the desired compression algorithm and format.",
												"enum": [
													"none",
													"gzip",
													"deflate"
												],
												"example": "gzip",
												"type": "string"
											}
										},
										"type": "object"
									},
									"credentials": {
										"properties": {
											"access_key_id": {
												"description": "Specifies the R2 Bucket Access Key Id.",
												"example": "<access key id>",
												"type": "string"
											},
											"endpoint": {
												"description": "Specifies the R2 Endpoint.",
												"example": "https://123f8a8258064ed892a347f173372359.r2.cloudflarestorage.com",
												"type": "string"
											},
											"secret_access_key": {
												"description": "Specifies the R2 Bucket Secret Access Key.",
												"example": "<secret key>",
												"type": "string"
											}
										},
										"required": [
											"endpoint",
											"access_key_id",
											"secret_access_key"
										],
										"type": "object"
									},
									"format": {
										"description": "Specifies the format of data to deliver.",
										"enum": [
											"json"
										],
										"type": "string"
									},
									"path": {
										"example": {
											"bucket": "bucket",
											"prefix": "base"
										},
										"properties": {
											"bucket": {
												"description": "Specifies the R2 Bucket to store files.",
												"example": "bucket",
												"type": "string"
											},
											"filename": {
												"allOf": [
													{
														"type": "string"
													},
													{
														"type": "string"
													}
												],
												"description": "Specifies the name pattern to for individual data files.",
												"example": "${slug}${extension}"
											},
											"filepath": {
												"description": "Specifies the name pattern for directory.",
												"example": "${date}/${hour}",
												"type": "string"
											},
											"prefix": {
												"description": "Specifies the base directory within the bucket.",
												"example": "base",
												"type": "string"
											}
										},
										"required": [
											"bucket"
										],
										"type": "object"
									},
									"type": {
										"description": "Specifies the type of destination.",
										"enum": [
											"r2"
										],
										"type": "string"
									}
								},
								"required": [
									"type",
									"format",
									"batch",
									"compression",
									"path"
								],
								"type": "object"
							},
							"name": {
								"description": "Defines the name of the pipeline.",
								"example": "sample_pipeline",
								"maxLength": 128,
								"minLength": 1,
								"type": "string"
							},
							"source": {
								"items": {
									"discriminator": {
										"mapping": {
											"binding": "#/components/schemas/cloudflare-pipelines_workers_pipelines_binding_source",
											"http": "#/components/schemas/cloudflare-pipelines_workers_pipelines_http_source"
										},
										"propertyName": "type"
									},
									"oneOf": [
										{
											"deprecated": true,
											"description": "[DEPRECATED] HTTP source configuration. Use the new streams API instead.",
											"properties": {
												"authentication": {
													"description": "Specifies whether authentication is required to send to this pipeline via HTTP.",
													"type": "boolean"
												},
												"cors": {
													"properties": {
														"origins": {
															"description": "Specifies allowed origins to allow Cross Origin HTTP Requests.",
															"example": [
																"*"
															],
															"items": {
																"anyOf": [
																	{
																		"type": "string"
																	},
																	{
																		"type": "string"
																	}
																]
															},
															"maxItems": 5,
															"type": "array"
														}
													},
													"type": "object"
												},
												"format": {
													"description": "Specifies the format of source data.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"type": {
													"type": "string"
												}
											},
											"required": [
												"type",
												"format"
											],
											"type": "object"
										},
										{
											"deprecated": true,
											"description": "[DEPRECATED] Worker binding source configuration. Use the new streams API instead.",
											"properties": {
												"format": {
													"description": "Specifies the format of source data.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"type": {
													"type": "string"
												}
											},
											"required": [
												"type",
												"format"
											],
											"type": "object"
										}
									]
								},
								"minItems": 1,
								"type": "array"
							}
						},
						"required": [
							"name",
							"source",
							"destination"
						],
						"type": "object"
					}
				}
			}
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"deprecated": true,
									"description": "[DEPRECATED] Describes the configuration of a pipeline. Use the new streams/sinks/pipelines API instead.",
									"properties": {
										"destination": {
											"properties": {
												"batch": {
													"properties": {
														"max_bytes": {
															"default": 100000000,
															"description": "Specifies rough maximum size of files.",
															"maximum": 100000000,
															"minimum": 1000,
															"type": "integer"
														},
														"max_duration_s": {
															"default": 300,
															"description": "Specifies duration to wait to aggregate batches files.",
															"maximum": 300,
															"minimum": 0.25,
															"type": "number"
														},
														"max_rows": {
															"default": 10000000,
															"description": "Specifies rough maximum number of rows per file.",
															"maximum": 10000000,
															"minimum": 100,
															"type": "integer"
														}
													},
													"required": [
														"max_rows",
														"max_bytes",
														"max_duration_s"
													],
													"type": "object"
												},
												"compression": {
													"properties": {
														"type": {
															"default": "gzip",
															"description": "Specifies the desired compression algorithm and format.",
															"enum": [
																"none",
																"gzip",
																"deflate"
															],
															"example": "gzip",
															"type": "string"
														}
													},
													"required": [
														"type"
													],
													"type": "object"
												},
												"format": {
													"description": "Specifies the format of data to deliver.",
													"enum": [
														"json"
													],
													"type": "string"
												},
												"path": {
													"example": {
														"bucket": "bucket",
														"prefix": "base"
													},
													"properties": {
														"bucket": {
															"description": "Specifies the R2 Bucket to store files.",
															"example": "bucket",
															"type": "string"
														},
														"filename": {
															"allOf": [
																{
																	"type": "string"
																},
																{
																	"type": "string"
																}
															],
															"description": "Specifies the name pattern to for individual data files.",
															"example": "${slug}${extension}"
														},
														"filepath": {
															"description": "Specifies the name pattern for directory.",
															"example": "${date}/${hour}",
															"type": "string"
														},
														"prefix": {
															"description": "Specifies the base directory within the bucket.",
															"example": "base",
															"type": "string"
														}
													},
													"required": [
														"bucket"
													],
													"type": "object"
												},
												"type": {
													"description": "Specifies the type of destination.",
													"enum": [
														"r2"
													],
													"type": "string"
												}
											},
											"required": [
												"type",
												"format",
												"batch",
												"compression",
												"path"
											],
											"type": "object"
										},
										"endpoint": {
											"description": "Indicates the endpoint URL to send traffic.",
											"example": "https://123f8a8258064ed892a347f173372359.pipelines.cloudflare.com",
											"type": "string"
										},
										"id": {
											"description": "Specifies the pipeline identifier.",
											"example": "123f8a8258064ed892a347f173372359",
											"type": "string"
										},
										"name": {
											"description": "Defines the name of the pipeline.",
											"example": "sample_pipeline",
											"maxLength": 128,
											"minLength": 1,
											"type": "string"
										},
										"source": {
											"items": {
												"discriminator": {
													"mapping": {
														"binding": "#/components/schemas/cloudflare-pipelines_workers_pipelines_binding_source",
														"http": "#/components/schemas/cloudflare-pipelines_workers_pipelines_http_source"
													},
													"propertyName": "type"
												},
												"oneOf": [
													{
														"deprecated": true,
														"description": "[DEPRECATED] HTTP source configuration. Use the new streams API instead.",
														"properties": {
															"authentication": {
																"description": "Specifies whether authentication is required to send to this pipeline via HTTP.",
																"type": "boolean"
															},
															"cors": {
																"properties": {
																	"origins": {
																		"description": "Specifies allowed origins to allow Cross Origin HTTP Requests.",
																		"example": [
																			"*"
																		],
																		"items": {
																			"anyOf": [
																				{
																					"type": "string"
																				},
																				{
																					"type": "string"
																				}
																			]
																		},
																		"maxItems": 5,
																		"type": "array"
																	}
																},
																"type": "object"
															},
															"format": {
																"description": "Specifies the format of source data.",
																"enum": [
																	"json"
																],
																"type": "string"
															},
															"type": {
																"type": "string"
															}
														},
														"required": [
															"type",
															"format"
														],
														"type": "object"
													},
													{
														"deprecated": true,
														"description": "[DEPRECATED] Worker binding source configuration. Use the new streams API instead.",
														"properties": {
															"format": {
																"description": "Specifies the format of source data.",
																"enum": [
																	"json"
																],
																"type": "string"
															},
															"type": {
																"type": "string"
															}
														},
														"required": [
															"type",
															"format"
														],
														"type": "object"
													}
												]
											},
											"minItems": 1,
											"type": "array"
										},
										"version": {
											"description": "Indicates the version number of last saved configuration.",
											"example": 2,
											"type": "number"
										}
									},
									"required": [
										"name",
										"source",
										"destination",
										"id",
										"version",
										"endpoint"
									],
									"type": "object"
								},
								"success": {
									"description": "Indicates whether the API call was successful.",
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "[DEPRECATED] Indicates a successfully updated pipeline."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"type": "number"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object"
									},
									"type": "array"
								},
								"results": {
									"nullable": true,
									"type": "object",
									"x-stainless-empty-object": true
								},
								"success": {
									"allOf": [
										{
											"description": "Indicates whether the API call was successful.",
											"example": true,
											"type": "boolean"
										}
									],
									"example": false
								}
							},
							"required": [
								"success",
								"results",
								"errors"
							],
							"type": "object"
						}
					}
				},
				"description": "Indicates an error updating pipeline."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "[DEPRECATED] Update Pipeline",
		"tags": [
			"workers_pipelines_other"
		],
		"x-api-token-group": [
			"Pipelines Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	}
}