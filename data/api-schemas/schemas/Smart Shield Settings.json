{
	"DELETE /zones/{zone_id}/smart_shield/healthchecks/{healthcheck_id}": {
		"description": "Delete a health check.",
		"operationId": "smart-shield-delete-health-check",
		"parameters": [
			{
				"in": "path",
				"name": "healthcheck_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"id": {
													"description": "Identifier.",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Health Check response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful.",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"oneOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"id": {
															"description": "Identifier.",
															"example": "023e105f4ecef8ad9ca31a8372d0c353",
															"maxLength": 32,
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Health Check response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Health Check",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Health Checks Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/smart_shield": {
		"description": "Retrieve Smart Shield Settings.",
		"operationId": "smart-shield-get-settings",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"description": "A consolidated object containing settings from multiple APIs for partial updates.",
													"properties": {
														"cache_reserve": {
															"properties": {
																"editable": {
																	"description": "Whether the setting is editable.",
																	"example": true,
																	"type": "boolean"
																},
																"id": {
																	"description": "The id of the Cache Reserve setting.",
																	"example": "cache_reserve",
																	"type": "string"
																},
																"value": {
																	"description": "Specifies the enablement value of Cache Reserve.",
																	"enum": [
																		"on",
																		"off"
																	],
																	"example": "off",
																	"type": "string"
																}
															}
														},
														"regional_tiered_cache": {
															"properties": {
																"editable": {
																	"description": "Whether the setting is editable.",
																	"example": true,
																	"type": "boolean"
																},
																"id": {
																	"description": "The id of the Regional Tiered Cache setting.",
																	"example": "regional_tiered_cache",
																	"type": "string"
																},
																"value": {
																	"description": "Specifies the enablement value of Cache Reserve.",
																	"enum": [
																		"on",
																		"off"
																	],
																	"example": "off",
																	"type": "string"
																}
															},
															"type": "object"
														},
														"smart_routing": {
															"properties": {
																"editable": {
																	"description": "Whether the setting is editable.",
																	"example": true,
																	"type": "boolean"
																},
																"id": {
																	"description": "The id of the Smart Routing setting.",
																	"example": "smart_routing",
																	"type": "string"
																},
																"value": {
																	"description": "Specifies the enablement value of Argo Smart Routing.",
																	"enum": [
																		"on",
																		"off"
																	],
																	"example": "off",
																	"type": "string"
																}
															},
															"type": "object"
														},
														"smart_tiered_cache": {
															"properties": {
																"editable": {
																	"description": "Whether the setting is editable.",
																	"example": true,
																	"type": "boolean"
																},
																"id": {
																	"description": "The id of the Smart Tiered Cache setting.",
																	"example": "smart_tiered_cache",
																	"type": "string"
																},
																"modified_on": {
																	"description": "The last time the setting was modified.",
																	"example": "2025-09-10T22:53:22.946098Z",
																	"type": "string"
																},
																"value": {
																	"description": "Specifies the enablement value of Tiered Cache.",
																	"enum": [
																		"on",
																		"off"
																	],
																	"example": "on",
																	"type": "string"
																}
															},
															"type": "object"
														}
													},
													"type": "object"
												},
												{
													"properties": {
														"healthchecks_count": {
															"description": "The total number of health checks associated with the zone.",
															"example": 5,
															"type": "integer"
														}
													},
													"type": "object"
												}
											],
											"description": "The full Smart Shield response from the GET and PATCH operations.",
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Smart Shield Settings response."
			},
			"500": {
				"content": {
					"application/json": {
						"examples": {
							"Invalid value": {
								"value": {
									"errors": [
										{
											"code": 1137,
											"message": "Unable to process request. Internal error."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Smart Shield Settings response failure."
			},
			"502": {
				"content": {
					"application/json": {
						"examples": {
							"Not found": {
								"value": {
									"errors": [
										{
											"code": 1016,
											"message": "Unable to retrieve smart_tiered_cache."
										},
										{
											"code": 1016,
											"message": "Unable to retrieve cache_reserve."
										},
										{
											"code": 1016,
											"message": "Unable to retrieve smart_routing."
										},
										{
											"code": 1016,
											"message": "Unable to retrieve regional_tiered_cache."
										},
										{
											"code": 1016,
											"message": "Unable to retrieve healthchecks_count."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Smart Shield Settings response failure."
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Invalid value": {
								"value": {
									"errors": [
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock smart_tiered_cache."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock argo_smart_routing."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock regional_tiered_cache."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock cache_reserve."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock healthchecks_count."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch Smart Shield Settings response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Smart Shield Settings.",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/smart_shield/cache_reserve_clear": {
		"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
		"operationId": "smart-shield-settings-get-cache-reserve-clear",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"Completed": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"end_ts": "2023-10-02T12:00:00.12345Z",
										"id": "cache_reserve_clear",
										"start_ts": "2023-10-02T10:00:00.12345Z",
										"state": "Completed"
									},
									"success": true
								}
							},
							"In-progress": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"id": "cache_reserve_clear",
										"start_ts": "2023-10-02T10:00:00.12345Z",
										"state": "In-progress"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"anyOf": [
												{
													"type": "object"
												},
												{
													"items": {},
													"type": "array"
												},
												{
													"type": "string"
												}
											]
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string",
																	"x-auditable": true
																},
																"modified_on": {
																	"description": "Last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															},
															"required": [
																"id"
															],
															"type": "object"
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"cache_reserve_clear"
																	],
																	"example": "cache_reserve_clear",
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														}
													],
													"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
													"title": "Cache Reserve Clear",
													"type": "object"
												},
												{
													"properties": {
														"end_ts": {
															"description": "The time that the latest Cache Reserve Clear operation completed.",
															"example": "2023-10-02T12:00:00.12345Z",
															"format": "date-time",
															"type": "string",
															"x-auditable": true
														},
														"start_ts": {
															"description": "The time that the latest Cache Reserve Clear operation started.",
															"example": "2023-10-02T10:00:00.12345Z",
															"format": "date-time",
															"type": "string",
															"x-auditable": true
														},
														"state": {
															"description": "The current state of the Cache Reserve Clear operation.",
															"enum": [
																"In-progress",
																"Completed"
															],
															"example": "In-progress",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"state",
														"start_ts"
													],
													"type": "object"
												}
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Get Cache Reserve Clear response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Not found": {
								"value": {
									"errors": [
										{
											"code": 1142,
											"message": "Unable to retrieve cache_reserve_clear setting value. The zone setting does not exist because you never performed a Cache Reserve Clear operation."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Cache Reserve Clear failure response."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Cache Reserve Clear",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/smart_shield/healthchecks": {
		"description": "List configured health checks.",
		"operationId": "smart-shield-list-health-checks",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"description": "Page number of paginated results.",
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"minimum": 1,
					"type": "number"
				}
			},
			{
				"description": "Maximum number of results per page. Must be a multiple of 5.",
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 25,
					"maximum": 1000,
					"minimum": 5,
					"type": "number"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"items": {},
													"nullable": true,
													"type": "array"
												},
												"result_info": {
													"properties": {
														"count": {
															"description": "Total number of results for the requested service",
															"example": 1,
															"type": "number"
														},
														"page": {
															"description": "Current page within paginated list of results",
															"example": 1,
															"type": "number"
														},
														"per_page": {
															"description": "Number of results per page of results",
															"example": 20,
															"type": "number"
														},
														"total_count": {
															"description": "Total results available without any search parameters",
															"example": 2000,
															"type": "number"
														}
													},
													"type": "object"
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"address": {
														"description": "The hostname or IP address of the origin server to run health checks on.",
														"example": "www.example.com",
														"type": "string",
														"x-auditable": true
													},
													"check_regions": {
														"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
														"example": [
															"WEU",
															"ENAM"
														],
														"items": {
															"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
															"enum": [
																"WNAM",
																"ENAM",
																"WEU",
																"EEU",
																"NSAM",
																"SSAM",
																"OC",
																"ME",
																"NAF",
																"SAF",
																"IN",
																"SEAS",
																"NEAS",
																"ALL_REGIONS"
															],
															"type": "string"
														},
														"nullable": true,
														"type": "array",
														"x-auditable": true
													},
													"consecutive_fails": {
														"default": 1,
														"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
														"type": "integer",
														"x-auditable": true
													},
													"consecutive_successes": {
														"default": 1,
														"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
														"type": "integer",
														"x-auditable": true
													},
													"created_on": {
														"example": "2014-01-01T05:20:00.12345Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"description": {
														"description": "A human-readable description of the health check.",
														"example": "Health check for www.example.com",
														"type": "string",
														"x-auditable": true
													},
													"failure_reason": {
														"description": "The current failure reason if status is unhealthy.",
														"example": "",
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"http_config": {
														"description": "Parameters specific to an HTTP or HTTPS health check.",
														"nullable": true,
														"properties": {
															"allow_insecure": {
																"default": false,
																"description": "Do not validate the certificate when the health check uses HTTPS.",
																"type": "boolean",
																"x-auditable": true
															},
															"expected_body": {
																"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
																"example": "success",
																"type": "string",
																"x-auditable": true
															},
															"expected_codes": {
																"default": "200",
																"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
																"example": [
																	"2xx",
																	"302"
																],
																"items": {
																	"type": "string"
																},
																"nullable": true,
																"type": "array",
																"x-auditable": true
															},
															"follow_redirects": {
																"default": false,
																"description": "Follow redirects if the origin returns a 3xx status code.",
																"type": "boolean",
																"x-auditable": true
															},
															"header": {
																"additionalProperties": {
																	"items": {
																		"type": "string",
																		"x-auditable": true
																	},
																	"type": "array"
																},
																"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
																"example": {
																	"Host": [
																		"example.com"
																	],
																	"X-App-ID": [
																		"abc123"
																	]
																},
																"nullable": true,
																"type": "object"
															},
															"method": {
																"default": "GET",
																"description": "The HTTP method to use for the health check.",
																"enum": [
																	"GET",
																	"HEAD"
																],
																"type": "string",
																"x-auditable": true
															},
															"path": {
																"default": "/",
																"description": "The endpoint path to health check against.",
																"example": "/health",
																"type": "string",
																"x-auditable": true
															},
															"port": {
																"default": 80,
																"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
																"type": "integer",
																"x-auditable": true
															}
														},
														"type": "object"
													},
													"id": {
														"description": "Identifier.",
														"example": "023e105f4ecef8ad9ca31a8372d0c353",
														"maxLength": 32,
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"interval": {
														"default": 60,
														"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
														"type": "integer",
														"x-auditable": true
													},
													"modified_on": {
														"example": "2014-01-01T05:20:00.12345Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"name": {
														"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
														"example": "server-1",
														"type": "string",
														"x-auditable": true
													},
													"retries": {
														"default": 2,
														"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
														"type": "integer",
														"x-auditable": true
													},
													"status": {
														"description": "The current status of the origin server according to the health check.",
														"enum": [
															"unknown",
															"healthy",
															"unhealthy",
															"suspended"
														],
														"example": "healthy",
														"readOnly": true,
														"type": "string",
														"x-auditable": true
													},
													"suspended": {
														"default": false,
														"description": "If suspended, no health checks are sent to the origin.",
														"type": "boolean",
														"x-auditable": true
													},
													"tcp_config": {
														"description": "Parameters specific to TCP health check.",
														"nullable": true,
														"properties": {
															"method": {
																"default": "connection_established",
																"description": "The TCP connection method to use for the health check.",
																"enum": [
																	"connection_established"
																],
																"type": "string",
																"x-auditable": true
															},
															"port": {
																"default": 80,
																"description": "Port number to connect to for the health check. Defaults to 80.",
																"type": "integer",
																"x-auditable": true
															}
														},
														"type": "object"
													},
													"timeout": {
														"default": 5,
														"description": "The timeout (in seconds) before marking the health check as failed.",
														"type": "integer",
														"x-auditable": true
													},
													"type": {
														"default": "HTTP",
														"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
														"example": "HTTPS",
														"type": "string",
														"x-auditable": true
													}
												},
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "List Health Checks response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful.",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"items": {},
															"nullable": true,
															"type": "array"
														},
														"result_info": {
															"properties": {
																"count": {
																	"description": "Total number of results for the requested service",
																	"example": 1,
																	"type": "number"
																},
																"page": {
																	"description": "Current page within paginated list of results",
																	"example": 1,
																	"type": "number"
																},
																"per_page": {
																	"description": "Number of results per page of results",
																	"example": 20,
																	"type": "number"
																},
																"total_count": {
																	"description": "Total results available without any search parameters",
																	"example": 2000,
																	"type": "number"
																}
															},
															"type": "object"
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"items": {
														"properties": {
															"address": {
																"description": "The hostname or IP address of the origin server to run health checks on.",
																"example": "www.example.com",
																"type": "string",
																"x-auditable": true
															},
															"check_regions": {
																"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
																"example": [
																	"WEU",
																	"ENAM"
																],
																"items": {
																	"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
																	"enum": [
																		"WNAM",
																		"ENAM",
																		"WEU",
																		"EEU",
																		"NSAM",
																		"SSAM",
																		"OC",
																		"ME",
																		"NAF",
																		"SAF",
																		"IN",
																		"SEAS",
																		"NEAS",
																		"ALL_REGIONS"
																	],
																	"type": "string"
																},
																"nullable": true,
																"type": "array",
																"x-auditable": true
															},
															"consecutive_fails": {
																"default": 1,
																"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
																"type": "integer",
																"x-auditable": true
															},
															"consecutive_successes": {
																"default": 1,
																"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
																"type": "integer",
																"x-auditable": true
															},
															"created_on": {
																"example": "2014-01-01T05:20:00.12345Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															},
															"description": {
																"description": "A human-readable description of the health check.",
																"example": "Health check for www.example.com",
																"type": "string",
																"x-auditable": true
															},
															"failure_reason": {
																"description": "The current failure reason if status is unhealthy.",
																"example": "",
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															},
															"http_config": {
																"description": "Parameters specific to an HTTP or HTTPS health check.",
																"nullable": true,
																"properties": {
																	"allow_insecure": {
																		"default": false,
																		"description": "Do not validate the certificate when the health check uses HTTPS.",
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"expected_body": {
																		"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
																		"example": "success",
																		"type": "string",
																		"x-auditable": true
																	},
																	"expected_codes": {
																		"default": "200",
																		"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
																		"example": [
																			"2xx",
																			"302"
																		],
																		"items": {
																			"type": "string"
																		},
																		"nullable": true,
																		"type": "array",
																		"x-auditable": true
																	},
																	"follow_redirects": {
																		"default": false,
																		"description": "Follow redirects if the origin returns a 3xx status code.",
																		"type": "boolean",
																		"x-auditable": true
																	},
																	"header": {
																		"additionalProperties": {
																			"items": {
																				"type": "string",
																				"x-auditable": true
																			},
																			"type": "array"
																		},
																		"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
																		"example": {
																			"Host": [
																				"example.com"
																			],
																			"X-App-ID": [
																				"abc123"
																			]
																		},
																		"nullable": true,
																		"type": "object"
																	},
																	"method": {
																		"default": "GET",
																		"description": "The HTTP method to use for the health check.",
																		"enum": [
																			"GET",
																			"HEAD"
																		],
																		"type": "string",
																		"x-auditable": true
																	},
																	"path": {
																		"default": "/",
																		"description": "The endpoint path to health check against.",
																		"example": "/health",
																		"type": "string",
																		"x-auditable": true
																	},
																	"port": {
																		"default": 80,
																		"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
																		"type": "integer",
																		"x-auditable": true
																	}
																},
																"type": "object"
															},
															"id": {
																"description": "Identifier.",
																"example": "023e105f4ecef8ad9ca31a8372d0c353",
																"maxLength": 32,
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															},
															"interval": {
																"default": 60,
																"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
																"type": "integer",
																"x-auditable": true
															},
															"modified_on": {
																"example": "2014-01-01T05:20:00.12345Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															},
															"name": {
																"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
																"example": "server-1",
																"type": "string",
																"x-auditable": true
															},
															"retries": {
																"default": 2,
																"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
																"type": "integer",
																"x-auditable": true
															},
															"status": {
																"description": "The current status of the origin server according to the health check.",
																"enum": [
																	"unknown",
																	"healthy",
																	"unhealthy",
																	"suspended"
																],
																"example": "healthy",
																"readOnly": true,
																"type": "string",
																"x-auditable": true
															},
															"suspended": {
																"default": false,
																"description": "If suspended, no health checks are sent to the origin.",
																"type": "boolean",
																"x-auditable": true
															},
															"tcp_config": {
																"description": "Parameters specific to TCP health check.",
																"nullable": true,
																"properties": {
																	"method": {
																		"default": "connection_established",
																		"description": "The TCP connection method to use for the health check.",
																		"enum": [
																			"connection_established"
																		],
																		"type": "string",
																		"x-auditable": true
																	},
																	"port": {
																		"default": 80,
																		"description": "Port number to connect to for the health check. Defaults to 80.",
																		"type": "integer",
																		"x-auditable": true
																	}
																},
																"type": "object"
															},
															"timeout": {
																"default": 5,
																"description": "The timeout (in seconds) before marking the health check as failed.",
																"type": "integer",
																"x-auditable": true
															},
															"type": {
																"default": "HTTP",
																"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
																"example": "HTTPS",
																"type": "string",
																"x-auditable": true
															}
														},
														"type": "object"
													},
													"type": "array"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Health Checks response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Health Checks",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Health Checks Write",
			"Health Checks Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/smart_shield/healthchecks/{healthcheck_id}": {
		"description": "Fetch a single configured health check.",
		"operationId": "smart-shield-health-check-details",
		"parameters": [
			{
				"in": "path",
				"name": "healthcheck_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"address": {
													"description": "The hostname or IP address of the origin server to run health checks on.",
													"example": "www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"check_regions": {
													"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
													"example": [
														"WEU",
														"ENAM"
													],
													"items": {
														"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
														"enum": [
															"WNAM",
															"ENAM",
															"WEU",
															"EEU",
															"NSAM",
															"SSAM",
															"OC",
															"ME",
															"NAF",
															"SAF",
															"IN",
															"SEAS",
															"NEAS",
															"ALL_REGIONS"
														],
														"type": "string"
													},
													"nullable": true,
													"type": "array",
													"x-auditable": true
												},
												"consecutive_fails": {
													"default": 1,
													"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
													"type": "integer",
													"x-auditable": true
												},
												"consecutive_successes": {
													"default": 1,
													"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
													"type": "integer",
													"x-auditable": true
												},
												"created_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"description": {
													"description": "A human-readable description of the health check.",
													"example": "Health check for www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"failure_reason": {
													"description": "The current failure reason if status is unhealthy.",
													"example": "",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"http_config": {
													"description": "Parameters specific to an HTTP or HTTPS health check.",
													"nullable": true,
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when the health check uses HTTPS.",
															"type": "boolean",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
															"example": "success",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"default": "200",
															"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
															"example": [
																"2xx",
																"302"
															],
															"items": {
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if the origin returns a 3xx status code.",
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"nullable": true,
															"type": "object"
														},
														"method": {
															"default": "GET",
															"description": "The HTTP method to use for the health check.",
															"enum": [
																"GET",
																"HEAD"
															],
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path to health check against.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"id": {
													"description": "Identifier.",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"interval": {
													"default": 60,
													"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
													"type": "integer",
													"x-auditable": true
												},
												"modified_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"name": {
													"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
													"example": "server-1",
													"type": "string",
													"x-auditable": true
												},
												"retries": {
													"default": 2,
													"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
													"type": "integer",
													"x-auditable": true
												},
												"status": {
													"description": "The current status of the origin server according to the health check.",
													"enum": [
														"unknown",
														"healthy",
														"unhealthy",
														"suspended"
													],
													"example": "healthy",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"suspended": {
													"default": false,
													"description": "If suspended, no health checks are sent to the origin.",
													"type": "boolean",
													"x-auditable": true
												},
												"tcp_config": {
													"description": "Parameters specific to TCP health check.",
													"nullable": true,
													"properties": {
														"method": {
															"default": "connection_established",
															"description": "The TCP connection method to use for the health check.",
															"enum": [
																"connection_established"
															],
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"timeout": {
													"default": 5,
													"description": "The timeout (in seconds) before marking the health check as failed.",
													"type": "integer",
													"x-auditable": true
												},
												"type": {
													"default": "HTTP",
													"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
													"example": "HTTPS",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Health Check Details response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful.",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"oneOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"address": {
															"description": "The hostname or IP address of the origin server to run health checks on.",
															"example": "www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"check_regions": {
															"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
															"example": [
																"WEU",
																"ENAM"
															],
															"items": {
																"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
																"enum": [
																	"WNAM",
																	"ENAM",
																	"WEU",
																	"EEU",
																	"NSAM",
																	"SSAM",
																	"OC",
																	"ME",
																	"NAF",
																	"SAF",
																	"IN",
																	"SEAS",
																	"NEAS",
																	"ALL_REGIONS"
																],
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"consecutive_fails": {
															"default": 1,
															"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_successes": {
															"default": 1,
															"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
															"type": "integer",
															"x-auditable": true
														},
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"description": {
															"description": "A human-readable description of the health check.",
															"example": "Health check for www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"failure_reason": {
															"description": "The current failure reason if status is unhealthy.",
															"example": "",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"http_config": {
															"description": "Parameters specific to an HTTP or HTTPS health check.",
															"nullable": true,
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when the health check uses HTTPS.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
																	"example": "success",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"default": "200",
																	"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
																	"example": [
																		"2xx",
																		"302"
																	],
																	"items": {
																		"type": "string"
																	},
																	"nullable": true,
																	"type": "array",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if the origin returns a 3xx status code.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"nullable": true,
																	"type": "object"
																},
																"method": {
																	"default": "GET",
																	"description": "The HTTP method to use for the health check.",
																	"enum": [
																		"GET",
																		"HEAD"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path to health check against.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"id": {
															"description": "Identifier.",
															"example": "023e105f4ecef8ad9ca31a8372d0c353",
															"maxLength": 32,
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"name": {
															"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
															"example": "server-1",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"status": {
															"description": "The current status of the origin server according to the health check.",
															"enum": [
																"unknown",
																"healthy",
																"unhealthy",
																"suspended"
															],
															"example": "healthy",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"suspended": {
															"default": false,
															"description": "If suspended, no health checks are sent to the origin.",
															"type": "boolean",
															"x-auditable": true
														},
														"tcp_config": {
															"description": "Parameters specific to TCP health check.",
															"nullable": true,
															"properties": {
																"method": {
																	"default": "connection_established",
																	"description": "The TCP connection method to use for the health check.",
																	"enum": [
																		"connection_established"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "HTTP",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
															"example": "HTTPS",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Health Check Details response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Health Check Details",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Health Checks Write",
			"Health Checks Read"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"PATCH /zones/{zone_id}/smart_shield": {
		"description": "Set Smart Shield Settings.",
		"operationId": "smart-shield-patch-settings",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"description": "The patch body for Smart Shield.",
						"example": {
							"smart_tiered_cache": {
								"value": "on"
							}
						},
						"properties": {
							"cache_reserve": {
								"properties": {
									"value": {
										"description": "Specifies the enablement value of Cache Reserve.",
										"enum": [
											"on",
											"off"
										],
										"example": "on",
										"type": "string"
									}
								},
								"type": "object"
							},
							"regional_tiered_cache": {
								"properties": {
									"value": {
										"description": "Specifies the enablement value of Regional Tiered Cache.",
										"enum": [
											"on",
											"off"
										],
										"example": "on",
										"type": "string"
									}
								},
								"type": "object"
							},
							"smart_routing": {
								"properties": {
									"value": {
										"description": "Specifies the enablement value of Smart Routing.",
										"enum": [
											"on",
											"off"
										],
										"example": "on",
										"type": "string"
									}
								},
								"type": "object"
							},
							"smart_tiered_cache": {
								"properties": {
									"value": {
										"description": "Specifies the enablement value of Smart Tiered Cache.",
										"enum": [
											"on",
											"off"
										],
										"example": "on",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "A consolidated object containing settings from multiple APIs for partial updates.",
											"properties": {
												"smart_tiered_cache": {
													"properties": {
														"editable": {
															"description": "Whether the setting is editable.",
															"example": true,
															"type": "boolean"
														},
														"id": {
															"description": "The id of the Smart Tiered Cache setting.",
															"example": "smart_tiered_cache",
															"type": "string"
														},
														"modified_on": {
															"description": "The last time the setting was modified.",
															"example": "2025-09-10T22:53:22.946098Z",
															"type": "string"
														},
														"value": {
															"description": "Specifies the enablement value of Tiered Cache.",
															"enum": [
																"on",
																"off"
															],
															"example": "on",
															"type": "string"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Smart Shield Settings response."
			},
			"500": {
				"content": {
					"application/json": {
						"examples": {
							"Invalid value": {
								"value": {
									"errors": [
										{
											"code": 1137,
											"message": "Unable to process request. Internal error."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get Smart Shield Settings response failure."
			},
			"502": {
				"content": {
					"application/json": {
						"examples": {
							"Not found": {
								"value": {
									"errors": [
										{
											"code": 1016,
											"message": "Unable to update smart_tiered_cache."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Smart Shield Settings response failure."
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Invalid value": {
								"value": {
									"errors": [
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock smart_tiered_cache."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock argo_smart_routing."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock regional_tiered_cache."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock cache_reserve."
										},
										{
											"code": 1034,
											"message": "Upgrade Smart Shield to unlock healthchecks_count."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch Smart Shield Settings response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Smart Shield Settings.",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read",
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"PATCH /zones/{zone_id}/smart_shield/healthchecks/{healthcheck_id}": {
		"description": "Patch a configured health check.",
		"operationId": "smart-shield-patch-health-check",
		"parameters": [
			{
				"in": "path",
				"name": "healthcheck_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"address": {
								"description": "The hostname or IP address of the origin server to run health checks on.",
								"example": "www.example.com",
								"type": "string",
								"x-auditable": true
							},
							"check_regions": {
								"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
								"example": [
									"WEU",
									"ENAM"
								],
								"items": {
									"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
									"enum": [
										"WNAM",
										"ENAM",
										"WEU",
										"EEU",
										"NSAM",
										"SSAM",
										"OC",
										"ME",
										"NAF",
										"SAF",
										"IN",
										"SEAS",
										"NEAS",
										"ALL_REGIONS"
									],
									"type": "string"
								},
								"nullable": true,
								"type": "array",
								"x-auditable": true
							},
							"consecutive_fails": {
								"default": 1,
								"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
								"type": "integer",
								"x-auditable": true
							},
							"consecutive_successes": {
								"default": 1,
								"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
								"type": "integer",
								"x-auditable": true
							},
							"description": {
								"description": "A human-readable description of the health check.",
								"example": "Health check for www.example.com",
								"type": "string",
								"x-auditable": true
							},
							"http_config": {
								"description": "Parameters specific to an HTTP or HTTPS health check.",
								"nullable": true,
								"properties": {
									"allow_insecure": {
										"default": false,
										"description": "Do not validate the certificate when the health check uses HTTPS.",
										"type": "boolean",
										"x-auditable": true
									},
									"expected_body": {
										"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
										"example": "success",
										"type": "string",
										"x-auditable": true
									},
									"expected_codes": {
										"default": "200",
										"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
										"example": [
											"2xx",
											"302"
										],
										"items": {
											"type": "string"
										},
										"nullable": true,
										"type": "array",
										"x-auditable": true
									},
									"follow_redirects": {
										"default": false,
										"description": "Follow redirects if the origin returns a 3xx status code.",
										"type": "boolean",
										"x-auditable": true
									},
									"header": {
										"additionalProperties": {
											"items": {
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
										"example": {
											"Host": [
												"example.com"
											],
											"X-App-ID": [
												"abc123"
											]
										},
										"nullable": true,
										"type": "object"
									},
									"method": {
										"default": "GET",
										"description": "The HTTP method to use for the health check.",
										"enum": [
											"GET",
											"HEAD"
										],
										"type": "string",
										"x-auditable": true
									},
									"path": {
										"default": "/",
										"description": "The endpoint path to health check against.",
										"example": "/health",
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 80,
										"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
										"type": "integer",
										"x-auditable": true
									}
								},
								"type": "object"
							},
							"interval": {
								"default": 60,
								"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
								"type": "integer",
								"x-auditable": true
							},
							"name": {
								"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
								"example": "server-1",
								"type": "string",
								"x-auditable": true
							},
							"retries": {
								"default": 2,
								"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
								"type": "integer",
								"x-auditable": true
							},
							"suspended": {
								"default": false,
								"description": "If suspended, no health checks are sent to the origin.",
								"type": "boolean",
								"x-auditable": true
							},
							"tcp_config": {
								"description": "Parameters specific to TCP health check.",
								"nullable": true,
								"properties": {
									"method": {
										"default": "connection_established",
										"description": "The TCP connection method to use for the health check.",
										"enum": [
											"connection_established"
										],
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 80,
										"description": "Port number to connect to for the health check. Defaults to 80.",
										"type": "integer",
										"x-auditable": true
									}
								},
								"type": "object"
							},
							"timeout": {
								"default": 5,
								"description": "The timeout (in seconds) before marking the health check as failed.",
								"type": "integer",
								"x-auditable": true
							},
							"type": {
								"default": "HTTP",
								"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
								"example": "HTTPS",
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"name",
							"address"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"address": {
													"description": "The hostname or IP address of the origin server to run health checks on.",
													"example": "www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"check_regions": {
													"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
													"example": [
														"WEU",
														"ENAM"
													],
													"items": {
														"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
														"enum": [
															"WNAM",
															"ENAM",
															"WEU",
															"EEU",
															"NSAM",
															"SSAM",
															"OC",
															"ME",
															"NAF",
															"SAF",
															"IN",
															"SEAS",
															"NEAS",
															"ALL_REGIONS"
														],
														"type": "string"
													},
													"nullable": true,
													"type": "array",
													"x-auditable": true
												},
												"consecutive_fails": {
													"default": 1,
													"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
													"type": "integer",
													"x-auditable": true
												},
												"consecutive_successes": {
													"default": 1,
													"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
													"type": "integer",
													"x-auditable": true
												},
												"created_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"description": {
													"description": "A human-readable description of the health check.",
													"example": "Health check for www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"failure_reason": {
													"description": "The current failure reason if status is unhealthy.",
													"example": "",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"http_config": {
													"description": "Parameters specific to an HTTP or HTTPS health check.",
													"nullable": true,
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when the health check uses HTTPS.",
															"type": "boolean",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
															"example": "success",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"default": "200",
															"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
															"example": [
																"2xx",
																"302"
															],
															"items": {
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if the origin returns a 3xx status code.",
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"nullable": true,
															"type": "object"
														},
														"method": {
															"default": "GET",
															"description": "The HTTP method to use for the health check.",
															"enum": [
																"GET",
																"HEAD"
															],
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path to health check against.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"id": {
													"description": "Identifier.",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"interval": {
													"default": 60,
													"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
													"type": "integer",
													"x-auditable": true
												},
												"modified_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"name": {
													"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
													"example": "server-1",
													"type": "string",
													"x-auditable": true
												},
												"retries": {
													"default": 2,
													"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
													"type": "integer",
													"x-auditable": true
												},
												"status": {
													"description": "The current status of the origin server according to the health check.",
													"enum": [
														"unknown",
														"healthy",
														"unhealthy",
														"suspended"
													],
													"example": "healthy",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"suspended": {
													"default": false,
													"description": "If suspended, no health checks are sent to the origin.",
													"type": "boolean",
													"x-auditable": true
												},
												"tcp_config": {
													"description": "Parameters specific to TCP health check.",
													"nullable": true,
													"properties": {
														"method": {
															"default": "connection_established",
															"description": "The TCP connection method to use for the health check.",
															"enum": [
																"connection_established"
															],
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"timeout": {
													"default": 5,
													"description": "The timeout (in seconds) before marking the health check as failed.",
													"type": "integer",
													"x-auditable": true
												},
												"type": {
													"default": "HTTP",
													"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
													"example": "HTTPS",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch Health Check response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful.",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"oneOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"address": {
															"description": "The hostname or IP address of the origin server to run health checks on.",
															"example": "www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"check_regions": {
															"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
															"example": [
																"WEU",
																"ENAM"
															],
															"items": {
																"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
																"enum": [
																	"WNAM",
																	"ENAM",
																	"WEU",
																	"EEU",
																	"NSAM",
																	"SSAM",
																	"OC",
																	"ME",
																	"NAF",
																	"SAF",
																	"IN",
																	"SEAS",
																	"NEAS",
																	"ALL_REGIONS"
																],
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"consecutive_fails": {
															"default": 1,
															"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_successes": {
															"default": 1,
															"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
															"type": "integer",
															"x-auditable": true
														},
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"description": {
															"description": "A human-readable description of the health check.",
															"example": "Health check for www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"failure_reason": {
															"description": "The current failure reason if status is unhealthy.",
															"example": "",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"http_config": {
															"description": "Parameters specific to an HTTP or HTTPS health check.",
															"nullable": true,
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when the health check uses HTTPS.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
																	"example": "success",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"default": "200",
																	"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
																	"example": [
																		"2xx",
																		"302"
																	],
																	"items": {
																		"type": "string"
																	},
																	"nullable": true,
																	"type": "array",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if the origin returns a 3xx status code.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"nullable": true,
																	"type": "object"
																},
																"method": {
																	"default": "GET",
																	"description": "The HTTP method to use for the health check.",
																	"enum": [
																		"GET",
																		"HEAD"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path to health check against.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"id": {
															"description": "Identifier.",
															"example": "023e105f4ecef8ad9ca31a8372d0c353",
															"maxLength": 32,
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"name": {
															"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
															"example": "server-1",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"status": {
															"description": "The current status of the origin server according to the health check.",
															"enum": [
																"unknown",
																"healthy",
																"unhealthy",
																"suspended"
															],
															"example": "healthy",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"suspended": {
															"default": false,
															"description": "If suspended, no health checks are sent to the origin.",
															"type": "boolean",
															"x-auditable": true
														},
														"tcp_config": {
															"description": "Parameters specific to TCP health check.",
															"nullable": true,
															"properties": {
																"method": {
																	"default": "connection_established",
																	"description": "The TCP connection method to use for the health check.",
																	"enum": [
																		"connection_established"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "HTTP",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
															"example": "HTTPS",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch Health Check response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Health Check",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Health Checks Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"POST /zones/{zone_id}/smart_shield/cache_reserve_clear": {
		"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
		"operationId": "smart-shield-settings-start-cache-reserve-clear",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"example": "{}"
				}
			},
			"description": "The request body is currently not used.",
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"In-progress": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"id": "cache_reserve_clear",
										"start_ts": "2023-10-02T10:00:00.12345Z",
										"state": "In-progress"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"result": {
											"anyOf": [
												{
													"type": "object"
												},
												{
													"items": {},
													"type": "array"
												},
												{
													"type": "string"
												}
											]
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string",
																	"x-auditable": true
																},
																"modified_on": {
																	"description": "Last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string",
																	"x-auditable": true
																}
															},
															"required": [
																"id"
															],
															"type": "object"
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"cache_reserve_clear"
																	],
																	"example": "cache_reserve_clear",
																	"type": "string",
																	"x-auditable": true
																}
															},
															"type": "object"
														}
													],
													"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
													"title": "Cache Reserve Clear",
													"type": "object"
												},
												{
													"properties": {
														"end_ts": {
															"description": "The time that the latest Cache Reserve Clear operation completed.",
															"example": "2023-10-02T12:00:00.12345Z",
															"format": "date-time",
															"type": "string",
															"x-auditable": true
														},
														"start_ts": {
															"description": "The time that the latest Cache Reserve Clear operation started.",
															"example": "2023-10-02T10:00:00.12345Z",
															"format": "date-time",
															"type": "string",
															"x-auditable": true
														},
														"state": {
															"description": "The current state of the Cache Reserve Clear operation.",
															"enum": [
																"In-progress",
																"Completed"
															],
															"example": "In-progress",
															"type": "string",
															"x-auditable": true
														}
													},
													"required": [
														"state",
														"start_ts"
													],
													"type": "object"
												}
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Start Cache Reserve Clear response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Rejected": {
								"value": {
									"errors": [
										{
											"code": 1152,
											"message": "Turn off Cache Reserve sync to proceed with deletion."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Start Cache Reserve Clear failure response."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Start Cache Reserve Clear",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"POST /zones/{zone_id}/smart_shield/healthchecks": {
		"description": "Create a new health check.",
		"operationId": "smart-shield-create-health-check",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"address": {
								"description": "The hostname or IP address of the origin server to run health checks on.",
								"example": "www.example.com",
								"type": "string",
								"x-auditable": true
							},
							"check_regions": {
								"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
								"example": [
									"WEU",
									"ENAM"
								],
								"items": {
									"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
									"enum": [
										"WNAM",
										"ENAM",
										"WEU",
										"EEU",
										"NSAM",
										"SSAM",
										"OC",
										"ME",
										"NAF",
										"SAF",
										"IN",
										"SEAS",
										"NEAS",
										"ALL_REGIONS"
									],
									"type": "string"
								},
								"nullable": true,
								"type": "array",
								"x-auditable": true
							},
							"consecutive_fails": {
								"default": 1,
								"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
								"type": "integer",
								"x-auditable": true
							},
							"consecutive_successes": {
								"default": 1,
								"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
								"type": "integer",
								"x-auditable": true
							},
							"description": {
								"description": "A human-readable description of the health check.",
								"example": "Health check for www.example.com",
								"type": "string",
								"x-auditable": true
							},
							"http_config": {
								"description": "Parameters specific to an HTTP or HTTPS health check.",
								"nullable": true,
								"properties": {
									"allow_insecure": {
										"default": false,
										"description": "Do not validate the certificate when the health check uses HTTPS.",
										"type": "boolean",
										"x-auditable": true
									},
									"expected_body": {
										"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
										"example": "success",
										"type": "string",
										"x-auditable": true
									},
									"expected_codes": {
										"default": "200",
										"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
										"example": [
											"2xx",
											"302"
										],
										"items": {
											"type": "string"
										},
										"nullable": true,
										"type": "array",
										"x-auditable": true
									},
									"follow_redirects": {
										"default": false,
										"description": "Follow redirects if the origin returns a 3xx status code.",
										"type": "boolean",
										"x-auditable": true
									},
									"header": {
										"additionalProperties": {
											"items": {
												"type": "string",
												"x-auditable": true
											},
											"type": "array"
										},
										"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
										"example": {
											"Host": [
												"example.com"
											],
											"X-App-ID": [
												"abc123"
											]
										},
										"nullable": true,
										"type": "object"
									},
									"method": {
										"default": "GET",
										"description": "The HTTP method to use for the health check.",
										"enum": [
											"GET",
											"HEAD"
										],
										"type": "string",
										"x-auditable": true
									},
									"path": {
										"default": "/",
										"description": "The endpoint path to health check against.",
										"example": "/health",
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 80,
										"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
										"type": "integer",
										"x-auditable": true
									}
								},
								"type": "object"
							},
							"interval": {
								"default": 60,
								"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
								"type": "integer",
								"x-auditable": true
							},
							"name": {
								"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
								"example": "server-1",
								"type": "string",
								"x-auditable": true
							},
							"retries": {
								"default": 2,
								"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
								"type": "integer",
								"x-auditable": true
							},
							"suspended": {
								"default": false,
								"description": "If suspended, no health checks are sent to the origin.",
								"type": "boolean",
								"x-auditable": true
							},
							"tcp_config": {
								"description": "Parameters specific to TCP health check.",
								"nullable": true,
								"properties": {
									"method": {
										"default": "connection_established",
										"description": "The TCP connection method to use for the health check.",
										"enum": [
											"connection_established"
										],
										"type": "string",
										"x-auditable": true
									},
									"port": {
										"default": 80,
										"description": "Port number to connect to for the health check. Defaults to 80.",
										"type": "integer",
										"x-auditable": true
									}
								},
								"type": "object"
							},
							"timeout": {
								"default": 5,
								"description": "The timeout (in seconds) before marking the health check as failed.",
								"type": "integer",
								"x-auditable": true
							},
							"type": {
								"default": "HTTP",
								"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
								"example": "HTTPS",
								"type": "string",
								"x-auditable": true
							}
						},
						"required": [
							"name",
							"address"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"address": {
													"description": "The hostname or IP address of the origin server to run health checks on.",
													"example": "www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"check_regions": {
													"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
													"example": [
														"WEU",
														"ENAM"
													],
													"items": {
														"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
														"enum": [
															"WNAM",
															"ENAM",
															"WEU",
															"EEU",
															"NSAM",
															"SSAM",
															"OC",
															"ME",
															"NAF",
															"SAF",
															"IN",
															"SEAS",
															"NEAS",
															"ALL_REGIONS"
														],
														"type": "string"
													},
													"nullable": true,
													"type": "array",
													"x-auditable": true
												},
												"consecutive_fails": {
													"default": 1,
													"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
													"type": "integer",
													"x-auditable": true
												},
												"consecutive_successes": {
													"default": 1,
													"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
													"type": "integer",
													"x-auditable": true
												},
												"created_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"description": {
													"description": "A human-readable description of the health check.",
													"example": "Health check for www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"failure_reason": {
													"description": "The current failure reason if status is unhealthy.",
													"example": "",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"http_config": {
													"description": "Parameters specific to an HTTP or HTTPS health check.",
													"nullable": true,
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when the health check uses HTTPS.",
															"type": "boolean",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
															"example": "success",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"default": "200",
															"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
															"example": [
																"2xx",
																"302"
															],
															"items": {
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if the origin returns a 3xx status code.",
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"nullable": true,
															"type": "object"
														},
														"method": {
															"default": "GET",
															"description": "The HTTP method to use for the health check.",
															"enum": [
																"GET",
																"HEAD"
															],
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path to health check against.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"id": {
													"description": "Identifier.",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"interval": {
													"default": 60,
													"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
													"type": "integer",
													"x-auditable": true
												},
												"modified_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"name": {
													"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
													"example": "server-1",
													"type": "string",
													"x-auditable": true
												},
												"retries": {
													"default": 2,
													"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
													"type": "integer",
													"x-auditable": true
												},
												"status": {
													"description": "The current status of the origin server according to the health check.",
													"enum": [
														"unknown",
														"healthy",
														"unhealthy",
														"suspended"
													],
													"example": "healthy",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"suspended": {
													"default": false,
													"description": "If suspended, no health checks are sent to the origin.",
													"type": "boolean",
													"x-auditable": true
												},
												"tcp_config": {
													"description": "Parameters specific to TCP health check.",
													"nullable": true,
													"properties": {
														"method": {
															"default": "connection_established",
															"description": "The TCP connection method to use for the health check.",
															"enum": [
																"connection_established"
															],
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"timeout": {
													"default": 5,
													"description": "The timeout (in seconds) before marking the health check as failed.",
													"type": "integer",
													"x-auditable": true
												},
												"type": {
													"default": "HTTP",
													"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
													"example": "HTTPS",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Health Check response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful.",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"oneOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"address": {
															"description": "The hostname or IP address of the origin server to run health checks on.",
															"example": "www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"check_regions": {
															"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
															"example": [
																"WEU",
																"ENAM"
															],
															"items": {
																"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
																"enum": [
																	"WNAM",
																	"ENAM",
																	"WEU",
																	"EEU",
																	"NSAM",
																	"SSAM",
																	"OC",
																	"ME",
																	"NAF",
																	"SAF",
																	"IN",
																	"SEAS",
																	"NEAS",
																	"ALL_REGIONS"
																],
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"consecutive_fails": {
															"default": 1,
															"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_successes": {
															"default": 1,
															"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
															"type": "integer",
															"x-auditable": true
														},
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"description": {
															"description": "A human-readable description of the health check.",
															"example": "Health check for www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"failure_reason": {
															"description": "The current failure reason if status is unhealthy.",
															"example": "",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"http_config": {
															"description": "Parameters specific to an HTTP or HTTPS health check.",
															"nullable": true,
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when the health check uses HTTPS.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
																	"example": "success",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"default": "200",
																	"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
																	"example": [
																		"2xx",
																		"302"
																	],
																	"items": {
																		"type": "string"
																	},
																	"nullable": true,
																	"type": "array",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if the origin returns a 3xx status code.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"nullable": true,
																	"type": "object"
																},
																"method": {
																	"default": "GET",
																	"description": "The HTTP method to use for the health check.",
																	"enum": [
																		"GET",
																		"HEAD"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path to health check against.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"id": {
															"description": "Identifier.",
															"example": "023e105f4ecef8ad9ca31a8372d0c353",
															"maxLength": 32,
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"name": {
															"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
															"example": "server-1",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"status": {
															"description": "The current status of the origin server according to the health check.",
															"enum": [
																"unknown",
																"healthy",
																"unhealthy",
																"suspended"
															],
															"example": "healthy",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"suspended": {
															"default": false,
															"description": "If suspended, no health checks are sent to the origin.",
															"type": "boolean",
															"x-auditable": true
														},
														"tcp_config": {
															"description": "Parameters specific to TCP health check.",
															"nullable": true,
															"properties": {
																"method": {
																	"default": "connection_established",
																	"description": "The TCP connection method to use for the health check.",
																	"enum": [
																		"connection_established"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "HTTP",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
															"example": "HTTPS",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Health Check response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create Health Check",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Health Checks Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"PUT /zones/{zone_id}/smart_shield/healthchecks/{healthcheck_id}": {
		"description": "Update a configured health check.",
		"operationId": "smart-shield-update-health-check",
		"parameters": [
			{
				"in": "path",
				"name": "healthcheck_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"allOf": [
							{
								"allOf": [
									{
										"properties": {
											"errors": {
												"example": [],
												"items": {
													"properties": {
														"code": {
															"minimum": 1000,
															"type": "integer"
														},
														"message": {
															"type": "string"
														}
													},
													"required": [
														"code",
														"message"
													],
													"type": "object",
													"uniqueItems": true
												},
												"type": "array"
											},
											"messages": {
												"example": [],
												"items": {
													"properties": {
														"code": {
															"minimum": 1000,
															"type": "integer"
														},
														"message": {
															"type": "string"
														}
													},
													"required": [
														"code",
														"message"
													],
													"type": "object",
													"uniqueItems": true
												},
												"type": "array"
											},
											"result": {
												"anyOf": [
													{
														"type": "object"
													},
													{
														"items": {},
														"type": "array"
													},
													{
														"type": "string"
													}
												]
											},
											"success": {
												"description": "Whether the API call was successful.",
												"enum": [
													true
												],
												"example": true,
												"type": "boolean"
											}
										},
										"required": [
											"success",
											"errors",
											"messages",
											"result"
										],
										"type": "object"
									},
									{
										"properties": {
											"result": {
												"oneOf": [
													{
														"type": "object"
													},
													{
														"type": "string"
													}
												]
											}
										},
										"type": "object"
									}
								],
								"type": "object"
							},
							{
								"properties": {
									"result": {
										"properties": {
											"address": {
												"description": "The hostname or IP address of the origin server to run health checks on.",
												"example": "www.example.com",
												"type": "string",
												"x-auditable": true
											},
											"check_regions": {
												"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
												"example": [
													"WEU",
													"ENAM"
												],
												"items": {
													"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
													"enum": [
														"WNAM",
														"ENAM",
														"WEU",
														"EEU",
														"NSAM",
														"SSAM",
														"OC",
														"ME",
														"NAF",
														"SAF",
														"IN",
														"SEAS",
														"NEAS",
														"ALL_REGIONS"
													],
													"type": "string"
												},
												"nullable": true,
												"type": "array",
												"x-auditable": true
											},
											"consecutive_fails": {
												"default": 1,
												"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
												"type": "integer",
												"x-auditable": true
											},
											"consecutive_successes": {
												"default": 1,
												"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
												"type": "integer",
												"x-auditable": true
											},
											"created_on": {
												"example": "2014-01-01T05:20:00.12345Z",
												"format": "date-time",
												"readOnly": true,
												"type": "string",
												"x-auditable": true
											},
											"description": {
												"description": "A human-readable description of the health check.",
												"example": "Health check for www.example.com",
												"type": "string",
												"x-auditable": true
											},
											"failure_reason": {
												"description": "The current failure reason if status is unhealthy.",
												"example": "",
												"readOnly": true,
												"type": "string",
												"x-auditable": true
											},
											"http_config": {
												"description": "Parameters specific to an HTTP or HTTPS health check.",
												"nullable": true,
												"properties": {
													"allow_insecure": {
														"default": false,
														"description": "Do not validate the certificate when the health check uses HTTPS.",
														"type": "boolean",
														"x-auditable": true
													},
													"expected_body": {
														"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
														"example": "success",
														"type": "string",
														"x-auditable": true
													},
													"expected_codes": {
														"default": "200",
														"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
														"example": [
															"2xx",
															"302"
														],
														"items": {
															"type": "string"
														},
														"nullable": true,
														"type": "array",
														"x-auditable": true
													},
													"follow_redirects": {
														"default": false,
														"description": "Follow redirects if the origin returns a 3xx status code.",
														"type": "boolean",
														"x-auditable": true
													},
													"header": {
														"additionalProperties": {
															"items": {
																"type": "string",
																"x-auditable": true
															},
															"type": "array"
														},
														"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
														"example": {
															"Host": [
																"example.com"
															],
															"X-App-ID": [
																"abc123"
															]
														},
														"nullable": true,
														"type": "object"
													},
													"method": {
														"default": "GET",
														"description": "The HTTP method to use for the health check.",
														"enum": [
															"GET",
															"HEAD"
														],
														"type": "string",
														"x-auditable": true
													},
													"path": {
														"default": "/",
														"description": "The endpoint path to health check against.",
														"example": "/health",
														"type": "string",
														"x-auditable": true
													},
													"port": {
														"default": 80,
														"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
														"type": "integer",
														"x-auditable": true
													}
												},
												"type": "object"
											},
											"id": {
												"description": "Identifier.",
												"example": "023e105f4ecef8ad9ca31a8372d0c353",
												"maxLength": 32,
												"readOnly": true,
												"type": "string",
												"x-auditable": true
											},
											"interval": {
												"default": 60,
												"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
												"type": "integer",
												"x-auditable": true
											},
											"modified_on": {
												"example": "2014-01-01T05:20:00.12345Z",
												"format": "date-time",
												"readOnly": true,
												"type": "string",
												"x-auditable": true
											},
											"name": {
												"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
												"example": "server-1",
												"type": "string",
												"x-auditable": true
											},
											"retries": {
												"default": 2,
												"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
												"type": "integer",
												"x-auditable": true
											},
											"status": {
												"description": "The current status of the origin server according to the health check.",
												"enum": [
													"unknown",
													"healthy",
													"unhealthy",
													"suspended"
												],
												"example": "healthy",
												"readOnly": true,
												"type": "string",
												"x-auditable": true
											},
											"suspended": {
												"default": false,
												"description": "If suspended, no health checks are sent to the origin.",
												"type": "boolean",
												"x-auditable": true
											},
											"tcp_config": {
												"description": "Parameters specific to TCP health check.",
												"nullable": true,
												"properties": {
													"method": {
														"default": "connection_established",
														"description": "The TCP connection method to use for the health check.",
														"enum": [
															"connection_established"
														],
														"type": "string",
														"x-auditable": true
													},
													"port": {
														"default": 80,
														"description": "Port number to connect to for the health check. Defaults to 80.",
														"type": "integer",
														"x-auditable": true
													}
												},
												"type": "object"
											},
											"timeout": {
												"default": 5,
												"description": "The timeout (in seconds) before marking the health check as failed.",
												"type": "integer",
												"x-auditable": true
											},
											"type": {
												"default": "HTTP",
												"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
												"example": "HTTPS",
												"type": "string",
												"x-auditable": true
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"items": {},
															"type": "array"
														},
														{
															"type": "string"
														}
													]
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages",
												"result"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"address": {
													"description": "The hostname or IP address of the origin server to run health checks on.",
													"example": "www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"check_regions": {
													"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
													"example": [
														"WEU",
														"ENAM"
													],
													"items": {
														"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
														"enum": [
															"WNAM",
															"ENAM",
															"WEU",
															"EEU",
															"NSAM",
															"SSAM",
															"OC",
															"ME",
															"NAF",
															"SAF",
															"IN",
															"SEAS",
															"NEAS",
															"ALL_REGIONS"
														],
														"type": "string"
													},
													"nullable": true,
													"type": "array",
													"x-auditable": true
												},
												"consecutive_fails": {
													"default": 1,
													"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
													"type": "integer",
													"x-auditable": true
												},
												"consecutive_successes": {
													"default": 1,
													"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
													"type": "integer",
													"x-auditable": true
												},
												"created_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"description": {
													"description": "A human-readable description of the health check.",
													"example": "Health check for www.example.com",
													"type": "string",
													"x-auditable": true
												},
												"failure_reason": {
													"description": "The current failure reason if status is unhealthy.",
													"example": "",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"http_config": {
													"description": "Parameters specific to an HTTP or HTTPS health check.",
													"nullable": true,
													"properties": {
														"allow_insecure": {
															"default": false,
															"description": "Do not validate the certificate when the health check uses HTTPS.",
															"type": "boolean",
															"x-auditable": true
														},
														"expected_body": {
															"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
															"example": "success",
															"type": "string",
															"x-auditable": true
														},
														"expected_codes": {
															"default": "200",
															"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
															"example": [
																"2xx",
																"302"
															],
															"items": {
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"follow_redirects": {
															"default": false,
															"description": "Follow redirects if the origin returns a 3xx status code.",
															"type": "boolean",
															"x-auditable": true
														},
														"header": {
															"additionalProperties": {
																"items": {
																	"type": "string",
																	"x-auditable": true
																},
																"type": "array"
															},
															"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
															"example": {
																"Host": [
																	"example.com"
																],
																"X-App-ID": [
																	"abc123"
																]
															},
															"nullable": true,
															"type": "object"
														},
														"method": {
															"default": "GET",
															"description": "The HTTP method to use for the health check.",
															"enum": [
																"GET",
																"HEAD"
															],
															"type": "string",
															"x-auditable": true
														},
														"path": {
															"default": "/",
															"description": "The endpoint path to health check against.",
															"example": "/health",
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"id": {
													"description": "Identifier.",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"interval": {
													"default": 60,
													"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
													"type": "integer",
													"x-auditable": true
												},
												"modified_on": {
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"name": {
													"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
													"example": "server-1",
													"type": "string",
													"x-auditable": true
												},
												"retries": {
													"default": 2,
													"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
													"type": "integer",
													"x-auditable": true
												},
												"status": {
													"description": "The current status of the origin server according to the health check.",
													"enum": [
														"unknown",
														"healthy",
														"unhealthy",
														"suspended"
													],
													"example": "healthy",
													"readOnly": true,
													"type": "string",
													"x-auditable": true
												},
												"suspended": {
													"default": false,
													"description": "If suspended, no health checks are sent to the origin.",
													"type": "boolean",
													"x-auditable": true
												},
												"tcp_config": {
													"description": "Parameters specific to TCP health check.",
													"nullable": true,
													"properties": {
														"method": {
															"default": "connection_established",
															"description": "The TCP connection method to use for the health check.",
															"enum": [
																"connection_established"
															],
															"type": "string",
															"x-auditable": true
														},
														"port": {
															"default": 80,
															"description": "Port number to connect to for the health check. Defaults to 80.",
															"type": "integer",
															"x-auditable": true
														}
													},
													"type": "object"
												},
												"timeout": {
													"default": 5,
													"description": "The timeout (in seconds) before marking the health check as failed.",
													"type": "integer",
													"x-auditable": true
												},
												"type": {
													"default": "HTTP",
													"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
													"example": "HTTPS",
													"type": "string",
													"x-auditable": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update Health Check response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful.",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"oneOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													},
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"address": {
															"description": "The hostname or IP address of the origin server to run health checks on.",
															"example": "www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"check_regions": {
															"description": "A list of regions from which to run health checks. Null means Cloudflare will pick a default region.",
															"example": [
																"WEU",
																"ENAM"
															],
															"items": {
																"description": "WNAM: Western North America, ENAM: Eastern North America, WEU: Western Europe, EEU: Eastern Europe, NSAM: Northern South America, SSAM: Southern South America, OC: Oceania, ME: Middle East, NAF: North Africa, SAF: South Africa, IN: India, SEAS: South East Asia, NEAS: North East Asia, ALL_REGIONS: all regions (BUSINESS and ENTERPRISE customers only).",
																"enum": [
																	"WNAM",
																	"ENAM",
																	"WEU",
																	"EEU",
																	"NSAM",
																	"SSAM",
																	"OC",
																	"ME",
																	"NAF",
																	"SAF",
																	"IN",
																	"SEAS",
																	"NEAS",
																	"ALL_REGIONS"
																],
																"type": "string"
															},
															"nullable": true,
															"type": "array",
															"x-auditable": true
														},
														"consecutive_fails": {
															"default": 1,
															"description": "The number of consecutive fails required from a health check before changing the health to unhealthy.",
															"type": "integer",
															"x-auditable": true
														},
														"consecutive_successes": {
															"default": 1,
															"description": "The number of consecutive successes required from a health check before changing the health to healthy.",
															"type": "integer",
															"x-auditable": true
														},
														"created_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"description": {
															"description": "A human-readable description of the health check.",
															"example": "Health check for www.example.com",
															"type": "string",
															"x-auditable": true
														},
														"failure_reason": {
															"description": "The current failure reason if status is unhealthy.",
															"example": "",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"http_config": {
															"description": "Parameters specific to an HTTP or HTTPS health check.",
															"nullable": true,
															"properties": {
																"allow_insecure": {
																	"default": false,
																	"description": "Do not validate the certificate when the health check uses HTTPS.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"expected_body": {
																	"description": "A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.",
																	"example": "success",
																	"type": "string",
																	"x-auditable": true
																},
																"expected_codes": {
																	"default": "200",
																	"description": "The expected HTTP response codes (e.g. \"200\") or code ranges (e.g. \"2xx\" for all codes starting with 2) of the health check.",
																	"example": [
																		"2xx",
																		"302"
																	],
																	"items": {
																		"type": "string"
																	},
																	"nullable": true,
																	"type": "array",
																	"x-auditable": true
																},
																"follow_redirects": {
																	"default": false,
																	"description": "Follow redirects if the origin returns a 3xx status code.",
																	"type": "boolean",
																	"x-auditable": true
																},
																"header": {
																	"additionalProperties": {
																		"items": {
																			"type": "string",
																			"x-auditable": true
																		},
																		"type": "array"
																	},
																	"description": "The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.",
																	"example": {
																		"Host": [
																			"example.com"
																		],
																		"X-App-ID": [
																			"abc123"
																		]
																	},
																	"nullable": true,
																	"type": "object"
																},
																"method": {
																	"default": "GET",
																	"description": "The HTTP method to use for the health check.",
																	"enum": [
																		"GET",
																		"HEAD"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"path": {
																	"default": "/",
																	"description": "The endpoint path to health check against.",
																	"example": "/health",
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"id": {
															"description": "Identifier.",
															"example": "023e105f4ecef8ad9ca31a8372d0c353",
															"maxLength": 32,
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"interval": {
															"default": 60,
															"description": "The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.",
															"type": "integer",
															"x-auditable": true
														},
														"modified_on": {
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"name": {
															"description": "A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.",
															"example": "server-1",
															"type": "string",
															"x-auditable": true
														},
														"retries": {
															"default": 2,
															"description": "The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.",
															"type": "integer",
															"x-auditable": true
														},
														"status": {
															"description": "The current status of the origin server according to the health check.",
															"enum": [
																"unknown",
																"healthy",
																"unhealthy",
																"suspended"
															],
															"example": "healthy",
															"readOnly": true,
															"type": "string",
															"x-auditable": true
														},
														"suspended": {
															"default": false,
															"description": "If suspended, no health checks are sent to the origin.",
															"type": "boolean",
															"x-auditable": true
														},
														"tcp_config": {
															"description": "Parameters specific to TCP health check.",
															"nullable": true,
															"properties": {
																"method": {
																	"default": "connection_established",
																	"description": "The TCP connection method to use for the health check.",
																	"enum": [
																		"connection_established"
																	],
																	"type": "string",
																	"x-auditable": true
																},
																"port": {
																	"default": 80,
																	"description": "Port number to connect to for the health check. Defaults to 80.",
																	"type": "integer",
																	"x-auditable": true
																}
															},
															"type": "object"
														},
														"timeout": {
															"default": 5,
															"description": "The timeout (in seconds) before marking the health check as failed.",
															"type": "integer",
															"x-auditable": true
														},
														"type": {
															"default": "HTTP",
															"description": "The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.",
															"example": "HTTPS",
															"type": "string",
															"x-auditable": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update Health Check response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update Health Check",
		"tags": [
			"Smart Shield Settings"
		],
		"x-api-token-group": [
			"Health Checks Write"
		],
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	}
}