{
	"DELETE /accounts/{account_id}/workers/scripts/{script_name}": {
		"description": "Delete your worker. This call has no response body on a successful delete.",
		"operationId": "worker-script-delete-worker",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"description": "If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.",
				"in": "query",
				"name": "force",
				"schema": {
					"type": "boolean"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete Worker response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete Worker response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Worker",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"DELETE /accounts/{account_id}/workers/scripts/{script_name}/secrets/{secret_name}": {
		"description": "Remove a secret from a script.",
		"operationId": "worker-delete-script-secret",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "secret_name",
				"required": true,
				"schema": {
					"description": "A JavaScript variable name for the secret binding.",
					"example": "mySecret",
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete script secret binding."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete script secret failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete script secret",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"DELETE /accounts/{account_id}/workers/scripts/{script_name}/subdomain": {
		"description": "Disable all workers.dev subdomains for a Worker.",
		"operationId": "worker-script-delete-subdomain",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"enabled": {
													"description": "Whether the Worker is available on the workers.dev subdomain.",
													"example": true,
													"type": "boolean"
												},
												"previews_enabled": {
													"description": "Whether the Worker's Preview URLs are available on the workers.dev subdomain.",
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"enabled",
												"previews_enabled"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Delete subdomain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete subdomain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Worker subdomain",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"GET /accounts/{account_id}/workers/scripts": {
		"description": "Fetch a list of uploaded workers.",
		"operationId": "worker-script-list-workers",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"created_on": {
														"description": "When the script was created.",
														"example": "2017-01-01T00:00:00Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"etag": {
														"description": "Hashed script content, can be used in a If-None-Match header when updating.",
														"example": "ea95132c15732412d22c1476fa83f27a",
														"readOnly": true,
														"type": "string"
													},
													"has_assets": {
														"description": "Whether a Worker contains assets.",
														"example": false,
														"type": "boolean"
													},
													"has_modules": {
														"description": "Whether a Worker contains modules.",
														"example": false,
														"type": "boolean"
													},
													"id": {
														"description": "The id of the script in the Workers system. Usually the script name.",
														"example": "my-workers-script",
														"readOnly": true,
														"type": "string"
													},
													"logpush": {
														"description": "Whether Logpush is turned on for the Worker.",
														"example": false,
														"type": "boolean"
													},
													"modified_on": {
														"description": "When the script was last modified.",
														"example": "2017-01-01T00:00:00Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"placement": {
														"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
														"properties": {
															"last_analyzed_at": {
																"description": "The last time the script was analyzed for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																"example": "2025-01-01T00:00:00Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string"
															},
															"mode": {
																"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																"enum": [
																	"smart"
																],
																"type": "string"
															},
															"status": {
																"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																"enum": [
																	"SUCCESS",
																	"UNSUPPORTED_APPLICATION",
																	"INSUFFICIENT_INVOCATIONS"
																],
																"readOnly": true,
																"type": "string"
															}
														},
														"type": "object"
													},
													"placement_mode": {
														"allOf": [
															{
																"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																"enum": [
																	"smart"
																],
																"type": "string"
															},
															{
																"deprecated": true,
																"type": "string"
															}
														]
													},
													"placement_status": {
														"allOf": [
															{
																"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																"enum": [
																	"SUCCESS",
																	"UNSUPPORTED_APPLICATION",
																	"INSUFFICIENT_INVOCATIONS"
																],
																"readOnly": true,
																"type": "string"
															},
															{
																"deprecated": true,
																"type": "string"
															}
														]
													},
													"tail_consumers": {
														"description": "List of Workers that will consume logs from the attached Worker.",
														"items": {
															"description": "A reference to a script that will consume logs from the attached Worker.",
															"properties": {
																"environment": {
																	"description": "Optional environment if the Worker utilizes one.",
																	"example": "production",
																	"type": "string"
																},
																"namespace": {
																	"description": "Optional dispatch namespace the script belongs to.",
																	"example": "my-namespace",
																	"type": "string"
																},
																"service": {
																	"description": "Name of Worker that is to be the consumer.",
																	"example": "my-log-consumer",
																	"type": "string"
																}
															},
															"required": [
																"service"
															],
															"type": "object"
														},
														"type": "array"
													},
													"usage_model": {
														"description": "Usage model for the Worker invocations.",
														"enum": [
															"standard"
														],
														"example": "standard",
														"type": "string"
													}
												}
											},
											"type": "array"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Workers response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List Workers response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Workers",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}": {
		"description": "Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.",
		"operationId": "worker-script-download-worker",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/javascript": {
						"schema": {
							"example": "export default {\n  async fetch(request, env, ctx) {\n    return new Response(\"Hello, world!\");\n  }\n};\n",
							"type": "string"
						}
					},
					"multipart/form-data": {
						"schema": {
							"additionalProperties": {
								"description": "Modules used by the Worker, including JavaScript files and source maps.",
								"format": "binary",
								"type": "string"
							},
							"type": "object"
						}
					}
				},
				"description": "Worker successfully downloaded. Returns script content as a multipart form, with no metadata part and no JSON encoding applied."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Download Worker response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Download Worker",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/content/v2": {
		"description": "Fetch script content only.",
		"operationId": "worker-script-get-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"string": {
						"schema": {
							"example": "export default {\n  async fetch(request, env, ctx) {\n    return new Response(\"Hello, world!\");\n  }\n};\n",
							"type": "string"
						}
					}
				},
				"description": "Fetch script content."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script content failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get script content",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/script-settings": {
		"description": "Get script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.",
		"operationId": "worker-script-settings-get-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"logpush": {
													"allOf": [
														{
															"description": "Whether Logpush is turned on for the Worker.",
															"example": false,
															"type": "boolean"
														},
														{
															"default": false,
															"type": "boolean"
														}
													]
												},
												"observability": {
													"allOf": [
														{
															"description": "Observability settings for the Worker.",
															"properties": {
																"enabled": {
																	"description": "Whether observability is enabled for the Worker.",
																	"example": true,
																	"type": "boolean"
																},
																"head_sampling_rate": {
																	"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																	"example": 0.1,
																	"nullable": true,
																	"type": "number"
																},
																"logs": {
																	"description": "Log settings for the Worker.",
																	"nullable": true,
																	"properties": {
																		"enabled": {
																			"description": "Whether logs are enabled for the Worker.",
																			"example": true,
																			"type": "boolean"
																		},
																		"head_sampling_rate": {
																			"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																			"example": 0.1,
																			"nullable": true,
																			"type": "number"
																		},
																		"invocation_logs": {
																			"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																			"example": true,
																			"type": "boolean"
																		}
																	},
																	"required": [
																		"enabled",
																		"invocation_logs"
																	],
																	"type": "object"
																}
															},
															"required": [
																"enabled"
															],
															"type": "object"
														},
														{
															"nullable": true,
															"type": "object"
														}
													]
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"nullable": true,
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Fetch script settings."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script settings failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Settings",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/secrets": {
		"description": "List secrets bound to a script.",
		"operationId": "worker-list-script-secrets",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"description": "A secret value accessible through a binding.",
												"discriminator": {
													"mapping": {
														"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
														"secret_text": "#/components/schemas/workers_binding_kind_secret_text"
													},
													"propertyName": "type"
												},
												"oneOf": [
													{
														"properties": {
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"type": "string"
															},
															"text": {
																"description": "The secret value to use.",
																"example": "My secret.",
																"type": "string",
																"writeOnly": true,
																"x-sensitive": true
															},
															"type": {
																"description": "The kind of resource that the binding provides.",
																"enum": [
																	"secret_text"
																],
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"text"
														],
														"type": "object"
													},
													{
														"properties": {
															"algorithm": {
																"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																"type": "object"
															},
															"format": {
																"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																"enum": [
																	"raw",
																	"pkcs8",
																	"spki",
																	"jwk"
																],
																"example": "raw",
																"type": "string"
															},
															"key_base64": {
																"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																"type": "string",
																"writeOnly": true,
																"x-sensitive": true
															},
															"key_jwk": {
																"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																"type": "object",
																"writeOnly": true,
																"x-sensitive": true
															},
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"type": "string"
															},
															"type": {
																"description": "The kind of resource that the binding provides.",
																"enum": [
																	"secret_key"
																],
																"type": "string"
															},
															"usages": {
																"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																"example": [
																	"encrypt",
																	"decrypt"
																],
																"items": {
																	"enum": [
																		"encrypt",
																		"decrypt",
																		"sign",
																		"verify",
																		"deriveKey",
																		"deriveBits",
																		"wrapKey",
																		"unwrapKey"
																	],
																	"type": "string"
																},
																"type": "array"
															}
														},
														"required": [
															"name",
															"type",
															"format",
															"algorithm",
															"usages"
														],
														"type": "object"
													}
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List script secrets."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List script secrets failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List script secrets",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/secrets/{secret_name}": {
		"description": "Get a given secret binding (value omitted) on a script.",
		"operationId": "worker-get-script-secret",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "secret_name",
				"required": true,
				"schema": {
					"description": "A JavaScript variable name for the secret binding.",
					"example": "mySecret",
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "A secret value accessible through a binding.",
											"discriminator": {
												"mapping": {
													"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
													"secret_text": "#/components/schemas/workers_binding_kind_secret_text"
												},
												"propertyName": "type"
											},
											"oneOf": [
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"text": {
															"description": "The secret value to use.",
															"example": "My secret.",
															"type": "string",
															"writeOnly": true,
															"x-sensitive": true
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secret_text"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"text"
													],
													"type": "object"
												},
												{
													"properties": {
														"algorithm": {
															"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
															"type": "object"
														},
														"format": {
															"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
															"enum": [
																"raw",
																"pkcs8",
																"spki",
																"jwk"
															],
															"example": "raw",
															"type": "string"
														},
														"key_base64": {
															"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
															"type": "string",
															"writeOnly": true,
															"x-sensitive": true
														},
														"key_jwk": {
															"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
															"type": "object",
															"writeOnly": true,
															"x-sensitive": true
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secret_key"
															],
															"type": "string"
														},
														"usages": {
															"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
															"example": [
																"encrypt",
																"decrypt"
															],
															"items": {
																"enum": [
																	"encrypt",
																	"decrypt",
																	"sign",
																	"verify",
																	"deriveKey",
																	"deriveBits",
																	"wrapKey",
																	"unwrapKey"
																],
																"type": "string"
															},
															"type": "array"
														}
													},
													"required": [
														"name",
														"type",
														"format",
														"algorithm",
														"usages"
													],
													"type": "object"
												}
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get script secret binding."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get script secret failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get secret binding",
		"tags": [
			"Worker Script"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/settings": {
		"description": "Get metadata and config, such as bindings or usage model.",
		"operationId": "worker-script-get-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bindings": {
													"allOf": [
														{
															"description": "List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.",
															"example": [
																{
																	"name": "MY_ENV_VAR",
																	"text": "my_data",
																	"type": "plain_text"
																}
															],
															"items": {
																"description": "A binding to allow the Worker to communicate with resources.",
																"discriminator": {
																	"mapping": {
																		"ai": "#/components/schemas/workers_binding_kind_ai",
																		"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
																		"assets": "#/components/schemas/workers_binding_kind_assets",
																		"browser": "#/components/schemas/workers_binding_kind_browser",
																		"d1": "#/components/schemas/workers_binding_kind_d1",
																		"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
																		"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
																		"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
																		"json": "#/components/schemas/workers_binding_kind_json",
																		"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
																		"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
																		"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
																		"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
																		"queue": "#/components/schemas/workers_binding_kind_queue",
																		"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
																		"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
																		"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
																		"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
																		"service": "#/components/schemas/workers_binding_kind_service",
																		"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
																		"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
																		"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
																	},
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"ai"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"dataset": {
																				"description": "The name of the dataset to bind to.",
																				"example": "some_dataset",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"analytics_engine"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"dataset"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"assets"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"browser"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the D1 database to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"d1"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Namespace to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"outbound": {
																				"description": "Outbound worker.",
																				"properties": {
																					"params": {
																						"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																						"items": {
																							"example": "url",
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"worker": {
																						"description": "Outbound worker.",
																						"properties": {
																							"environment": {
																								"description": "Environment of the outbound worker.",
																								"type": "string"
																							},
																							"service": {
																								"description": "Name of the outbound worker.",
																								"type": "string"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"type": "object"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"dispatch_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"class_name": {
																				"description": "The exported class name of the Durable Object.",
																				"example": "MyDurableObject",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"environment": {
																				"description": "The environment of the script_name to bind to.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"allOf": [
																					{
																						"description": "Namespace identifier tag.",
																						"example": "0f2ac74b498b48028cb68387c421e279",
																						"maxLength": 32,
																						"type": "string"
																					},
																					{
																						"type": "string",
																						"x-stainless-terraform-configurability": "computed_optional"
																					}
																				]
																			},
																			"script_name": {
																				"description": "The script where the Durable Object is defined, if it is external to this Worker.",
																				"example": "my-other-worker",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"durable_object_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the Hyperdrive connection to bind to.",
																				"example": "57b7076f58be42419276f058a8968187",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"hyperdrive"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"json": {
																				"description": "JSON data to use.",
																				"example": "{ \"message\": \"Hello, world!\" }",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"json"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"description": "Namespace identifier tag.",
																				"example": "0f2ac74b498b48028cb68387c421e279",
																				"maxLength": 32,
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"kv_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"certificate_id": {
																				"description": "Identifier of the certificate to bind to.",
																				"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"mtls_certificate"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"certificate_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The text value to use.",
																				"example": "Hello, world!",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"plain_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"pipeline": {
																				"description": "Name of the Pipeline to bind to.",
																				"example": "my-pipeline",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"pipelines"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"pipeline"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"queue_name": {
																				"description": "Name of the Queue to bind to.",
																				"example": "my-queue",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"queue"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"queue_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"bucket_name": {
																				"description": "R2 bucket to bind to.",
																				"example": "my-r2-bucket",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"r2_bucket"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"bucket_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The secret value to use.",
																				"example": "My secret.",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"service"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service",
																			"environment"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Tail Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"tail_consumer"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"index_name": {
																				"description": "Name of the Vectorize index to bind to.",
																				"example": "my-index-name",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"vectorize"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"index_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"version_metadata"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"secret_name": {
																				"description": "Name of the secret in the store.",
																				"example": "my_secret",
																				"type": "string"
																			},
																			"store_id": {
																				"description": "ID of the store containing the secret.",
																				"example": "8c8b1387108e49be85669169793e7bd2",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secrets_store_secret"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"store_id",
																			"secret_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"algorithm": {
																				"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																				"type": "object"
																			},
																			"format": {
																				"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																				"enum": [
																					"raw",
																					"pkcs8",
																					"spki",
																					"jwk"
																				],
																				"example": "raw",
																				"type": "string"
																			},
																			"key_base64": {
																				"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"key_jwk": {
																				"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																				"type": "object",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_key"
																				],
																				"type": "string"
																			},
																			"usages": {
																				"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																				"example": [
																					"encrypt",
																					"decrypt"
																				],
																				"items": {
																					"enum": [
																						"encrypt",
																						"decrypt",
																						"sign",
																						"verify",
																						"deriveKey",
																						"deriveBits",
																						"wrapKey",
																						"unwrapKey"
																					],
																					"type": "string"
																				},
																				"type": "array"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"format",
																			"algorithm",
																			"usages"
																		],
																		"type": "object"
																	}
																],
																"type": "object"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"description": "A binding to allow the Worker to communicate with resources.",
																"discriminator": {
																	"mapping": {
																		"ai": "#/components/schemas/workers_binding_kind_ai",
																		"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
																		"assets": "#/components/schemas/workers_binding_kind_assets",
																		"browser": "#/components/schemas/workers_binding_kind_browser",
																		"d1": "#/components/schemas/workers_binding_kind_d1",
																		"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
																		"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
																		"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
																		"json": "#/components/schemas/workers_binding_kind_json",
																		"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
																		"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
																		"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
																		"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
																		"queue": "#/components/schemas/workers_binding_kind_queue",
																		"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
																		"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
																		"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
																		"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
																		"service": "#/components/schemas/workers_binding_kind_service",
																		"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
																		"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
																		"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
																	},
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"ai"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"dataset": {
																				"description": "The name of the dataset to bind to.",
																				"example": "some_dataset",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"analytics_engine"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"dataset"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"assets"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"browser"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the D1 database to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"d1"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Namespace to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"outbound": {
																				"description": "Outbound worker.",
																				"properties": {
																					"params": {
																						"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																						"items": {
																							"example": "url",
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"worker": {
																						"description": "Outbound worker.",
																						"properties": {
																							"environment": {
																								"description": "Environment of the outbound worker.",
																								"type": "string"
																							},
																							"service": {
																								"description": "Name of the outbound worker.",
																								"type": "string"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"type": "object"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"dispatch_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"class_name": {
																				"description": "The exported class name of the Durable Object.",
																				"example": "MyDurableObject",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"environment": {
																				"description": "The environment of the script_name to bind to.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"allOf": [
																					{
																						"description": "Namespace identifier tag.",
																						"example": "0f2ac74b498b48028cb68387c421e279",
																						"maxLength": 32,
																						"type": "string"
																					},
																					{
																						"type": "string",
																						"x-stainless-terraform-configurability": "computed_optional"
																					}
																				]
																			},
																			"script_name": {
																				"description": "The script where the Durable Object is defined, if it is external to this Worker.",
																				"example": "my-other-worker",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"durable_object_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the Hyperdrive connection to bind to.",
																				"example": "57b7076f58be42419276f058a8968187",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"hyperdrive"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"json": {
																				"description": "JSON data to use.",
																				"example": "{ \"message\": \"Hello, world!\" }",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"json"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"description": "Namespace identifier tag.",
																				"example": "0f2ac74b498b48028cb68387c421e279",
																				"maxLength": 32,
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"kv_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"certificate_id": {
																				"description": "Identifier of the certificate to bind to.",
																				"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"mtls_certificate"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"certificate_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The text value to use.",
																				"example": "Hello, world!",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"plain_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"pipeline": {
																				"description": "Name of the Pipeline to bind to.",
																				"example": "my-pipeline",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"pipelines"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"pipeline"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"queue_name": {
																				"description": "Name of the Queue to bind to.",
																				"example": "my-queue",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"queue"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"queue_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"bucket_name": {
																				"description": "R2 bucket to bind to.",
																				"example": "my-r2-bucket",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"r2_bucket"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"bucket_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The secret value to use.",
																				"example": "My secret.",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"service"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service",
																			"environment"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Tail Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"tail_consumer"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"index_name": {
																				"description": "Name of the Vectorize index to bind to.",
																				"example": "my-index-name",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"vectorize"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"index_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"version_metadata"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"secret_name": {
																				"description": "Name of the secret in the store.",
																				"example": "my_secret",
																				"type": "string"
																			},
																			"store_id": {
																				"description": "ID of the store containing the secret.",
																				"example": "8c8b1387108e49be85669169793e7bd2",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secrets_store_secret"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"store_id",
																			"secret_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"algorithm": {
																				"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																				"type": "object"
																			},
																			"format": {
																				"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																				"enum": [
																					"raw",
																					"pkcs8",
																					"spki",
																					"jwk"
																				],
																				"example": "raw",
																				"type": "string"
																			},
																			"key_base64": {
																				"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"key_jwk": {
																				"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																				"type": "object",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_key"
																				],
																				"type": "string"
																			},
																			"usages": {
																				"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																				"example": [
																					"encrypt",
																					"decrypt"
																				],
																				"items": {
																					"enum": [
																						"encrypt",
																						"decrypt",
																						"sign",
																						"verify",
																						"deriveKey",
																						"deriveBits",
																						"wrapKey",
																						"unwrapKey"
																					],
																					"type": "string"
																				},
																				"type": "array"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"format",
																			"algorithm",
																			"usages"
																		],
																		"type": "object"
																	}
																],
																"type": "object"
															},
															"type": "array"
														}
													]
												},
												"compatibility_date": {
													"allOf": [
														{
															"description": "Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.",
															"example": "2021-01-01",
															"type": "string"
														},
														{
															"default": "",
															"type": "string"
														}
													]
												},
												"compatibility_flags": {
													"allOf": [
														{
															"description": "Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.",
															"example": [
																"nodejs_compat"
															],
															"items": {
																"description": "Flag that enables or disables a specific feature in the Workers runtime.",
																"example": "nodejs_compat",
																"type": "string"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"type": "string"
															},
															"type": "array"
														}
													]
												},
												"limits": {
													"description": "Limits to apply for this Worker.",
													"properties": {
														"cpu_ms": {
															"description": "The amount of CPU time this Worker can use in milliseconds.",
															"example": 50,
															"type": "integer"
														}
													},
													"type": "object"
												},
												"logpush": {
													"allOf": [
														{
															"description": "Whether Logpush is turned on for the Worker.",
															"example": false,
															"type": "boolean"
														},
														{
															"default": "",
															"type": "boolean"
														}
													]
												},
												"migrations": {
													"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
													"oneOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															],
															"description": "A single set of migrations to apply."
														},
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"steps": {
																			"description": "Migrations to apply in order.",
																			"items": {
																				"properties": {
																					"deleted_classes": {
																						"description": "A list of classes to delete Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_classes": {
																						"description": "A list of classes to create Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_sqlite_classes": {
																						"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"renamed_classes": {
																						"description": "A list of classes with Durable Object namespaces that were renamed.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					},
																					"transferred_classes": {
																						"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"from_script": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															]
														}
													]
												},
												"observability": {
													"description": "Observability settings for the Worker.",
													"properties": {
														"enabled": {
															"description": "Whether observability is enabled for the Worker.",
															"example": true,
															"type": "boolean"
														},
														"head_sampling_rate": {
															"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
															"example": 0.1,
															"nullable": true,
															"type": "number"
														},
														"logs": {
															"description": "Log settings for the Worker.",
															"nullable": true,
															"properties": {
																"enabled": {
																	"description": "Whether logs are enabled for the Worker.",
																	"example": true,
																	"type": "boolean"
																},
																"head_sampling_rate": {
																	"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																	"example": 0.1,
																	"nullable": true,
																	"type": "number"
																},
																"invocation_logs": {
																	"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"enabled",
																"invocation_logs"
															],
															"type": "object"
														}
													},
													"required": [
														"enabled"
													],
													"type": "object"
												},
												"placement": {
													"allOf": [
														{
															"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"properties": {
																"mode": {
																	"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																	"enum": [
																		"smart"
																	],
																	"type": "string"
																}
															},
															"type": "object"
														},
														{
															"default": {},
															"type": "object"
														}
													]
												},
												"tags": {
													"allOf": [
														{
															"description": "Tags to help you manage your Workers.",
															"items": {
																"description": "Tag to help you manage your Worker.",
																"example": "my-tag",
																"type": "string"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"type": "string"
															},
															"type": "array"
														}
													]
												},
												"tail_consumers": {
													"allOf": [
														{
															"description": "List of Workers that will consume logs from the attached Worker.",
															"items": {
																"description": "A reference to a script that will consume logs from the attached Worker.",
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Optional dispatch namespace the script belongs to.",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker that is to be the consumer.",
																		"example": "my-log-consumer",
																		"type": "string"
																	}
																},
																"required": [
																	"service"
																],
																"type": "object"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"description": "A reference to a script that will consume logs from the attached Worker.",
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Optional dispatch namespace the script belongs to.",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker that is to be the consumer.",
																		"example": "my-log-consumer",
																		"type": "string"
																	}
																},
																"required": [
																	"service"
																],
																"type": "object"
															},
															"type": "array"
														}
													]
												},
												"usage_model": {
													"allOf": [
														{
															"description": "Usage model for the Worker invocations.",
															"enum": [
																"standard"
															],
															"example": "standard",
															"type": "string"
														},
														{
															"default": "standard",
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Fetch settings."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch settings failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Settings",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/subdomain": {
		"description": "Get if the Worker is available on the workers.dev subdomain.",
		"operationId": "worker-script-get-subdomain",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"enabled": {
													"description": "Whether the Worker is available on the workers.dev subdomain.",
													"example": true,
													"type": "boolean"
												},
												"previews_enabled": {
													"description": "Whether the Worker's Preview URLs are available on the workers.dev subdomain.",
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"enabled",
												"previews_enabled"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Get subdomain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get subdomain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Worker subdomain",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/usage-model": {
		"description": "Fetches the Usage Model for a given Worker.",
		"operationId": "worker-script-fetch-usage-model",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"usage_model": {
													"type": "string"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Fetch Usage Model response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch Usage Model response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Fetch Usage Model",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Tail Read",
			"Workers Scripts Write",
			"Workers Scripts Read"
		]
	},
	"PATCH /accounts/{account_id}/workers/scripts/{script_name}/script-settings": {
		"description": "Patch script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Including but not limited to Logpush and Tail Consumers.",
		"operationId": "worker-script-settings-patch-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"logpush": {
								"allOf": [
									{
										"description": "Whether Logpush is turned on for the Worker.",
										"example": false,
										"type": "boolean"
									},
									{
										"default": false,
										"type": "boolean"
									}
								]
							},
							"observability": {
								"allOf": [
									{
										"description": "Observability settings for the Worker.",
										"properties": {
											"enabled": {
												"description": "Whether observability is enabled for the Worker.",
												"example": true,
												"type": "boolean"
											},
											"head_sampling_rate": {
												"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
												"example": 0.1,
												"nullable": true,
												"type": "number"
											},
											"logs": {
												"description": "Log settings for the Worker.",
												"nullable": true,
												"properties": {
													"enabled": {
														"description": "Whether logs are enabled for the Worker.",
														"example": true,
														"type": "boolean"
													},
													"head_sampling_rate": {
														"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
														"example": 0.1,
														"nullable": true,
														"type": "number"
													},
													"invocation_logs": {
														"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
														"example": true,
														"type": "boolean"
													}
												},
												"required": [
													"enabled",
													"invocation_logs"
												],
												"type": "object"
											}
										},
										"required": [
											"enabled"
										],
										"type": "object"
									},
									{
										"nullable": true,
										"type": "object"
									}
								]
							},
							"tail_consumers": {
								"description": "List of Workers that will consume logs from the attached Worker.",
								"items": {
									"description": "A reference to a script that will consume logs from the attached Worker.",
									"properties": {
										"environment": {
											"description": "Optional environment if the Worker utilizes one.",
											"example": "production",
											"type": "string"
										},
										"namespace": {
											"description": "Optional dispatch namespace the script belongs to.",
											"example": "my-namespace",
											"type": "string"
										},
										"service": {
											"description": "Name of Worker that is to be the consumer.",
											"example": "my-log-consumer",
											"type": "string"
										}
									},
									"required": [
										"service"
									],
									"type": "object"
								},
								"nullable": true,
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"logpush": {
													"allOf": [
														{
															"description": "Whether Logpush is turned on for the Worker.",
															"example": false,
															"type": "boolean"
														},
														{
															"default": false,
															"type": "boolean"
														}
													]
												},
												"observability": {
													"allOf": [
														{
															"description": "Observability settings for the Worker.",
															"properties": {
																"enabled": {
																	"description": "Whether observability is enabled for the Worker.",
																	"example": true,
																	"type": "boolean"
																},
																"head_sampling_rate": {
																	"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																	"example": 0.1,
																	"nullable": true,
																	"type": "number"
																},
																"logs": {
																	"description": "Log settings for the Worker.",
																	"nullable": true,
																	"properties": {
																		"enabled": {
																			"description": "Whether logs are enabled for the Worker.",
																			"example": true,
																			"type": "boolean"
																		},
																		"head_sampling_rate": {
																			"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																			"example": 0.1,
																			"nullable": true,
																			"type": "number"
																		},
																		"invocation_logs": {
																			"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																			"example": true,
																			"type": "boolean"
																		}
																	},
																	"required": [
																		"enabled",
																		"invocation_logs"
																	],
																	"type": "object"
																}
															},
															"required": [
																"enabled"
															],
															"type": "object"
														},
														{
															"nullable": true,
															"type": "object"
														}
													]
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"nullable": true,
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch script settings."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch script settings failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Script Settings",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"PATCH /accounts/{account_id}/workers/scripts/{script_name}/settings": {
		"description": "Patch metadata or config, such as bindings or usage model.",
		"operationId": "worker-script-patch-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"schema": {
						"properties": {
							"settings": {
								"properties": {
									"bindings": {
										"allOf": [
											{
												"description": "List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.",
												"example": [
													{
														"name": "MY_ENV_VAR",
														"text": "my_data",
														"type": "plain_text"
													}
												],
												"items": {
													"description": "A binding to allow the Worker to communicate with resources.",
													"discriminator": {
														"mapping": {
															"ai": "#/components/schemas/workers_binding_kind_ai",
															"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
															"assets": "#/components/schemas/workers_binding_kind_assets",
															"browser": "#/components/schemas/workers_binding_kind_browser",
															"d1": "#/components/schemas/workers_binding_kind_d1",
															"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
															"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
															"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
															"json": "#/components/schemas/workers_binding_kind_json",
															"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
															"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
															"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
															"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
															"queue": "#/components/schemas/workers_binding_kind_queue",
															"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
															"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
															"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
															"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
															"service": "#/components/schemas/workers_binding_kind_service",
															"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
															"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
															"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
														},
														"propertyName": "type"
													},
													"oneOf": [
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"ai"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"dataset": {
																	"description": "The name of the dataset to bind to.",
																	"example": "some_dataset",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"analytics_engine"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"dataset"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"assets"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"browser"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"id": {
																	"description": "Identifier of the D1 database to bind to.",
																	"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"d1"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"id"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"namespace": {
																	"description": "Namespace to bind to.",
																	"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																	"type": "string"
																},
																"outbound": {
																	"description": "Outbound worker.",
																	"properties": {
																		"params": {
																			"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																			"items": {
																				"example": "url",
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"worker": {
																			"description": "Outbound worker.",
																			"properties": {
																				"environment": {
																					"description": "Environment of the outbound worker.",
																					"type": "string"
																				},
																				"service": {
																					"description": "Name of the outbound worker.",
																					"type": "string"
																				}
																			},
																			"type": "object"
																		}
																	},
																	"type": "object"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"dispatch_namespace"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"namespace"
															],
															"type": "object"
														},
														{
															"properties": {
																"class_name": {
																	"description": "The exported class name of the Durable Object.",
																	"example": "MyDurableObject",
																	"type": "string",
																	"x-stainless-terraform-configurability": "computed_optional"
																},
																"environment": {
																	"description": "The environment of the script_name to bind to.",
																	"example": "production",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"namespace_id": {
																	"allOf": [
																		{
																			"description": "Namespace identifier tag.",
																			"example": "0f2ac74b498b48028cb68387c421e279",
																			"maxLength": 32,
																			"type": "string"
																		},
																		{
																			"type": "string",
																			"x-stainless-terraform-configurability": "computed_optional"
																		}
																	]
																},
																"script_name": {
																	"description": "The script where the Durable Object is defined, if it is external to this Worker.",
																	"example": "my-other-worker",
																	"type": "string",
																	"x-stainless-terraform-configurability": "computed_optional"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"durable_object_namespace"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"id": {
																	"description": "Identifier of the Hyperdrive connection to bind to.",
																	"example": "57b7076f58be42419276f058a8968187",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"hyperdrive"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"id"
															],
															"type": "object"
														},
														{
															"properties": {
																"json": {
																	"description": "JSON data to use.",
																	"example": "{ \"message\": \"Hello, world!\" }",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"json"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"namespace_id": {
																	"description": "Namespace identifier tag.",
																	"example": "0f2ac74b498b48028cb68387c421e279",
																	"maxLength": 32,
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"kv_namespace"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"namespace_id"
															],
															"type": "object"
														},
														{
															"properties": {
																"certificate_id": {
																	"description": "Identifier of the certificate to bind to.",
																	"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"mtls_certificate"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"certificate_id"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"text": {
																	"description": "The text value to use.",
																	"example": "Hello, world!",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"plain_text"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"text"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"pipeline": {
																	"description": "Name of the Pipeline to bind to.",
																	"example": "my-pipeline",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"pipelines"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"pipeline"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"queue_name": {
																	"description": "Name of the Queue to bind to.",
																	"example": "my-queue",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"queue"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"queue_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"bucket_name": {
																	"description": "R2 bucket to bind to.",
																	"example": "my-r2-bucket",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"r2_bucket"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"bucket_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"text": {
																	"description": "The secret value to use.",
																	"example": "My secret.",
																	"type": "string",
																	"writeOnly": true,
																	"x-sensitive": true
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"secret_text"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"text"
															],
															"type": "object"
														},
														{
															"properties": {
																"environment": {
																	"description": "Optional environment if the Worker utilizes one.",
																	"example": "production",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"service": {
																	"description": "Name of Worker to bind to.",
																	"example": "my-worker",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"service"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"service",
																"environment"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"service": {
																	"description": "Name of Tail Worker to bind to.",
																	"example": "my-worker",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"tail_consumer"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"service"
															],
															"type": "object"
														},
														{
															"properties": {
																"index_name": {
																	"description": "Name of the Vectorize index to bind to.",
																	"example": "my-index-name",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"vectorize"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"index_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"version_metadata"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"secret_name": {
																	"description": "Name of the secret in the store.",
																	"example": "my_secret",
																	"type": "string"
																},
																"store_id": {
																	"description": "ID of the store containing the secret.",
																	"example": "8c8b1387108e49be85669169793e7bd2",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"secrets_store_secret"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"store_id",
																"secret_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"algorithm": {
																	"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																	"type": "object"
																},
																"format": {
																	"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																	"enum": [
																		"raw",
																		"pkcs8",
																		"spki",
																		"jwk"
																	],
																	"example": "raw",
																	"type": "string"
																},
																"key_base64": {
																	"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																	"type": "string",
																	"writeOnly": true,
																	"x-sensitive": true
																},
																"key_jwk": {
																	"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																	"type": "object",
																	"writeOnly": true,
																	"x-sensitive": true
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"secret_key"
																	],
																	"type": "string"
																},
																"usages": {
																	"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																	"example": [
																		"encrypt",
																		"decrypt"
																	],
																	"items": {
																		"enum": [
																			"encrypt",
																			"decrypt",
																			"sign",
																			"verify",
																			"deriveKey",
																			"deriveBits",
																			"wrapKey",
																			"unwrapKey"
																		],
																		"type": "string"
																	},
																	"type": "array"
																}
															},
															"required": [
																"name",
																"type",
																"format",
																"algorithm",
																"usages"
															],
															"type": "object"
														}
													],
													"type": "object"
												},
												"type": "array"
											},
											{
												"default": [],
												"items": {
													"description": "A binding to allow the Worker to communicate with resources.",
													"discriminator": {
														"mapping": {
															"ai": "#/components/schemas/workers_binding_kind_ai",
															"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
															"assets": "#/components/schemas/workers_binding_kind_assets",
															"browser": "#/components/schemas/workers_binding_kind_browser",
															"d1": "#/components/schemas/workers_binding_kind_d1",
															"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
															"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
															"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
															"json": "#/components/schemas/workers_binding_kind_json",
															"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
															"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
															"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
															"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
															"queue": "#/components/schemas/workers_binding_kind_queue",
															"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
															"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
															"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
															"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
															"service": "#/components/schemas/workers_binding_kind_service",
															"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
															"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
															"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
														},
														"propertyName": "type"
													},
													"oneOf": [
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"ai"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"dataset": {
																	"description": "The name of the dataset to bind to.",
																	"example": "some_dataset",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"analytics_engine"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"dataset"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"assets"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"browser"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"id": {
																	"description": "Identifier of the D1 database to bind to.",
																	"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"d1"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"id"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"namespace": {
																	"description": "Namespace to bind to.",
																	"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																	"type": "string"
																},
																"outbound": {
																	"description": "Outbound worker.",
																	"properties": {
																		"params": {
																			"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																			"items": {
																				"example": "url",
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"worker": {
																			"description": "Outbound worker.",
																			"properties": {
																				"environment": {
																					"description": "Environment of the outbound worker.",
																					"type": "string"
																				},
																				"service": {
																					"description": "Name of the outbound worker.",
																					"type": "string"
																				}
																			},
																			"type": "object"
																		}
																	},
																	"type": "object"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"dispatch_namespace"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"namespace"
															],
															"type": "object"
														},
														{
															"properties": {
																"class_name": {
																	"description": "The exported class name of the Durable Object.",
																	"example": "MyDurableObject",
																	"type": "string",
																	"x-stainless-terraform-configurability": "computed_optional"
																},
																"environment": {
																	"description": "The environment of the script_name to bind to.",
																	"example": "production",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"namespace_id": {
																	"allOf": [
																		{
																			"description": "Namespace identifier tag.",
																			"example": "0f2ac74b498b48028cb68387c421e279",
																			"maxLength": 32,
																			"type": "string"
																		},
																		{
																			"type": "string",
																			"x-stainless-terraform-configurability": "computed_optional"
																		}
																	]
																},
																"script_name": {
																	"description": "The script where the Durable Object is defined, if it is external to this Worker.",
																	"example": "my-other-worker",
																	"type": "string",
																	"x-stainless-terraform-configurability": "computed_optional"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"durable_object_namespace"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"id": {
																	"description": "Identifier of the Hyperdrive connection to bind to.",
																	"example": "57b7076f58be42419276f058a8968187",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"hyperdrive"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"id"
															],
															"type": "object"
														},
														{
															"properties": {
																"json": {
																	"description": "JSON data to use.",
																	"example": "{ \"message\": \"Hello, world!\" }",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"json"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"json"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"namespace_id": {
																	"description": "Namespace identifier tag.",
																	"example": "0f2ac74b498b48028cb68387c421e279",
																	"maxLength": 32,
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"kv_namespace"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"namespace_id"
															],
															"type": "object"
														},
														{
															"properties": {
																"certificate_id": {
																	"description": "Identifier of the certificate to bind to.",
																	"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"mtls_certificate"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"certificate_id"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"text": {
																	"description": "The text value to use.",
																	"example": "Hello, world!",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"plain_text"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"text"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"pipeline": {
																	"description": "Name of the Pipeline to bind to.",
																	"example": "my-pipeline",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"pipelines"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"pipeline"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"queue_name": {
																	"description": "Name of the Queue to bind to.",
																	"example": "my-queue",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"queue"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"queue_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"bucket_name": {
																	"description": "R2 bucket to bind to.",
																	"example": "my-r2-bucket",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"r2_bucket"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"bucket_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"text": {
																	"description": "The secret value to use.",
																	"example": "My secret.",
																	"type": "string",
																	"writeOnly": true,
																	"x-sensitive": true
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"secret_text"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"text"
															],
															"type": "object"
														},
														{
															"properties": {
																"environment": {
																	"description": "Optional environment if the Worker utilizes one.",
																	"example": "production",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"service": {
																	"description": "Name of Worker to bind to.",
																	"example": "my-worker",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"service"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"service",
																"environment"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"service": {
																	"description": "Name of Tail Worker to bind to.",
																	"example": "my-worker",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"tail_consumer"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"service"
															],
															"type": "object"
														},
														{
															"properties": {
																"index_name": {
																	"description": "Name of the Vectorize index to bind to.",
																	"example": "my-index-name",
																	"type": "string"
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"vectorize"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"index_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"version_metadata"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type"
															],
															"type": "object"
														},
														{
															"properties": {
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"secret_name": {
																	"description": "Name of the secret in the store.",
																	"example": "my_secret",
																	"type": "string"
																},
																"store_id": {
																	"description": "ID of the store containing the secret.",
																	"example": "8c8b1387108e49be85669169793e7bd2",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"secrets_store_secret"
																	],
																	"type": "string"
																}
															},
															"required": [
																"name",
																"type",
																"store_id",
																"secret_name"
															],
															"type": "object"
														},
														{
															"properties": {
																"algorithm": {
																	"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																	"type": "object"
																},
																"format": {
																	"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																	"enum": [
																		"raw",
																		"pkcs8",
																		"spki",
																		"jwk"
																	],
																	"example": "raw",
																	"type": "string"
																},
																"key_base64": {
																	"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																	"type": "string",
																	"writeOnly": true,
																	"x-sensitive": true
																},
																"key_jwk": {
																	"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																	"type": "object",
																	"writeOnly": true,
																	"x-sensitive": true
																},
																"name": {
																	"description": "A JavaScript variable name for the binding.",
																	"example": "myBinding",
																	"type": "string"
																},
																"type": {
																	"description": "The kind of resource that the binding provides.",
																	"enum": [
																		"secret_key"
																	],
																	"type": "string"
																},
																"usages": {
																	"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																	"example": [
																		"encrypt",
																		"decrypt"
																	],
																	"items": {
																		"enum": [
																			"encrypt",
																			"decrypt",
																			"sign",
																			"verify",
																			"deriveKey",
																			"deriveBits",
																			"wrapKey",
																			"unwrapKey"
																		],
																		"type": "string"
																	},
																	"type": "array"
																}
															},
															"required": [
																"name",
																"type",
																"format",
																"algorithm",
																"usages"
															],
															"type": "object"
														}
													],
													"type": "object"
												},
												"type": "array"
											}
										]
									},
									"compatibility_date": {
										"allOf": [
											{
												"description": "Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.",
												"example": "2021-01-01",
												"type": "string"
											},
											{
												"default": "",
												"type": "string"
											}
										]
									},
									"compatibility_flags": {
										"allOf": [
											{
												"description": "Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.",
												"example": [
													"nodejs_compat"
												],
												"items": {
													"description": "Flag that enables or disables a specific feature in the Workers runtime.",
													"example": "nodejs_compat",
													"type": "string"
												},
												"type": "array"
											},
											{
												"default": [],
												"items": {
													"type": "string"
												},
												"type": "array"
											}
										]
									},
									"limits": {
										"description": "Limits to apply for this Worker.",
										"properties": {
											"cpu_ms": {
												"description": "The amount of CPU time this Worker can use in milliseconds.",
												"example": 50,
												"type": "integer"
											}
										},
										"type": "object"
									},
									"logpush": {
										"allOf": [
											{
												"description": "Whether Logpush is turned on for the Worker.",
												"example": false,
												"type": "boolean"
											},
											{
												"default": "",
												"type": "boolean"
											}
										]
									},
									"migrations": {
										"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
										"oneOf": [
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"deleted_classes": {
																"description": "A list of classes to delete Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_classes": {
																"description": "A list of classes to create Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_sqlite_classes": {
																"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"renamed_classes": {
																"description": "A list of classes with Durable Object namespaces that were renamed.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															},
															"transferred_classes": {
																"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"from_script": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												],
												"description": "A single set of migrations to apply."
											},
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"steps": {
																"description": "Migrations to apply in order.",
																"items": {
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												]
											}
										]
									},
									"observability": {
										"description": "Observability settings for the Worker.",
										"properties": {
											"enabled": {
												"description": "Whether observability is enabled for the Worker.",
												"example": true,
												"type": "boolean"
											},
											"head_sampling_rate": {
												"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
												"example": 0.1,
												"nullable": true,
												"type": "number"
											},
											"logs": {
												"description": "Log settings for the Worker.",
												"nullable": true,
												"properties": {
													"enabled": {
														"description": "Whether logs are enabled for the Worker.",
														"example": true,
														"type": "boolean"
													},
													"head_sampling_rate": {
														"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
														"example": 0.1,
														"nullable": true,
														"type": "number"
													},
													"invocation_logs": {
														"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
														"example": true,
														"type": "boolean"
													}
												},
												"required": [
													"enabled",
													"invocation_logs"
												],
												"type": "object"
											}
										},
										"required": [
											"enabled"
										],
										"type": "object"
									},
									"placement": {
										"allOf": [
											{
												"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
												"properties": {
													"mode": {
														"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
														"enum": [
															"smart"
														],
														"type": "string"
													}
												},
												"type": "object"
											},
											{
												"default": {},
												"type": "object"
											}
										]
									},
									"tags": {
										"allOf": [
											{
												"description": "Tags to help you manage your Workers.",
												"items": {
													"description": "Tag to help you manage your Worker.",
													"example": "my-tag",
													"type": "string"
												},
												"type": "array"
											},
											{
												"default": [],
												"items": {
													"type": "string"
												},
												"type": "array"
											}
										]
									},
									"tail_consumers": {
										"allOf": [
											{
												"description": "List of Workers that will consume logs from the attached Worker.",
												"items": {
													"description": "A reference to a script that will consume logs from the attached Worker.",
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"namespace": {
															"description": "Optional dispatch namespace the script belongs to.",
															"example": "my-namespace",
															"type": "string"
														},
														"service": {
															"description": "Name of Worker that is to be the consumer.",
															"example": "my-log-consumer",
															"type": "string"
														}
													},
													"required": [
														"service"
													],
													"type": "object"
												},
												"type": "array"
											},
											{
												"default": [],
												"items": {
													"description": "A reference to a script that will consume logs from the attached Worker.",
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"namespace": {
															"description": "Optional dispatch namespace the script belongs to.",
															"example": "my-namespace",
															"type": "string"
														},
														"service": {
															"description": "Name of Worker that is to be the consumer.",
															"example": "my-log-consumer",
															"type": "string"
														}
													},
													"required": [
														"service"
													],
													"type": "object"
												},
												"type": "array"
											}
										]
									},
									"usage_model": {
										"allOf": [
											{
												"description": "Usage model for the Worker invocations.",
												"enum": [
													"standard"
												],
												"example": "standard",
												"type": "string"
											},
											{
												"default": "standard",
												"type": "string"
											}
										]
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bindings": {
													"allOf": [
														{
															"description": "List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.",
															"example": [
																{
																	"name": "MY_ENV_VAR",
																	"text": "my_data",
																	"type": "plain_text"
																}
															],
															"items": {
																"description": "A binding to allow the Worker to communicate with resources.",
																"discriminator": {
																	"mapping": {
																		"ai": "#/components/schemas/workers_binding_kind_ai",
																		"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
																		"assets": "#/components/schemas/workers_binding_kind_assets",
																		"browser": "#/components/schemas/workers_binding_kind_browser",
																		"d1": "#/components/schemas/workers_binding_kind_d1",
																		"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
																		"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
																		"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
																		"json": "#/components/schemas/workers_binding_kind_json",
																		"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
																		"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
																		"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
																		"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
																		"queue": "#/components/schemas/workers_binding_kind_queue",
																		"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
																		"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
																		"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
																		"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
																		"service": "#/components/schemas/workers_binding_kind_service",
																		"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
																		"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
																		"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
																	},
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"ai"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"dataset": {
																				"description": "The name of the dataset to bind to.",
																				"example": "some_dataset",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"analytics_engine"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"dataset"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"assets"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"browser"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the D1 database to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"d1"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Namespace to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"outbound": {
																				"description": "Outbound worker.",
																				"properties": {
																					"params": {
																						"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																						"items": {
																							"example": "url",
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"worker": {
																						"description": "Outbound worker.",
																						"properties": {
																							"environment": {
																								"description": "Environment of the outbound worker.",
																								"type": "string"
																							},
																							"service": {
																								"description": "Name of the outbound worker.",
																								"type": "string"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"type": "object"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"dispatch_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"class_name": {
																				"description": "The exported class name of the Durable Object.",
																				"example": "MyDurableObject",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"environment": {
																				"description": "The environment of the script_name to bind to.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"allOf": [
																					{
																						"description": "Namespace identifier tag.",
																						"example": "0f2ac74b498b48028cb68387c421e279",
																						"maxLength": 32,
																						"type": "string"
																					},
																					{
																						"type": "string",
																						"x-stainless-terraform-configurability": "computed_optional"
																					}
																				]
																			},
																			"script_name": {
																				"description": "The script where the Durable Object is defined, if it is external to this Worker.",
																				"example": "my-other-worker",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"durable_object_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the Hyperdrive connection to bind to.",
																				"example": "57b7076f58be42419276f058a8968187",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"hyperdrive"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"json": {
																				"description": "JSON data to use.",
																				"example": "{ \"message\": \"Hello, world!\" }",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"json"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"description": "Namespace identifier tag.",
																				"example": "0f2ac74b498b48028cb68387c421e279",
																				"maxLength": 32,
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"kv_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"certificate_id": {
																				"description": "Identifier of the certificate to bind to.",
																				"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"mtls_certificate"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"certificate_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The text value to use.",
																				"example": "Hello, world!",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"plain_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"pipeline": {
																				"description": "Name of the Pipeline to bind to.",
																				"example": "my-pipeline",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"pipelines"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"pipeline"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"queue_name": {
																				"description": "Name of the Queue to bind to.",
																				"example": "my-queue",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"queue"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"queue_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"bucket_name": {
																				"description": "R2 bucket to bind to.",
																				"example": "my-r2-bucket",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"r2_bucket"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"bucket_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The secret value to use.",
																				"example": "My secret.",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"service"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service",
																			"environment"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Tail Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"tail_consumer"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"index_name": {
																				"description": "Name of the Vectorize index to bind to.",
																				"example": "my-index-name",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"vectorize"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"index_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"version_metadata"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"secret_name": {
																				"description": "Name of the secret in the store.",
																				"example": "my_secret",
																				"type": "string"
																			},
																			"store_id": {
																				"description": "ID of the store containing the secret.",
																				"example": "8c8b1387108e49be85669169793e7bd2",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secrets_store_secret"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"store_id",
																			"secret_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"algorithm": {
																				"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																				"type": "object"
																			},
																			"format": {
																				"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																				"enum": [
																					"raw",
																					"pkcs8",
																					"spki",
																					"jwk"
																				],
																				"example": "raw",
																				"type": "string"
																			},
																			"key_base64": {
																				"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"key_jwk": {
																				"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																				"type": "object",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_key"
																				],
																				"type": "string"
																			},
																			"usages": {
																				"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																				"example": [
																					"encrypt",
																					"decrypt"
																				],
																				"items": {
																					"enum": [
																						"encrypt",
																						"decrypt",
																						"sign",
																						"verify",
																						"deriveKey",
																						"deriveBits",
																						"wrapKey",
																						"unwrapKey"
																					],
																					"type": "string"
																				},
																				"type": "array"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"format",
																			"algorithm",
																			"usages"
																		],
																		"type": "object"
																	}
																],
																"type": "object"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"description": "A binding to allow the Worker to communicate with resources.",
																"discriminator": {
																	"mapping": {
																		"ai": "#/components/schemas/workers_binding_kind_ai",
																		"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
																		"assets": "#/components/schemas/workers_binding_kind_assets",
																		"browser": "#/components/schemas/workers_binding_kind_browser",
																		"d1": "#/components/schemas/workers_binding_kind_d1",
																		"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
																		"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
																		"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
																		"json": "#/components/schemas/workers_binding_kind_json",
																		"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
																		"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
																		"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
																		"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
																		"queue": "#/components/schemas/workers_binding_kind_queue",
																		"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
																		"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
																		"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
																		"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
																		"service": "#/components/schemas/workers_binding_kind_service",
																		"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
																		"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
																		"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
																	},
																	"propertyName": "type"
																},
																"oneOf": [
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"ai"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"dataset": {
																				"description": "The name of the dataset to bind to.",
																				"example": "some_dataset",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"analytics_engine"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"dataset"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"assets"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"browser"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the D1 database to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"d1"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Namespace to bind to.",
																				"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																				"type": "string"
																			},
																			"outbound": {
																				"description": "Outbound worker.",
																				"properties": {
																					"params": {
																						"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																						"items": {
																							"example": "url",
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"worker": {
																						"description": "Outbound worker.",
																						"properties": {
																							"environment": {
																								"description": "Environment of the outbound worker.",
																								"type": "string"
																							},
																							"service": {
																								"description": "Name of the outbound worker.",
																								"type": "string"
																							}
																						},
																						"type": "object"
																					}
																				},
																				"type": "object"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"dispatch_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"class_name": {
																				"description": "The exported class name of the Durable Object.",
																				"example": "MyDurableObject",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"environment": {
																				"description": "The environment of the script_name to bind to.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"allOf": [
																					{
																						"description": "Namespace identifier tag.",
																						"example": "0f2ac74b498b48028cb68387c421e279",
																						"maxLength": 32,
																						"type": "string"
																					},
																					{
																						"type": "string",
																						"x-stainless-terraform-configurability": "computed_optional"
																					}
																				]
																			},
																			"script_name": {
																				"description": "The script where the Durable Object is defined, if it is external to this Worker.",
																				"example": "my-other-worker",
																				"type": "string",
																				"x-stainless-terraform-configurability": "computed_optional"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"durable_object_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"id": {
																				"description": "Identifier of the Hyperdrive connection to bind to.",
																				"example": "57b7076f58be42419276f058a8968187",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"hyperdrive"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"json": {
																				"description": "JSON data to use.",
																				"example": "{ \"message\": \"Hello, world!\" }",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"json"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"json"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"namespace_id": {
																				"description": "Namespace identifier tag.",
																				"example": "0f2ac74b498b48028cb68387c421e279",
																				"maxLength": 32,
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"kv_namespace"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"namespace_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"certificate_id": {
																				"description": "Identifier of the certificate to bind to.",
																				"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"mtls_certificate"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"certificate_id"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The text value to use.",
																				"example": "Hello, world!",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"plain_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"pipeline": {
																				"description": "Name of the Pipeline to bind to.",
																				"example": "my-pipeline",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"pipelines"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"pipeline"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"queue_name": {
																				"description": "Name of the Queue to bind to.",
																				"example": "my-queue",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"queue"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"queue_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"bucket_name": {
																				"description": "R2 bucket to bind to.",
																				"example": "my-r2-bucket",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"r2_bucket"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"bucket_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"text": {
																				"description": "The secret value to use.",
																				"example": "My secret.",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_text"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"text"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"service"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service",
																			"environment"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Tail Worker to bind to.",
																				"example": "my-worker",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"tail_consumer"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"service"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"index_name": {
																				"description": "Name of the Vectorize index to bind to.",
																				"example": "my-index-name",
																				"type": "string"
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"vectorize"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"index_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"version_metadata"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"secret_name": {
																				"description": "Name of the secret in the store.",
																				"example": "my_secret",
																				"type": "string"
																			},
																			"store_id": {
																				"description": "ID of the store containing the secret.",
																				"example": "8c8b1387108e49be85669169793e7bd2",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secrets_store_secret"
																				],
																				"type": "string"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"store_id",
																			"secret_name"
																		],
																		"type": "object"
																	},
																	{
																		"properties": {
																			"algorithm": {
																				"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
																				"type": "object"
																			},
																			"format": {
																				"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
																				"enum": [
																					"raw",
																					"pkcs8",
																					"spki",
																					"jwk"
																				],
																				"example": "raw",
																				"type": "string"
																			},
																			"key_base64": {
																				"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
																				"type": "string",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"key_jwk": {
																				"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
																				"type": "object",
																				"writeOnly": true,
																				"x-sensitive": true
																			},
																			"name": {
																				"description": "A JavaScript variable name for the binding.",
																				"example": "myBinding",
																				"type": "string"
																			},
																			"type": {
																				"description": "The kind of resource that the binding provides.",
																				"enum": [
																					"secret_key"
																				],
																				"type": "string"
																			},
																			"usages": {
																				"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
																				"example": [
																					"encrypt",
																					"decrypt"
																				],
																				"items": {
																					"enum": [
																						"encrypt",
																						"decrypt",
																						"sign",
																						"verify",
																						"deriveKey",
																						"deriveBits",
																						"wrapKey",
																						"unwrapKey"
																					],
																					"type": "string"
																				},
																				"type": "array"
																			}
																		},
																		"required": [
																			"name",
																			"type",
																			"format",
																			"algorithm",
																			"usages"
																		],
																		"type": "object"
																	}
																],
																"type": "object"
															},
															"type": "array"
														}
													]
												},
												"compatibility_date": {
													"allOf": [
														{
															"description": "Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.",
															"example": "2021-01-01",
															"type": "string"
														},
														{
															"default": "",
															"type": "string"
														}
													]
												},
												"compatibility_flags": {
													"allOf": [
														{
															"description": "Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.",
															"example": [
																"nodejs_compat"
															],
															"items": {
																"description": "Flag that enables or disables a specific feature in the Workers runtime.",
																"example": "nodejs_compat",
																"type": "string"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"type": "string"
															},
															"type": "array"
														}
													]
												},
												"limits": {
													"description": "Limits to apply for this Worker.",
													"properties": {
														"cpu_ms": {
															"description": "The amount of CPU time this Worker can use in milliseconds.",
															"example": 50,
															"type": "integer"
														}
													},
													"type": "object"
												},
												"logpush": {
													"allOf": [
														{
															"description": "Whether Logpush is turned on for the Worker.",
															"example": false,
															"type": "boolean"
														},
														{
															"default": "",
															"type": "boolean"
														}
													]
												},
												"migrations": {
													"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
													"oneOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															],
															"description": "A single set of migrations to apply."
														},
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"steps": {
																			"description": "Migrations to apply in order.",
																			"items": {
																				"properties": {
																					"deleted_classes": {
																						"description": "A list of classes to delete Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_classes": {
																						"description": "A list of classes to create Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_sqlite_classes": {
																						"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"renamed_classes": {
																						"description": "A list of classes with Durable Object namespaces that were renamed.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					},
																					"transferred_classes": {
																						"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"from_script": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															]
														}
													]
												},
												"observability": {
													"description": "Observability settings for the Worker.",
													"properties": {
														"enabled": {
															"description": "Whether observability is enabled for the Worker.",
															"example": true,
															"type": "boolean"
														},
														"head_sampling_rate": {
															"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
															"example": 0.1,
															"nullable": true,
															"type": "number"
														},
														"logs": {
															"description": "Log settings for the Worker.",
															"nullable": true,
															"properties": {
																"enabled": {
																	"description": "Whether logs are enabled for the Worker.",
																	"example": true,
																	"type": "boolean"
																},
																"head_sampling_rate": {
																	"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
																	"example": 0.1,
																	"nullable": true,
																	"type": "number"
																},
																"invocation_logs": {
																	"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"enabled",
																"invocation_logs"
															],
															"type": "object"
														}
													},
													"required": [
														"enabled"
													],
													"type": "object"
												},
												"placement": {
													"allOf": [
														{
															"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"properties": {
																"mode": {
																	"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																	"enum": [
																		"smart"
																	],
																	"type": "string"
																}
															},
															"type": "object"
														},
														{
															"default": {},
															"type": "object"
														}
													]
												},
												"tags": {
													"allOf": [
														{
															"description": "Tags to help you manage your Workers.",
															"items": {
																"description": "Tag to help you manage your Worker.",
																"example": "my-tag",
																"type": "string"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"type": "string"
															},
															"type": "array"
														}
													]
												},
												"tail_consumers": {
													"allOf": [
														{
															"description": "List of Workers that will consume logs from the attached Worker.",
															"items": {
																"description": "A reference to a script that will consume logs from the attached Worker.",
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Optional dispatch namespace the script belongs to.",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker that is to be the consumer.",
																		"example": "my-log-consumer",
																		"type": "string"
																	}
																},
																"required": [
																	"service"
																],
																"type": "object"
															},
															"type": "array"
														},
														{
															"default": [],
															"items": {
																"description": "A reference to a script that will consume logs from the attached Worker.",
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Optional dispatch namespace the script belongs to.",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker that is to be the consumer.",
																		"example": "my-log-consumer",
																		"type": "string"
																	}
																},
																"required": [
																	"service"
																],
																"type": "object"
															},
															"type": "array"
														}
													]
												},
												"usage_model": {
													"allOf": [
														{
															"description": "Usage model for the Worker invocations.",
															"enum": [
																"standard"
															],
															"example": "standard",
															"type": "string"
														},
														{
															"default": "standard",
															"type": "string"
														}
													]
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch settings."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch settings failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Settings",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"POST /accounts/{account_id}/workers/assets/upload": {
		"description": "Upload assets ahead of creating a Worker version.  To learn more about the direct uploads of assets, see https://developers.cloudflare.com/workers/static-assets/direct-upload/.",
		"operationId": "worker-assets-upload",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "query",
				"name": "base64",
				"required": true,
				"schema": {
					"description": "Whether the file contents are base64-encoded. Must be `true`.",
					"enum": [
						true
					],
					"type": "boolean"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"encoding": {
						"*": {
							"contentType": "*/*"
						}
					},
					"schema": {
						"additionalProperties": {
							"description": "Base-64 encoded contents of the file. The content type of the file should be included to ensure a valid \"Content-Type\" header is included in asset responses.",
							"type": "string"
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"201": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"jwt": {
													"description": "A \"completion\" JWT which can be redeemed when creating a Worker version.",
													"type": "string",
													"x-sensitive": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload Assets response."
			},
			"202": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"additionalProperties": false,
											"maxProperties": 0,
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload Assets response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Upload Assets response failure."
			}
		},
		"security": [
			{
				"assets_jwt": []
			}
		],
		"summary": "Upload Assets",
		"tags": [
			"Worker Script"
		]
	},
	"POST /accounts/{account_id}/workers/scripts/{script_name}/assets-upload-session": {
		"description": "Start uploading a collection of assets for use in a Worker version. To learn more about the direct uploads of assets, see https://developers.cloudflare.com/workers/static-assets/direct-upload/.",
		"operationId": "worker-script-update-create-assets-upload-session",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"manifest": {
								"additionalProperties": {
									"properties": {
										"hash": {
											"description": "The hash of the file.",
											"type": "string"
										},
										"size": {
											"description": "The size of the file in bytes.",
											"type": "integer"
										}
									},
									"required": [
										"hash",
										"size"
									],
									"type": "object"
								},
								"description": "A manifest ([path]: {hash, size}) map of files to upload. As an example, `/blog/hello-world.html` would be a valid path key.",
								"type": "object"
							}
						},
						"required": [
							"manifest"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"buckets": {
													"description": "The requests to make to upload assets.",
													"items": {
														"description": "The set of assets to include in each request while uploading.",
														"items": {
															"description": "The file hash to include in this bucket.",
															"type": "string"
														},
														"type": "array"
													},
													"type": "array"
												},
												"jwt": {
													"description": "A JWT to use as authentication for uploading assets.",
													"type": "string",
													"x-sensitive": true
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Assets Upload Session response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"buckets": {
															"description": "The requests to make to upload assets.",
															"items": {
																"description": "The set of assets to include in each request while uploading.",
																"items": {
																	"description": "The file hash to include in this bucket.",
																	"type": "string"
																},
																"type": "array"
															},
															"type": "array"
														},
														"jwt": {
															"description": "A JWT to use as authentication for uploading assets.",
															"type": "string",
															"x-sensitive": true
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create Assets Upload Session response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create Assets Upload Session",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"POST /accounts/{account_id}/workers/scripts/{script_name}/subdomain": {
		"description": "Enable or disable the Worker on the workers.dev subdomain.",
		"operationId": "worker-script-post-subdomain",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"enabled": {
								"description": "Whether the Worker should be available on the workers.dev subdomain.",
								"example": true,
								"type": "boolean"
							},
							"previews_enabled": {
								"description": "Whether the Worker's Preview URLs should be available on the workers.dev subdomain.",
								"example": true,
								"type": "boolean"
							}
						},
						"required": [
							"enabled"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"enabled": {
													"description": "Whether the Worker is available on the workers.dev subdomain.",
													"example": true,
													"type": "boolean"
												},
												"previews_enabled": {
													"description": "Whether the Worker's Preview URLs are available on the workers.dev subdomain.",
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"enabled",
												"previews_enabled"
											],
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Post subdomain response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Post subdomain response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Post Worker subdomain",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}": {
		"description": "Upload a worker module. You can find more about the multipart metadata on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.",
		"operationId": "worker-script-upload-worker-module",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/javascript": {
					"schema": {
						"description": "Raw javascript content comprising a Worker. Must be in service worker syntax.",
						"example": "addEventListener('fetch', (event) => event.respondWith(new Response('OK')))",
						"type": "string"
					}
				},
				"multipart/form-data": {
					"schema": {
						"additionalProperties": {
							"description": "A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present and referenced in the metadata as `main_module` or `body_part` by part name.<br/> Possible Content-Type(s) are: `application/javascript+module`, `text/javascript+module`, `application/javascript`, `text/javascript`, `application/wasm`, `text/plain`, `application/octet-stream`, `application/source-map`.",
							"items": {
								"format": "binary",
								"type": "string"
							},
							"type": "array"
						},
						"example": {
							"metadata": {
								"compatibility_date": {},
								"compatibility_flags": [
									"nodejs_compat"
								],
								"main_module": "worker.js"
							},
							"worker.js": [
								"export default {\n  async fetch(request, env, ctx) {\n    return new Response(\"Hello, world!\");\n  }\n};"
							]
						},
						"properties": {
							"metadata": {
								"description": "JSON encoded metadata about the uploaded parts and Worker configuration.",
								"properties": {
									"assets": {
										"description": "Configuration for assets within a Worker.",
										"properties": {
											"config": {
												"description": "Configuration for assets within a Worker.",
												"properties": {
													"_headers": {
														"description": "The contents of a _headers file (used to attach custom headers on asset responses).",
														"example": "/dashboard/*\nX-Frame-Options: DENY\n\n/static/*\nAccess-Control-Allow-Origin: *",
														"type": "string"
													},
													"_redirects": {
														"description": "The contents of a _redirects file (used to apply redirects or proxy paths ahead of asset serving).",
														"example": "/foo /bar 301\n/news/* /blog/:splat",
														"type": "string"
													},
													"html_handling": {
														"description": "Determines the redirects and rewrites of requests for HTML content.",
														"enum": [
															"auto-trailing-slash",
															"force-trailing-slash",
															"drop-trailing-slash",
															"none"
														],
														"example": "auto-trailing-slash",
														"type": "string"
													},
													"not_found_handling": {
														"description": "Determines the response when a request does not match a static asset, and there is no Worker script.",
														"enum": [
															"none",
															"404-page",
															"single-page-application"
														],
														"example": "404-page",
														"type": "string"
													},
													"run_worker_first": {
														"description": "When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.",
														"example": false,
														"type": "boolean"
													},
													"serve_directly": {
														"deprecated": true,
														"description": "When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.",
														"example": true,
														"type": "boolean"
													}
												},
												"type": "object"
											},
											"jwt": {
												"description": "Token provided upon successful upload of all files from a registered manifest.",
												"type": "string",
												"x-sensitive": true
											}
										},
										"type": "object"
									},
									"bindings": {
										"description": "List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.",
										"example": [
											{
												"name": "MY_ENV_VAR",
												"text": "my_data",
												"type": "plain_text"
											}
										],
										"items": {
											"description": "A binding to allow the Worker to communicate with resources.",
											"discriminator": {
												"mapping": {
													"ai": "#/components/schemas/workers_binding_kind_ai",
													"analytics_engine": "#/components/schemas/workers_binding_kind_analytics_engine",
													"assets": "#/components/schemas/workers_binding_kind_assets",
													"browser": "#/components/schemas/workers_binding_kind_browser",
													"d1": "#/components/schemas/workers_binding_kind_d1",
													"dispatch_namespace": "#/components/schemas/workers_binding_kind_dispatch_namespace",
													"durable_object_namespace": "#/components/schemas/workers_binding_kind_durable_object_namespace",
													"hyperdrive": "#/components/schemas/workers_binding_kind_hyperdrive",
													"json": "#/components/schemas/workers_binding_kind_json",
													"kv_namespace": "#/components/schemas/workers_binding_kind_kv_namespace",
													"mtls_certificate": "#/components/schemas/workers_binding_kind_mtls_certificate",
													"pipelines": "#/components/schemas/workers_binding_kind_pipelines",
													"plain_text": "#/components/schemas/workers_binding_kind_plain_text",
													"queue": "#/components/schemas/workers_binding_kind_queue",
													"r2_bucket": "#/components/schemas/workers_binding_kind_r2_bucket",
													"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
													"secret_text": "#/components/schemas/workers_binding_kind_secret_text",
													"secrets_store_secret": "#/components/schemas/workers_binding_kind_secrets_store_secret",
													"service": "#/components/schemas/workers_binding_kind_service",
													"tail_consumer": "#/components/schemas/workers_binding_kind_tail_consumer",
													"vectorize": "#/components/schemas/workers_binding_kind_vectorize",
													"version_metadata": "#/components/schemas/workers_binding_kind_version_metadata"
												},
												"propertyName": "type"
											},
											"oneOf": [
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"ai"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type"
													],
													"type": "object"
												},
												{
													"properties": {
														"dataset": {
															"description": "The name of the dataset to bind to.",
															"example": "some_dataset",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"analytics_engine"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"dataset"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"assets"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"browser"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type"
													],
													"type": "object"
												},
												{
													"properties": {
														"id": {
															"description": "Identifier of the D1 database to bind to.",
															"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"d1"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"id"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"namespace": {
															"description": "Namespace to bind to.",
															"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
															"type": "string"
														},
														"outbound": {
															"description": "Outbound worker.",
															"properties": {
																"params": {
																	"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters.",
																	"items": {
																		"example": "url",
																		"type": "string"
																	},
																	"type": "array"
																},
																"worker": {
																	"description": "Outbound worker.",
																	"properties": {
																		"environment": {
																			"description": "Environment of the outbound worker.",
																			"type": "string"
																		},
																		"service": {
																			"description": "Name of the outbound worker.",
																			"type": "string"
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"dispatch_namespace"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"namespace"
													],
													"type": "object"
												},
												{
													"properties": {
														"class_name": {
															"description": "The exported class name of the Durable Object.",
															"example": "MyDurableObject",
															"type": "string",
															"x-stainless-terraform-configurability": "computed_optional"
														},
														"environment": {
															"description": "The environment of the script_name to bind to.",
															"example": "production",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"namespace_id": {
															"allOf": [
																{
																	"description": "Namespace identifier tag.",
																	"example": "0f2ac74b498b48028cb68387c421e279",
																	"maxLength": 32,
																	"type": "string"
																},
																{
																	"type": "string",
																	"x-stainless-terraform-configurability": "computed_optional"
																}
															]
														},
														"script_name": {
															"description": "The script where the Durable Object is defined, if it is external to this Worker.",
															"example": "my-other-worker",
															"type": "string",
															"x-stainless-terraform-configurability": "computed_optional"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"durable_object_namespace"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type"
													],
													"type": "object"
												},
												{
													"properties": {
														"id": {
															"description": "Identifier of the Hyperdrive connection to bind to.",
															"example": "57b7076f58be42419276f058a8968187",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"hyperdrive"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"id"
													],
													"type": "object"
												},
												{
													"properties": {
														"json": {
															"description": "JSON data to use.",
															"example": "{ \"message\": \"Hello, world!\" }",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"json"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"json"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"namespace_id": {
															"description": "Namespace identifier tag.",
															"example": "0f2ac74b498b48028cb68387c421e279",
															"maxLength": 32,
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"kv_namespace"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"namespace_id"
													],
													"type": "object"
												},
												{
													"properties": {
														"certificate_id": {
															"description": "Identifier of the certificate to bind to.",
															"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"mtls_certificate"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"certificate_id"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"text": {
															"description": "The text value to use.",
															"example": "Hello, world!",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"plain_text"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"text"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"pipeline": {
															"description": "Name of the Pipeline to bind to.",
															"example": "my-pipeline",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"pipelines"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"pipeline"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"queue_name": {
															"description": "Name of the Queue to bind to.",
															"example": "my-queue",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"queue"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"queue_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"bucket_name": {
															"description": "R2 bucket to bind to.",
															"example": "my-r2-bucket",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"r2_bucket"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"bucket_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"text": {
															"description": "The secret value to use.",
															"example": "My secret.",
															"type": "string",
															"writeOnly": true,
															"x-sensitive": true
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secret_text"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"text"
													],
													"type": "object"
												},
												{
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"service": {
															"description": "Name of Worker to bind to.",
															"example": "my-worker",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"service"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"service",
														"environment"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"service": {
															"description": "Name of Tail Worker to bind to.",
															"example": "my-worker",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"tail_consumer"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"service"
													],
													"type": "object"
												},
												{
													"properties": {
														"index_name": {
															"description": "Name of the Vectorize index to bind to.",
															"example": "my-index-name",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"vectorize"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"index_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"version_metadata"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"secret_name": {
															"description": "Name of the secret in the store.",
															"example": "my_secret",
															"type": "string"
														},
														"store_id": {
															"description": "ID of the store containing the secret.",
															"example": "8c8b1387108e49be85669169793e7bd2",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secrets_store_secret"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"store_id",
														"secret_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"algorithm": {
															"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
															"type": "object"
														},
														"format": {
															"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
															"enum": [
																"raw",
																"pkcs8",
																"spki",
																"jwk"
															],
															"example": "raw",
															"type": "string"
														},
														"key_base64": {
															"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
															"type": "string",
															"writeOnly": true,
															"x-sensitive": true
														},
														"key_jwk": {
															"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
															"type": "object",
															"writeOnly": true,
															"x-sensitive": true
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secret_key"
															],
															"type": "string"
														},
														"usages": {
															"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
															"example": [
																"encrypt",
																"decrypt"
															],
															"items": {
																"enum": [
																	"encrypt",
																	"decrypt",
																	"sign",
																	"verify",
																	"deriveKey",
																	"deriveBits",
																	"wrapKey",
																	"unwrapKey"
																],
																"type": "string"
															},
															"type": "array"
														}
													},
													"required": [
														"name",
														"type",
														"format",
														"algorithm",
														"usages"
													],
													"type": "object"
												}
											],
											"type": "object"
										},
										"type": "array"
									},
									"body_part": {
										"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									},
									"compatibility_date": {
										"description": "Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.",
										"example": "2021-01-01",
										"type": "string"
									},
									"compatibility_flags": {
										"description": "Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.",
										"example": [
											"nodejs_compat"
										],
										"items": {
											"description": "Flag that enables or disables a specific feature in the Workers runtime.",
											"example": "nodejs_compat",
											"type": "string"
										},
										"type": "array"
									},
									"keep_assets": {
										"description": "Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.",
										"example": false,
										"type": "boolean"
									},
									"keep_bindings": {
										"description": "List of binding types to keep from previous_upload.",
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"logpush": {
										"description": "Whether Logpush is turned on for the Worker.",
										"example": false,
										"type": "boolean"
									},
									"main_module": {
										"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									},
									"migrations": {
										"description": "Migrations to apply for Durable Objects associated with this Worker.",
										"oneOf": [
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"deleted_classes": {
																"description": "A list of classes to delete Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_classes": {
																"description": "A list of classes to create Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_sqlite_classes": {
																"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"renamed_classes": {
																"description": "A list of classes with Durable Object namespaces that were renamed.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															},
															"transferred_classes": {
																"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"from_script": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												],
												"description": "A single set of migrations to apply."
											},
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"steps": {
																"description": "Migrations to apply in order.",
																"items": {
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												]
											}
										]
									},
									"observability": {
										"description": "Observability settings for the Worker.",
										"properties": {
											"enabled": {
												"description": "Whether observability is enabled for the Worker.",
												"example": true,
												"type": "boolean"
											},
											"head_sampling_rate": {
												"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
												"example": 0.1,
												"nullable": true,
												"type": "number"
											},
											"logs": {
												"description": "Log settings for the Worker.",
												"nullable": true,
												"properties": {
													"enabled": {
														"description": "Whether logs are enabled for the Worker.",
														"example": true,
														"type": "boolean"
													},
													"head_sampling_rate": {
														"description": "The sampling rate for logs. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
														"example": 0.1,
														"nullable": true,
														"type": "number"
													},
													"invocation_logs": {
														"description": "Whether [invocation logs](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs) are enabled for the Worker.",
														"example": true,
														"type": "boolean"
													}
												},
												"required": [
													"enabled",
													"invocation_logs"
												],
												"type": "object"
											}
										},
										"required": [
											"enabled"
										],
										"type": "object"
									},
									"placement": {
										"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
										"properties": {
											"last_analyzed_at": {
												"description": "The last time the script was analyzed for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
												"example": "2025-01-01T00:00:00Z",
												"format": "date-time",
												"readOnly": true,
												"type": "string"
											},
											"mode": {
												"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
												"enum": [
													"smart"
												],
												"type": "string"
											},
											"status": {
												"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
												"enum": [
													"SUCCESS",
													"UNSUPPORTED_APPLICATION",
													"INSUFFICIENT_INVOCATIONS"
												],
												"readOnly": true,
												"type": "string"
											}
										},
										"type": "object"
									},
									"tags": {
										"description": "List of strings to use as tags for this Worker.",
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"tail_consumers": {
										"description": "List of Workers that will consume logs from the attached Worker.",
										"items": {
											"description": "A reference to a script that will consume logs from the attached Worker.",
											"properties": {
												"environment": {
													"description": "Optional environment if the Worker utilizes one.",
													"example": "production",
													"type": "string"
												},
												"namespace": {
													"description": "Optional dispatch namespace the script belongs to.",
													"example": "my-namespace",
													"type": "string"
												},
												"service": {
													"description": "Name of Worker that is to be the consumer.",
													"example": "my-log-consumer",
													"type": "string"
												}
											},
											"required": [
												"service"
											],
											"type": "object"
										},
										"type": "array"
									},
									"usage_model": {
										"description": "Usage model for the Worker invocations.",
										"enum": [
											"standard"
										],
										"example": "standard",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"required": [
							"metadata"
						],
						"type": "object"
					}
				},
				"text/javascript": {
					"schema": {
						"description": "Raw javascript content comprising a Worker. Must be in service worker syntax.",
						"example": "addEventListener('fetch', (event) => event.respondWith(new Response('OK')))",
						"type": "string"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"created_on": {
																	"description": "When the script was created.",
																	"example": "2017-01-01T00:00:00Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string"
																},
																"etag": {
																	"description": "Hashed script content, can be used in a If-None-Match header when updating.",
																	"example": "ea95132c15732412d22c1476fa83f27a",
																	"readOnly": true,
																	"type": "string"
																},
																"has_assets": {
																	"description": "Whether a Worker contains assets.",
																	"example": false,
																	"type": "boolean"
																},
																"has_modules": {
																	"description": "Whether a Worker contains modules.",
																	"example": false,
																	"type": "boolean"
																},
																"id": {
																	"description": "The id of the script in the Workers system. Usually the script name.",
																	"example": "my-workers-script",
																	"readOnly": true,
																	"type": "string"
																},
																"logpush": {
																	"description": "Whether Logpush is turned on for the Worker.",
																	"example": false,
																	"type": "boolean"
																},
																"modified_on": {
																	"description": "When the script was last modified.",
																	"example": "2017-01-01T00:00:00Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string"
																},
																"placement": {
																	"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																	"properties": {
																		"last_analyzed_at": {
																			"description": "The last time the script was analyzed for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																			"example": "2025-01-01T00:00:00Z",
																			"format": "date-time",
																			"readOnly": true,
																			"type": "string"
																		},
																		"mode": {
																			"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																			"enum": [
																				"smart"
																			],
																			"type": "string"
																		},
																		"status": {
																			"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																			"enum": [
																				"SUCCESS",
																				"UNSUPPORTED_APPLICATION",
																				"INSUFFICIENT_INVOCATIONS"
																			],
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"placement_mode": {
																	"allOf": [
																		{
																			"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																			"enum": [
																				"smart"
																			],
																			"type": "string"
																		},
																		{
																			"deprecated": true,
																			"type": "string"
																		}
																	]
																},
																"placement_status": {
																	"allOf": [
																		{
																			"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
																			"enum": [
																				"SUCCESS",
																				"UNSUPPORTED_APPLICATION",
																				"INSUFFICIENT_INVOCATIONS"
																			],
																			"readOnly": true,
																			"type": "string"
																		},
																		{
																			"deprecated": true,
																			"type": "string"
																		}
																	]
																},
																"tail_consumers": {
																	"description": "List of Workers that will consume logs from the attached Worker.",
																	"items": {
																		"description": "A reference to a script that will consume logs from the attached Worker.",
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Optional dispatch namespace the script belongs to.",
																				"example": "my-namespace",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker that is to be the consumer.",
																				"example": "my-log-consumer",
																				"type": "string"
																			}
																		},
																		"required": [
																			"service"
																		],
																		"type": "object"
																	},
																	"type": "array"
																},
																"usage_model": {
																	"description": "Usage model for the Worker invocations.",
																	"enum": [
																		"standard"
																	],
																	"example": "standard",
																	"type": "string"
																}
															}
														},
														{
															"properties": {
																"startup_time_ms": {
																	"example": 10,
																	"type": "integer"
																}
															},
															"required": [
																"startup_time_ms"
															],
															"type": "object"
														}
													]
												}
											},
											"required": [
												"result"
											],
											"type": "object",
											"x-cfLinkErrors": {
												"10001": "Unsupported or unexpected Content Type",
												"10002": "Unexpected internal server error",
												"10003": "Missing required URL parameter",
												"10004": "Malformed URL parameter",
												"10006": "Unparseable script body",
												"10007": "Resource not found (similar to HTTP 404)",
												"10014": "Internal error while attempting authorization checks",
												"10015": "The current account is not authorized to use workers",
												"10018": "Attempted to update a script where the e-tag does not match",
												"10021": "Script content failed validation checks, but was otherwise parseable",
												"10023": "Unauthorized access attempt",
												"10027": "Script body was too large",
												"10075": "Requires a Workers Paid plan"
											}
										}
									]
								},
								{
									"example": {
										"errors": [],
										"messages": [],
										"result": {
											"created_on": "2022-05-05T05:15:11.602148Z",
											"etag": "777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1",
											"handlers": [
												"fetch"
											],
											"id": "this-is_my_script-01",
											"logpush": false,
											"modified_on": "2022-05-20T19:02:56.446492Z",
											"placement_mode": "smart",
											"startup_time_ms": 10,
											"tail_consumers": [
												{
													"environment": "production",
													"service": "my-log-consumer"
												}
											],
											"usage_model": "standard"
										},
										"success": true
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload Worker Module response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Upload Worker Module response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Upload Worker Module",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}/content": {
		"description": "Put script content without touching config or metadata.",
		"operationId": "worker-script-put-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-BODY-PART",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-MAIN-MODULE-PART",
				"schema": {
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"schema": {
						"additionalProperties": {
							"description": "A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as `main_module` (esm)/`body_part` (service worker) or as a header `CF-WORKER-MAIN-MODULE-PART` (esm) /`CF-WORKER-BODY-PART` (service worker) by part name.<br/> Possible Content-Type(s) are: `application/javascript+module`, `text/javascript+module`, `application/javascript`, `text/javascript`, `application/wasm`, `text/plain`, `application/octet-stream`, `application/source-map`.",
							"items": {
								"format": "binary",
								"type": "string"
							},
							"type": "array"
						},
						"properties": {
							"metadata": {
								"description": "JSON encoded metadata about the uploaded parts and Worker configuration.",
								"properties": {
									"body_part": {
										"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									},
									"main_module": {
										"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"required": [
							"metadata"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"documentation_url": {
																"type": "string"
															},
															"message": {
																"type": "string"
															},
															"source": {
																"properties": {
																	"pointer": {
																		"type": "string"
																	}
																},
																"type": "object"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful.",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"etag": {
													"description": "Hashed script content, can be used in a If-None-Match header when updating.",
													"example": "ea95132c15732412d22c1476fa83f27a",
													"readOnly": true,
													"type": "string"
												},
												"has_assets": {
													"description": "Whether a Worker contains assets.",
													"example": false,
													"type": "boolean"
												},
												"has_modules": {
													"description": "Whether a Worker contains modules.",
													"example": false,
													"type": "boolean"
												},
												"id": {
													"description": "The id of the script in the Workers system. Usually the script name.",
													"example": "my-workers-script",
													"readOnly": true,
													"type": "string"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"placement": {
													"description": "Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
													"properties": {
														"last_analyzed_at": {
															"description": "The last time the script was analyzed for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"example": "2025-01-01T00:00:00Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"mode": {
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"smart"
															],
															"type": "string"
														},
														"status": {
															"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"SUCCESS",
																"UNSUPPORTED_APPLICATION",
																"INSUFFICIENT_INVOCATIONS"
															],
															"readOnly": true,
															"type": "string"
														}
													},
													"type": "object"
												},
												"placement_mode": {
													"allOf": [
														{
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"smart"
															],
															"type": "string"
														},
														{
															"deprecated": true,
															"type": "string"
														}
													]
												},
												"placement_status": {
													"allOf": [
														{
															"description": "Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).",
															"enum": [
																"SUCCESS",
																"UNSUPPORTED_APPLICATION",
																"INSUFFICIENT_INVOCATIONS"
															],
															"readOnly": true,
															"type": "string"
														},
														{
															"deprecated": true,
															"type": "string"
														}
													]
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Usage model for the Worker invocations.",
													"enum": [
														"standard"
													],
													"example": "standard",
													"type": "string"
												}
											}
										}
									},
									"required": [
										"result"
									],
									"type": "object",
									"x-cfLinkErrors": {
										"10001": "Unsupported or unexpected Content Type",
										"10002": "Unexpected internal server error",
										"10003": "Missing required URL parameter",
										"10004": "Malformed URL parameter",
										"10006": "Unparseable script body",
										"10007": "Resource not found (similar to HTTP 404)",
										"10014": "Internal error while attempting authorization checks",
										"10015": "The current account is not authorized to use workers",
										"10018": "Attempted to update a script where the e-tag does not match",
										"10021": "Script content failed validation checks, but was otherwise parseable",
										"10023": "Unauthorized access attempt",
										"10027": "Script body was too large",
										"10075": "Requires a Workers Paid plan"
									}
								}
							]
						}
					}
				},
				"description": "Put script content."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Put script content failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put script content",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}/secrets": {
		"description": "Add a secret to a script.",
		"operationId": "worker-put-script-secret",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"description": "A secret value accessible through a binding.",
						"discriminator": {
							"mapping": {
								"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
								"secret_text": "#/components/schemas/workers_binding_kind_secret_text"
							},
							"propertyName": "type"
						},
						"oneOf": [
							{
								"properties": {
									"name": {
										"description": "A JavaScript variable name for the binding.",
										"example": "myBinding",
										"type": "string"
									},
									"text": {
										"description": "The secret value to use.",
										"example": "My secret.",
										"type": "string",
										"writeOnly": true,
										"x-sensitive": true
									},
									"type": {
										"description": "The kind of resource that the binding provides.",
										"enum": [
											"secret_text"
										],
										"type": "string"
									}
								},
								"required": [
									"name",
									"type",
									"text"
								],
								"type": "object"
							},
							{
								"properties": {
									"algorithm": {
										"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
										"type": "object"
									},
									"format": {
										"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
										"enum": [
											"raw",
											"pkcs8",
											"spki",
											"jwk"
										],
										"example": "raw",
										"type": "string"
									},
									"key_base64": {
										"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
										"type": "string",
										"writeOnly": true,
										"x-sensitive": true
									},
									"key_jwk": {
										"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
										"type": "object",
										"writeOnly": true,
										"x-sensitive": true
									},
									"name": {
										"description": "A JavaScript variable name for the binding.",
										"example": "myBinding",
										"type": "string"
									},
									"type": {
										"description": "The kind of resource that the binding provides.",
										"enum": [
											"secret_key"
										],
										"type": "string"
									},
									"usages": {
										"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
										"example": [
											"encrypt",
											"decrypt"
										],
										"items": {
											"enum": [
												"encrypt",
												"decrypt",
												"sign",
												"verify",
												"deriveKey",
												"deriveBits",
												"wrapKey",
												"unwrapKey"
											],
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"name",
									"type",
									"format",
									"algorithm",
									"usages"
								],
								"type": "object"
							}
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "A secret value accessible through a binding.",
											"discriminator": {
												"mapping": {
													"secret_key": "#/components/schemas/workers_binding_kind_secret_key",
													"secret_text": "#/components/schemas/workers_binding_kind_secret_text"
												},
												"propertyName": "type"
											},
											"oneOf": [
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"text": {
															"description": "The secret value to use.",
															"example": "My secret.",
															"type": "string",
															"writeOnly": true,
															"x-sensitive": true
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secret_text"
															],
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"text"
													],
													"type": "object"
												},
												{
													"properties": {
														"algorithm": {
															"description": "Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).",
															"type": "object"
														},
														"format": {
															"description": "Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).",
															"enum": [
																"raw",
																"pkcs8",
																"spki",
																"jwk"
															],
															"example": "raw",
															"type": "string"
														},
														"key_base64": {
															"description": "Base64-encoded key data. Required if `format` is \"raw\", \"pkcs8\", or \"spki\".",
															"type": "string",
															"writeOnly": true,
															"x-sensitive": true
														},
														"key_jwk": {
															"description": "Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is \"jwk\".",
															"type": "object",
															"writeOnly": true,
															"x-sensitive": true
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"type": "string"
														},
														"type": {
															"description": "The kind of resource that the binding provides.",
															"enum": [
																"secret_key"
															],
															"type": "string"
														},
														"usages": {
															"description": "Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).",
															"example": [
																"encrypt",
																"decrypt"
															],
															"items": {
																"enum": [
																	"encrypt",
																	"decrypt",
																	"sign",
																	"verify",
																	"deriveKey",
																	"deriveBits",
																	"wrapKey",
																	"unwrapKey"
																],
																"type": "string"
															},
															"type": "array"
														}
													},
													"required": [
														"name",
														"type",
														"format",
														"algorithm",
														"usages"
													],
													"type": "object"
												}
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Put script secret binding success."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Put script secret binding failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Add script secret",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}/usage-model": {
		"description": "Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.",
		"operationId": "worker-script-update-usage-model",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string",
					"x-auditable": true
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"usage_model": {
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful.",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"usage_model": {
													"type": "string"
												}
											},
											"type": "object"
										}
									},
									"required": [
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update Usage Model response."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"documentation_url": {
														"type": "string"
													},
													"message": {
														"type": "string"
													},
													"source": {
														"properties": {
															"pointer": {
																"type": "string"
															}
														},
														"type": "object"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful.",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update Usage Model response failure."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update Usage Model",
		"tags": [
			"Worker Script"
		],
		"x-api-token-group": [
			"Workers Scripts Write"
		]
	}
}